"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fast-png";
exports.ids = ["vendor-chunks/fast-png"];
exports.modules = {

/***/ "(ssr)/./node_modules/fast-png/lib-esm/PngDecoder.js":
/*!*****************************************************!*\
  !*** ./node_modules/fast-png/lib-esm/PngDecoder.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PngDecoder)\n/* harmony export */ });\n/* harmony import */ var iobuffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! iobuffer */ \"(ssr)/./node_modules/iobuffer/lib-esm/IOBuffer.js\");\n/* harmony import */ var pako__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pako */ \"(ssr)/./node_modules/pako/dist/pako.esm.mjs\");\n/* harmony import */ var _helpers_crc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/crc */ \"(ssr)/./node_modules/fast-png/lib-esm/helpers/crc.js\");\n/* harmony import */ var _helpers_decodeInterlaceAdam7__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers/decodeInterlaceAdam7 */ \"(ssr)/./node_modules/fast-png/lib-esm/helpers/decodeInterlaceAdam7.js\");\n/* harmony import */ var _helpers_decodeInterlaceNull__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers/decodeInterlaceNull */ \"(ssr)/./node_modules/fast-png/lib-esm/helpers/decodeInterlaceNull.js\");\n/* harmony import */ var _helpers_signature__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers/signature */ \"(ssr)/./node_modules/fast-png/lib-esm/helpers/signature.js\");\n/* harmony import */ var _helpers_text__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./helpers/text */ \"(ssr)/./node_modules/fast-png/lib-esm/helpers/text.js\");\n/* harmony import */ var _internalTypes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./internalTypes */ \"(ssr)/./node_modules/fast-png/lib-esm/internalTypes.js\");\n\n\n\n\n\n\n\n\nclass PngDecoder extends iobuffer__WEBPACK_IMPORTED_MODULE_0__.IOBuffer {\n    constructor(data, options = {}){\n        super(data);\n        const { checkCrc = false } = options;\n        this._checkCrc = checkCrc;\n        this._inflator = new pako__WEBPACK_IMPORTED_MODULE_1__.Inflate();\n        this._png = {\n            width: -1,\n            height: -1,\n            channels: -1,\n            data: new Uint8Array(0),\n            depth: 1,\n            text: {}\n        };\n        this._apng = {\n            width: -1,\n            height: -1,\n            channels: -1,\n            depth: 1,\n            numberOfFrames: 1,\n            numberOfPlays: 0,\n            text: {},\n            frames: []\n        };\n        this._end = false;\n        this._hasPalette = false;\n        this._palette = [];\n        this._hasTransparency = false;\n        this._transparency = new Uint16Array(0);\n        this._compressionMethod = _internalTypes__WEBPACK_IMPORTED_MODULE_7__.CompressionMethod.UNKNOWN;\n        this._filterMethod = _internalTypes__WEBPACK_IMPORTED_MODULE_7__.FilterMethod.UNKNOWN;\n        this._interlaceMethod = _internalTypes__WEBPACK_IMPORTED_MODULE_7__.InterlaceMethod.UNKNOWN;\n        this._colorType = _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.UNKNOWN;\n        this._isAnimated = false;\n        this._numberOfFrames = 1;\n        this._numberOfPlays = 0;\n        this._frames = [];\n        this._writingDataChunks = false;\n        // PNG is always big endian\n        // https://www.w3.org/TR/PNG/#7Integers-and-byte-order\n        this.setBigEndian();\n    }\n    decode() {\n        (0,_helpers_signature__WEBPACK_IMPORTED_MODULE_5__.checkSignature)(this);\n        while(!this._end){\n            const length = this.readUint32();\n            const type = this.readChars(4);\n            this.decodeChunk(length, type);\n        }\n        this.decodeImage();\n        return this._png;\n    }\n    decodeApng() {\n        (0,_helpers_signature__WEBPACK_IMPORTED_MODULE_5__.checkSignature)(this);\n        while(!this._end){\n            const length = this.readUint32();\n            const type = this.readChars(4);\n            this.decodeApngChunk(length, type);\n        }\n        this.decodeApngImage();\n        return this._apng;\n    }\n    // https://www.w3.org/TR/PNG/#5Chunk-layout\n    decodeChunk(length, type) {\n        const offset = this.offset;\n        switch(type){\n            // 11.2 Critical chunks\n            case \"IHDR\":\n                this.decodeIHDR();\n                break;\n            case \"PLTE\":\n                this.decodePLTE(length);\n                break;\n            case \"IDAT\":\n                this.decodeIDAT(length);\n                break;\n            case \"IEND\":\n                this._end = true;\n                break;\n            // 11.3 Ancillary chunks\n            case \"tRNS\":\n                this.decodetRNS(length);\n                break;\n            case \"iCCP\":\n                this.decodeiCCP(length);\n                break;\n            case _helpers_text__WEBPACK_IMPORTED_MODULE_6__.textChunkName:\n                (0,_helpers_text__WEBPACK_IMPORTED_MODULE_6__.decodetEXt)(this._png.text, this, length);\n                break;\n            case \"pHYs\":\n                this.decodepHYs();\n                break;\n            default:\n                this.skip(length);\n                break;\n        }\n        if (this.offset - offset !== length) {\n            throw new Error(`Length mismatch while decoding chunk ${type}`);\n        }\n        if (this._checkCrc) {\n            (0,_helpers_crc__WEBPACK_IMPORTED_MODULE_2__.checkCrc)(this, length + 4, type);\n        } else {\n            this.skip(4);\n        }\n    }\n    decodeApngChunk(length, type) {\n        const offset = this.offset;\n        if (type !== \"fdAT\" && type !== \"IDAT\" && this._writingDataChunks) {\n            this.pushDataToFrame();\n        }\n        switch(type){\n            case \"acTL\":\n                this.decodeACTL();\n                break;\n            case \"fcTL\":\n                this.decodeFCTL();\n                break;\n            case \"fdAT\":\n                this.decodeFDAT(length);\n                break;\n            default:\n                this.decodeChunk(length, type);\n                this.offset = offset + length;\n                break;\n        }\n        if (this.offset - offset !== length) {\n            throw new Error(`Length mismatch while decoding chunk ${type}`);\n        }\n        if (this._checkCrc) {\n            (0,_helpers_crc__WEBPACK_IMPORTED_MODULE_2__.checkCrc)(this, length + 4, type);\n        } else {\n            this.skip(4);\n        }\n    }\n    // https://www.w3.org/TR/PNG/#11IHDR\n    decodeIHDR() {\n        const image = this._png;\n        image.width = this.readUint32();\n        image.height = this.readUint32();\n        image.depth = checkBitDepth(this.readUint8());\n        const colorType = this.readUint8();\n        this._colorType = colorType;\n        let channels;\n        switch(colorType){\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.GREYSCALE:\n                channels = 1;\n                break;\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.TRUECOLOUR:\n                channels = 3;\n                break;\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.INDEXED_COLOUR:\n                channels = 1;\n                break;\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.GREYSCALE_ALPHA:\n                channels = 2;\n                break;\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.TRUECOLOUR_ALPHA:\n                channels = 4;\n                break;\n            // Kept for exhaustiveness.\n            // eslint-disable-next-line unicorn/no-useless-switch-case\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.UNKNOWN:\n            default:\n                throw new Error(`Unknown color type: ${colorType}`);\n        }\n        this._png.channels = channels;\n        this._compressionMethod = this.readUint8();\n        if (this._compressionMethod !== _internalTypes__WEBPACK_IMPORTED_MODULE_7__.CompressionMethod.DEFLATE) {\n            throw new Error(`Unsupported compression method: ${this._compressionMethod}`);\n        }\n        this._filterMethod = this.readUint8();\n        this._interlaceMethod = this.readUint8();\n    }\n    decodeACTL() {\n        this._numberOfFrames = this.readUint32();\n        this._numberOfPlays = this.readUint32();\n        this._isAnimated = true;\n    }\n    decodeFCTL() {\n        const image = {\n            sequenceNumber: this.readUint32(),\n            width: this.readUint32(),\n            height: this.readUint32(),\n            xOffset: this.readUint32(),\n            yOffset: this.readUint32(),\n            delayNumber: this.readUint16(),\n            delayDenominator: this.readUint16(),\n            disposeOp: this.readUint8(),\n            blendOp: this.readUint8(),\n            data: new Uint8Array(0)\n        };\n        this._frames.push(image);\n    }\n    // https://www.w3.org/TR/PNG/#11PLTE\n    decodePLTE(length) {\n        if (length % 3 !== 0) {\n            throw new RangeError(`PLTE field length must be a multiple of 3. Got ${length}`);\n        }\n        const l = length / 3;\n        this._hasPalette = true;\n        const palette = [];\n        this._palette = palette;\n        for(let i = 0; i < l; i++){\n            palette.push([\n                this.readUint8(),\n                this.readUint8(),\n                this.readUint8()\n            ]);\n        }\n    }\n    // https://www.w3.org/TR/PNG/#11IDAT\n    decodeIDAT(length) {\n        this._writingDataChunks = true;\n        const dataLength = length;\n        const dataOffset = this.offset + this.byteOffset;\n        this._inflator.push(new Uint8Array(this.buffer, dataOffset, dataLength));\n        if (this._inflator.err) {\n            throw new Error(`Error while decompressing the data: ${this._inflator.err}`);\n        }\n        this.skip(length);\n    }\n    decodeFDAT(length) {\n        this._writingDataChunks = true;\n        let dataLength = length;\n        let dataOffset = this.offset + this.byteOffset;\n        dataOffset += 4;\n        dataLength -= 4;\n        this._inflator.push(new Uint8Array(this.buffer, dataOffset, dataLength));\n        if (this._inflator.err) {\n            throw new Error(`Error while decompressing the data: ${this._inflator.err}`);\n        }\n        this.skip(length);\n    }\n    // https://www.w3.org/TR/PNG/#11tRNS\n    decodetRNS(length) {\n        switch(this._colorType){\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.GREYSCALE:\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.TRUECOLOUR:\n                {\n                    if (length % 2 !== 0) {\n                        throw new RangeError(`tRNS chunk length must be a multiple of 2. Got ${length}`);\n                    }\n                    if (length / 2 > this._png.width * this._png.height) {\n                        throw new Error(`tRNS chunk contains more alpha values than there are pixels (${length / 2} vs ${this._png.width * this._png.height})`);\n                    }\n                    this._hasTransparency = true;\n                    this._transparency = new Uint16Array(length / 2);\n                    for(let i = 0; i < length / 2; i++){\n                        this._transparency[i] = this.readUint16();\n                    }\n                    break;\n                }\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.INDEXED_COLOUR:\n                {\n                    if (length > this._palette.length) {\n                        throw new Error(`tRNS chunk contains more alpha values than there are palette colors (${length} vs ${this._palette.length})`);\n                    }\n                    let i = 0;\n                    for(; i < length; i++){\n                        const alpha = this.readByte();\n                        this._palette[i].push(alpha);\n                    }\n                    for(; i < this._palette.length; i++){\n                        this._palette[i].push(255);\n                    }\n                    break;\n                }\n            // Kept for exhaustiveness.\n            /* eslint-disable unicorn/no-useless-switch-case */ case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.UNKNOWN:\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.GREYSCALE_ALPHA:\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.TRUECOLOUR_ALPHA:\n            default:\n                {\n                    throw new Error(`tRNS chunk is not supported for color type ${this._colorType}`);\n                }\n        }\n    }\n    // https://www.w3.org/TR/PNG/#11iCCP\n    decodeiCCP(length) {\n        const name = (0,_helpers_text__WEBPACK_IMPORTED_MODULE_6__.readKeyword)(this);\n        const compressionMethod = this.readUint8();\n        if (compressionMethod !== _internalTypes__WEBPACK_IMPORTED_MODULE_7__.CompressionMethod.DEFLATE) {\n            throw new Error(`Unsupported iCCP compression method: ${compressionMethod}`);\n        }\n        const compressedProfile = this.readBytes(length - name.length - 2);\n        this._png.iccEmbeddedProfile = {\n            name,\n            profile: (0,pako__WEBPACK_IMPORTED_MODULE_1__.inflate)(compressedProfile)\n        };\n    }\n    // https://www.w3.org/TR/PNG/#11pHYs\n    decodepHYs() {\n        const ppuX = this.readUint32();\n        const ppuY = this.readUint32();\n        const unitSpecifier = this.readByte();\n        this._png.resolution = {\n            x: ppuX,\n            y: ppuY,\n            unit: unitSpecifier\n        };\n    }\n    decodeApngImage() {\n        this._apng.width = this._png.width;\n        this._apng.height = this._png.height;\n        this._apng.channels = this._png.channels;\n        this._apng.depth = this._png.depth;\n        this._apng.numberOfFrames = this._numberOfFrames;\n        this._apng.numberOfPlays = this._numberOfPlays;\n        this._apng.text = this._png.text;\n        this._apng.resolution = this._png.resolution;\n        for(let i = 0; i < this._numberOfFrames; i++){\n            const newFrame = {\n                sequenceNumber: this._frames[i].sequenceNumber,\n                delayNumber: this._frames[i].delayNumber,\n                delayDenominator: this._frames[i].delayDenominator,\n                data: this._apng.depth === 8 ? new Uint8Array(this._apng.width * this._apng.height * this._apng.channels) : new Uint16Array(this._apng.width * this._apng.height * this._apng.channels)\n            };\n            const frame = this._frames.at(i);\n            if (frame) {\n                frame.data = (0,_helpers_decodeInterlaceNull__WEBPACK_IMPORTED_MODULE_4__.decodeInterlaceNull)({\n                    data: frame.data,\n                    width: frame.width,\n                    height: frame.height,\n                    channels: this._apng.channels,\n                    depth: this._apng.depth\n                });\n                if (this._hasPalette) {\n                    this._apng.palette = this._palette;\n                }\n                if (this._hasTransparency) {\n                    this._apng.transparency = this._transparency;\n                }\n                if (i === 0 || frame.xOffset === 0 && frame.yOffset === 0 && frame.width === this._png.width && frame.height === this._png.height) {\n                    newFrame.data = frame.data;\n                } else {\n                    const prevFrame = this._apng.frames.at(i - 1);\n                    this.disposeFrame(frame, prevFrame, newFrame);\n                    this.addFrameDataToCanvas(newFrame, frame);\n                }\n                this._apng.frames.push(newFrame);\n            }\n        }\n        return this._apng;\n    }\n    disposeFrame(frame, prevFrame, imageFrame) {\n        switch(frame.disposeOp){\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.DisposeOpType.NONE:\n                break;\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.DisposeOpType.BACKGROUND:\n                for(let row = 0; row < this._png.height; row++){\n                    for(let col = 0; col < this._png.width; col++){\n                        const index = (row * frame.width + col) * this._png.channels;\n                        for(let channel = 0; channel < this._png.channels; channel++){\n                            imageFrame.data[index + channel] = 0;\n                        }\n                    }\n                }\n                break;\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.DisposeOpType.PREVIOUS:\n                imageFrame.data.set(prevFrame.data);\n                break;\n            default:\n                throw new Error(\"Unknown disposeOp\");\n        }\n    }\n    addFrameDataToCanvas(imageFrame, frame) {\n        const maxValue = 1 << this._png.depth;\n        const calculatePixelIndices = (row, col)=>{\n            const index = ((row + frame.yOffset) * this._png.width + frame.xOffset + col) * this._png.channels;\n            const frameIndex = (row * frame.width + col) * this._png.channels;\n            return {\n                index,\n                frameIndex\n            };\n        };\n        switch(frame.blendOp){\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.BlendOpType.SOURCE:\n                for(let row = 0; row < frame.height; row++){\n                    for(let col = 0; col < frame.width; col++){\n                        const { index, frameIndex } = calculatePixelIndices(row, col);\n                        for(let channel = 0; channel < this._png.channels; channel++){\n                            imageFrame.data[index + channel] = frame.data[frameIndex + channel];\n                        }\n                    }\n                }\n                break;\n            // https://www.w3.org/TR/png-3/#13Alpha-channel-processing\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.BlendOpType.OVER:\n                for(let row = 0; row < frame.height; row++){\n                    for(let col = 0; col < frame.width; col++){\n                        const { index, frameIndex } = calculatePixelIndices(row, col);\n                        for(let channel = 0; channel < this._png.channels; channel++){\n                            const sourceAlpha = frame.data[frameIndex + this._png.channels - 1] / maxValue;\n                            const foregroundValue = channel % (this._png.channels - 1) === 0 ? 1 : frame.data[frameIndex + channel];\n                            const value = Math.floor(sourceAlpha * foregroundValue + (1 - sourceAlpha) * imageFrame.data[index + channel]);\n                            imageFrame.data[index + channel] += value;\n                        }\n                    }\n                }\n                break;\n            default:\n                throw new Error(\"Unknown blendOp\");\n        }\n    }\n    decodeImage() {\n        if (this._inflator.err) {\n            throw new Error(`Error while decompressing the data: ${this._inflator.err}`);\n        }\n        const data = this._isAnimated ? (this._frames?.at(0)).data : this._inflator.result;\n        if (this._filterMethod !== _internalTypes__WEBPACK_IMPORTED_MODULE_7__.FilterMethod.ADAPTIVE) {\n            throw new Error(`Filter method ${this._filterMethod} not supported`);\n        }\n        if (this._interlaceMethod === _internalTypes__WEBPACK_IMPORTED_MODULE_7__.InterlaceMethod.NO_INTERLACE) {\n            this._png.data = (0,_helpers_decodeInterlaceNull__WEBPACK_IMPORTED_MODULE_4__.decodeInterlaceNull)({\n                data: data,\n                width: this._png.width,\n                height: this._png.height,\n                channels: this._png.channels,\n                depth: this._png.depth\n            });\n        } else if (this._interlaceMethod === _internalTypes__WEBPACK_IMPORTED_MODULE_7__.InterlaceMethod.ADAM7) {\n            this._png.data = (0,_helpers_decodeInterlaceAdam7__WEBPACK_IMPORTED_MODULE_3__.decodeInterlaceAdam7)({\n                data: data,\n                width: this._png.width,\n                height: this._png.height,\n                channels: this._png.channels,\n                depth: this._png.depth\n            });\n        } else {\n            throw new Error(`Interlace method ${this._interlaceMethod} not supported`);\n        }\n        if (this._hasPalette) {\n            this._png.palette = this._palette;\n        }\n        if (this._hasTransparency) {\n            this._png.transparency = this._transparency;\n        }\n    }\n    pushDataToFrame() {\n        const result = this._inflator.result;\n        const lastFrame = this._frames.at(-1);\n        if (lastFrame) {\n            lastFrame.data = result;\n        } else {\n            this._frames.push({\n                sequenceNumber: 0,\n                width: this._png.width,\n                height: this._png.height,\n                xOffset: 0,\n                yOffset: 0,\n                delayNumber: 0,\n                delayDenominator: 0,\n                disposeOp: _internalTypes__WEBPACK_IMPORTED_MODULE_7__.DisposeOpType.NONE,\n                blendOp: _internalTypes__WEBPACK_IMPORTED_MODULE_7__.BlendOpType.SOURCE,\n                data: result\n            });\n        }\n        this._inflator = new pako__WEBPACK_IMPORTED_MODULE_1__.Inflate();\n        this._writingDataChunks = false;\n    }\n}\nfunction checkBitDepth(value) {\n    if (value !== 1 && value !== 2 && value !== 4 && value !== 8 && value !== 16) {\n        throw new Error(`invalid bit depth: ${value}`);\n    }\n    return value;\n} //# sourceMappingURL=PngDecoder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fast-png/lib-esm/PngDecoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/fast-png/lib-esm/PngEncoder.js":
/*!*****************************************************!*\
  !*** ./node_modules/fast-png/lib-esm/PngEncoder.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PngEncoder)\n/* harmony export */ });\n/* harmony import */ var iobuffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! iobuffer */ \"(ssr)/./node_modules/iobuffer/lib-esm/IOBuffer.js\");\n/* harmony import */ var pako__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pako */ \"(ssr)/./node_modules/pako/dist/pako.esm.mjs\");\n/* harmony import */ var _helpers_crc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/crc */ \"(ssr)/./node_modules/fast-png/lib-esm/helpers/crc.js\");\n/* harmony import */ var _helpers_signature__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers/signature */ \"(ssr)/./node_modules/fast-png/lib-esm/helpers/signature.js\");\n/* harmony import */ var _helpers_text__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers/text */ \"(ssr)/./node_modules/fast-png/lib-esm/helpers/text.js\");\n/* harmony import */ var _internalTypes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internalTypes */ \"(ssr)/./node_modules/fast-png/lib-esm/internalTypes.js\");\n\n\n\n\n\n\nconst defaultZlibOptions = {\n    level: 3\n};\nclass PngEncoder extends iobuffer__WEBPACK_IMPORTED_MODULE_0__.IOBuffer {\n    constructor(data, options = {}){\n        super();\n        this._colorType = _internalTypes__WEBPACK_IMPORTED_MODULE_5__.ColorType.UNKNOWN;\n        this._zlibOptions = {\n            ...defaultZlibOptions,\n            ...options.zlib\n        };\n        this._png = this._checkData(data);\n        this._interlaceMethod = (options.interlace === \"Adam7\" ? _internalTypes__WEBPACK_IMPORTED_MODULE_5__.InterlaceMethod.ADAM7 : _internalTypes__WEBPACK_IMPORTED_MODULE_5__.InterlaceMethod.NO_INTERLACE) ?? _internalTypes__WEBPACK_IMPORTED_MODULE_5__.InterlaceMethod.NO_INTERLACE;\n        this.setBigEndian();\n    }\n    encode() {\n        (0,_helpers_signature__WEBPACK_IMPORTED_MODULE_3__.writeSignature)(this);\n        this.encodeIHDR();\n        if (this._png.palette) {\n            this.encodePLTE();\n            if (this._png.palette[0].length === 4) {\n                this.encodeTRNS();\n            }\n        }\n        this.encodeData();\n        if (this._png.text) {\n            for (const [keyword, text] of Object.entries(this._png.text)){\n                (0,_helpers_text__WEBPACK_IMPORTED_MODULE_4__.encodetEXt)(this, keyword, text);\n            }\n        }\n        this.encodeIEND();\n        return this.toArray();\n    }\n    // https://www.w3.org/TR/PNG/#11IHDR\n    encodeIHDR() {\n        this.writeUint32(13);\n        this.writeChars(\"IHDR\");\n        this.writeUint32(this._png.width);\n        this.writeUint32(this._png.height);\n        this.writeByte(this._png.depth);\n        this.writeByte(this._colorType);\n        this.writeByte(_internalTypes__WEBPACK_IMPORTED_MODULE_5__.CompressionMethod.DEFLATE);\n        this.writeByte(_internalTypes__WEBPACK_IMPORTED_MODULE_5__.FilterMethod.ADAPTIVE);\n        this.writeByte(this._interlaceMethod);\n        (0,_helpers_crc__WEBPACK_IMPORTED_MODULE_2__.writeCrc)(this, 17);\n    }\n    // https://www.w3.org/TR/PNG/#11IEND\n    encodeIEND() {\n        this.writeUint32(0);\n        this.writeChars(\"IEND\");\n        (0,_helpers_crc__WEBPACK_IMPORTED_MODULE_2__.writeCrc)(this, 4);\n    }\n    encodePLTE() {\n        const paletteLength = this._png.palette?.length * 3;\n        this.writeUint32(paletteLength);\n        this.writeChars(\"PLTE\");\n        for (const color of this._png.palette){\n            this.writeByte(color[0]);\n            this.writeByte(color[1]);\n            this.writeByte(color[2]);\n        }\n        (0,_helpers_crc__WEBPACK_IMPORTED_MODULE_2__.writeCrc)(this, 4 + paletteLength);\n    }\n    encodeTRNS() {\n        const alpha = this._png.palette.filter((color)=>{\n            return color.at(-1) !== 255;\n        });\n        this.writeUint32(alpha.length);\n        this.writeChars(\"tRNS\");\n        for (const el of alpha){\n            this.writeByte(el.at(-1));\n        }\n        (0,_helpers_crc__WEBPACK_IMPORTED_MODULE_2__.writeCrc)(this, 4 + alpha.length);\n    }\n    // https://www.w3.org/TR/PNG/#11IDAT\n    encodeIDAT(data) {\n        this.writeUint32(data.length);\n        this.writeChars(\"IDAT\");\n        this.writeBytes(data);\n        (0,_helpers_crc__WEBPACK_IMPORTED_MODULE_2__.writeCrc)(this, data.length + 4);\n    }\n    encodeData() {\n        const { width, height, channels, depth, data } = this._png;\n        const slotsPerLine = depth <= 8 ? Math.ceil(width * depth / 8) * channels : Math.ceil(width * depth / 8 * channels / 2);\n        const newData = new iobuffer__WEBPACK_IMPORTED_MODULE_0__.IOBuffer().setBigEndian();\n        let offset = 0;\n        if (this._interlaceMethod === _internalTypes__WEBPACK_IMPORTED_MODULE_5__.InterlaceMethod.NO_INTERLACE) {\n            for(let i = 0; i < height; i++){\n                newData.writeByte(0); // no filter\n                if (depth === 16) {\n                    offset = writeDataUint16(data, newData, slotsPerLine, offset);\n                } else {\n                    offset = writeDataBytes(data, newData, slotsPerLine, offset);\n                }\n            }\n        } else if (this._interlaceMethod === _internalTypes__WEBPACK_IMPORTED_MODULE_5__.InterlaceMethod.ADAM7) {\n            // Adam7 interlacing\n            offset = writeDataInterlaced(this._png, data, newData, offset);\n        }\n        const buffer = newData.toArray();\n        const compressed = (0,pako__WEBPACK_IMPORTED_MODULE_1__.deflate)(buffer, this._zlibOptions);\n        this.encodeIDAT(compressed);\n    }\n    _checkData(data) {\n        const { colorType, channels, depth } = getColorType(data, data.palette);\n        const png = {\n            width: checkInteger(data.width, \"width\"),\n            height: checkInteger(data.height, \"height\"),\n            channels,\n            data: data.data,\n            depth,\n            text: data.text,\n            palette: data.palette\n        };\n        this._colorType = colorType;\n        const expectedSize = depth < 8 ? Math.ceil(png.width * depth / 8) * png.height * channels : png.width * png.height * channels;\n        if (png.data.length !== expectedSize) {\n            throw new RangeError(`wrong data size. Found ${png.data.length}, expected ${expectedSize}`);\n        }\n        return png;\n    }\n}\nfunction checkInteger(value, name) {\n    if (Number.isInteger(value) && value > 0) {\n        return value;\n    }\n    throw new TypeError(`${name} must be a positive integer`);\n}\nfunction getColorType(data, palette) {\n    const { channels = 4, depth = 8 } = data;\n    if (channels !== 4 && channels !== 3 && channels !== 2 && channels !== 1) {\n        throw new RangeError(`unsupported number of channels: ${channels}`);\n    }\n    const returnValue = {\n        channels,\n        depth,\n        colorType: _internalTypes__WEBPACK_IMPORTED_MODULE_5__.ColorType.UNKNOWN\n    };\n    switch(channels){\n        case 4:\n            returnValue.colorType = _internalTypes__WEBPACK_IMPORTED_MODULE_5__.ColorType.TRUECOLOUR_ALPHA;\n            break;\n        case 3:\n            returnValue.colorType = _internalTypes__WEBPACK_IMPORTED_MODULE_5__.ColorType.TRUECOLOUR;\n            break;\n        case 1:\n            if (palette) {\n                returnValue.colorType = _internalTypes__WEBPACK_IMPORTED_MODULE_5__.ColorType.INDEXED_COLOUR;\n            } else {\n                returnValue.colorType = _internalTypes__WEBPACK_IMPORTED_MODULE_5__.ColorType.GREYSCALE;\n            }\n            break;\n        case 2:\n            returnValue.colorType = _internalTypes__WEBPACK_IMPORTED_MODULE_5__.ColorType.GREYSCALE_ALPHA;\n            break;\n        default:\n            throw new Error(\"unsupported number of channels\");\n    }\n    return returnValue;\n}\nfunction writeDataBytes(data, newData, slotsPerLine, offset) {\n    for(let j = 0; j < slotsPerLine; j++){\n        newData.writeByte(data[offset++]);\n    }\n    return offset;\n}\nfunction writeDataInterlaced(imageData, data, newData, offset) {\n    const passes = [\n        {\n            x: 0,\n            y: 0,\n            xStep: 8,\n            yStep: 8\n        },\n        {\n            x: 4,\n            y: 0,\n            xStep: 8,\n            yStep: 8\n        },\n        {\n            x: 0,\n            y: 4,\n            xStep: 4,\n            yStep: 8\n        },\n        {\n            x: 2,\n            y: 0,\n            xStep: 4,\n            yStep: 4\n        },\n        {\n            x: 0,\n            y: 2,\n            xStep: 2,\n            yStep: 4\n        },\n        {\n            x: 1,\n            y: 0,\n            xStep: 2,\n            yStep: 2\n        },\n        {\n            x: 0,\n            y: 1,\n            xStep: 1,\n            yStep: 2\n        }\n    ];\n    const { width, height, channels, depth } = imageData;\n    let pixelSize = 0;\n    if (depth === 16) {\n        pixelSize = channels * depth / 8 / 2;\n    } else {\n        pixelSize = channels * depth / 8;\n    }\n    // Process each pass\n    for(let passIndex = 0; passIndex < 7; passIndex++){\n        const pass = passes[passIndex];\n        const passWidth = Math.floor((width - pass.x + pass.xStep - 1) / pass.xStep);\n        const passHeight = Math.floor((height - pass.y + pass.yStep - 1) / pass.yStep);\n        if (passWidth <= 0 || passHeight <= 0) continue;\n        const passLineBytes = passWidth * pixelSize;\n        // For each scanline in this pass\n        for(let y = 0; y < passHeight; y++){\n            const imageY = pass.y + y * pass.yStep;\n            // Extract raw scanline data\n            const rawScanline = depth <= 8 ? new Uint8Array(passLineBytes) : new Uint16Array(passLineBytes);\n            let rawOffset = 0;\n            for(let x = 0; x < passWidth; x++){\n                const imageX = pass.x + x * pass.xStep;\n                if (imageX < width && imageY < height) {\n                    const srcPos = (imageY * width + imageX) * pixelSize;\n                    for(let i = 0; i < pixelSize; i++){\n                        rawScanline[rawOffset++] = data[srcPos + i];\n                    }\n                }\n            }\n            newData.writeByte(0); // no filter\n            if (depth === 8) {\n                newData.writeBytes(rawScanline);\n            } else if (depth === 16) {\n                for (const value of rawScanline){\n                    newData.writeByte(value >> 8 & 0xff); // High byte\n                    newData.writeByte(value & 0xff);\n                }\n            }\n        }\n    }\n    return offset;\n}\nfunction writeDataUint16(data, newData, slotsPerLine, offset) {\n    for(let j = 0; j < slotsPerLine; j++){\n        newData.writeUint16(data[offset++]);\n    }\n    return offset;\n} //# sourceMappingURL=PngEncoder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fast-png/lib-esm/PngEncoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/fast-png/lib-esm/convertIndexedToRgb.js":
/*!**************************************************************!*\
  !*** ./node_modules/fast-png/lib-esm/convertIndexedToRgb.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertIndexedToRgb: () => (/* binding */ convertIndexedToRgb)\n/* harmony export */ });\n/**\n * Converts indexed data into RGB/RGBA format\n * @param decodedImage - Image to decode data from.\n * @returns Uint8Array with RGB data.\n */ function convertIndexedToRgb(decodedImage) {\n    const palette = decodedImage.palette;\n    const depth = decodedImage.depth;\n    if (!palette) {\n        throw new Error(\"Color palette is undefined.\");\n    }\n    checkDataSize(decodedImage);\n    const indexSize = decodedImage.width * decodedImage.height;\n    const resSize = indexSize * palette[0].length;\n    const res = new Uint8Array(resSize);\n    let indexPos = 0;\n    let offset = 0;\n    const indexes = new Uint8Array(indexSize);\n    let bit = 0xff;\n    switch(depth){\n        case 1:\n            bit = 0x80;\n            break;\n        case 2:\n            bit = 0xc0;\n            break;\n        case 4:\n            bit = 0xf0;\n            break;\n        case 8:\n            bit = 0xff;\n            break;\n        default:\n            throw new Error(\"Incorrect depth value\");\n    }\n    for (const byte of decodedImage.data){\n        let bit2 = bit;\n        let shift = 8;\n        while(bit2){\n            shift -= depth;\n            indexes[indexPos++] = (byte & bit2) >> shift;\n            bit2 = bit2 >> depth;\n            if (indexPos % decodedImage.width === 0) {\n                break;\n            }\n        }\n    }\n    if (decodedImage.palette) {\n        for (const index of indexes){\n            const color = decodedImage.palette.at(index);\n            if (!color) {\n                throw new Error(\"Incorrect index of palette color\");\n            }\n            res.set(color, offset);\n            offset += color.length;\n        }\n    }\n    return res;\n}\nfunction checkDataSize(image) {\n    const expectedSize = image.depth < 8 ? Math.ceil(image.width * image.depth / 8) * image.height * image.channels : image.width * image.height * image.channels;\n    if (image.data.length !== expectedSize) {\n        throw new RangeError(`wrong data size. Found ${image.data.length}, expected ${expectedSize}`);\n    }\n} //# sourceMappingURL=convertIndexedToRgb.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZmFzdC1wbmcvbGliLWVzbS9jb252ZXJ0SW5kZXhlZFRvUmdiLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7OztDQUlDLEdBQ00sU0FBU0Esb0JBQW9CQyxZQUFZO0lBQzVDLE1BQU1DLFVBQVVELGFBQWFDLE9BQU87SUFDcEMsTUFBTUMsUUFBUUYsYUFBYUUsS0FBSztJQUNoQyxJQUFJLENBQUNELFNBQVM7UUFDVixNQUFNLElBQUlFLE1BQU07SUFDcEI7SUFDQUMsY0FBY0o7SUFDZCxNQUFNSyxZQUFZTCxhQUFhTSxLQUFLLEdBQUdOLGFBQWFPLE1BQU07SUFDMUQsTUFBTUMsVUFBVUgsWUFBWUosT0FBTyxDQUFDLEVBQUUsQ0FBQ1EsTUFBTTtJQUM3QyxNQUFNQyxNQUFNLElBQUlDLFdBQVdIO0lBQzNCLElBQUlJLFdBQVc7SUFDZixJQUFJQyxTQUFTO0lBQ2IsTUFBTUMsVUFBVSxJQUFJSCxXQUFXTjtJQUMvQixJQUFJVSxNQUFNO0lBQ1YsT0FBUWI7UUFDSixLQUFLO1lBQ0RhLE1BQU07WUFDTjtRQUNKLEtBQUs7WUFDREEsTUFBTTtZQUNOO1FBQ0osS0FBSztZQUNEQSxNQUFNO1lBQ047UUFDSixLQUFLO1lBQ0RBLE1BQU07WUFDTjtRQUNKO1lBQ0ksTUFBTSxJQUFJWixNQUFNO0lBQ3hCO0lBQ0EsS0FBSyxNQUFNYSxRQUFRaEIsYUFBYWlCLElBQUksQ0FBRTtRQUNsQyxJQUFJQyxPQUFPSDtRQUNYLElBQUlJLFFBQVE7UUFDWixNQUFPRCxLQUFNO1lBQ1RDLFNBQVNqQjtZQUNUWSxPQUFPLENBQUNGLFdBQVcsR0FBRyxDQUFDSSxPQUFPRSxJQUFHLEtBQU1DO1lBQ3ZDRCxPQUFPQSxRQUFRaEI7WUFDZixJQUFJVSxXQUFXWixhQUFhTSxLQUFLLEtBQUssR0FBRztnQkFDckM7WUFDSjtRQUNKO0lBQ0o7SUFDQSxJQUFJTixhQUFhQyxPQUFPLEVBQUU7UUFDdEIsS0FBSyxNQUFNbUIsU0FBU04sUUFBUztZQUN6QixNQUFNTyxRQUFRckIsYUFBYUMsT0FBTyxDQUFDcUIsRUFBRSxDQUFDRjtZQUN0QyxJQUFJLENBQUNDLE9BQU87Z0JBQ1IsTUFBTSxJQUFJbEIsTUFBTTtZQUNwQjtZQUNBTyxJQUFJYSxHQUFHLENBQUNGLE9BQU9SO1lBQ2ZBLFVBQVVRLE1BQU1aLE1BQU07UUFDMUI7SUFDSjtJQUNBLE9BQU9DO0FBQ1g7QUFDQSxTQUFTTixjQUFjb0IsS0FBSztJQUN4QixNQUFNQyxlQUFlRCxNQUFNdEIsS0FBSyxHQUFHLElBQzdCd0IsS0FBS0MsSUFBSSxDQUFDLE1BQU9yQixLQUFLLEdBQUdrQixNQUFNdEIsS0FBSyxHQUFJLEtBQ3RDc0IsTUFBTWpCLE1BQU0sR0FDWmlCLE1BQU1JLFFBQVEsR0FDaEJKLE1BQU1sQixLQUFLLEdBQUdrQixNQUFNakIsTUFBTSxHQUFHaUIsTUFBTUksUUFBUTtJQUNqRCxJQUFJSixNQUFNUCxJQUFJLENBQUNSLE1BQU0sS0FBS2dCLGNBQWM7UUFDcEMsTUFBTSxJQUFJSSxXQUFXLENBQUMsdUJBQXVCLEVBQUVMLE1BQU1QLElBQUksQ0FBQ1IsTUFBTSxDQUFDLFdBQVcsRUFBRWdCLGFBQWEsQ0FBQztJQUNoRztBQUNKLEVBQ0EsK0NBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF4aS12c2wtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2Zhc3QtcG5nL2xpYi1lc20vY29udmVydEluZGV4ZWRUb1JnYi5qcz9jM2Y2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29udmVydHMgaW5kZXhlZCBkYXRhIGludG8gUkdCL1JHQkEgZm9ybWF0XG4gKiBAcGFyYW0gZGVjb2RlZEltYWdlIC0gSW1hZ2UgdG8gZGVjb2RlIGRhdGEgZnJvbS5cbiAqIEByZXR1cm5zIFVpbnQ4QXJyYXkgd2l0aCBSR0IgZGF0YS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRJbmRleGVkVG9SZ2IoZGVjb2RlZEltYWdlKSB7XG4gICAgY29uc3QgcGFsZXR0ZSA9IGRlY29kZWRJbWFnZS5wYWxldHRlO1xuICAgIGNvbnN0IGRlcHRoID0gZGVjb2RlZEltYWdlLmRlcHRoO1xuICAgIGlmICghcGFsZXR0ZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbG9yIHBhbGV0dGUgaXMgdW5kZWZpbmVkLicpO1xuICAgIH1cbiAgICBjaGVja0RhdGFTaXplKGRlY29kZWRJbWFnZSk7XG4gICAgY29uc3QgaW5kZXhTaXplID0gZGVjb2RlZEltYWdlLndpZHRoICogZGVjb2RlZEltYWdlLmhlaWdodDtcbiAgICBjb25zdCByZXNTaXplID0gaW5kZXhTaXplICogcGFsZXR0ZVswXS5sZW5ndGg7XG4gICAgY29uc3QgcmVzID0gbmV3IFVpbnQ4QXJyYXkocmVzU2l6ZSk7XG4gICAgbGV0IGluZGV4UG9zID0gMDtcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBjb25zdCBpbmRleGVzID0gbmV3IFVpbnQ4QXJyYXkoaW5kZXhTaXplKTtcbiAgICBsZXQgYml0ID0gMHhmZjtcbiAgICBzd2l0Y2ggKGRlcHRoKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGJpdCA9IDB4ODA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgYml0ID0gMHhjMDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICBiaXQgPSAweGYwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgIGJpdCA9IDB4ZmY7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW5jb3JyZWN0IGRlcHRoIHZhbHVlJyk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgYnl0ZSBvZiBkZWNvZGVkSW1hZ2UuZGF0YSkge1xuICAgICAgICBsZXQgYml0MiA9IGJpdDtcbiAgICAgICAgbGV0IHNoaWZ0ID0gODtcbiAgICAgICAgd2hpbGUgKGJpdDIpIHtcbiAgICAgICAgICAgIHNoaWZ0IC09IGRlcHRoO1xuICAgICAgICAgICAgaW5kZXhlc1tpbmRleFBvcysrXSA9IChieXRlICYgYml0MikgPj4gc2hpZnQ7XG4gICAgICAgICAgICBiaXQyID0gYml0MiA+PiBkZXB0aDtcbiAgICAgICAgICAgIGlmIChpbmRleFBvcyAlIGRlY29kZWRJbWFnZS53aWR0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChkZWNvZGVkSW1hZ2UucGFsZXR0ZSkge1xuICAgICAgICBmb3IgKGNvbnN0IGluZGV4IG9mIGluZGV4ZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gZGVjb2RlZEltYWdlLnBhbGV0dGUuYXQoaW5kZXgpO1xuICAgICAgICAgICAgaWYgKCFjb2xvcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW5jb3JyZWN0IGluZGV4IG9mIHBhbGV0dGUgY29sb3InKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcy5zZXQoY29sb3IsIG9mZnNldCk7XG4gICAgICAgICAgICBvZmZzZXQgKz0gY29sb3IubGVuZ3RoO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBjaGVja0RhdGFTaXplKGltYWdlKSB7XG4gICAgY29uc3QgZXhwZWN0ZWRTaXplID0gaW1hZ2UuZGVwdGggPCA4XG4gICAgICAgID8gTWF0aC5jZWlsKChpbWFnZS53aWR0aCAqIGltYWdlLmRlcHRoKSAvIDgpICpcbiAgICAgICAgICAgIGltYWdlLmhlaWdodCAqXG4gICAgICAgICAgICBpbWFnZS5jaGFubmVsc1xuICAgICAgICA6IGltYWdlLndpZHRoICogaW1hZ2UuaGVpZ2h0ICogaW1hZ2UuY2hhbm5lbHM7XG4gICAgaWYgKGltYWdlLmRhdGEubGVuZ3RoICE9PSBleHBlY3RlZFNpemUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYHdyb25nIGRhdGEgc2l6ZS4gRm91bmQgJHtpbWFnZS5kYXRhLmxlbmd0aH0sIGV4cGVjdGVkICR7ZXhwZWN0ZWRTaXplfWApO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnZlcnRJbmRleGVkVG9SZ2IuanMubWFwIl0sIm5hbWVzIjpbImNvbnZlcnRJbmRleGVkVG9SZ2IiLCJkZWNvZGVkSW1hZ2UiLCJwYWxldHRlIiwiZGVwdGgiLCJFcnJvciIsImNoZWNrRGF0YVNpemUiLCJpbmRleFNpemUiLCJ3aWR0aCIsImhlaWdodCIsInJlc1NpemUiLCJsZW5ndGgiLCJyZXMiLCJVaW50OEFycmF5IiwiaW5kZXhQb3MiLCJvZmZzZXQiLCJpbmRleGVzIiwiYml0IiwiYnl0ZSIsImRhdGEiLCJiaXQyIiwic2hpZnQiLCJpbmRleCIsImNvbG9yIiwiYXQiLCJzZXQiLCJpbWFnZSIsImV4cGVjdGVkU2l6ZSIsIk1hdGgiLCJjZWlsIiwiY2hhbm5lbHMiLCJSYW5nZUVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fast-png/lib-esm/convertIndexedToRgb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/fast-png/lib-esm/helpers/applyUnfilter.js":
/*!****************************************************************!*\
  !*** ./node_modules/fast-png/lib-esm/helpers/applyUnfilter.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyUnfilter: () => (/* binding */ applyUnfilter)\n/* harmony export */ });\n/* harmony import */ var _unfilter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unfilter */ \"(ssr)/./node_modules/fast-png/lib-esm/helpers/unfilter.js\");\n\n/**\n * Apllies filter on scanline based on the filter type.\n * @param filterType - The filter type to apply.\n * @param currentLine - The current line of pixel data.\n * @param newLine - The new line of pixel data.\n * @param prevLine - The previous line of pixel data.\n * @param passLineBytes - The number of bytes in the pass line.\n * @param bytesPerPixel - The number of bytes per pixel.\n */ function applyUnfilter(filterType, currentLine, newLine, prevLine, passLineBytes, bytesPerPixel) {\n    switch(filterType){\n        case 0:\n            (0,_unfilter__WEBPACK_IMPORTED_MODULE_0__.unfilterNone)(currentLine, newLine, passLineBytes);\n            break;\n        case 1:\n            (0,_unfilter__WEBPACK_IMPORTED_MODULE_0__.unfilterSub)(currentLine, newLine, passLineBytes, bytesPerPixel);\n            break;\n        case 2:\n            (0,_unfilter__WEBPACK_IMPORTED_MODULE_0__.unfilterUp)(currentLine, newLine, prevLine, passLineBytes);\n            break;\n        case 3:\n            (0,_unfilter__WEBPACK_IMPORTED_MODULE_0__.unfilterAverage)(currentLine, newLine, prevLine, passLineBytes, bytesPerPixel);\n            break;\n        case 4:\n            (0,_unfilter__WEBPACK_IMPORTED_MODULE_0__.unfilterPaeth)(currentLine, newLine, prevLine, passLineBytes, bytesPerPixel);\n            break;\n        default:\n            throw new Error(`Unsupported filter: ${filterType}`);\n    }\n} //# sourceMappingURL=applyUnfilter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZmFzdC1wbmcvbGliLWVzbS9oZWxwZXJzL2FwcGx5VW5maWx0ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0c7QUFDcEc7Ozs7Ozs7O0NBUUMsR0FDTSxTQUFTSyxjQUFjQyxVQUFVLEVBQUVDLFdBQVcsRUFBRUMsT0FBTyxFQUFFQyxRQUFRLEVBQUVDLGFBQWEsRUFBRUMsYUFBYTtJQUNsRyxPQUFRTDtRQUNKLEtBQUs7WUFDREwsdURBQVlBLENBQUNNLGFBQWFDLFNBQVNFO1lBQ25DO1FBQ0osS0FBSztZQUNEUCxzREFBV0EsQ0FBQ0ksYUFBYUMsU0FBU0UsZUFBZUM7WUFDakQ7UUFDSixLQUFLO1lBQ0RQLHFEQUFVQSxDQUFDRyxhQUFhQyxTQUFTQyxVQUFVQztZQUMzQztRQUNKLEtBQUs7WUFDRFYsMERBQWVBLENBQUNPLGFBQWFDLFNBQVNDLFVBQVVDLGVBQWVDO1lBQy9EO1FBQ0osS0FBSztZQUNEVCx3REFBYUEsQ0FBQ0ssYUFBYUMsU0FBU0MsVUFBVUMsZUFBZUM7WUFDN0Q7UUFDSjtZQUNJLE1BQU0sSUFBSUMsTUFBTSxDQUFDLG9CQUFvQixFQUFFTixXQUFXLENBQUM7SUFDM0Q7QUFDSixFQUNBLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL3RheGktdnNsLW5leHRqcy8uL25vZGVfbW9kdWxlcy9mYXN0LXBuZy9saWItZXNtL2hlbHBlcnMvYXBwbHlVbmZpbHRlci5qcz8zNjQ1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVuZmlsdGVyQXZlcmFnZSwgdW5maWx0ZXJOb25lLCB1bmZpbHRlclBhZXRoLCB1bmZpbHRlclN1YiwgdW5maWx0ZXJVcCwgfSBmcm9tICcuL3VuZmlsdGVyJztcbi8qKlxuICogQXBsbGllcyBmaWx0ZXIgb24gc2NhbmxpbmUgYmFzZWQgb24gdGhlIGZpbHRlciB0eXBlLlxuICogQHBhcmFtIGZpbHRlclR5cGUgLSBUaGUgZmlsdGVyIHR5cGUgdG8gYXBwbHkuXG4gKiBAcGFyYW0gY3VycmVudExpbmUgLSBUaGUgY3VycmVudCBsaW5lIG9mIHBpeGVsIGRhdGEuXG4gKiBAcGFyYW0gbmV3TGluZSAtIFRoZSBuZXcgbGluZSBvZiBwaXhlbCBkYXRhLlxuICogQHBhcmFtIHByZXZMaW5lIC0gVGhlIHByZXZpb3VzIGxpbmUgb2YgcGl4ZWwgZGF0YS5cbiAqIEBwYXJhbSBwYXNzTGluZUJ5dGVzIC0gVGhlIG51bWJlciBvZiBieXRlcyBpbiB0aGUgcGFzcyBsaW5lLlxuICogQHBhcmFtIGJ5dGVzUGVyUGl4ZWwgLSBUaGUgbnVtYmVyIG9mIGJ5dGVzIHBlciBwaXhlbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5VW5maWx0ZXIoZmlsdGVyVHlwZSwgY3VycmVudExpbmUsIG5ld0xpbmUsIHByZXZMaW5lLCBwYXNzTGluZUJ5dGVzLCBieXRlc1BlclBpeGVsKSB7XG4gICAgc3dpdGNoIChmaWx0ZXJUeXBlKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIHVuZmlsdGVyTm9uZShjdXJyZW50TGluZSwgbmV3TGluZSwgcGFzc0xpbmVCeXRlcyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgdW5maWx0ZXJTdWIoY3VycmVudExpbmUsIG5ld0xpbmUsIHBhc3NMaW5lQnl0ZXMsIGJ5dGVzUGVyUGl4ZWwpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHVuZmlsdGVyVXAoY3VycmVudExpbmUsIG5ld0xpbmUsIHByZXZMaW5lLCBwYXNzTGluZUJ5dGVzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICB1bmZpbHRlckF2ZXJhZ2UoY3VycmVudExpbmUsIG5ld0xpbmUsIHByZXZMaW5lLCBwYXNzTGluZUJ5dGVzLCBieXRlc1BlclBpeGVsKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICB1bmZpbHRlclBhZXRoKGN1cnJlbnRMaW5lLCBuZXdMaW5lLCBwcmV2TGluZSwgcGFzc0xpbmVCeXRlcywgYnl0ZXNQZXJQaXhlbCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZmlsdGVyOiAke2ZpbHRlclR5cGV9YCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwbHlVbmZpbHRlci5qcy5tYXAiXSwibmFtZXMiOlsidW5maWx0ZXJBdmVyYWdlIiwidW5maWx0ZXJOb25lIiwidW5maWx0ZXJQYWV0aCIsInVuZmlsdGVyU3ViIiwidW5maWx0ZXJVcCIsImFwcGx5VW5maWx0ZXIiLCJmaWx0ZXJUeXBlIiwiY3VycmVudExpbmUiLCJuZXdMaW5lIiwicHJldkxpbmUiLCJwYXNzTGluZUJ5dGVzIiwiYnl0ZXNQZXJQaXhlbCIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fast-png/lib-esm/helpers/applyUnfilter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/fast-png/lib-esm/helpers/crc.js":
/*!******************************************************!*\
  !*** ./node_modules/fast-png/lib-esm/helpers/crc.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkCrc: () => (/* binding */ checkCrc),\n/* harmony export */   writeCrc: () => (/* binding */ writeCrc)\n/* harmony export */ });\nconst crcTable = [];\nfor(let n = 0; n < 256; n++){\n    let c = n;\n    for(let k = 0; k < 8; k++){\n        if (c & 1) {\n            c = 0xedb88320 ^ c >>> 1;\n        } else {\n            c = c >>> 1;\n        }\n    }\n    crcTable[n] = c;\n}\nconst initialCrc = 0xffffffff;\nfunction updateCrc(currentCrc, data, length) {\n    let c = currentCrc;\n    for(let n = 0; n < length; n++){\n        c = crcTable[(c ^ data[n]) & 0xff] ^ c >>> 8;\n    }\n    return c;\n}\nfunction crc(data, length) {\n    return (updateCrc(initialCrc, data, length) ^ initialCrc) >>> 0;\n}\nfunction checkCrc(buffer, crcLength, chunkName) {\n    const expectedCrc = buffer.readUint32();\n    const actualCrc = crc(new Uint8Array(buffer.buffer, buffer.byteOffset + buffer.offset - crcLength - 4, crcLength), crcLength); // \"- 4\" because we already advanced by reading the CRC\n    if (actualCrc !== expectedCrc) {\n        throw new Error(`CRC mismatch for chunk ${chunkName}. Expected ${expectedCrc}, found ${actualCrc}`);\n    }\n}\nfunction writeCrc(buffer, length) {\n    buffer.writeUint32(crc(new Uint8Array(buffer.buffer, buffer.byteOffset + buffer.offset - length, length), length));\n} //# sourceMappingURL=crc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZmFzdC1wbmcvbGliLWVzbS9oZWxwZXJzL2NyYy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLE1BQU1BLFdBQVcsRUFBRTtBQUNuQixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSSxLQUFLQSxJQUFLO0lBQzFCLElBQUlDLElBQUlEO0lBQ1IsSUFBSyxJQUFJRSxJQUFJLEdBQUdBLElBQUksR0FBR0EsSUFBSztRQUN4QixJQUFJRCxJQUFJLEdBQUc7WUFDUEEsSUFBSSxhQUFjQSxNQUFNO1FBQzVCLE9BQ0s7WUFDREEsSUFBSUEsTUFBTTtRQUNkO0lBQ0o7SUFDQUYsUUFBUSxDQUFDQyxFQUFFLEdBQUdDO0FBQ2xCO0FBQ0EsTUFBTUUsYUFBYTtBQUNuQixTQUFTQyxVQUFVQyxVQUFVLEVBQUVDLElBQUksRUFBRUMsTUFBTTtJQUN2QyxJQUFJTixJQUFJSTtJQUNSLElBQUssSUFBSUwsSUFBSSxHQUFHQSxJQUFJTyxRQUFRUCxJQUFLO1FBQzdCQyxJQUFJRixRQUFRLENBQUMsQ0FBQ0UsSUFBSUssSUFBSSxDQUFDTixFQUFFLElBQUksS0FBSyxHQUFJQyxNQUFNO0lBQ2hEO0lBQ0EsT0FBT0E7QUFDWDtBQUNBLFNBQVNPLElBQUlGLElBQUksRUFBRUMsTUFBTTtJQUNyQixPQUFPLENBQUNILFVBQVVELFlBQVlHLE1BQU1DLFVBQVVKLFVBQVMsTUFBTztBQUNsRTtBQUNPLFNBQVNNLFNBQVNDLE1BQU0sRUFBRUMsU0FBUyxFQUFFQyxTQUFTO0lBQ2pELE1BQU1DLGNBQWNILE9BQU9JLFVBQVU7SUFDckMsTUFBTUMsWUFBWVAsSUFBSSxJQUFJUSxXQUFXTixPQUFPQSxNQUFNLEVBQUVBLE9BQU9PLFVBQVUsR0FBR1AsT0FBT1EsTUFBTSxHQUFHUCxZQUFZLEdBQUdBLFlBQVlBLFlBQVksdURBQXVEO0lBQ3RMLElBQUlJLGNBQWNGLGFBQWE7UUFDM0IsTUFBTSxJQUFJTSxNQUFNLENBQUMsdUJBQXVCLEVBQUVQLFVBQVUsV0FBVyxFQUFFQyxZQUFZLFFBQVEsRUFBRUUsVUFBVSxDQUFDO0lBQ3RHO0FBQ0o7QUFDTyxTQUFTSyxTQUFTVixNQUFNLEVBQUVILE1BQU07SUFDbkNHLE9BQU9XLFdBQVcsQ0FBQ2IsSUFBSSxJQUFJUSxXQUFXTixPQUFPQSxNQUFNLEVBQUVBLE9BQU9PLFVBQVUsR0FBR1AsT0FBT1EsTUFBTSxHQUFHWCxRQUFRQSxTQUFTQTtBQUM5RyxFQUNBLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheGktdnNsLW5leHRqcy8uL25vZGVfbW9kdWxlcy9mYXN0LXBuZy9saWItZXNtL2hlbHBlcnMvY3JjLmpzP2E0ZjgiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY3JjVGFibGUgPSBbXTtcbmZvciAobGV0IG4gPSAwOyBuIDwgMjU2OyBuKyspIHtcbiAgICBsZXQgYyA9IG47XG4gICAgZm9yIChsZXQgayA9IDA7IGsgPCA4OyBrKyspIHtcbiAgICAgICAgaWYgKGMgJiAxKSB7XG4gICAgICAgICAgICBjID0gMHhlZGI4ODMyMCBeIChjID4+PiAxKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGMgPSBjID4+PiAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNyY1RhYmxlW25dID0gYztcbn1cbmNvbnN0IGluaXRpYWxDcmMgPSAweGZmZmZmZmZmO1xuZnVuY3Rpb24gdXBkYXRlQ3JjKGN1cnJlbnRDcmMsIGRhdGEsIGxlbmd0aCkge1xuICAgIGxldCBjID0gY3VycmVudENyYztcbiAgICBmb3IgKGxldCBuID0gMDsgbiA8IGxlbmd0aDsgbisrKSB7XG4gICAgICAgIGMgPSBjcmNUYWJsZVsoYyBeIGRhdGFbbl0pICYgMHhmZl0gXiAoYyA+Pj4gOCk7XG4gICAgfVxuICAgIHJldHVybiBjO1xufVxuZnVuY3Rpb24gY3JjKGRhdGEsIGxlbmd0aCkge1xuICAgIHJldHVybiAodXBkYXRlQ3JjKGluaXRpYWxDcmMsIGRhdGEsIGxlbmd0aCkgXiBpbml0aWFsQ3JjKSA+Pj4gMDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0NyYyhidWZmZXIsIGNyY0xlbmd0aCwgY2h1bmtOYW1lKSB7XG4gICAgY29uc3QgZXhwZWN0ZWRDcmMgPSBidWZmZXIucmVhZFVpbnQzMigpO1xuICAgIGNvbnN0IGFjdHVhbENyYyA9IGNyYyhuZXcgVWludDhBcnJheShidWZmZXIuYnVmZmVyLCBidWZmZXIuYnl0ZU9mZnNldCArIGJ1ZmZlci5vZmZzZXQgLSBjcmNMZW5ndGggLSA0LCBjcmNMZW5ndGgpLCBjcmNMZW5ndGgpOyAvLyBcIi0gNFwiIGJlY2F1c2Ugd2UgYWxyZWFkeSBhZHZhbmNlZCBieSByZWFkaW5nIHRoZSBDUkNcbiAgICBpZiAoYWN0dWFsQ3JjICE9PSBleHBlY3RlZENyYykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENSQyBtaXNtYXRjaCBmb3IgY2h1bmsgJHtjaHVua05hbWV9LiBFeHBlY3RlZCAke2V4cGVjdGVkQ3JjfSwgZm91bmQgJHthY3R1YWxDcmN9YCk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlQ3JjKGJ1ZmZlciwgbGVuZ3RoKSB7XG4gICAgYnVmZmVyLndyaXRlVWludDMyKGNyYyhuZXcgVWludDhBcnJheShidWZmZXIuYnVmZmVyLCBidWZmZXIuYnl0ZU9mZnNldCArIGJ1ZmZlci5vZmZzZXQgLSBsZW5ndGgsIGxlbmd0aCksIGxlbmd0aCkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JjLmpzLm1hcCJdLCJuYW1lcyI6WyJjcmNUYWJsZSIsIm4iLCJjIiwiayIsImluaXRpYWxDcmMiLCJ1cGRhdGVDcmMiLCJjdXJyZW50Q3JjIiwiZGF0YSIsImxlbmd0aCIsImNyYyIsImNoZWNrQ3JjIiwiYnVmZmVyIiwiY3JjTGVuZ3RoIiwiY2h1bmtOYW1lIiwiZXhwZWN0ZWRDcmMiLCJyZWFkVWludDMyIiwiYWN0dWFsQ3JjIiwiVWludDhBcnJheSIsImJ5dGVPZmZzZXQiLCJvZmZzZXQiLCJFcnJvciIsIndyaXRlQ3JjIiwid3JpdGVVaW50MzIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fast-png/lib-esm/helpers/crc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/fast-png/lib-esm/helpers/decodeInterlaceAdam7.js":
/*!***********************************************************************!*\
  !*** ./node_modules/fast-png/lib-esm/helpers/decodeInterlaceAdam7.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeInterlaceAdam7: () => (/* binding */ decodeInterlaceAdam7)\n/* harmony export */ });\n/* harmony import */ var _applyUnfilter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./applyUnfilter */ \"(ssr)/./node_modules/fast-png/lib-esm/helpers/applyUnfilter.js\");\n\nconst uint16 = new Uint16Array([\n    0x00ff\n]);\nconst uint8 = new Uint8Array(uint16.buffer);\nconst osIsLittleEndian = uint8[0] === 0xff;\n/**\n * Decodes the Adam7 interlaced PNG data.\n *\n * @param params - DecodeInterlaceNullParams\n * @returns - array of pixel data.\n */ function decodeInterlaceAdam7(params) {\n    const { data, width, height, channels, depth } = params;\n    // Adam7 interlacing pattern\n    const passes = [\n        {\n            x: 0,\n            y: 0,\n            xStep: 8,\n            yStep: 8\n        },\n        {\n            x: 4,\n            y: 0,\n            xStep: 8,\n            yStep: 8\n        },\n        {\n            x: 0,\n            y: 4,\n            xStep: 4,\n            yStep: 8\n        },\n        {\n            x: 2,\n            y: 0,\n            xStep: 4,\n            yStep: 4\n        },\n        {\n            x: 0,\n            y: 2,\n            xStep: 2,\n            yStep: 4\n        },\n        {\n            x: 1,\n            y: 0,\n            xStep: 2,\n            yStep: 2\n        },\n        {\n            x: 0,\n            y: 1,\n            xStep: 1,\n            yStep: 2\n        }\n    ];\n    const bytesPerPixel = Math.ceil(depth / 8) * channels;\n    const resultData = new Uint8Array(height * width * bytesPerPixel);\n    let offset = 0;\n    // Process each pass\n    for(let passIndex = 0; passIndex < 7; passIndex++){\n        const pass = passes[passIndex];\n        // Calculate pass dimensions\n        const passWidth = Math.ceil((width - pass.x) / pass.xStep);\n        const passHeight = Math.ceil((height - pass.y) / pass.yStep);\n        if (passWidth <= 0 || passHeight <= 0) continue;\n        const passLineBytes = passWidth * bytesPerPixel;\n        const prevLine = new Uint8Array(passLineBytes);\n        // Process each scanline in this pass\n        for(let y = 0; y < passHeight; y++){\n            // First byte is the filter type\n            const filterType = data[offset++];\n            const currentLine = data.subarray(offset, offset + passLineBytes);\n            offset += passLineBytes;\n            // Create a new line for the unfiltered data\n            const newLine = new Uint8Array(passLineBytes);\n            // Apply the appropriate unfilter\n            (0,_applyUnfilter__WEBPACK_IMPORTED_MODULE_0__.applyUnfilter)(filterType, currentLine, newLine, prevLine, passLineBytes, bytesPerPixel);\n            prevLine.set(newLine);\n            for(let x = 0; x < passWidth; x++){\n                const outputX = pass.x + x * pass.xStep;\n                const outputY = pass.y + y * pass.yStep;\n                if (outputX >= width || outputY >= height) continue;\n                for(let i = 0; i < bytesPerPixel; i++){\n                    resultData[(outputY * width + outputX) * bytesPerPixel + i] = newLine[x * bytesPerPixel + i];\n                }\n            }\n        }\n    }\n    if (depth === 16) {\n        const uint16Data = new Uint16Array(resultData.buffer);\n        if (osIsLittleEndian) {\n            for(let k = 0; k < uint16Data.length; k++){\n                // PNG is always big endian. Swap the bytes.\n                uint16Data[k] = swap16(uint16Data[k]);\n            }\n        }\n        return uint16Data;\n    } else {\n        return resultData;\n    }\n}\nfunction swap16(val) {\n    return (val & 0xff) << 8 | val >> 8 & 0xff;\n} //# sourceMappingURL=decodeInterlaceAdam7.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fast-png/lib-esm/helpers/decodeInterlaceAdam7.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/fast-png/lib-esm/helpers/decodeInterlaceNull.js":
/*!**********************************************************************!*\
  !*** ./node_modules/fast-png/lib-esm/helpers/decodeInterlaceNull.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeInterlaceNull: () => (/* binding */ decodeInterlaceNull)\n/* harmony export */ });\n/* harmony import */ var _unfilter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unfilter */ \"(ssr)/./node_modules/fast-png/lib-esm/helpers/unfilter.js\");\n\nconst uint16 = new Uint16Array([\n    0x00ff\n]);\nconst uint8 = new Uint8Array(uint16.buffer);\nconst osIsLittleEndian = uint8[0] === 0xff;\nconst empty = new Uint8Array(0);\nfunction decodeInterlaceNull(params) {\n    const { data, width, height, channels, depth } = params;\n    const bytesPerPixel = Math.ceil(depth / 8) * channels;\n    const bytesPerLine = Math.ceil(depth / 8 * channels * width);\n    const newData = new Uint8Array(height * bytesPerLine);\n    let prevLine = empty;\n    let offset = 0;\n    let currentLine;\n    let newLine;\n    for(let i = 0; i < height; i++){\n        currentLine = data.subarray(offset + 1, offset + 1 + bytesPerLine);\n        newLine = newData.subarray(i * bytesPerLine, (i + 1) * bytesPerLine);\n        switch(data[offset]){\n            case 0:\n                (0,_unfilter__WEBPACK_IMPORTED_MODULE_0__.unfilterNone)(currentLine, newLine, bytesPerLine);\n                break;\n            case 1:\n                (0,_unfilter__WEBPACK_IMPORTED_MODULE_0__.unfilterSub)(currentLine, newLine, bytesPerLine, bytesPerPixel);\n                break;\n            case 2:\n                (0,_unfilter__WEBPACK_IMPORTED_MODULE_0__.unfilterUp)(currentLine, newLine, prevLine, bytesPerLine);\n                break;\n            case 3:\n                (0,_unfilter__WEBPACK_IMPORTED_MODULE_0__.unfilterAverage)(currentLine, newLine, prevLine, bytesPerLine, bytesPerPixel);\n                break;\n            case 4:\n                (0,_unfilter__WEBPACK_IMPORTED_MODULE_0__.unfilterPaeth)(currentLine, newLine, prevLine, bytesPerLine, bytesPerPixel);\n                break;\n            default:\n                throw new Error(`Unsupported filter: ${data[offset]}`);\n        }\n        prevLine = newLine;\n        offset += bytesPerLine + 1;\n    }\n    if (depth === 16) {\n        const uint16Data = new Uint16Array(newData.buffer);\n        if (osIsLittleEndian) {\n            for(let k = 0; k < uint16Data.length; k++){\n                // PNG is always big endian. Swap the bytes.\n                uint16Data[k] = swap16(uint16Data[k]);\n            }\n        }\n        return uint16Data;\n    } else {\n        return newData;\n    }\n}\nfunction swap16(val) {\n    return (val & 0xff) << 8 | val >> 8 & 0xff;\n} //# sourceMappingURL=decodeInterlaceNull.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZmFzdC1wbmcvbGliLWVzbS9oZWxwZXJzL2RlY29kZUludGVybGFjZU51bGwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0c7QUFDcEcsTUFBTUssU0FBUyxJQUFJQyxZQUFZO0lBQUM7Q0FBTztBQUN2QyxNQUFNQyxRQUFRLElBQUlDLFdBQVdILE9BQU9JLE1BQU07QUFDMUMsTUFBTUMsbUJBQW1CSCxLQUFLLENBQUMsRUFBRSxLQUFLO0FBQ3RDLE1BQU1JLFFBQVEsSUFBSUgsV0FBVztBQUN0QixTQUFTSSxvQkFBb0JDLE1BQU07SUFDdEMsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFFQyxRQUFRLEVBQUVDLEtBQUssRUFBRSxHQUFHTDtJQUNqRCxNQUFNTSxnQkFBZ0JDLEtBQUtDLElBQUksQ0FBQ0gsUUFBUSxLQUFLRDtJQUM3QyxNQUFNSyxlQUFlRixLQUFLQyxJQUFJLENBQUMsUUFBUyxJQUFLSixXQUFXRjtJQUN4RCxNQUFNUSxVQUFVLElBQUlmLFdBQVdRLFNBQVNNO0lBQ3hDLElBQUlFLFdBQVdiO0lBQ2YsSUFBSWMsU0FBUztJQUNiLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSVosUUFBUVksSUFBSztRQUM3QkYsY0FBY1osS0FBS2UsUUFBUSxDQUFDSixTQUFTLEdBQUdBLFNBQVMsSUFBSUg7UUFDckRLLFVBQVVKLFFBQVFNLFFBQVEsQ0FBQ0QsSUFBSU4sY0FBYyxDQUFDTSxJQUFJLEtBQUtOO1FBQ3ZELE9BQVFSLElBQUksQ0FBQ1csT0FBTztZQUNoQixLQUFLO2dCQUNEeEIsdURBQVlBLENBQUN5QixhQUFhQyxTQUFTTDtnQkFDbkM7WUFDSixLQUFLO2dCQUNEbkIsc0RBQVdBLENBQUN1QixhQUFhQyxTQUFTTCxjQUFjSDtnQkFDaEQ7WUFDSixLQUFLO2dCQUNEZixxREFBVUEsQ0FBQ3NCLGFBQWFDLFNBQVNILFVBQVVGO2dCQUMzQztZQUNKLEtBQUs7Z0JBQ0R0QiwwREFBZUEsQ0FBQzBCLGFBQWFDLFNBQVNILFVBQVVGLGNBQWNIO2dCQUM5RDtZQUNKLEtBQUs7Z0JBQ0RqQix3REFBYUEsQ0FBQ3dCLGFBQWFDLFNBQVNILFVBQVVGLGNBQWNIO2dCQUM1RDtZQUNKO2dCQUNJLE1BQU0sSUFBSVcsTUFBTSxDQUFDLG9CQUFvQixFQUFFaEIsSUFBSSxDQUFDVyxPQUFPLENBQUMsQ0FBQztRQUM3RDtRQUNBRCxXQUFXRztRQUNYRixVQUFVSCxlQUFlO0lBQzdCO0lBQ0EsSUFBSUosVUFBVSxJQUFJO1FBQ2QsTUFBTWEsYUFBYSxJQUFJekIsWUFBWWlCLFFBQVFkLE1BQU07UUFDakQsSUFBSUMsa0JBQWtCO1lBQ2xCLElBQUssSUFBSXNCLElBQUksR0FBR0EsSUFBSUQsV0FBV0UsTUFBTSxFQUFFRCxJQUFLO2dCQUN4Qyw0Q0FBNEM7Z0JBQzVDRCxVQUFVLENBQUNDLEVBQUUsR0FBR0UsT0FBT0gsVUFBVSxDQUFDQyxFQUFFO1lBQ3hDO1FBQ0o7UUFDQSxPQUFPRDtJQUNYLE9BQ0s7UUFDRCxPQUFPUjtJQUNYO0FBQ0o7QUFDQSxTQUFTVyxPQUFPQyxHQUFHO0lBQ2YsT0FBTyxDQUFFQSxNQUFNLElBQUcsS0FBTSxJQUFNLE9BQVEsSUFBSztBQUMvQyxFQUNBLCtDQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RheGktdnNsLW5leHRqcy8uL25vZGVfbW9kdWxlcy9mYXN0LXBuZy9saWItZXNtL2hlbHBlcnMvZGVjb2RlSW50ZXJsYWNlTnVsbC5qcz80MjlmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVuZmlsdGVyQXZlcmFnZSwgdW5maWx0ZXJOb25lLCB1bmZpbHRlclBhZXRoLCB1bmZpbHRlclN1YiwgdW5maWx0ZXJVcCwgfSBmcm9tICcuL3VuZmlsdGVyJztcbmNvbnN0IHVpbnQxNiA9IG5ldyBVaW50MTZBcnJheShbMHgwMGZmXSk7XG5jb25zdCB1aW50OCA9IG5ldyBVaW50OEFycmF5KHVpbnQxNi5idWZmZXIpO1xuY29uc3Qgb3NJc0xpdHRsZUVuZGlhbiA9IHVpbnQ4WzBdID09PSAweGZmO1xuY29uc3QgZW1wdHkgPSBuZXcgVWludDhBcnJheSgwKTtcbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVJbnRlcmxhY2VOdWxsKHBhcmFtcykge1xuICAgIGNvbnN0IHsgZGF0YSwgd2lkdGgsIGhlaWdodCwgY2hhbm5lbHMsIGRlcHRoIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgYnl0ZXNQZXJQaXhlbCA9IE1hdGguY2VpbChkZXB0aCAvIDgpICogY2hhbm5lbHM7XG4gICAgY29uc3QgYnl0ZXNQZXJMaW5lID0gTWF0aC5jZWlsKChkZXB0aCAvIDgpICogY2hhbm5lbHMgKiB3aWR0aCk7XG4gICAgY29uc3QgbmV3RGF0YSA9IG5ldyBVaW50OEFycmF5KGhlaWdodCAqIGJ5dGVzUGVyTGluZSk7XG4gICAgbGV0IHByZXZMaW5lID0gZW1wdHk7XG4gICAgbGV0IG9mZnNldCA9IDA7XG4gICAgbGV0IGN1cnJlbnRMaW5lO1xuICAgIGxldCBuZXdMaW5lO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGVpZ2h0OyBpKyspIHtcbiAgICAgICAgY3VycmVudExpbmUgPSBkYXRhLnN1YmFycmF5KG9mZnNldCArIDEsIG9mZnNldCArIDEgKyBieXRlc1BlckxpbmUpO1xuICAgICAgICBuZXdMaW5lID0gbmV3RGF0YS5zdWJhcnJheShpICogYnl0ZXNQZXJMaW5lLCAoaSArIDEpICogYnl0ZXNQZXJMaW5lKTtcbiAgICAgICAgc3dpdGNoIChkYXRhW29mZnNldF0pIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICB1bmZpbHRlck5vbmUoY3VycmVudExpbmUsIG5ld0xpbmUsIGJ5dGVzUGVyTGluZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgdW5maWx0ZXJTdWIoY3VycmVudExpbmUsIG5ld0xpbmUsIGJ5dGVzUGVyTGluZSwgYnl0ZXNQZXJQaXhlbCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgdW5maWx0ZXJVcChjdXJyZW50TGluZSwgbmV3TGluZSwgcHJldkxpbmUsIGJ5dGVzUGVyTGluZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgdW5maWx0ZXJBdmVyYWdlKGN1cnJlbnRMaW5lLCBuZXdMaW5lLCBwcmV2TGluZSwgYnl0ZXNQZXJMaW5lLCBieXRlc1BlclBpeGVsKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICB1bmZpbHRlclBhZXRoKGN1cnJlbnRMaW5lLCBuZXdMaW5lLCBwcmV2TGluZSwgYnl0ZXNQZXJMaW5lLCBieXRlc1BlclBpeGVsKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBmaWx0ZXI6ICR7ZGF0YVtvZmZzZXRdfWApO1xuICAgICAgICB9XG4gICAgICAgIHByZXZMaW5lID0gbmV3TGluZTtcbiAgICAgICAgb2Zmc2V0ICs9IGJ5dGVzUGVyTGluZSArIDE7XG4gICAgfVxuICAgIGlmIChkZXB0aCA9PT0gMTYpIHtcbiAgICAgICAgY29uc3QgdWludDE2RGF0YSA9IG5ldyBVaW50MTZBcnJheShuZXdEYXRhLmJ1ZmZlcik7XG4gICAgICAgIGlmIChvc0lzTGl0dGxlRW5kaWFuKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IHVpbnQxNkRhdGEubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgICAgICAvLyBQTkcgaXMgYWx3YXlzIGJpZyBlbmRpYW4uIFN3YXAgdGhlIGJ5dGVzLlxuICAgICAgICAgICAgICAgIHVpbnQxNkRhdGFba10gPSBzd2FwMTYodWludDE2RGF0YVtrXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVpbnQxNkRhdGE7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3RGF0YTtcbiAgICB9XG59XG5mdW5jdGlvbiBzd2FwMTYodmFsKSB7XG4gICAgcmV0dXJuICgodmFsICYgMHhmZikgPDwgOCkgfCAoKHZhbCA+PiA4KSAmIDB4ZmYpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVjb2RlSW50ZXJsYWNlTnVsbC5qcy5tYXAiXSwibmFtZXMiOlsidW5maWx0ZXJBdmVyYWdlIiwidW5maWx0ZXJOb25lIiwidW5maWx0ZXJQYWV0aCIsInVuZmlsdGVyU3ViIiwidW5maWx0ZXJVcCIsInVpbnQxNiIsIlVpbnQxNkFycmF5IiwidWludDgiLCJVaW50OEFycmF5IiwiYnVmZmVyIiwib3NJc0xpdHRsZUVuZGlhbiIsImVtcHR5IiwiZGVjb2RlSW50ZXJsYWNlTnVsbCIsInBhcmFtcyIsImRhdGEiLCJ3aWR0aCIsImhlaWdodCIsImNoYW5uZWxzIiwiZGVwdGgiLCJieXRlc1BlclBpeGVsIiwiTWF0aCIsImNlaWwiLCJieXRlc1BlckxpbmUiLCJuZXdEYXRhIiwicHJldkxpbmUiLCJvZmZzZXQiLCJjdXJyZW50TGluZSIsIm5ld0xpbmUiLCJpIiwic3ViYXJyYXkiLCJFcnJvciIsInVpbnQxNkRhdGEiLCJrIiwibGVuZ3RoIiwic3dhcDE2IiwidmFsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fast-png/lib-esm/helpers/decodeInterlaceNull.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/fast-png/lib-esm/helpers/signature.js":
/*!************************************************************!*\
  !*** ./node_modules/fast-png/lib-esm/helpers/signature.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkSignature: () => (/* binding */ checkSignature),\n/* harmony export */   hasPngSignature: () => (/* binding */ hasPngSignature),\n/* harmony export */   writeSignature: () => (/* binding */ writeSignature)\n/* harmony export */ });\n// https://www.w3.org/TR/PNG/#5PNG-file-signature\nconst pngSignature = Uint8Array.of(137, 80, 78, 71, 13, 10, 26, 10);\nfunction writeSignature(buffer) {\n    buffer.writeBytes(pngSignature);\n}\nfunction checkSignature(buffer) {\n    if (!hasPngSignature(buffer.readBytes(pngSignature.length))) {\n        throw new Error(\"wrong PNG signature\");\n    }\n}\nfunction hasPngSignature(array) {\n    if (array.length < pngSignature.length) {\n        return false;\n    }\n    for(let i = 0; i < pngSignature.length; i++){\n        if (array[i] !== pngSignature[i]) {\n            return false;\n        }\n    }\n    return true;\n} //# sourceMappingURL=signature.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZmFzdC1wbmcvbGliLWVzbS9oZWxwZXJzL3NpZ25hdHVyZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxpREFBaUQ7QUFDakQsTUFBTUEsZUFBZUMsV0FBV0MsRUFBRSxDQUFDLEtBQUssSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUk7QUFDekQsU0FBU0MsZUFBZUMsTUFBTTtJQUNqQ0EsT0FBT0MsVUFBVSxDQUFDTDtBQUN0QjtBQUNPLFNBQVNNLGVBQWVGLE1BQU07SUFDakMsSUFBSSxDQUFDRyxnQkFBZ0JILE9BQU9JLFNBQVMsQ0FBQ1IsYUFBYVMsTUFBTSxJQUFJO1FBQ3pELE1BQU0sSUFBSUMsTUFBTTtJQUNwQjtBQUNKO0FBQ08sU0FBU0gsZ0JBQWdCSSxLQUFLO0lBQ2pDLElBQUlBLE1BQU1GLE1BQU0sR0FBR1QsYUFBYVMsTUFBTSxFQUFFO1FBQ3BDLE9BQU87SUFDWDtJQUNBLElBQUssSUFBSUcsSUFBSSxHQUFHQSxJQUFJWixhQUFhUyxNQUFNLEVBQUVHLElBQUs7UUFDMUMsSUFBSUQsS0FBSyxDQUFDQyxFQUFFLEtBQUtaLFlBQVksQ0FBQ1ksRUFBRSxFQUFFO1lBQzlCLE9BQU87UUFDWDtJQUNKO0lBQ0EsT0FBTztBQUNYLEVBQ0EscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF4aS12c2wtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2Zhc3QtcG5nL2xpYi1lc20vaGVscGVycy9zaWduYXR1cmUuanM/NTU1OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL3d3dy53My5vcmcvVFIvUE5HLyM1UE5HLWZpbGUtc2lnbmF0dXJlXG5jb25zdCBwbmdTaWduYXR1cmUgPSBVaW50OEFycmF5Lm9mKDEzNywgODAsIDc4LCA3MSwgMTMsIDEwLCAyNiwgMTApO1xuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlU2lnbmF0dXJlKGJ1ZmZlcikge1xuICAgIGJ1ZmZlci53cml0ZUJ5dGVzKHBuZ1NpZ25hdHVyZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY2hlY2tTaWduYXR1cmUoYnVmZmVyKSB7XG4gICAgaWYgKCFoYXNQbmdTaWduYXR1cmUoYnVmZmVyLnJlYWRCeXRlcyhwbmdTaWduYXR1cmUubGVuZ3RoKSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBQTkcgc2lnbmF0dXJlJyk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGhhc1BuZ1NpZ25hdHVyZShhcnJheSkge1xuICAgIGlmIChhcnJheS5sZW5ndGggPCBwbmdTaWduYXR1cmUubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwbmdTaWduYXR1cmUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGFycmF5W2ldICE9PSBwbmdTaWduYXR1cmVbaV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpZ25hdHVyZS5qcy5tYXAiXSwibmFtZXMiOlsicG5nU2lnbmF0dXJlIiwiVWludDhBcnJheSIsIm9mIiwid3JpdGVTaWduYXR1cmUiLCJidWZmZXIiLCJ3cml0ZUJ5dGVzIiwiY2hlY2tTaWduYXR1cmUiLCJoYXNQbmdTaWduYXR1cmUiLCJyZWFkQnl0ZXMiLCJsZW5ndGgiLCJFcnJvciIsImFycmF5IiwiaSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fast-png/lib-esm/helpers/signature.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/fast-png/lib-esm/helpers/text.js":
/*!*******************************************************!*\
  !*** ./node_modules/fast-png/lib-esm/helpers/text.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodetEXt: () => (/* binding */ decodetEXt),\n/* harmony export */   encodetEXt: () => (/* binding */ encodetEXt),\n/* harmony export */   readKeyword: () => (/* binding */ readKeyword),\n/* harmony export */   readLatin1: () => (/* binding */ readLatin1),\n/* harmony export */   textChunkName: () => (/* binding */ textChunkName)\n/* harmony export */ });\n/* harmony import */ var _crc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./crc */ \"(ssr)/./node_modules/fast-png/lib-esm/helpers/crc.js\");\n\n// https://www.w3.org/TR/png/#11tEXt\nconst textChunkName = \"tEXt\";\nconst NULL = 0;\nconst latin1Decoder = new TextDecoder(\"latin1\");\nfunction validateKeyword(keyword) {\n    validateLatin1(keyword);\n    if (keyword.length === 0 || keyword.length > 79) {\n        throw new Error(\"keyword length must be between 1 and 79\");\n    }\n}\n// eslint-disable-next-line no-control-regex\nconst latin1Regex = /^[\\u0000-\\u00FF]*$/;\nfunction validateLatin1(text) {\n    if (!latin1Regex.test(text)) {\n        throw new Error(\"invalid latin1 text\");\n    }\n}\nfunction decodetEXt(text, buffer, length) {\n    const keyword = readKeyword(buffer);\n    text[keyword] = readLatin1(buffer, length - keyword.length - 1);\n}\nfunction encodetEXt(buffer, keyword, text) {\n    validateKeyword(keyword);\n    validateLatin1(text);\n    const length = keyword.length + 1 /* NULL */  + text.length;\n    buffer.writeUint32(length);\n    buffer.writeChars(textChunkName);\n    buffer.writeChars(keyword);\n    buffer.writeByte(NULL);\n    buffer.writeChars(text);\n    (0,_crc__WEBPACK_IMPORTED_MODULE_0__.writeCrc)(buffer, length + 4);\n}\n// https://www.w3.org/TR/png/#11keywords\nfunction readKeyword(buffer) {\n    buffer.mark();\n    while(buffer.readByte() !== NULL){\n    /* advance */ }\n    const end = buffer.offset;\n    buffer.reset();\n    const keyword = latin1Decoder.decode(buffer.readBytes(end - buffer.offset - 1));\n    // NULL\n    buffer.skip(1);\n    validateKeyword(keyword);\n    return keyword;\n}\nfunction readLatin1(buffer, length) {\n    return latin1Decoder.decode(buffer.readBytes(length));\n} //# sourceMappingURL=text.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZmFzdC1wbmcvbGliLWVzbS9oZWxwZXJzL3RleHQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWlDO0FBQ2pDLG9DQUFvQztBQUM3QixNQUFNQyxnQkFBZ0IsT0FBTztBQUNwQyxNQUFNQyxPQUFPO0FBQ2IsTUFBTUMsZ0JBQWdCLElBQUlDLFlBQVk7QUFDdEMsU0FBU0MsZ0JBQWdCQyxPQUFPO0lBQzVCQyxlQUFlRDtJQUNmLElBQUlBLFFBQVFFLE1BQU0sS0FBSyxLQUFLRixRQUFRRSxNQUFNLEdBQUcsSUFBSTtRQUM3QyxNQUFNLElBQUlDLE1BQU07SUFDcEI7QUFDSjtBQUNBLDRDQUE0QztBQUM1QyxNQUFNQyxjQUFjO0FBQ3BCLFNBQVNILGVBQWVJLElBQUk7SUFDeEIsSUFBSSxDQUFDRCxZQUFZRSxJQUFJLENBQUNELE9BQU87UUFDekIsTUFBTSxJQUFJRixNQUFNO0lBQ3BCO0FBQ0o7QUFDTyxTQUFTSSxXQUFXRixJQUFJLEVBQUVHLE1BQU0sRUFBRU4sTUFBTTtJQUMzQyxNQUFNRixVQUFVUyxZQUFZRDtJQUM1QkgsSUFBSSxDQUFDTCxRQUFRLEdBQUdVLFdBQVdGLFFBQVFOLFNBQVNGLFFBQVFFLE1BQU0sR0FBRztBQUNqRTtBQUNPLFNBQVNTLFdBQVdILE1BQU0sRUFBRVIsT0FBTyxFQUFFSyxJQUFJO0lBQzVDTixnQkFBZ0JDO0lBQ2hCQyxlQUFlSTtJQUNmLE1BQU1ILFNBQVNGLFFBQVFFLE1BQU0sR0FBRyxFQUFFLFFBQVEsTUFBS0csS0FBS0gsTUFBTTtJQUMxRE0sT0FBT0ksV0FBVyxDQUFDVjtJQUNuQk0sT0FBT0ssVUFBVSxDQUFDbEI7SUFDbEJhLE9BQU9LLFVBQVUsQ0FBQ2I7SUFDbEJRLE9BQU9NLFNBQVMsQ0FBQ2xCO0lBQ2pCWSxPQUFPSyxVQUFVLENBQUNSO0lBQ2xCWCw4Q0FBUUEsQ0FBQ2MsUUFBUU4sU0FBUztBQUM5QjtBQUNBLHdDQUF3QztBQUNqQyxTQUFTTyxZQUFZRCxNQUFNO0lBQzlCQSxPQUFPTyxJQUFJO0lBQ1gsTUFBT1AsT0FBT1EsUUFBUSxPQUFPcEIsS0FBTTtJQUMvQixXQUFXLEdBQ2Y7SUFDQSxNQUFNcUIsTUFBTVQsT0FBT1UsTUFBTTtJQUN6QlYsT0FBT1csS0FBSztJQUNaLE1BQU1uQixVQUFVSCxjQUFjdUIsTUFBTSxDQUFDWixPQUFPYSxTQUFTLENBQUNKLE1BQU1ULE9BQU9VLE1BQU0sR0FBRztJQUM1RSxPQUFPO0lBQ1BWLE9BQU9jLElBQUksQ0FBQztJQUNadkIsZ0JBQWdCQztJQUNoQixPQUFPQTtBQUNYO0FBQ08sU0FBU1UsV0FBV0YsTUFBTSxFQUFFTixNQUFNO0lBQ3JDLE9BQU9MLGNBQWN1QixNQUFNLENBQUNaLE9BQU9hLFNBQVMsQ0FBQ25CO0FBQ2pELEVBQ0EsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF4aS12c2wtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2Zhc3QtcG5nL2xpYi1lc20vaGVscGVycy90ZXh0LmpzP2FlODkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgd3JpdGVDcmMgfSBmcm9tICcuL2NyYyc7XG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvcG5nLyMxMXRFWHRcbmV4cG9ydCBjb25zdCB0ZXh0Q2h1bmtOYW1lID0gJ3RFWHQnO1xuY29uc3QgTlVMTCA9IDA7XG5jb25zdCBsYXRpbjFEZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCdsYXRpbjEnKTtcbmZ1bmN0aW9uIHZhbGlkYXRlS2V5d29yZChrZXl3b3JkKSB7XG4gICAgdmFsaWRhdGVMYXRpbjEoa2V5d29yZCk7XG4gICAgaWYgKGtleXdvcmQubGVuZ3RoID09PSAwIHx8IGtleXdvcmQubGVuZ3RoID4gNzkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdrZXl3b3JkIGxlbmd0aCBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNzknKTtcbiAgICB9XG59XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udHJvbC1yZWdleFxuY29uc3QgbGF0aW4xUmVnZXggPSAvXltcXHUwMDAwLVxcdTAwRkZdKiQvO1xuZnVuY3Rpb24gdmFsaWRhdGVMYXRpbjEodGV4dCkge1xuICAgIGlmICghbGF0aW4xUmVnZXgudGVzdCh0ZXh0KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgbGF0aW4xIHRleHQnKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZGVjb2RldEVYdCh0ZXh0LCBidWZmZXIsIGxlbmd0aCkge1xuICAgIGNvbnN0IGtleXdvcmQgPSByZWFkS2V5d29yZChidWZmZXIpO1xuICAgIHRleHRba2V5d29yZF0gPSByZWFkTGF0aW4xKGJ1ZmZlciwgbGVuZ3RoIC0ga2V5d29yZC5sZW5ndGggLSAxKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGV0RVh0KGJ1ZmZlciwga2V5d29yZCwgdGV4dCkge1xuICAgIHZhbGlkYXRlS2V5d29yZChrZXl3b3JkKTtcbiAgICB2YWxpZGF0ZUxhdGluMSh0ZXh0KTtcbiAgICBjb25zdCBsZW5ndGggPSBrZXl3b3JkLmxlbmd0aCArIDEgLyogTlVMTCAqLyArIHRleHQubGVuZ3RoO1xuICAgIGJ1ZmZlci53cml0ZVVpbnQzMihsZW5ndGgpO1xuICAgIGJ1ZmZlci53cml0ZUNoYXJzKHRleHRDaHVua05hbWUpO1xuICAgIGJ1ZmZlci53cml0ZUNoYXJzKGtleXdvcmQpO1xuICAgIGJ1ZmZlci53cml0ZUJ5dGUoTlVMTCk7XG4gICAgYnVmZmVyLndyaXRlQ2hhcnModGV4dCk7XG4gICAgd3JpdGVDcmMoYnVmZmVyLCBsZW5ndGggKyA0KTtcbn1cbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9wbmcvIzExa2V5d29yZHNcbmV4cG9ydCBmdW5jdGlvbiByZWFkS2V5d29yZChidWZmZXIpIHtcbiAgICBidWZmZXIubWFyaygpO1xuICAgIHdoaWxlIChidWZmZXIucmVhZEJ5dGUoKSAhPT0gTlVMTCkge1xuICAgICAgICAvKiBhZHZhbmNlICovXG4gICAgfVxuICAgIGNvbnN0IGVuZCA9IGJ1ZmZlci5vZmZzZXQ7XG4gICAgYnVmZmVyLnJlc2V0KCk7XG4gICAgY29uc3Qga2V5d29yZCA9IGxhdGluMURlY29kZXIuZGVjb2RlKGJ1ZmZlci5yZWFkQnl0ZXMoZW5kIC0gYnVmZmVyLm9mZnNldCAtIDEpKTtcbiAgICAvLyBOVUxMXG4gICAgYnVmZmVyLnNraXAoMSk7XG4gICAgdmFsaWRhdGVLZXl3b3JkKGtleXdvcmQpO1xuICAgIHJldHVybiBrZXl3b3JkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRMYXRpbjEoYnVmZmVyLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gbGF0aW4xRGVjb2Rlci5kZWNvZGUoYnVmZmVyLnJlYWRCeXRlcyhsZW5ndGgpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRleHQuanMubWFwIl0sIm5hbWVzIjpbIndyaXRlQ3JjIiwidGV4dENodW5rTmFtZSIsIk5VTEwiLCJsYXRpbjFEZWNvZGVyIiwiVGV4dERlY29kZXIiLCJ2YWxpZGF0ZUtleXdvcmQiLCJrZXl3b3JkIiwidmFsaWRhdGVMYXRpbjEiLCJsZW5ndGgiLCJFcnJvciIsImxhdGluMVJlZ2V4IiwidGV4dCIsInRlc3QiLCJkZWNvZGV0RVh0IiwiYnVmZmVyIiwicmVhZEtleXdvcmQiLCJyZWFkTGF0aW4xIiwiZW5jb2RldEVYdCIsIndyaXRlVWludDMyIiwid3JpdGVDaGFycyIsIndyaXRlQnl0ZSIsIm1hcmsiLCJyZWFkQnl0ZSIsImVuZCIsIm9mZnNldCIsInJlc2V0IiwiZGVjb2RlIiwicmVhZEJ5dGVzIiwic2tpcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fast-png/lib-esm/helpers/text.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/fast-png/lib-esm/helpers/unfilter.js":
/*!***********************************************************!*\
  !*** ./node_modules/fast-png/lib-esm/helpers/unfilter.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   unfilterAverage: () => (/* binding */ unfilterAverage),\n/* harmony export */   unfilterNone: () => (/* binding */ unfilterNone),\n/* harmony export */   unfilterPaeth: () => (/* binding */ unfilterPaeth),\n/* harmony export */   unfilterSub: () => (/* binding */ unfilterSub),\n/* harmony export */   unfilterUp: () => (/* binding */ unfilterUp)\n/* harmony export */ });\nfunction unfilterNone(currentLine, newLine, bytesPerLine) {\n    for(let i = 0; i < bytesPerLine; i++){\n        newLine[i] = currentLine[i];\n    }\n}\nfunction unfilterSub(currentLine, newLine, bytesPerLine, bytesPerPixel) {\n    let i = 0;\n    for(; i < bytesPerPixel; i++){\n        // just copy first bytes\n        newLine[i] = currentLine[i];\n    }\n    for(; i < bytesPerLine; i++){\n        newLine[i] = currentLine[i] + newLine[i - bytesPerPixel] & 0xff;\n    }\n}\nfunction unfilterUp(currentLine, newLine, prevLine, bytesPerLine) {\n    let i = 0;\n    if (prevLine.length === 0) {\n        // just copy bytes for first line\n        for(; i < bytesPerLine; i++){\n            newLine[i] = currentLine[i];\n        }\n    } else {\n        for(; i < bytesPerLine; i++){\n            newLine[i] = currentLine[i] + prevLine[i] & 0xff;\n        }\n    }\n}\nfunction unfilterAverage(currentLine, newLine, prevLine, bytesPerLine, bytesPerPixel) {\n    let i = 0;\n    if (prevLine.length === 0) {\n        for(; i < bytesPerPixel; i++){\n            newLine[i] = currentLine[i];\n        }\n        for(; i < bytesPerLine; i++){\n            newLine[i] = currentLine[i] + (newLine[i - bytesPerPixel] >> 1) & 0xff;\n        }\n    } else {\n        for(; i < bytesPerPixel; i++){\n            newLine[i] = currentLine[i] + (prevLine[i] >> 1) & 0xff;\n        }\n        for(; i < bytesPerLine; i++){\n            newLine[i] = currentLine[i] + (newLine[i - bytesPerPixel] + prevLine[i] >> 1) & 0xff;\n        }\n    }\n}\nfunction unfilterPaeth(currentLine, newLine, prevLine, bytesPerLine, bytesPerPixel) {\n    let i = 0;\n    if (prevLine.length === 0) {\n        for(; i < bytesPerPixel; i++){\n            newLine[i] = currentLine[i];\n        }\n        for(; i < bytesPerLine; i++){\n            newLine[i] = currentLine[i] + newLine[i - bytesPerPixel] & 0xff;\n        }\n    } else {\n        for(; i < bytesPerPixel; i++){\n            newLine[i] = currentLine[i] + prevLine[i] & 0xff;\n        }\n        for(; i < bytesPerLine; i++){\n            newLine[i] = currentLine[i] + paethPredictor(newLine[i - bytesPerPixel], prevLine[i], prevLine[i - bytesPerPixel]) & 0xff;\n        }\n    }\n}\nfunction paethPredictor(a, b, c) {\n    const p = a + b - c;\n    const pa = Math.abs(p - a);\n    const pb = Math.abs(p - b);\n    const pc = Math.abs(p - c);\n    if (pa <= pb && pa <= pc) return a;\n    else if (pb <= pc) return b;\n    else return c;\n} //# sourceMappingURL=unfilter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZmFzdC1wbmcvbGliLWVzbS9oZWxwZXJzL3VuZmlsdGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQU8sU0FBU0EsYUFBYUMsV0FBVyxFQUFFQyxPQUFPLEVBQUVDLFlBQVk7SUFDM0QsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlELGNBQWNDLElBQUs7UUFDbkNGLE9BQU8sQ0FBQ0UsRUFBRSxHQUFHSCxXQUFXLENBQUNHLEVBQUU7SUFDL0I7QUFDSjtBQUNPLFNBQVNDLFlBQVlKLFdBQVcsRUFBRUMsT0FBTyxFQUFFQyxZQUFZLEVBQUVHLGFBQWE7SUFDekUsSUFBSUYsSUFBSTtJQUNSLE1BQU9BLElBQUlFLGVBQWVGLElBQUs7UUFDM0Isd0JBQXdCO1FBQ3hCRixPQUFPLENBQUNFLEVBQUUsR0FBR0gsV0FBVyxDQUFDRyxFQUFFO0lBQy9CO0lBQ0EsTUFBT0EsSUFBSUQsY0FBY0MsSUFBSztRQUMxQkYsT0FBTyxDQUFDRSxFQUFFLEdBQUcsV0FBWSxDQUFDQSxFQUFFLEdBQUdGLE9BQU8sQ0FBQ0UsSUFBSUUsY0FBYyxHQUFJO0lBQ2pFO0FBQ0o7QUFDTyxTQUFTQyxXQUFXTixXQUFXLEVBQUVDLE9BQU8sRUFBRU0sUUFBUSxFQUFFTCxZQUFZO0lBQ25FLElBQUlDLElBQUk7SUFDUixJQUFJSSxTQUFTQyxNQUFNLEtBQUssR0FBRztRQUN2QixpQ0FBaUM7UUFDakMsTUFBT0wsSUFBSUQsY0FBY0MsSUFBSztZQUMxQkYsT0FBTyxDQUFDRSxFQUFFLEdBQUdILFdBQVcsQ0FBQ0csRUFBRTtRQUMvQjtJQUNKLE9BQ0s7UUFDRCxNQUFPQSxJQUFJRCxjQUFjQyxJQUFLO1lBQzFCRixPQUFPLENBQUNFLEVBQUUsR0FBRyxXQUFZLENBQUNBLEVBQUUsR0FBR0ksUUFBUSxDQUFDSixFQUFFLEdBQUk7UUFDbEQ7SUFDSjtBQUNKO0FBQ08sU0FBU00sZ0JBQWdCVCxXQUFXLEVBQUVDLE9BQU8sRUFBRU0sUUFBUSxFQUFFTCxZQUFZLEVBQUVHLGFBQWE7SUFDdkYsSUFBSUYsSUFBSTtJQUNSLElBQUlJLFNBQVNDLE1BQU0sS0FBSyxHQUFHO1FBQ3ZCLE1BQU9MLElBQUlFLGVBQWVGLElBQUs7WUFDM0JGLE9BQU8sQ0FBQ0UsRUFBRSxHQUFHSCxXQUFXLENBQUNHLEVBQUU7UUFDL0I7UUFDQSxNQUFPQSxJQUFJRCxjQUFjQyxJQUFLO1lBQzFCRixPQUFPLENBQUNFLEVBQUUsR0FBRyxXQUFZLENBQUNBLEVBQUUsR0FBSUYsQ0FBQUEsT0FBTyxDQUFDRSxJQUFJRSxjQUFjLElBQUksS0FBTTtRQUN4RTtJQUNKLE9BQ0s7UUFDRCxNQUFPRixJQUFJRSxlQUFlRixJQUFLO1lBQzNCRixPQUFPLENBQUNFLEVBQUUsR0FBRyxXQUFZLENBQUNBLEVBQUUsR0FBSUksQ0FBQUEsUUFBUSxDQUFDSixFQUFFLElBQUksS0FBTTtRQUN6RDtRQUNBLE1BQU9BLElBQUlELGNBQWNDLElBQUs7WUFDMUJGLE9BQU8sQ0FBQ0UsRUFBRSxHQUNOLFdBQVksQ0FBQ0EsRUFBRSxHQUFJLFFBQVEsQ0FBQ0EsSUFBSUUsY0FBYyxHQUFHRSxRQUFRLENBQUNKLEVBQUUsSUFBSyxLQUM3RDtRQUNaO0lBQ0o7QUFDSjtBQUNPLFNBQVNPLGNBQWNWLFdBQVcsRUFBRUMsT0FBTyxFQUFFTSxRQUFRLEVBQUVMLFlBQVksRUFBRUcsYUFBYTtJQUNyRixJQUFJRixJQUFJO0lBQ1IsSUFBSUksU0FBU0MsTUFBTSxLQUFLLEdBQUc7UUFDdkIsTUFBT0wsSUFBSUUsZUFBZUYsSUFBSztZQUMzQkYsT0FBTyxDQUFDRSxFQUFFLEdBQUdILFdBQVcsQ0FBQ0csRUFBRTtRQUMvQjtRQUNBLE1BQU9BLElBQUlELGNBQWNDLElBQUs7WUFDMUJGLE9BQU8sQ0FBQ0UsRUFBRSxHQUFHLFdBQVksQ0FBQ0EsRUFBRSxHQUFHRixPQUFPLENBQUNFLElBQUlFLGNBQWMsR0FBSTtRQUNqRTtJQUNKLE9BQ0s7UUFDRCxNQUFPRixJQUFJRSxlQUFlRixJQUFLO1lBQzNCRixPQUFPLENBQUNFLEVBQUUsR0FBRyxXQUFZLENBQUNBLEVBQUUsR0FBR0ksUUFBUSxDQUFDSixFQUFFLEdBQUk7UUFDbEQ7UUFDQSxNQUFPQSxJQUFJRCxjQUFjQyxJQUFLO1lBQzFCRixPQUFPLENBQUNFLEVBQUUsR0FDTixXQUFZLENBQUNBLEVBQUUsR0FDWFEsZUFBZVYsT0FBTyxDQUFDRSxJQUFJRSxjQUFjLEVBQUVFLFFBQVEsQ0FBQ0osRUFBRSxFQUFFSSxRQUFRLENBQUNKLElBQUlFLGNBQWMsSUFDbkY7UUFDWjtJQUNKO0FBQ0o7QUFDQSxTQUFTTSxlQUFlQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQztJQUMzQixNQUFNQyxJQUFJSCxJQUFJQyxJQUFJQztJQUNsQixNQUFNRSxLQUFLQyxLQUFLQyxHQUFHLENBQUNILElBQUlIO0lBQ3hCLE1BQU1PLEtBQUtGLEtBQUtDLEdBQUcsQ0FBQ0gsSUFBSUY7SUFDeEIsTUFBTU8sS0FBS0gsS0FBS0MsR0FBRyxDQUFDSCxJQUFJRDtJQUN4QixJQUFJRSxNQUFNRyxNQUFNSCxNQUFNSSxJQUNsQixPQUFPUjtTQUNOLElBQUlPLE1BQU1DLElBQ1gsT0FBT1A7U0FFUCxPQUFPQztBQUNmLEVBQ0Esb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF4aS12c2wtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2Zhc3QtcG5nL2xpYi1lc20vaGVscGVycy91bmZpbHRlci5qcz8zMmYyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiB1bmZpbHRlck5vbmUoY3VycmVudExpbmUsIG5ld0xpbmUsIGJ5dGVzUGVyTGluZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXNQZXJMaW5lOyBpKyspIHtcbiAgICAgICAgbmV3TGluZVtpXSA9IGN1cnJlbnRMaW5lW2ldO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiB1bmZpbHRlclN1YihjdXJyZW50TGluZSwgbmV3TGluZSwgYnl0ZXNQZXJMaW5lLCBieXRlc1BlclBpeGVsKSB7XG4gICAgbGV0IGkgPSAwO1xuICAgIGZvciAoOyBpIDwgYnl0ZXNQZXJQaXhlbDsgaSsrKSB7XG4gICAgICAgIC8vIGp1c3QgY29weSBmaXJzdCBieXRlc1xuICAgICAgICBuZXdMaW5lW2ldID0gY3VycmVudExpbmVbaV07XG4gICAgfVxuICAgIGZvciAoOyBpIDwgYnl0ZXNQZXJMaW5lOyBpKyspIHtcbiAgICAgICAgbmV3TGluZVtpXSA9IChjdXJyZW50TGluZVtpXSArIG5ld0xpbmVbaSAtIGJ5dGVzUGVyUGl4ZWxdKSAmIDB4ZmY7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHVuZmlsdGVyVXAoY3VycmVudExpbmUsIG5ld0xpbmUsIHByZXZMaW5lLCBieXRlc1BlckxpbmUpIHtcbiAgICBsZXQgaSA9IDA7XG4gICAgaWYgKHByZXZMaW5lLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAvLyBqdXN0IGNvcHkgYnl0ZXMgZm9yIGZpcnN0IGxpbmVcbiAgICAgICAgZm9yICg7IGkgPCBieXRlc1BlckxpbmU7IGkrKykge1xuICAgICAgICAgICAgbmV3TGluZVtpXSA9IGN1cnJlbnRMaW5lW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmb3IgKDsgaSA8IGJ5dGVzUGVyTGluZTsgaSsrKSB7XG4gICAgICAgICAgICBuZXdMaW5lW2ldID0gKGN1cnJlbnRMaW5lW2ldICsgcHJldkxpbmVbaV0pICYgMHhmZjtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiB1bmZpbHRlckF2ZXJhZ2UoY3VycmVudExpbmUsIG5ld0xpbmUsIHByZXZMaW5lLCBieXRlc1BlckxpbmUsIGJ5dGVzUGVyUGl4ZWwpIHtcbiAgICBsZXQgaSA9IDA7XG4gICAgaWYgKHByZXZMaW5lLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBmb3IgKDsgaSA8IGJ5dGVzUGVyUGl4ZWw7IGkrKykge1xuICAgICAgICAgICAgbmV3TGluZVtpXSA9IGN1cnJlbnRMaW5lW2ldO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoOyBpIDwgYnl0ZXNQZXJMaW5lOyBpKyspIHtcbiAgICAgICAgICAgIG5ld0xpbmVbaV0gPSAoY3VycmVudExpbmVbaV0gKyAobmV3TGluZVtpIC0gYnl0ZXNQZXJQaXhlbF0gPj4gMSkpICYgMHhmZjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZm9yICg7IGkgPCBieXRlc1BlclBpeGVsOyBpKyspIHtcbiAgICAgICAgICAgIG5ld0xpbmVbaV0gPSAoY3VycmVudExpbmVbaV0gKyAocHJldkxpbmVbaV0gPj4gMSkpICYgMHhmZjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKDsgaSA8IGJ5dGVzUGVyTGluZTsgaSsrKSB7XG4gICAgICAgICAgICBuZXdMaW5lW2ldID1cbiAgICAgICAgICAgICAgICAoY3VycmVudExpbmVbaV0gKyAoKG5ld0xpbmVbaSAtIGJ5dGVzUGVyUGl4ZWxdICsgcHJldkxpbmVbaV0pID4+IDEpKSAmXG4gICAgICAgICAgICAgICAgICAgIDB4ZmY7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gdW5maWx0ZXJQYWV0aChjdXJyZW50TGluZSwgbmV3TGluZSwgcHJldkxpbmUsIGJ5dGVzUGVyTGluZSwgYnl0ZXNQZXJQaXhlbCkge1xuICAgIGxldCBpID0gMDtcbiAgICBpZiAocHJldkxpbmUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGZvciAoOyBpIDwgYnl0ZXNQZXJQaXhlbDsgaSsrKSB7XG4gICAgICAgICAgICBuZXdMaW5lW2ldID0gY3VycmVudExpbmVbaV07XG4gICAgICAgIH1cbiAgICAgICAgZm9yICg7IGkgPCBieXRlc1BlckxpbmU7IGkrKykge1xuICAgICAgICAgICAgbmV3TGluZVtpXSA9IChjdXJyZW50TGluZVtpXSArIG5ld0xpbmVbaSAtIGJ5dGVzUGVyUGl4ZWxdKSAmIDB4ZmY7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGZvciAoOyBpIDwgYnl0ZXNQZXJQaXhlbDsgaSsrKSB7XG4gICAgICAgICAgICBuZXdMaW5lW2ldID0gKGN1cnJlbnRMaW5lW2ldICsgcHJldkxpbmVbaV0pICYgMHhmZjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKDsgaSA8IGJ5dGVzUGVyTGluZTsgaSsrKSB7XG4gICAgICAgICAgICBuZXdMaW5lW2ldID1cbiAgICAgICAgICAgICAgICAoY3VycmVudExpbmVbaV0gK1xuICAgICAgICAgICAgICAgICAgICBwYWV0aFByZWRpY3RvcihuZXdMaW5lW2kgLSBieXRlc1BlclBpeGVsXSwgcHJldkxpbmVbaV0sIHByZXZMaW5lW2kgLSBieXRlc1BlclBpeGVsXSkpICZcbiAgICAgICAgICAgICAgICAgICAgMHhmZjtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHBhZXRoUHJlZGljdG9yKGEsIGIsIGMpIHtcbiAgICBjb25zdCBwID0gYSArIGIgLSBjO1xuICAgIGNvbnN0IHBhID0gTWF0aC5hYnMocCAtIGEpO1xuICAgIGNvbnN0IHBiID0gTWF0aC5hYnMocCAtIGIpO1xuICAgIGNvbnN0IHBjID0gTWF0aC5hYnMocCAtIGMpO1xuICAgIGlmIChwYSA8PSBwYiAmJiBwYSA8PSBwYylcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgZWxzZSBpZiAocGIgPD0gcGMpXG4gICAgICAgIHJldHVybiBiO1xuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIGM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11bmZpbHRlci5qcy5tYXAiXSwibmFtZXMiOlsidW5maWx0ZXJOb25lIiwiY3VycmVudExpbmUiLCJuZXdMaW5lIiwiYnl0ZXNQZXJMaW5lIiwiaSIsInVuZmlsdGVyU3ViIiwiYnl0ZXNQZXJQaXhlbCIsInVuZmlsdGVyVXAiLCJwcmV2TGluZSIsImxlbmd0aCIsInVuZmlsdGVyQXZlcmFnZSIsInVuZmlsdGVyUGFldGgiLCJwYWV0aFByZWRpY3RvciIsImEiLCJiIiwiYyIsInAiLCJwYSIsIk1hdGgiLCJhYnMiLCJwYiIsInBjIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fast-png/lib-esm/helpers/unfilter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/fast-png/lib-esm/index.js":
/*!************************************************!*\
  !*** ./node_modules/fast-png/lib-esm/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ResolutionUnitSpecifier: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_3__.ResolutionUnitSpecifier),\n/* harmony export */   convertIndexedToRgb: () => (/* reexport safe */ _convertIndexedToRgb__WEBPACK_IMPORTED_MODULE_4__.convertIndexedToRgb),\n/* harmony export */   decode: () => (/* binding */ decodePng),\n/* harmony export */   decodeApng: () => (/* binding */ decodeApng),\n/* harmony export */   encode: () => (/* binding */ encodePng),\n/* harmony export */   hasPngSignature: () => (/* reexport safe */ _helpers_signature__WEBPACK_IMPORTED_MODULE_2__.hasPngSignature)\n/* harmony export */ });\n/* harmony import */ var _PngDecoder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PngDecoder */ \"(ssr)/./node_modules/fast-png/lib-esm/PngDecoder.js\");\n/* harmony import */ var _PngEncoder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PngEncoder */ \"(ssr)/./node_modules/fast-png/lib-esm/PngEncoder.js\");\n/* harmony import */ var _helpers_signature__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/signature */ \"(ssr)/./node_modules/fast-png/lib-esm/helpers/signature.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/fast-png/lib-esm/types.js\");\n/* harmony import */ var _convertIndexedToRgb__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./convertIndexedToRgb */ \"(ssr)/./node_modules/fast-png/lib-esm/convertIndexedToRgb.js\");\n\n\n\n\nfunction decodePng(data, options) {\n    const decoder = new _PngDecoder__WEBPACK_IMPORTED_MODULE_0__[\"default\"](data, options);\n    return decoder.decode();\n}\nfunction encodePng(png, options) {\n    const encoder = new _PngEncoder__WEBPACK_IMPORTED_MODULE_1__[\"default\"](png, options);\n    return encoder.encode();\n}\nfunction decodeApng(data, options) {\n    const decoder = new _PngDecoder__WEBPACK_IMPORTED_MODULE_0__[\"default\"](data, options);\n    return decoder.decodeApng();\n}\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZmFzdC1wbmcvbGliLWVzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFzQztBQUNBO0FBQ2dCO0FBQzlCO0FBQ3hCLFNBQVNHLFVBQVVDLElBQUksRUFBRUMsT0FBTztJQUM1QixNQUFNQyxVQUFVLElBQUlOLG1EQUFVQSxDQUFDSSxNQUFNQztJQUNyQyxPQUFPQyxRQUFRQyxNQUFNO0FBQ3pCO0FBQ0EsU0FBU0MsVUFBVUMsR0FBRyxFQUFFSixPQUFPO0lBQzNCLE1BQU1LLFVBQVUsSUFBSVQsbURBQVVBLENBQUNRLEtBQUtKO0lBQ3BDLE9BQU9LLFFBQVFDLE1BQU07QUFDekI7QUFDQSxTQUFTQyxXQUFXUixJQUFJLEVBQUVDLE9BQU87SUFDN0IsTUFBTUMsVUFBVSxJQUFJTixtREFBVUEsQ0FBQ0ksTUFBTUM7SUFDckMsT0FBT0MsUUFBUU0sVUFBVTtBQUM3QjtBQUNnRTtBQUNKLENBQzVELGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RheGktdnNsLW5leHRqcy8uL25vZGVfbW9kdWxlcy9mYXN0LXBuZy9saWItZXNtL2luZGV4LmpzPzRhZjIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFBuZ0RlY29kZXIgZnJvbSAnLi9QbmdEZWNvZGVyJztcbmltcG9ydCBQbmdFbmNvZGVyIGZyb20gJy4vUG5nRW5jb2Rlcic7XG5leHBvcnQgeyBoYXNQbmdTaWduYXR1cmUgfSBmcm9tICcuL2hlbHBlcnMvc2lnbmF0dXJlJztcbmV4cG9ydCAqIGZyb20gJy4vdHlwZXMnO1xuZnVuY3Rpb24gZGVjb2RlUG5nKGRhdGEsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBkZWNvZGVyID0gbmV3IFBuZ0RlY29kZXIoZGF0YSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIGRlY29kZXIuZGVjb2RlKCk7XG59XG5mdW5jdGlvbiBlbmNvZGVQbmcocG5nLCBvcHRpb25zKSB7XG4gICAgY29uc3QgZW5jb2RlciA9IG5ldyBQbmdFbmNvZGVyKHBuZywgb3B0aW9ucyk7XG4gICAgcmV0dXJuIGVuY29kZXIuZW5jb2RlKCk7XG59XG5mdW5jdGlvbiBkZWNvZGVBcG5nKGRhdGEsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBkZWNvZGVyID0gbmV3IFBuZ0RlY29kZXIoZGF0YSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIGRlY29kZXIuZGVjb2RlQXBuZygpO1xufVxuZXhwb3J0IHsgZGVjb2RlUG5nIGFzIGRlY29kZSwgZW5jb2RlUG5nIGFzIGVuY29kZSwgZGVjb2RlQXBuZyB9O1xuZXhwb3J0IHsgY29udmVydEluZGV4ZWRUb1JnYiB9IGZyb20gJy4vY29udmVydEluZGV4ZWRUb1JnYic7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiUG5nRGVjb2RlciIsIlBuZ0VuY29kZXIiLCJoYXNQbmdTaWduYXR1cmUiLCJkZWNvZGVQbmciLCJkYXRhIiwib3B0aW9ucyIsImRlY29kZXIiLCJkZWNvZGUiLCJlbmNvZGVQbmciLCJwbmciLCJlbmNvZGVyIiwiZW5jb2RlIiwiZGVjb2RlQXBuZyIsImNvbnZlcnRJbmRleGVkVG9SZ2IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fast-png/lib-esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/fast-png/lib-esm/internalTypes.js":
/*!********************************************************!*\
  !*** ./node_modules/fast-png/lib-esm/internalTypes.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlendOpType: () => (/* binding */ BlendOpType),\n/* harmony export */   ColorType: () => (/* binding */ ColorType),\n/* harmony export */   CompressionMethod: () => (/* binding */ CompressionMethod),\n/* harmony export */   DisposeOpType: () => (/* binding */ DisposeOpType),\n/* harmony export */   FilterMethod: () => (/* binding */ FilterMethod),\n/* harmony export */   InterlaceMethod: () => (/* binding */ InterlaceMethod)\n/* harmony export */ });\nconst ColorType = {\n    UNKNOWN: -1,\n    GREYSCALE: 0,\n    TRUECOLOUR: 2,\n    INDEXED_COLOUR: 3,\n    GREYSCALE_ALPHA: 4,\n    TRUECOLOUR_ALPHA: 6\n};\nconst CompressionMethod = {\n    UNKNOWN: -1,\n    DEFLATE: 0\n};\nconst FilterMethod = {\n    UNKNOWN: -1,\n    ADAPTIVE: 0\n};\nconst InterlaceMethod = {\n    UNKNOWN: -1,\n    NO_INTERLACE: 0,\n    ADAM7: 1\n};\nconst DisposeOpType = {\n    NONE: 0,\n    BACKGROUND: 1,\n    PREVIOUS: 2\n};\nconst BlendOpType = {\n    SOURCE: 0,\n    OVER: 1\n}; //# sourceMappingURL=internalTypes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZmFzdC1wbmcvbGliLWVzbS9pbnRlcm5hbFR5cGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFPLE1BQU1BLFlBQVk7SUFDckJDLFNBQVMsQ0FBQztJQUNWQyxXQUFXO0lBQ1hDLFlBQVk7SUFDWkMsZ0JBQWdCO0lBQ2hCQyxpQkFBaUI7SUFDakJDLGtCQUFrQjtBQUN0QixFQUFFO0FBQ0ssTUFBTUMsb0JBQW9CO0lBQzdCTixTQUFTLENBQUM7SUFDVk8sU0FBUztBQUNiLEVBQUU7QUFDSyxNQUFNQyxlQUFlO0lBQ3hCUixTQUFTLENBQUM7SUFDVlMsVUFBVTtBQUNkLEVBQUU7QUFDSyxNQUFNQyxrQkFBa0I7SUFDM0JWLFNBQVMsQ0FBQztJQUNWVyxjQUFjO0lBQ2RDLE9BQU87QUFDWCxFQUFFO0FBQ0ssTUFBTUMsZ0JBQWdCO0lBQ3pCQyxNQUFNO0lBQ05DLFlBQVk7SUFDWkMsVUFBVTtBQUNkLEVBQUU7QUFDSyxNQUFNQyxjQUFjO0lBQ3ZCQyxRQUFRO0lBQ1JDLE1BQU07QUFDVixFQUFFLENBQ0YseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF4aS12c2wtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2Zhc3QtcG5nL2xpYi1lc20vaW50ZXJuYWxUeXBlcy5qcz9jMTNhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBDb2xvclR5cGUgPSB7XG4gICAgVU5LTk9XTjogLTEsXG4gICAgR1JFWVNDQUxFOiAwLFxuICAgIFRSVUVDT0xPVVI6IDIsXG4gICAgSU5ERVhFRF9DT0xPVVI6IDMsXG4gICAgR1JFWVNDQUxFX0FMUEhBOiA0LFxuICAgIFRSVUVDT0xPVVJfQUxQSEE6IDYsXG59O1xuZXhwb3J0IGNvbnN0IENvbXByZXNzaW9uTWV0aG9kID0ge1xuICAgIFVOS05PV046IC0xLFxuICAgIERFRkxBVEU6IDAsXG59O1xuZXhwb3J0IGNvbnN0IEZpbHRlck1ldGhvZCA9IHtcbiAgICBVTktOT1dOOiAtMSxcbiAgICBBREFQVElWRTogMCxcbn07XG5leHBvcnQgY29uc3QgSW50ZXJsYWNlTWV0aG9kID0ge1xuICAgIFVOS05PV046IC0xLFxuICAgIE5PX0lOVEVSTEFDRTogMCxcbiAgICBBREFNNzogMSxcbn07XG5leHBvcnQgY29uc3QgRGlzcG9zZU9wVHlwZSA9IHtcbiAgICBOT05FOiAwLFxuICAgIEJBQ0tHUk9VTkQ6IDEsXG4gICAgUFJFVklPVVM6IDIsXG59O1xuZXhwb3J0IGNvbnN0IEJsZW5kT3BUeXBlID0ge1xuICAgIFNPVVJDRTogMCxcbiAgICBPVkVSOiAxLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVybmFsVHlwZXMuanMubWFwIl0sIm5hbWVzIjpbIkNvbG9yVHlwZSIsIlVOS05PV04iLCJHUkVZU0NBTEUiLCJUUlVFQ09MT1VSIiwiSU5ERVhFRF9DT0xPVVIiLCJHUkVZU0NBTEVfQUxQSEEiLCJUUlVFQ09MT1VSX0FMUEhBIiwiQ29tcHJlc3Npb25NZXRob2QiLCJERUZMQVRFIiwiRmlsdGVyTWV0aG9kIiwiQURBUFRJVkUiLCJJbnRlcmxhY2VNZXRob2QiLCJOT19JTlRFUkxBQ0UiLCJBREFNNyIsIkRpc3Bvc2VPcFR5cGUiLCJOT05FIiwiQkFDS0dST1VORCIsIlBSRVZJT1VTIiwiQmxlbmRPcFR5cGUiLCJTT1VSQ0UiLCJPVkVSIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fast-png/lib-esm/internalTypes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/fast-png/lib-esm/types.js":
/*!************************************************!*\
  !*** ./node_modules/fast-png/lib-esm/types.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ResolutionUnitSpecifier: () => (/* binding */ ResolutionUnitSpecifier)\n/* harmony export */ });\nvar ResolutionUnitSpecifier;\n(function(ResolutionUnitSpecifier) {\n    /**\n     * Unit is unknown\n     */ ResolutionUnitSpecifier[ResolutionUnitSpecifier[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    /**\n     * Unit is the metre\n     */ ResolutionUnitSpecifier[ResolutionUnitSpecifier[\"METRE\"] = 1] = \"METRE\";\n})(ResolutionUnitSpecifier || (ResolutionUnitSpecifier = {})); //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZmFzdC1wbmcvbGliLWVzbS90eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sSUFBSUEsd0JBQXdCO0FBQ2xDLFVBQVVBLHVCQUF1QjtJQUM5Qjs7S0FFQyxHQUNEQSx1QkFBdUIsQ0FBQ0EsdUJBQXVCLENBQUMsVUFBVSxHQUFHLEVBQUUsR0FBRztJQUNsRTs7S0FFQyxHQUNEQSx1QkFBdUIsQ0FBQ0EsdUJBQXVCLENBQUMsUUFBUSxHQUFHLEVBQUUsR0FBRztBQUNwRSxHQUFHQSwyQkFBNEJBLENBQUFBLDBCQUEwQixDQUFDLEtBQzFELGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RheGktdnNsLW5leHRqcy8uL25vZGVfbW9kdWxlcy9mYXN0LXBuZy9saWItZXNtL3R5cGVzLmpzP2U1YTUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBSZXNvbHV0aW9uVW5pdFNwZWNpZmllcjtcbihmdW5jdGlvbiAoUmVzb2x1dGlvblVuaXRTcGVjaWZpZXIpIHtcbiAgICAvKipcbiAgICAgKiBVbml0IGlzIHVua25vd25cbiAgICAgKi9cbiAgICBSZXNvbHV0aW9uVW5pdFNwZWNpZmllcltSZXNvbHV0aW9uVW5pdFNwZWNpZmllcltcIlVOS05PV05cIl0gPSAwXSA9IFwiVU5LTk9XTlwiO1xuICAgIC8qKlxuICAgICAqIFVuaXQgaXMgdGhlIG1ldHJlXG4gICAgICovXG4gICAgUmVzb2x1dGlvblVuaXRTcGVjaWZpZXJbUmVzb2x1dGlvblVuaXRTcGVjaWZpZXJbXCJNRVRSRVwiXSA9IDFdID0gXCJNRVRSRVwiO1xufSkoUmVzb2x1dGlvblVuaXRTcGVjaWZpZXIgfHwgKFJlc29sdXRpb25Vbml0U3BlY2lmaWVyID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6WyJSZXNvbHV0aW9uVW5pdFNwZWNpZmllciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fast-png/lib-esm/types.js\n");

/***/ })

};
;