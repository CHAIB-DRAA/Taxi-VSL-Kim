/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./node_modules/leaflet.markercluster/dist/leaflet.markercluster-src.js":
/*!******************************************************************************!*\
  !*** ./node_modules/leaflet.markercluster/dist/leaflet.markercluster-src.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/*\n * Leaflet.markercluster 1.5.3+master.e5124b2,\n * Provides Beautiful Animated Marker Clustering functionality for Leaflet, a JS library for interactive maps.\n * https://github.com/Leaflet/Leaflet.markercluster\n * (c) 2012-2017, Dave Leaver, smartrak\n */ (function(global, factory) {\n     true ? factory(exports) : 0;\n})(this, function(exports1) {\n    \"use strict\";\n    /*\n\t * L.MarkerClusterGroup extends L.FeatureGroup by clustering the markers contained within\n\t */ var MarkerClusterGroup = L.MarkerClusterGroup = L.FeatureGroup.extend({\n        options: {\n            maxClusterRadius: 80,\n            iconCreateFunction: null,\n            clusterPane: L.Marker.prototype.options.pane,\n            spiderfyOnEveryZoom: false,\n            spiderfyOnMaxZoom: true,\n            showCoverageOnHover: true,\n            zoomToBoundsOnClick: true,\n            singleMarkerMode: false,\n            disableClusteringAtZoom: null,\n            // Setting this to false prevents the removal of any clusters outside of the viewpoint, which\n            // is the default behaviour for performance reasons.\n            removeOutsideVisibleBounds: true,\n            // Set to false to disable all animations (zoom and spiderfy).\n            // If false, option animateAddingMarkers below has no effect.\n            // If L.DomUtil.TRANSITION is falsy, this option has no effect.\n            animate: true,\n            //Whether to animate adding markers after adding the MarkerClusterGroup to the map\n            // If you are adding individual markers set to true, if adding bulk markers leave false for massive performance gains.\n            animateAddingMarkers: false,\n            // Make it possible to provide custom function to calculate spiderfy shape positions\n            spiderfyShapePositions: null,\n            //Increase to increase the distance away that spiderfied markers appear from the center\n            spiderfyDistanceMultiplier: 1,\n            // Make it possible to specify a polyline options on a spider leg\n            spiderLegPolylineOptions: {\n                weight: 1.5,\n                color: \"#222\",\n                opacity: 0.5\n            },\n            // When bulk adding layers, adds markers in chunks. Means addLayers may not add all the layers in the call, others will be loaded during setTimeouts\n            chunkedLoading: false,\n            chunkInterval: 200,\n            chunkDelay: 50,\n            chunkProgress: null,\n            //Options to pass to the L.Polygon constructor\n            polygonOptions: {}\n        },\n        initialize: function(options) {\n            L.Util.setOptions(this, options);\n            if (!this.options.iconCreateFunction) {\n                this.options.iconCreateFunction = this._defaultIconCreateFunction;\n            }\n            this._featureGroup = L.featureGroup();\n            this._featureGroup.addEventParent(this);\n            this._nonPointGroup = L.featureGroup();\n            this._nonPointGroup.addEventParent(this);\n            this._inZoomAnimation = 0;\n            this._needsClustering = [];\n            this._needsRemoving = []; //Markers removed while we aren't on the map need to be kept track of\n            //The bounds of the currently shown area (from _getExpandedVisibleBounds) Updated on zoom/move\n            this._currentShownBounds = null;\n            this._queue = [];\n            this._childMarkerEventHandlers = {\n                \"dragstart\": this._childMarkerDragStart,\n                \"move\": this._childMarkerMoved,\n                \"dragend\": this._childMarkerDragEnd\n            };\n            // Hook the appropriate animation methods.\n            var animate = L.DomUtil.TRANSITION && this.options.animate;\n            L.extend(this, animate ? this._withAnimation : this._noAnimation);\n            // Remember which MarkerCluster class to instantiate (animated or not).\n            this._markerCluster = animate ? L.MarkerCluster : L.MarkerClusterNonAnimated;\n        },\n        addLayer: function(layer) {\n            if (layer instanceof L.LayerGroup) {\n                return this.addLayers([\n                    layer\n                ]);\n            }\n            //Don't cluster non point data\n            if (!layer.getLatLng) {\n                this._nonPointGroup.addLayer(layer);\n                this.fire(\"layeradd\", {\n                    layer: layer\n                });\n                return this;\n            }\n            if (!this._map) {\n                this._needsClustering.push(layer);\n                this.fire(\"layeradd\", {\n                    layer: layer\n                });\n                return this;\n            }\n            if (this.hasLayer(layer)) {\n                return this;\n            }\n            //If we have already clustered we'll need to add this one to a cluster\n            if (this._unspiderfy) {\n                this._unspiderfy();\n            }\n            this._addLayer(layer, this._maxZoom);\n            this.fire(\"layeradd\", {\n                layer: layer\n            });\n            // Refresh bounds and weighted positions.\n            this._topClusterLevel._recalculateBounds();\n            this._refreshClustersIcons();\n            //Work out what is visible\n            var visibleLayer = layer, currentZoom = this._zoom;\n            if (layer.__parent) {\n                while(visibleLayer.__parent._zoom >= currentZoom){\n                    visibleLayer = visibleLayer.__parent;\n                }\n            }\n            if (this._currentShownBounds.contains(visibleLayer.getLatLng())) {\n                if (this.options.animateAddingMarkers) {\n                    this._animationAddLayer(layer, visibleLayer);\n                } else {\n                    this._animationAddLayerNonAnimated(layer, visibleLayer);\n                }\n            }\n            return this;\n        },\n        removeLayer: function(layer) {\n            if (layer instanceof L.LayerGroup) {\n                return this.removeLayers([\n                    layer\n                ]);\n            }\n            //Non point layers\n            if (!layer.getLatLng) {\n                this._nonPointGroup.removeLayer(layer);\n                this.fire(\"layerremove\", {\n                    layer: layer\n                });\n                return this;\n            }\n            if (!this._map) {\n                if (!this._arraySplice(this._needsClustering, layer) && this.hasLayer(layer)) {\n                    this._needsRemoving.push({\n                        layer: layer,\n                        latlng: layer._latlng\n                    });\n                }\n                this.fire(\"layerremove\", {\n                    layer: layer\n                });\n                return this;\n            }\n            if (!layer.__parent) {\n                return this;\n            }\n            if (this._unspiderfy) {\n                this._unspiderfy();\n                this._unspiderfyLayer(layer);\n            }\n            //Remove the marker from clusters\n            this._removeLayer(layer, true);\n            this.fire(\"layerremove\", {\n                layer: layer\n            });\n            // Refresh bounds and weighted positions.\n            this._topClusterLevel._recalculateBounds();\n            this._refreshClustersIcons();\n            layer.off(this._childMarkerEventHandlers, this);\n            if (this._featureGroup.hasLayer(layer)) {\n                this._featureGroup.removeLayer(layer);\n                if (layer.clusterShow) {\n                    layer.clusterShow();\n                }\n            }\n            return this;\n        },\n        //Takes an array of markers and adds them in bulk\n        addLayers: function(layersArray, skipLayerAddEvent) {\n            if (!L.Util.isArray(layersArray)) {\n                return this.addLayer(layersArray);\n            }\n            var fg = this._featureGroup, npg = this._nonPointGroup, chunked = this.options.chunkedLoading, chunkInterval = this.options.chunkInterval, chunkProgress = this.options.chunkProgress, l = layersArray.length, offset = 0, originalArray = true, m;\n            if (this._map) {\n                var started = new Date().getTime();\n                var process = L.bind(function() {\n                    var start = new Date().getTime();\n                    // Make sure to unspiderfy before starting to add some layers\n                    if (this._map && this._unspiderfy) {\n                        this._unspiderfy();\n                    }\n                    for(; offset < l; offset++){\n                        if (chunked && offset % 200 === 0) {\n                            // every couple hundred markers, instrument the time elapsed since processing started:\n                            var elapsed = new Date().getTime() - start;\n                            if (elapsed > chunkInterval) {\n                                break; // been working too hard, time to take a break :-)\n                            }\n                        }\n                        m = layersArray[offset];\n                        // Group of layers, append children to layersArray and skip.\n                        // Side effects:\n                        // - Total increases, so chunkProgress ratio jumps backward.\n                        // - Groups are not included in this group, only their non-group child layers (hasLayer).\n                        // Changing array length while looping does not affect performance in current browsers:\n                        // http://jsperf.com/for-loop-changing-length/6\n                        if (m instanceof L.LayerGroup) {\n                            if (originalArray) {\n                                layersArray = layersArray.slice();\n                                originalArray = false;\n                            }\n                            this._extractNonGroupLayers(m, layersArray);\n                            l = layersArray.length;\n                            continue;\n                        }\n                        //Not point data, can't be clustered\n                        if (!m.getLatLng) {\n                            npg.addLayer(m);\n                            if (!skipLayerAddEvent) {\n                                this.fire(\"layeradd\", {\n                                    layer: m\n                                });\n                            }\n                            continue;\n                        }\n                        if (this.hasLayer(m)) {\n                            continue;\n                        }\n                        this._addLayer(m, this._maxZoom);\n                        if (!skipLayerAddEvent) {\n                            this.fire(\"layeradd\", {\n                                layer: m\n                            });\n                        }\n                        //If we just made a cluster of size 2 then we need to remove the other marker from the map (if it is) or we never will\n                        if (m.__parent) {\n                            if (m.__parent.getChildCount() === 2) {\n                                var markers = m.__parent.getAllChildMarkers(), otherMarker = markers[0] === m ? markers[1] : markers[0];\n                                fg.removeLayer(otherMarker);\n                            }\n                        }\n                    }\n                    if (chunkProgress) {\n                        // report progress and time elapsed:\n                        chunkProgress(offset, l, new Date().getTime() - started);\n                    }\n                    // Completed processing all markers.\n                    if (offset === l) {\n                        // Refresh bounds and weighted positions.\n                        this._topClusterLevel._recalculateBounds();\n                        this._refreshClustersIcons();\n                        this._topClusterLevel._recursivelyAddChildrenToMap(null, this._zoom, this._currentShownBounds);\n                    } else {\n                        setTimeout(process, this.options.chunkDelay);\n                    }\n                }, this);\n                process();\n            } else {\n                var needsClustering = this._needsClustering;\n                for(; offset < l; offset++){\n                    m = layersArray[offset];\n                    // Group of layers, append children to layersArray and skip.\n                    if (m instanceof L.LayerGroup) {\n                        if (originalArray) {\n                            layersArray = layersArray.slice();\n                            originalArray = false;\n                        }\n                        this._extractNonGroupLayers(m, layersArray);\n                        l = layersArray.length;\n                        continue;\n                    }\n                    //Not point data, can't be clustered\n                    if (!m.getLatLng) {\n                        npg.addLayer(m);\n                        continue;\n                    }\n                    if (this.hasLayer(m)) {\n                        continue;\n                    }\n                    needsClustering.push(m);\n                }\n            }\n            return this;\n        },\n        //Takes an array of markers and removes them in bulk\n        removeLayers: function(layersArray) {\n            var i, m, l = layersArray.length, fg = this._featureGroup, npg = this._nonPointGroup, originalArray = true;\n            if (!this._map) {\n                for(i = 0; i < l; i++){\n                    m = layersArray[i];\n                    // Group of layers, append children to layersArray and skip.\n                    if (m instanceof L.LayerGroup) {\n                        if (originalArray) {\n                            layersArray = layersArray.slice();\n                            originalArray = false;\n                        }\n                        this._extractNonGroupLayers(m, layersArray);\n                        l = layersArray.length;\n                        continue;\n                    }\n                    this._arraySplice(this._needsClustering, m);\n                    npg.removeLayer(m);\n                    if (this.hasLayer(m)) {\n                        this._needsRemoving.push({\n                            layer: m,\n                            latlng: m._latlng\n                        });\n                    }\n                    this.fire(\"layerremove\", {\n                        layer: m\n                    });\n                }\n                return this;\n            }\n            if (this._unspiderfy) {\n                this._unspiderfy();\n                // Work on a copy of the array, so that next loop is not affected.\n                var layersArray2 = layersArray.slice(), l2 = l;\n                for(i = 0; i < l2; i++){\n                    m = layersArray2[i];\n                    // Group of layers, append children to layersArray and skip.\n                    if (m instanceof L.LayerGroup) {\n                        this._extractNonGroupLayers(m, layersArray2);\n                        l2 = layersArray2.length;\n                        continue;\n                    }\n                    this._unspiderfyLayer(m);\n                }\n            }\n            for(i = 0; i < l; i++){\n                m = layersArray[i];\n                // Group of layers, append children to layersArray and skip.\n                if (m instanceof L.LayerGroup) {\n                    if (originalArray) {\n                        layersArray = layersArray.slice();\n                        originalArray = false;\n                    }\n                    this._extractNonGroupLayers(m, layersArray);\n                    l = layersArray.length;\n                    continue;\n                }\n                if (!m.__parent) {\n                    npg.removeLayer(m);\n                    this.fire(\"layerremove\", {\n                        layer: m\n                    });\n                    continue;\n                }\n                this._removeLayer(m, true, true);\n                this.fire(\"layerremove\", {\n                    layer: m\n                });\n                if (fg.hasLayer(m)) {\n                    fg.removeLayer(m);\n                    if (m.clusterShow) {\n                        m.clusterShow();\n                    }\n                }\n            }\n            // Refresh bounds and weighted positions.\n            this._topClusterLevel._recalculateBounds();\n            this._refreshClustersIcons();\n            //Fix up the clusters and markers on the map\n            this._topClusterLevel._recursivelyAddChildrenToMap(null, this._zoom, this._currentShownBounds);\n            return this;\n        },\n        //Removes all layers from the MarkerClusterGroup\n        clearLayers: function() {\n            //Need our own special implementation as the LayerGroup one doesn't work for us\n            //If we aren't on the map (yet), blow away the markers we know of\n            if (!this._map) {\n                this._needsClustering = [];\n                this._needsRemoving = [];\n                delete this._gridClusters;\n                delete this._gridUnclustered;\n            }\n            if (this._noanimationUnspiderfy) {\n                this._noanimationUnspiderfy();\n            }\n            //Remove all the visible layers\n            this._featureGroup.clearLayers();\n            this._nonPointGroup.clearLayers();\n            this.eachLayer(function(marker) {\n                marker.off(this._childMarkerEventHandlers, this);\n                delete marker.__parent;\n            }, this);\n            if (this._map) {\n                //Reset _topClusterLevel and the DistanceGrids\n                this._generateInitialClusters();\n            }\n            return this;\n        },\n        //Override FeatureGroup.getBounds as it doesn't work\n        getBounds: function() {\n            var bounds = new L.LatLngBounds();\n            if (this._topClusterLevel) {\n                bounds.extend(this._topClusterLevel._bounds);\n            }\n            for(var i = this._needsClustering.length - 1; i >= 0; i--){\n                bounds.extend(this._needsClustering[i].getLatLng());\n            }\n            bounds.extend(this._nonPointGroup.getBounds());\n            return bounds;\n        },\n        //Overrides LayerGroup.eachLayer\n        eachLayer: function(method, context) {\n            var markers = this._needsClustering.slice(), needsRemoving = this._needsRemoving, thisNeedsRemoving, i, j;\n            if (this._topClusterLevel) {\n                this._topClusterLevel.getAllChildMarkers(markers);\n            }\n            for(i = markers.length - 1; i >= 0; i--){\n                thisNeedsRemoving = true;\n                for(j = needsRemoving.length - 1; j >= 0; j--){\n                    if (needsRemoving[j].layer === markers[i]) {\n                        thisNeedsRemoving = false;\n                        break;\n                    }\n                }\n                if (thisNeedsRemoving) {\n                    method.call(context, markers[i]);\n                }\n            }\n            this._nonPointGroup.eachLayer(method, context);\n        },\n        //Overrides LayerGroup.getLayers\n        getLayers: function() {\n            var layers = [];\n            this.eachLayer(function(l) {\n                layers.push(l);\n            });\n            return layers;\n        },\n        //Overrides LayerGroup.getLayer, WARNING: Really bad performance\n        getLayer: function(id) {\n            var result = null;\n            id = parseInt(id, 10);\n            this.eachLayer(function(l) {\n                if (L.stamp(l) === id) {\n                    result = l;\n                }\n            });\n            return result;\n        },\n        //Returns true if the given layer is in this MarkerClusterGroup\n        hasLayer: function(layer) {\n            if (!layer) {\n                return false;\n            }\n            var i, anArray = this._needsClustering;\n            for(i = anArray.length - 1; i >= 0; i--){\n                if (anArray[i] === layer) {\n                    return true;\n                }\n            }\n            anArray = this._needsRemoving;\n            for(i = anArray.length - 1; i >= 0; i--){\n                if (anArray[i].layer === layer) {\n                    return false;\n                }\n            }\n            return !!(layer.__parent && layer.__parent._group === this) || this._nonPointGroup.hasLayer(layer);\n        },\n        //Zoom down to show the given layer (spiderfying if necessary) then calls the callback\n        zoomToShowLayer: function(layer, callback) {\n            var map = this._map;\n            if (typeof callback !== \"function\") {\n                callback = function() {};\n            }\n            var showMarker = function() {\n                // Assumes that map.hasLayer checks for direct appearance on map, not recursively calling\n                // hasLayer on Layer Groups that are on map (typically not calling this MarkerClusterGroup.hasLayer, which would always return true)\n                if ((map.hasLayer(layer) || map.hasLayer(layer.__parent)) && !this._inZoomAnimation) {\n                    this._map.off(\"moveend\", showMarker, this);\n                    this.off(\"animationend\", showMarker, this);\n                    if (map.hasLayer(layer)) {\n                        callback();\n                    } else if (layer.__parent._icon) {\n                        this.once(\"spiderfied\", callback, this);\n                        layer.__parent.spiderfy();\n                    }\n                }\n            };\n            if (layer._icon && this._map.getBounds().contains(layer.getLatLng())) {\n                //Layer is visible ond on screen, immediate return\n                callback();\n            } else if (layer.__parent._zoom < Math.round(this._map._zoom)) {\n                //Layer should be visible at this zoom level. It must not be on screen so just pan over to it\n                this._map.on(\"moveend\", showMarker, this);\n                this._map.panTo(layer.getLatLng());\n            } else {\n                this._map.on(\"moveend\", showMarker, this);\n                this.on(\"animationend\", showMarker, this);\n                layer.__parent.zoomToBounds();\n            }\n        },\n        //Overrides FeatureGroup.onAdd\n        onAdd: function(map) {\n            this._map = map;\n            var i, l, layer;\n            if (!isFinite(this._map.getMaxZoom())) {\n                throw \"Map has no maxZoom specified\";\n            }\n            this._featureGroup.addTo(map);\n            this._nonPointGroup.addTo(map);\n            if (!this._gridClusters) {\n                this._generateInitialClusters();\n            }\n            this._maxLat = map.options.crs.projection.MAX_LATITUDE;\n            //Restore all the positions as they are in the MCG before removing them\n            for(i = 0, l = this._needsRemoving.length; i < l; i++){\n                layer = this._needsRemoving[i];\n                layer.newlatlng = layer.layer._latlng;\n                layer.layer._latlng = layer.latlng;\n            }\n            //Remove them, then restore their new positions\n            for(i = 0, l = this._needsRemoving.length; i < l; i++){\n                layer = this._needsRemoving[i];\n                this._removeLayer(layer.layer, true);\n                layer.layer._latlng = layer.newlatlng;\n            }\n            this._needsRemoving = [];\n            //Remember the current zoom level and bounds\n            this._zoom = Math.round(this._map._zoom);\n            this._currentShownBounds = this._getExpandedVisibleBounds();\n            this._map.on(\"zoomend\", this._zoomEnd, this);\n            this._map.on(\"moveend\", this._moveEnd, this);\n            if (this._spiderfierOnAdd) {\n                this._spiderfierOnAdd();\n            }\n            this._bindEvents();\n            //Actually add our markers to the map:\n            l = this._needsClustering;\n            this._needsClustering = [];\n            this.addLayers(l, true);\n        },\n        //Overrides FeatureGroup.onRemove\n        onRemove: function(map) {\n            map.off(\"zoomend\", this._zoomEnd, this);\n            map.off(\"moveend\", this._moveEnd, this);\n            this._unbindEvents();\n            //In case we are in a cluster animation\n            this._map._mapPane.className = this._map._mapPane.className.replace(\" leaflet-cluster-anim\", \"\");\n            if (this._spiderfierOnRemove) {\n                this._spiderfierOnRemove();\n            }\n            delete this._maxLat;\n            //Clean up all the layers we added to the map\n            this._hideCoverage();\n            this._featureGroup.remove();\n            this._nonPointGroup.remove();\n            this._featureGroup.clearLayers();\n            this._map = null;\n        },\n        getVisibleParent: function(marker) {\n            var vMarker = marker;\n            while(vMarker && !vMarker._icon){\n                vMarker = vMarker.__parent;\n            }\n            return vMarker || null;\n        },\n        //Remove the given object from the given array\n        _arraySplice: function(anArray, obj) {\n            for(var i = anArray.length - 1; i >= 0; i--){\n                if (anArray[i] === obj) {\n                    anArray.splice(i, 1);\n                    return true;\n                }\n            }\n        },\n        /**\n\t\t * Removes a marker from all _gridUnclustered zoom levels, starting at the supplied zoom.\n\t\t * @param marker to be removed from _gridUnclustered.\n\t\t * @param z integer bottom start zoom level (included)\n\t\t * @private\n\t\t */ _removeFromGridUnclustered: function(marker, z) {\n            var map = this._map, gridUnclustered = this._gridUnclustered, minZoom = Math.floor(this._map.getMinZoom());\n            for(; z >= minZoom; z--){\n                if (!gridUnclustered[z].removeObject(marker, map.project(marker.getLatLng(), z))) {\n                    break;\n                }\n            }\n        },\n        _childMarkerDragStart: function(e) {\n            e.target.__dragStart = e.target._latlng;\n        },\n        _childMarkerMoved: function(e) {\n            if (!this._ignoreMove && !e.target.__dragStart) {\n                var isPopupOpen = e.target._popup && e.target._popup.isOpen();\n                this._moveChild(e.target, e.oldLatLng, e.latlng);\n                if (isPopupOpen) {\n                    e.target.openPopup();\n                }\n            }\n        },\n        _moveChild: function(layer, from, to) {\n            layer._latlng = from;\n            this.removeLayer(layer);\n            layer._latlng = to;\n            this.addLayer(layer);\n        },\n        _childMarkerDragEnd: function(e) {\n            var dragStart = e.target.__dragStart;\n            delete e.target.__dragStart;\n            if (dragStart) {\n                this._moveChild(e.target, dragStart, e.target._latlng);\n            }\n        },\n        //Internal function for removing a marker from everything.\n        //dontUpdateMap: set to true if you will handle updating the map manually (for bulk functions)\n        _removeLayer: function(marker, removeFromDistanceGrid, dontUpdateMap) {\n            var gridClusters = this._gridClusters, gridUnclustered = this._gridUnclustered, fg = this._featureGroup, map = this._map, minZoom = Math.floor(this._map.getMinZoom());\n            //Remove the marker from distance clusters it might be in\n            if (removeFromDistanceGrid) {\n                this._removeFromGridUnclustered(marker, this._maxZoom);\n            }\n            //Work our way up the clusters removing them as we go if required\n            var cluster = marker.__parent, markers = cluster._markers, otherMarker;\n            //Remove the marker from the immediate parents marker list\n            this._arraySplice(markers, marker);\n            while(cluster){\n                cluster._childCount--;\n                cluster._boundsNeedUpdate = true;\n                if (cluster._zoom < minZoom) {\n                    break;\n                } else if (removeFromDistanceGrid && cluster._childCount <= 1) {\n                    //We need to push the other marker up to the parent\n                    otherMarker = cluster._markers[0] === marker ? cluster._markers[1] : cluster._markers[0];\n                    //Update distance grid\n                    gridClusters[cluster._zoom].removeObject(cluster, map.project(cluster._cLatLng, cluster._zoom));\n                    gridUnclustered[cluster._zoom].addObject(otherMarker, map.project(otherMarker.getLatLng(), cluster._zoom));\n                    //Move otherMarker up to parent\n                    this._arraySplice(cluster.__parent._childClusters, cluster);\n                    cluster.__parent._markers.push(otherMarker);\n                    otherMarker.__parent = cluster.__parent;\n                    if (cluster._icon) {\n                        //Cluster is currently on the map, need to put the marker on the map instead\n                        fg.removeLayer(cluster);\n                        if (!dontUpdateMap) {\n                            fg.addLayer(otherMarker);\n                        }\n                    }\n                } else {\n                    cluster._iconNeedsUpdate = true;\n                }\n                cluster = cluster.__parent;\n            }\n            delete marker.__parent;\n        },\n        _isOrIsParent: function(el, oel) {\n            while(oel){\n                if (el === oel) {\n                    return true;\n                }\n                oel = oel.parentNode;\n            }\n            return false;\n        },\n        //Override L.Evented.fire\n        fire: function(type, data, propagate) {\n            if (data && data.layer instanceof L.MarkerCluster) {\n                //Prevent multiple clustermouseover/off events if the icon is made up of stacked divs (Doesn't work in ie <= 8, no relatedTarget)\n                if (data.originalEvent && this._isOrIsParent(data.layer._icon, data.originalEvent.relatedTarget)) {\n                    return;\n                }\n                type = \"cluster\" + type;\n            }\n            L.FeatureGroup.prototype.fire.call(this, type, data, propagate);\n        },\n        //Override L.Evented.listens\n        listens: function(type, propagate) {\n            return L.FeatureGroup.prototype.listens.call(this, type, propagate) || L.FeatureGroup.prototype.listens.call(this, \"cluster\" + type, propagate);\n        },\n        //Default functionality\n        _defaultIconCreateFunction: function(cluster) {\n            var childCount = cluster.getChildCount();\n            var c = \" marker-cluster-\";\n            if (childCount < 10) {\n                c += \"small\";\n            } else if (childCount < 100) {\n                c += \"medium\";\n            } else {\n                c += \"large\";\n            }\n            return new L.DivIcon({\n                html: \"<div><span>\" + childCount + \"</span></div>\",\n                className: \"marker-cluster\" + c,\n                iconSize: new L.Point(40, 40)\n            });\n        },\n        _bindEvents: function() {\n            var map = this._map, spiderfyOnMaxZoom = this.options.spiderfyOnMaxZoom, showCoverageOnHover = this.options.showCoverageOnHover, zoomToBoundsOnClick = this.options.zoomToBoundsOnClick, spiderfyOnEveryZoom = this.options.spiderfyOnEveryZoom;\n            //Zoom on cluster click or spiderfy if we are at the lowest level\n            if (spiderfyOnMaxZoom || zoomToBoundsOnClick || spiderfyOnEveryZoom) {\n                this.on(\"clusterclick clusterkeypress\", this._zoomOrSpiderfy, this);\n            }\n            //Show convex hull (boundary) polygon on mouse over\n            if (showCoverageOnHover) {\n                this.on(\"clustermouseover\", this._showCoverage, this);\n                this.on(\"clustermouseout\", this._hideCoverage, this);\n                map.on(\"zoomend\", this._hideCoverage, this);\n            }\n        },\n        _zoomOrSpiderfy: function(e) {\n            var cluster = e.layer, bottomCluster = cluster;\n            if (e.type === \"clusterkeypress\" && e.originalEvent && e.originalEvent.keyCode !== 13) {\n                return;\n            }\n            while(bottomCluster._childClusters.length === 1){\n                bottomCluster = bottomCluster._childClusters[0];\n            }\n            if (bottomCluster._zoom === this._maxZoom && bottomCluster._childCount === cluster._childCount && this.options.spiderfyOnMaxZoom) {\n                // All child markers are contained in a single cluster from this._maxZoom to this cluster.\n                cluster.spiderfy();\n            } else if (this.options.zoomToBoundsOnClick) {\n                cluster.zoomToBounds();\n            }\n            if (this.options.spiderfyOnEveryZoom) {\n                cluster.spiderfy();\n            }\n            // Focus the map again for keyboard users.\n            if (e.originalEvent && e.originalEvent.keyCode === 13) {\n                this._map._container.focus();\n            }\n        },\n        _showCoverage: function(e) {\n            var map = this._map;\n            if (this._inZoomAnimation) {\n                return;\n            }\n            if (this._shownPolygon) {\n                map.removeLayer(this._shownPolygon);\n            }\n            if (e.layer.getChildCount() > 2 && e.layer !== this._spiderfied) {\n                this._shownPolygon = new L.Polygon(e.layer.getConvexHull(), this.options.polygonOptions);\n                map.addLayer(this._shownPolygon);\n            }\n        },\n        _hideCoverage: function() {\n            if (this._shownPolygon) {\n                this._map.removeLayer(this._shownPolygon);\n                this._shownPolygon = null;\n            }\n        },\n        _unbindEvents: function() {\n            var spiderfyOnMaxZoom = this.options.spiderfyOnMaxZoom, showCoverageOnHover = this.options.showCoverageOnHover, zoomToBoundsOnClick = this.options.zoomToBoundsOnClick, spiderfyOnEveryZoom = this.options.spiderfyOnEveryZoom, map = this._map;\n            if (spiderfyOnMaxZoom || zoomToBoundsOnClick || spiderfyOnEveryZoom) {\n                this.off(\"clusterclick clusterkeypress\", this._zoomOrSpiderfy, this);\n            }\n            if (showCoverageOnHover) {\n                this.off(\"clustermouseover\", this._showCoverage, this);\n                this.off(\"clustermouseout\", this._hideCoverage, this);\n                map.off(\"zoomend\", this._hideCoverage, this);\n            }\n        },\n        _zoomEnd: function() {\n            if (!this._map) {\n                return;\n            }\n            this._mergeSplitClusters();\n            this._zoom = Math.round(this._map._zoom);\n            this._currentShownBounds = this._getExpandedVisibleBounds();\n        },\n        _moveEnd: function() {\n            if (this._inZoomAnimation) {\n                return;\n            }\n            var newBounds = this._getExpandedVisibleBounds();\n            this._topClusterLevel._recursivelyRemoveChildrenFromMap(this._currentShownBounds, Math.floor(this._map.getMinZoom()), this._zoom, newBounds);\n            this._topClusterLevel._recursivelyAddChildrenToMap(null, Math.round(this._map._zoom), newBounds);\n            this._currentShownBounds = newBounds;\n            return;\n        },\n        _generateInitialClusters: function() {\n            var maxZoom = Math.ceil(this._map.getMaxZoom()), minZoom = Math.floor(this._map.getMinZoom()), radius = this.options.maxClusterRadius, radiusFn = radius;\n            //If we just set maxClusterRadius to a single number, we need to create\n            //a simple function to return that number. Otherwise, we just have to\n            //use the function we've passed in.\n            if (typeof radius !== \"function\") {\n                radiusFn = function() {\n                    return radius;\n                };\n            }\n            if (this.options.disableClusteringAtZoom !== null) {\n                maxZoom = this.options.disableClusteringAtZoom - 1;\n            }\n            this._maxZoom = maxZoom;\n            this._gridClusters = {};\n            this._gridUnclustered = {};\n            //Set up DistanceGrids for each zoom\n            for(var zoom = maxZoom; zoom >= minZoom; zoom--){\n                this._gridClusters[zoom] = new L.DistanceGrid(radiusFn(zoom));\n                this._gridUnclustered[zoom] = new L.DistanceGrid(radiusFn(zoom));\n            }\n            // Instantiate the appropriate L.MarkerCluster class (animated or not).\n            this._topClusterLevel = new this._markerCluster(this, minZoom - 1);\n        },\n        //Zoom: Zoom to start adding at (Pass this._maxZoom to start at the bottom)\n        _addLayer: function(layer, zoom) {\n            var gridClusters = this._gridClusters, gridUnclustered = this._gridUnclustered, minZoom = Math.floor(this._map.getMinZoom()), markerPoint, z;\n            if (this.options.singleMarkerMode) {\n                this._overrideMarkerIcon(layer);\n            }\n            layer.on(this._childMarkerEventHandlers, this);\n            //Find the lowest zoom level to slot this one in\n            for(; zoom >= minZoom; zoom--){\n                markerPoint = this._map.project(layer.getLatLng(), zoom); // calculate pixel position\n                //Try find a cluster close by\n                var closest = gridClusters[zoom].getNearObject(markerPoint);\n                if (closest) {\n                    closest._addChild(layer);\n                    layer.__parent = closest;\n                    return;\n                }\n                //Try find a marker close by to form a new cluster with\n                closest = gridUnclustered[zoom].getNearObject(markerPoint);\n                if (closest) {\n                    var parent = closest.__parent;\n                    if (parent) {\n                        this._removeLayer(closest, false);\n                    }\n                    //Create new cluster with these 2 in it\n                    var newCluster = new this._markerCluster(this, zoom, closest, layer);\n                    gridClusters[zoom].addObject(newCluster, this._map.project(newCluster._cLatLng, zoom));\n                    closest.__parent = newCluster;\n                    layer.__parent = newCluster;\n                    //First create any new intermediate parent clusters that don't exist\n                    var lastParent = newCluster;\n                    for(z = zoom - 1; z > parent._zoom; z--){\n                        lastParent = new this._markerCluster(this, z, lastParent);\n                        gridClusters[z].addObject(lastParent, this._map.project(closest.getLatLng(), z));\n                    }\n                    parent._addChild(lastParent);\n                    //Remove closest from this zoom level and any above that it is in, replace with newCluster\n                    this._removeFromGridUnclustered(closest, zoom);\n                    return;\n                }\n                //Didn't manage to cluster in at this zoom, record us as a marker here and continue upwards\n                gridUnclustered[zoom].addObject(layer, markerPoint);\n            }\n            //Didn't get in anything, add us to the top\n            this._topClusterLevel._addChild(layer);\n            layer.__parent = this._topClusterLevel;\n            return;\n        },\n        /**\n\t\t * Refreshes the icon of all \"dirty\" visible clusters.\n\t\t * Non-visible \"dirty\" clusters will be updated when they are added to the map.\n\t\t * @private\n\t\t */ _refreshClustersIcons: function() {\n            this._featureGroup.eachLayer(function(c) {\n                if (c instanceof L.MarkerCluster && c._iconNeedsUpdate) {\n                    c._updateIcon();\n                }\n            });\n        },\n        //Enqueue code to fire after the marker expand/contract has happened\n        _enqueue: function(fn) {\n            this._queue.push(fn);\n            if (!this._queueTimeout) {\n                this._queueTimeout = setTimeout(L.bind(this._processQueue, this), 300);\n            }\n        },\n        _processQueue: function() {\n            for(var i = 0; i < this._queue.length; i++){\n                this._queue[i].call(this);\n            }\n            this._queue.length = 0;\n            clearTimeout(this._queueTimeout);\n            this._queueTimeout = null;\n        },\n        //Merge and split any existing clusters that are too big or small\n        _mergeSplitClusters: function() {\n            var mapZoom = Math.round(this._map._zoom);\n            //In case we are starting to split before the animation finished\n            this._processQueue();\n            if (this._zoom < mapZoom && this._currentShownBounds.intersects(this._getExpandedVisibleBounds())) {\n                this._animationStart();\n                //Remove clusters now off screen\n                this._topClusterLevel._recursivelyRemoveChildrenFromMap(this._currentShownBounds, Math.floor(this._map.getMinZoom()), this._zoom, this._getExpandedVisibleBounds());\n                this._animationZoomIn(this._zoom, mapZoom);\n            } else if (this._zoom > mapZoom) {\n                this._animationStart();\n                this._animationZoomOut(this._zoom, mapZoom);\n            } else {\n                this._moveEnd();\n            }\n        },\n        //Gets the maps visible bounds expanded in each direction by the size of the screen (so the user cannot see an area we do not cover in one pan)\n        _getExpandedVisibleBounds: function() {\n            if (!this.options.removeOutsideVisibleBounds) {\n                return this._mapBoundsInfinite;\n            } else if (L.Browser.mobile) {\n                return this._checkBoundsMaxLat(this._map.getBounds());\n            }\n            return this._checkBoundsMaxLat(this._map.getBounds().pad(1)); // Padding expands the bounds by its own dimensions but scaled with the given factor.\n        },\n        /**\n\t\t * Expands the latitude to Infinity (or -Infinity) if the input bounds reach the map projection maximum defined latitude\n\t\t * (in the case of Web/Spherical Mercator, it is 85.0511287798 / see https://en.wikipedia.org/wiki/Web_Mercator#Formulas).\n\t\t * Otherwise, the removeOutsideVisibleBounds option will remove markers beyond that limit, whereas the same markers without\n\t\t * this option (or outside MCG) will have their position floored (ceiled) by the projection and rendered at that limit,\n\t\t * making the user think that MCG \"eats\" them and never displays them again.\n\t\t * @param bounds L.LatLngBounds\n\t\t * @returns {L.LatLngBounds}\n\t\t * @private\n\t\t */ _checkBoundsMaxLat: function(bounds) {\n            var maxLat = this._maxLat;\n            if (maxLat !== undefined) {\n                if (bounds.getNorth() >= maxLat) {\n                    bounds._northEast.lat = Infinity;\n                }\n                if (bounds.getSouth() <= -maxLat) {\n                    bounds._southWest.lat = -Infinity;\n                }\n            }\n            return bounds;\n        },\n        //Shared animation code\n        _animationAddLayerNonAnimated: function(layer, newCluster) {\n            if (newCluster === layer) {\n                this._featureGroup.addLayer(layer);\n            } else if (newCluster._childCount === 2) {\n                newCluster._addToMap();\n                var markers = newCluster.getAllChildMarkers();\n                this._featureGroup.removeLayer(markers[0]);\n                this._featureGroup.removeLayer(markers[1]);\n            } else {\n                newCluster._updateIcon();\n            }\n        },\n        /**\n\t\t * Extracts individual (i.e. non-group) layers from a Layer Group.\n\t\t * @param group to extract layers from.\n\t\t * @param output {Array} in which to store the extracted layers.\n\t\t * @returns {*|Array}\n\t\t * @private\n\t\t */ _extractNonGroupLayers: function(group, output) {\n            var layers = group.getLayers(), i = 0, layer;\n            output = output || [];\n            for(; i < layers.length; i++){\n                layer = layers[i];\n                if (layer instanceof L.LayerGroup) {\n                    this._extractNonGroupLayers(layer, output);\n                    continue;\n                }\n                output.push(layer);\n            }\n            return output;\n        },\n        /**\n\t\t * Implements the singleMarkerMode option.\n\t\t * @param layer Marker to re-style using the Clusters iconCreateFunction.\n\t\t * @returns {L.Icon} The newly created icon.\n\t\t * @private\n\t\t */ _overrideMarkerIcon: function(layer) {\n            var icon = layer.options.icon = this.options.iconCreateFunction({\n                getChildCount: function() {\n                    return 1;\n                },\n                getAllChildMarkers: function() {\n                    return [\n                        layer\n                    ];\n                }\n            });\n            return icon;\n        }\n    });\n    // Constant bounds used in case option \"removeOutsideVisibleBounds\" is set to false.\n    L.MarkerClusterGroup.include({\n        _mapBoundsInfinite: new L.LatLngBounds(new L.LatLng(-Infinity, -Infinity), new L.LatLng(Infinity, Infinity))\n    });\n    L.MarkerClusterGroup.include({\n        _noAnimation: {\n            //Non Animated versions of everything\n            _animationStart: function() {\n            //Do nothing...\n            },\n            _animationZoomIn: function(previousZoomLevel, newZoomLevel) {\n                this._topClusterLevel._recursivelyRemoveChildrenFromMap(this._currentShownBounds, Math.floor(this._map.getMinZoom()), previousZoomLevel);\n                this._topClusterLevel._recursivelyAddChildrenToMap(null, newZoomLevel, this._getExpandedVisibleBounds());\n                //We didn't actually animate, but we use this event to mean \"clustering animations have finished\"\n                this.fire(\"animationend\");\n            },\n            _animationZoomOut: function(previousZoomLevel, newZoomLevel) {\n                this._topClusterLevel._recursivelyRemoveChildrenFromMap(this._currentShownBounds, Math.floor(this._map.getMinZoom()), previousZoomLevel);\n                this._topClusterLevel._recursivelyAddChildrenToMap(null, newZoomLevel, this._getExpandedVisibleBounds());\n                //We didn't actually animate, but we use this event to mean \"clustering animations have finished\"\n                this.fire(\"animationend\");\n            },\n            _animationAddLayer: function(layer, newCluster) {\n                this._animationAddLayerNonAnimated(layer, newCluster);\n            }\n        },\n        _withAnimation: {\n            //Animated versions here\n            _animationStart: function() {\n                this._map._mapPane.className += \" leaflet-cluster-anim\";\n                this._inZoomAnimation++;\n            },\n            _animationZoomIn: function(previousZoomLevel, newZoomLevel) {\n                var bounds = this._getExpandedVisibleBounds(), fg = this._featureGroup, minZoom = Math.floor(this._map.getMinZoom()), i;\n                this._ignoreMove = true;\n                //Add all children of current clusters to map and remove those clusters from map\n                this._topClusterLevel._recursively(bounds, previousZoomLevel, minZoom, function(c) {\n                    var startPos = c._latlng, markers = c._markers, m;\n                    if (!bounds.contains(startPos)) {\n                        startPos = null;\n                    }\n                    if (c._isSingleParent() && previousZoomLevel + 1 === newZoomLevel) {\n                        fg.removeLayer(c);\n                        c._recursivelyAddChildrenToMap(null, newZoomLevel, bounds);\n                    } else {\n                        //Fade out old cluster\n                        c.clusterHide();\n                        c._recursivelyAddChildrenToMap(startPos, newZoomLevel, bounds);\n                    }\n                    //Remove all markers that aren't visible any more\n                    //TODO: Do we actually need to do this on the higher levels too?\n                    for(i = markers.length - 1; i >= 0; i--){\n                        m = markers[i];\n                        if (!bounds.contains(m._latlng)) {\n                            fg.removeLayer(m);\n                        }\n                    }\n                });\n                this._forceLayout();\n                //Update opacities\n                this._topClusterLevel._recursivelyBecomeVisible(bounds, newZoomLevel);\n                //TODO Maybe? Update markers in _recursivelyBecomeVisible\n                fg.eachLayer(function(n) {\n                    if (!(n instanceof L.MarkerCluster) && n._icon) {\n                        n.clusterShow();\n                    }\n                });\n                //update the positions of the just added clusters/markers\n                this._topClusterLevel._recursively(bounds, previousZoomLevel, newZoomLevel, function(c) {\n                    c._recursivelyRestoreChildPositions(newZoomLevel);\n                });\n                this._ignoreMove = false;\n                //Remove the old clusters and close the zoom animation\n                this._enqueue(function() {\n                    //update the positions of the just added clusters/markers\n                    this._topClusterLevel._recursively(bounds, previousZoomLevel, minZoom, function(c) {\n                        fg.removeLayer(c);\n                        c.clusterShow();\n                    });\n                    this._animationEnd();\n                });\n            },\n            _animationZoomOut: function(previousZoomLevel, newZoomLevel) {\n                this._animationZoomOutSingle(this._topClusterLevel, previousZoomLevel - 1, newZoomLevel);\n                //Need to add markers for those that weren't on the map before but are now\n                this._topClusterLevel._recursivelyAddChildrenToMap(null, newZoomLevel, this._getExpandedVisibleBounds());\n                //Remove markers that were on the map before but won't be now\n                this._topClusterLevel._recursivelyRemoveChildrenFromMap(this._currentShownBounds, Math.floor(this._map.getMinZoom()), previousZoomLevel, this._getExpandedVisibleBounds());\n            },\n            _animationAddLayer: function(layer, newCluster) {\n                var me = this, fg = this._featureGroup;\n                fg.addLayer(layer);\n                if (newCluster !== layer) {\n                    if (newCluster._childCount > 2) {\n                        newCluster._updateIcon();\n                        this._forceLayout();\n                        this._animationStart();\n                        layer._setPos(this._map.latLngToLayerPoint(newCluster.getLatLng()));\n                        layer.clusterHide();\n                        this._enqueue(function() {\n                            fg.removeLayer(layer);\n                            layer.clusterShow();\n                            me._animationEnd();\n                        });\n                    } else {\n                        this._forceLayout();\n                        me._animationStart();\n                        me._animationZoomOutSingle(newCluster, this._map.getMaxZoom(), this._zoom);\n                    }\n                }\n            }\n        },\n        // Private methods for animated versions.\n        _animationZoomOutSingle: function(cluster, previousZoomLevel, newZoomLevel) {\n            var bounds = this._getExpandedVisibleBounds(), minZoom = Math.floor(this._map.getMinZoom());\n            //Animate all of the markers in the clusters to move to their cluster center point\n            cluster._recursivelyAnimateChildrenInAndAddSelfToMap(bounds, minZoom, previousZoomLevel + 1, newZoomLevel);\n            var me = this;\n            //Update the opacity (If we immediately set it they won't animate)\n            this._forceLayout();\n            cluster._recursivelyBecomeVisible(bounds, newZoomLevel);\n            //TODO: Maybe use the transition timing stuff to make this more reliable\n            //When the animations are done, tidy up\n            this._enqueue(function() {\n                //This cluster stopped being a cluster before the timeout fired\n                if (cluster._childCount === 1) {\n                    var m = cluster._markers[0];\n                    //If we were in a cluster animation at the time then the opacity and position of our child could be wrong now, so fix it\n                    this._ignoreMove = true;\n                    m.setLatLng(m.getLatLng());\n                    this._ignoreMove = false;\n                    if (m.clusterShow) {\n                        m.clusterShow();\n                    }\n                } else {\n                    cluster._recursively(bounds, newZoomLevel, minZoom, function(c) {\n                        c._recursivelyRemoveChildrenFromMap(bounds, minZoom, previousZoomLevel + 1);\n                    });\n                }\n                me._animationEnd();\n            });\n        },\n        _animationEnd: function() {\n            if (this._map) {\n                this._map._mapPane.className = this._map._mapPane.className.replace(\" leaflet-cluster-anim\", \"\");\n            }\n            this._inZoomAnimation--;\n            this.fire(\"animationend\");\n        },\n        //Force a browser layout of stuff in the map\n        // Should apply the current opacity and location to all elements so we can update them again for an animation\n        _forceLayout: function() {\n            //In my testing this works, infact offsetWidth of any element seems to work.\n            //Could loop all this._layers and do this for each _icon if it stops working\n            L.Util.falseFn(document.body.offsetWidth);\n        }\n    });\n    L.markerClusterGroup = function(options) {\n        return new L.MarkerClusterGroup(options);\n    };\n    var MarkerCluster = L.MarkerCluster = L.Marker.extend({\n        options: L.Icon.prototype.options,\n        initialize: function(group, zoom, a, b) {\n            L.Marker.prototype.initialize.call(this, a ? a._cLatLng || a.getLatLng() : new L.LatLng(0, 0), {\n                icon: this,\n                pane: group.options.clusterPane\n            });\n            this._group = group;\n            this._zoom = zoom;\n            this._markers = [];\n            this._childClusters = [];\n            this._childCount = 0;\n            this._iconNeedsUpdate = true;\n            this._boundsNeedUpdate = true;\n            this._bounds = new L.LatLngBounds();\n            if (a) {\n                this._addChild(a);\n            }\n            if (b) {\n                this._addChild(b);\n            }\n        },\n        //Recursively retrieve all child markers of this cluster\n        getAllChildMarkers: function(storageArray, ignoreDraggedMarker) {\n            storageArray = storageArray || [];\n            for(var i = this._childClusters.length - 1; i >= 0; i--){\n                this._childClusters[i].getAllChildMarkers(storageArray, ignoreDraggedMarker);\n            }\n            for(var j = this._markers.length - 1; j >= 0; j--){\n                if (ignoreDraggedMarker && this._markers[j].__dragStart) {\n                    continue;\n                }\n                storageArray.push(this._markers[j]);\n            }\n            return storageArray;\n        },\n        //Returns the count of how many child markers we have\n        getChildCount: function() {\n            return this._childCount;\n        },\n        //Zoom to the minimum of showing all of the child markers, or the extents of this cluster\n        zoomToBounds: function(fitBoundsOptions) {\n            var childClusters = this._childClusters.slice(), map = this._group._map, boundsZoom = map.getBoundsZoom(this._bounds), zoom = this._zoom + 1, mapZoom = map.getZoom(), i;\n            //calculate how far we need to zoom down to see all of the markers\n            while(childClusters.length > 0 && boundsZoom > zoom){\n                zoom++;\n                var newClusters = [];\n                for(i = 0; i < childClusters.length; i++){\n                    newClusters = newClusters.concat(childClusters[i]._childClusters);\n                }\n                childClusters = newClusters;\n            }\n            if (boundsZoom > zoom) {\n                this._group._map.setView(this._latlng, zoom);\n            } else if (boundsZoom <= mapZoom) {\n                this._group._map.setView(this._latlng, mapZoom + 1);\n            } else {\n                this._group._map.fitBounds(this._bounds, fitBoundsOptions);\n            }\n        },\n        getBounds: function() {\n            var bounds = new L.LatLngBounds();\n            bounds.extend(this._bounds);\n            return bounds;\n        },\n        _updateIcon: function() {\n            this._iconNeedsUpdate = true;\n            if (this._icon) {\n                this.setIcon(this);\n            }\n        },\n        //Cludge for Icon, we pretend to be an icon for performance\n        createIcon: function() {\n            if (this._iconNeedsUpdate) {\n                this._iconObj = this._group.options.iconCreateFunction(this);\n                this._iconNeedsUpdate = false;\n            }\n            return this._iconObj.createIcon();\n        },\n        createShadow: function() {\n            return this._iconObj.createShadow();\n        },\n        _addChild: function(new1, isNotificationFromChild) {\n            this._iconNeedsUpdate = true;\n            this._boundsNeedUpdate = true;\n            this._setClusterCenter(new1);\n            if (new1 instanceof L.MarkerCluster) {\n                if (!isNotificationFromChild) {\n                    this._childClusters.push(new1);\n                    new1.__parent = this;\n                }\n                this._childCount += new1._childCount;\n            } else {\n                if (!isNotificationFromChild) {\n                    this._markers.push(new1);\n                }\n                this._childCount++;\n            }\n            if (this.__parent) {\n                this.__parent._addChild(new1, true);\n            }\n        },\n        /**\n\t\t * Makes sure the cluster center is set. If not, uses the child center if it is a cluster, or the marker position.\n\t\t * @param child L.MarkerCluster|L.Marker that will be used as cluster center if not defined yet.\n\t\t * @private\n\t\t */ _setClusterCenter: function(child) {\n            if (!this._cLatLng) {\n                // when clustering, take position of the first point as the cluster center\n                this._cLatLng = child._cLatLng || child._latlng;\n            }\n        },\n        /**\n\t\t * Assigns impossible bounding values so that the next extend entirely determines the new bounds.\n\t\t * This method avoids having to trash the previous L.LatLngBounds object and to create a new one, which is much slower for this class.\n\t\t * As long as the bounds are not extended, most other methods would probably fail, as they would with bounds initialized but not extended.\n\t\t * @private\n\t\t */ _resetBounds: function() {\n            var bounds = this._bounds;\n            if (bounds._southWest) {\n                bounds._southWest.lat = Infinity;\n                bounds._southWest.lng = Infinity;\n            }\n            if (bounds._northEast) {\n                bounds._northEast.lat = -Infinity;\n                bounds._northEast.lng = -Infinity;\n            }\n        },\n        _recalculateBounds: function() {\n            var markers = this._markers, childClusters = this._childClusters, latSum = 0, lngSum = 0, totalCount = this._childCount, i, child, childLatLng, childCount;\n            // Case where all markers are removed from the map and we are left with just an empty _topClusterLevel.\n            if (totalCount === 0) {\n                return;\n            }\n            // Reset rather than creating a new object, for performance.\n            this._resetBounds();\n            // Child markers.\n            for(i = 0; i < markers.length; i++){\n                childLatLng = markers[i]._latlng;\n                this._bounds.extend(childLatLng);\n                latSum += childLatLng.lat;\n                lngSum += childLatLng.lng;\n            }\n            // Child clusters.\n            for(i = 0; i < childClusters.length; i++){\n                child = childClusters[i];\n                // Re-compute child bounds and weighted position first if necessary.\n                if (child._boundsNeedUpdate) {\n                    child._recalculateBounds();\n                }\n                this._bounds.extend(child._bounds);\n                childLatLng = child._wLatLng;\n                childCount = child._childCount;\n                latSum += childLatLng.lat * childCount;\n                lngSum += childLatLng.lng * childCount;\n            }\n            this._latlng = this._wLatLng = new L.LatLng(latSum / totalCount, lngSum / totalCount);\n            // Reset dirty flag.\n            this._boundsNeedUpdate = false;\n        },\n        //Set our markers position as given and add it to the map\n        _addToMap: function(startPos) {\n            if (startPos) {\n                this._backupLatlng = this._latlng;\n                this.setLatLng(startPos);\n            }\n            this._group._featureGroup.addLayer(this);\n        },\n        _recursivelyAnimateChildrenIn: function(bounds, center, maxZoom) {\n            this._recursively(bounds, this._group._map.getMinZoom(), maxZoom - 1, function(c) {\n                var markers = c._markers, i, m;\n                for(i = markers.length - 1; i >= 0; i--){\n                    m = markers[i];\n                    //Only do it if the icon is still on the map\n                    if (m._icon) {\n                        m._setPos(center);\n                        m.clusterHide();\n                    }\n                }\n            }, function(c) {\n                var childClusters = c._childClusters, j, cm;\n                for(j = childClusters.length - 1; j >= 0; j--){\n                    cm = childClusters[j];\n                    if (cm._icon) {\n                        cm._setPos(center);\n                        cm.clusterHide();\n                    }\n                }\n            });\n        },\n        _recursivelyAnimateChildrenInAndAddSelfToMap: function(bounds, mapMinZoom, previousZoomLevel, newZoomLevel) {\n            this._recursively(bounds, newZoomLevel, mapMinZoom, function(c) {\n                c._recursivelyAnimateChildrenIn(bounds, c._group._map.latLngToLayerPoint(c.getLatLng()).round(), previousZoomLevel);\n                //TODO: depthToAnimateIn affects _isSingleParent, if there is a multizoom we may/may not be.\n                //As a hack we only do a animation free zoom on a single level zoom, if someone does multiple levels then we always animate\n                if (c._isSingleParent() && previousZoomLevel - 1 === newZoomLevel) {\n                    c.clusterShow();\n                    c._recursivelyRemoveChildrenFromMap(bounds, mapMinZoom, previousZoomLevel); //Immediately remove our children as we are replacing them. TODO previousBounds not bounds\n                } else {\n                    c.clusterHide();\n                }\n                c._addToMap();\n            });\n        },\n        _recursivelyBecomeVisible: function(bounds, zoomLevel) {\n            this._recursively(bounds, this._group._map.getMinZoom(), zoomLevel, null, function(c) {\n                c.clusterShow();\n            });\n        },\n        _recursivelyAddChildrenToMap: function(startPos, zoomLevel, bounds) {\n            this._recursively(bounds, this._group._map.getMinZoom() - 1, zoomLevel, function(c) {\n                if (zoomLevel === c._zoom) {\n                    return;\n                }\n                //Add our child markers at startPos (so they can be animated out)\n                for(var i = c._markers.length - 1; i >= 0; i--){\n                    var nm = c._markers[i];\n                    if (!bounds.contains(nm._latlng)) {\n                        continue;\n                    }\n                    if (startPos) {\n                        nm._backupLatlng = nm.getLatLng();\n                        nm.setLatLng(startPos);\n                        if (nm.clusterHide) {\n                            nm.clusterHide();\n                        }\n                    }\n                    c._group._featureGroup.addLayer(nm);\n                }\n            }, function(c) {\n                c._addToMap(startPos);\n            });\n        },\n        _recursivelyRestoreChildPositions: function(zoomLevel) {\n            //Fix positions of child markers\n            for(var i = this._markers.length - 1; i >= 0; i--){\n                var nm = this._markers[i];\n                if (nm._backupLatlng) {\n                    nm.setLatLng(nm._backupLatlng);\n                    delete nm._backupLatlng;\n                }\n            }\n            if (zoomLevel - 1 === this._zoom) {\n                //Reposition child clusters\n                for(var j = this._childClusters.length - 1; j >= 0; j--){\n                    this._childClusters[j]._restorePosition();\n                }\n            } else {\n                for(var k = this._childClusters.length - 1; k >= 0; k--){\n                    this._childClusters[k]._recursivelyRestoreChildPositions(zoomLevel);\n                }\n            }\n        },\n        _restorePosition: function() {\n            if (this._backupLatlng) {\n                this.setLatLng(this._backupLatlng);\n                delete this._backupLatlng;\n            }\n        },\n        //exceptBounds: If set, don't remove any markers/clusters in it\n        _recursivelyRemoveChildrenFromMap: function(previousBounds, mapMinZoom, zoomLevel, exceptBounds) {\n            var m, i;\n            this._recursively(previousBounds, mapMinZoom - 1, zoomLevel - 1, function(c) {\n                //Remove markers at every level\n                for(i = c._markers.length - 1; i >= 0; i--){\n                    m = c._markers[i];\n                    if (!exceptBounds || !exceptBounds.contains(m._latlng)) {\n                        c._group._featureGroup.removeLayer(m);\n                        if (m.clusterShow) {\n                            m.clusterShow();\n                        }\n                    }\n                }\n            }, function(c) {\n                //Remove child clusters at just the bottom level\n                for(i = c._childClusters.length - 1; i >= 0; i--){\n                    m = c._childClusters[i];\n                    if (!exceptBounds || !exceptBounds.contains(m._latlng)) {\n                        c._group._featureGroup.removeLayer(m);\n                        if (m.clusterShow) {\n                            m.clusterShow();\n                        }\n                    }\n                }\n            });\n        },\n        //Run the given functions recursively to this and child clusters\n        // boundsToApplyTo: a L.LatLngBounds representing the bounds of what clusters to recurse in to\n        // zoomLevelToStart: zoom level to start running functions (inclusive)\n        // zoomLevelToStop: zoom level to stop running functions (inclusive)\n        // runAtEveryLevel: function that takes an L.MarkerCluster as an argument that should be applied on every level\n        // runAtBottomLevel: function that takes an L.MarkerCluster as an argument that should be applied at only the bottom level\n        _recursively: function(boundsToApplyTo, zoomLevelToStart, zoomLevelToStop, runAtEveryLevel, runAtBottomLevel) {\n            var childClusters = this._childClusters, zoom = this._zoom, i, c;\n            if (zoomLevelToStart <= zoom) {\n                if (runAtEveryLevel) {\n                    runAtEveryLevel(this);\n                }\n                if (runAtBottomLevel && zoom === zoomLevelToStop) {\n                    runAtBottomLevel(this);\n                }\n            }\n            if (zoom < zoomLevelToStart || zoom < zoomLevelToStop) {\n                for(i = childClusters.length - 1; i >= 0; i--){\n                    c = childClusters[i];\n                    if (c._boundsNeedUpdate) {\n                        c._recalculateBounds();\n                    }\n                    if (boundsToApplyTo.intersects(c._bounds)) {\n                        c._recursively(boundsToApplyTo, zoomLevelToStart, zoomLevelToStop, runAtEveryLevel, runAtBottomLevel);\n                    }\n                }\n            }\n        },\n        //Returns true if we are the parent of only one cluster and that cluster is the same as us\n        _isSingleParent: function() {\n            //Don't need to check this._markers as the rest won't work if there are any\n            return this._childClusters.length > 0 && this._childClusters[0]._childCount === this._childCount;\n        }\n    });\n    /*\n\t* Extends L.Marker to include two extra methods: clusterHide and clusterShow.\n\t* \n\t* They work as setOpacity(0) and setOpacity(1) respectively, but\n\t* don't overwrite the options.opacity\n\t* \n\t*/ L.Marker.include({\n        clusterHide: function() {\n            var backup = this.options.opacity;\n            this.setOpacity(0);\n            this.options.opacity = backup;\n            return this;\n        },\n        clusterShow: function() {\n            return this.setOpacity(this.options.opacity);\n        }\n    });\n    L.DistanceGrid = function(cellSize) {\n        this._cellSize = cellSize;\n        this._sqCellSize = cellSize * cellSize;\n        this._grid = {};\n        this._objectPoint = {};\n    };\n    L.DistanceGrid.prototype = {\n        addObject: function(obj, point) {\n            var x = this._getCoord(point.x), y = this._getCoord(point.y), grid = this._grid, row = grid[y] = grid[y] || {}, cell = row[x] = row[x] || [], stamp = L.Util.stamp(obj);\n            this._objectPoint[stamp] = point;\n            cell.push(obj);\n        },\n        updateObject: function(obj, point) {\n            this.removeObject(obj);\n            this.addObject(obj, point);\n        },\n        //Returns true if the object was found\n        removeObject: function(obj, point) {\n            var x = this._getCoord(point.x), y = this._getCoord(point.y), grid = this._grid, row = grid[y] = grid[y] || {}, cell = row[x] = row[x] || [], i, len;\n            delete this._objectPoint[L.Util.stamp(obj)];\n            for(i = 0, len = cell.length; i < len; i++){\n                if (cell[i] === obj) {\n                    cell.splice(i, 1);\n                    if (len === 1) {\n                        delete row[x];\n                    }\n                    return true;\n                }\n            }\n        },\n        eachObject: function(fn, context) {\n            var i, j, k, len, row, cell, removed, grid = this._grid;\n            for(i in grid){\n                row = grid[i];\n                for(j in row){\n                    cell = row[j];\n                    for(k = 0, len = cell.length; k < len; k++){\n                        removed = fn.call(context, cell[k]);\n                        if (removed) {\n                            k--;\n                            len--;\n                        }\n                    }\n                }\n            }\n        },\n        getNearObject: function(point) {\n            var x = this._getCoord(point.x), y = this._getCoord(point.y), i, j, k, row, cell, len, obj, dist, objectPoint = this._objectPoint, closestDistSq = this._sqCellSize, closest = null;\n            for(i = y - 1; i <= y + 1; i++){\n                row = this._grid[i];\n                if (row) {\n                    for(j = x - 1; j <= x + 1; j++){\n                        cell = row[j];\n                        if (cell) {\n                            for(k = 0, len = cell.length; k < len; k++){\n                                obj = cell[k];\n                                dist = this._sqDist(objectPoint[L.Util.stamp(obj)], point);\n                                if (dist < closestDistSq || dist <= closestDistSq && closest === null) {\n                                    closestDistSq = dist;\n                                    closest = obj;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            return closest;\n        },\n        _getCoord: function(x) {\n            var coord = Math.floor(x / this._cellSize);\n            return isFinite(coord) ? coord : x;\n        },\n        _sqDist: function(p, p2) {\n            var dx = p2.x - p.x, dy = p2.y - p.y;\n            return dx * dx + dy * dy;\n        }\n    };\n    /* Copyright (c) 2012 the authors listed at the following URL, and/or\n\tthe authors of referenced articles or incorporated external code:\n\thttp://en.literateprograms.org/Quickhull_(Javascript)?action=history&offset=20120410175256\n\n\tPermission is hereby granted, free of charge, to any person obtaining\n\ta copy of this software and associated documentation files (the\n\t\"Software\"), to deal in the Software without restriction, including\n\twithout limitation the rights to use, copy, modify, merge, publish,\n\tdistribute, sublicense, and/or sell copies of the Software, and to\n\tpermit persons to whom the Software is furnished to do so, subject to\n\tthe following conditions:\n\n\tThe above copyright notice and this permission notice shall be\n\tincluded in all copies or substantial portions of the Software.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\tEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\tMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n\tIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n\tCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n\tTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n\tSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\tRetrieved from: http://en.literateprograms.org/Quickhull_(Javascript)?oldid=18434\n\t*/ (function() {\n        L.QuickHull = {\n            /*\n\t\t\t * @param {Object} cpt a point to be measured from the baseline\n\t\t\t * @param {Array} bl the baseline, as represented by a two-element\n\t\t\t *   array of latlng objects.\n\t\t\t * @returns {Number} an approximate distance measure\n\t\t\t */ getDistant: function(cpt, bl) {\n                var vY = bl[1].lat - bl[0].lat, vX = bl[0].lng - bl[1].lng;\n                return vX * (cpt.lat - bl[0].lat) + vY * (cpt.lng - bl[0].lng);\n            },\n            /*\n\t\t\t * @param {Array} baseLine a two-element array of latlng objects\n\t\t\t *   representing the baseline to project from\n\t\t\t * @param {Array} latLngs an array of latlng objects\n\t\t\t * @returns {Object} the maximum point and all new points to stay\n\t\t\t *   in consideration for the hull.\n\t\t\t */ findMostDistantPointFromBaseLine: function(baseLine, latLngs) {\n                var maxD = 0, maxPt = null, newPoints = [], i, pt, d;\n                for(i = latLngs.length - 1; i >= 0; i--){\n                    pt = latLngs[i];\n                    d = this.getDistant(pt, baseLine);\n                    if (d > 0) {\n                        newPoints.push(pt);\n                    } else {\n                        continue;\n                    }\n                    if (d > maxD) {\n                        maxD = d;\n                        maxPt = pt;\n                    }\n                }\n                return {\n                    maxPoint: maxPt,\n                    newPoints: newPoints\n                };\n            },\n            /*\n\t\t\t * Given a baseline, compute the convex hull of latLngs as an array\n\t\t\t * of latLngs.\n\t\t\t *\n\t\t\t * @param {Array} latLngs\n\t\t\t * @returns {Array}\n\t\t\t */ buildConvexHull: function(baseLine, latLngs) {\n                var convexHullBaseLines = [], t = this.findMostDistantPointFromBaseLine(baseLine, latLngs);\n                if (t.maxPoint) {\n                    convexHullBaseLines = convexHullBaseLines.concat(this.buildConvexHull([\n                        baseLine[0],\n                        t.maxPoint\n                    ], t.newPoints));\n                    convexHullBaseLines = convexHullBaseLines.concat(this.buildConvexHull([\n                        t.maxPoint,\n                        baseLine[1]\n                    ], t.newPoints));\n                    return convexHullBaseLines;\n                } else {\n                    return [\n                        baseLine[0]\n                    ];\n                }\n            },\n            /*\n\t\t\t * Given an array of latlngs, compute a convex hull as an array\n\t\t\t * of latlngs\n\t\t\t *\n\t\t\t * @param {Array} latLngs\n\t\t\t * @returns {Array}\n\t\t\t */ getConvexHull: function(latLngs) {\n                // find first baseline\n                var maxLat = false, minLat = false, maxLng = false, minLng = false, maxLatPt = null, minLatPt = null, maxLngPt = null, minLngPt = null, maxPt = null, minPt = null, i;\n                for(i = latLngs.length - 1; i >= 0; i--){\n                    var pt = latLngs[i];\n                    if (maxLat === false || pt.lat > maxLat) {\n                        maxLatPt = pt;\n                        maxLat = pt.lat;\n                    }\n                    if (minLat === false || pt.lat < minLat) {\n                        minLatPt = pt;\n                        minLat = pt.lat;\n                    }\n                    if (maxLng === false || pt.lng > maxLng) {\n                        maxLngPt = pt;\n                        maxLng = pt.lng;\n                    }\n                    if (minLng === false || pt.lng < minLng) {\n                        minLngPt = pt;\n                        minLng = pt.lng;\n                    }\n                }\n                if (minLat !== maxLat) {\n                    minPt = minLatPt;\n                    maxPt = maxLatPt;\n                } else {\n                    minPt = minLngPt;\n                    maxPt = maxLngPt;\n                }\n                var ch = [].concat(this.buildConvexHull([\n                    minPt,\n                    maxPt\n                ], latLngs), this.buildConvexHull([\n                    maxPt,\n                    minPt\n                ], latLngs));\n                return ch;\n            }\n        };\n    })();\n    L.MarkerCluster.include({\n        getConvexHull: function() {\n            var childMarkers = this.getAllChildMarkers(), points = [], p, i;\n            for(i = childMarkers.length - 1; i >= 0; i--){\n                p = childMarkers[i].getLatLng();\n                points.push(p);\n            }\n            return L.QuickHull.getConvexHull(points);\n        }\n    });\n    //This code is 100% based on https://github.com/jawj/OverlappingMarkerSpiderfier-Leaflet\n    //Huge thanks to jawj for implementing it first to make my job easy :-)\n    L.MarkerCluster.include({\n        _2PI: Math.PI * 2,\n        _circleFootSeparation: 25,\n        _circleStartAngle: 0,\n        _spiralFootSeparation: 28,\n        _spiralLengthStart: 11,\n        _spiralLengthFactor: 5,\n        _circleSpiralSwitchover: 9,\n        // 0 -> always spiral; Infinity -> always circle\n        spiderfy: function() {\n            if (this._group._spiderfied === this || this._group._inZoomAnimation) {\n                return;\n            }\n            var childMarkers = this.getAllChildMarkers(null, true), group = this._group, map = group._map, center = map.latLngToLayerPoint(this._latlng), positions;\n            this._group._unspiderfy();\n            this._group._spiderfied = this;\n            //TODO Maybe: childMarkers order by distance to center\n            if (this._group.options.spiderfyShapePositions) {\n                positions = this._group.options.spiderfyShapePositions(childMarkers.length, center);\n            } else if (childMarkers.length >= this._circleSpiralSwitchover) {\n                positions = this._generatePointsSpiral(childMarkers.length, center);\n            } else {\n                center.y += 10; // Otherwise circles look wrong => hack for standard blue icon, renders differently for other icons.\n                positions = this._generatePointsCircle(childMarkers.length, center);\n            }\n            this._animationSpiderfy(childMarkers, positions);\n        },\n        unspiderfy: function(zoomDetails) {\n            /// <param Name=\"zoomDetails\">Argument from zoomanim if being called in a zoom animation or null otherwise</param>\n            if (this._group._inZoomAnimation) {\n                return;\n            }\n            this._animationUnspiderfy(zoomDetails);\n            this._group._spiderfied = null;\n        },\n        _generatePointsCircle: function(count, centerPt) {\n            var circumference = this._group.options.spiderfyDistanceMultiplier * this._circleFootSeparation * (2 + count), legLength = circumference / this._2PI, angleStep = this._2PI / count, res = [], i, angle;\n            legLength = Math.max(legLength, 35); // Minimum distance to get outside the cluster icon.\n            res.length = count;\n            for(i = 0; i < count; i++){\n                angle = this._circleStartAngle + i * angleStep;\n                res[i] = new L.Point(centerPt.x + legLength * Math.cos(angle), centerPt.y + legLength * Math.sin(angle))._round();\n            }\n            return res;\n        },\n        _generatePointsSpiral: function(count, centerPt) {\n            var spiderfyDistanceMultiplier = this._group.options.spiderfyDistanceMultiplier, legLength = spiderfyDistanceMultiplier * this._spiralLengthStart, separation = spiderfyDistanceMultiplier * this._spiralFootSeparation, lengthFactor = spiderfyDistanceMultiplier * this._spiralLengthFactor * this._2PI, angle = 0, res = [], i;\n            res.length = count;\n            // Higher index, closer position to cluster center.\n            for(i = count; i >= 0; i--){\n                // Skip the first position, so that we are already farther from center and we avoid\n                // being under the default cluster icon (especially important for Circle Markers).\n                if (i < count) {\n                    res[i] = new L.Point(centerPt.x + legLength * Math.cos(angle), centerPt.y + legLength * Math.sin(angle))._round();\n                }\n                angle += separation / legLength + i * 0.0005;\n                legLength += lengthFactor / angle;\n            }\n            return res;\n        },\n        _noanimationUnspiderfy: function() {\n            var group = this._group, map = group._map, fg = group._featureGroup, childMarkers = this.getAllChildMarkers(null, true), m, i;\n            group._ignoreMove = true;\n            this.setOpacity(1);\n            for(i = childMarkers.length - 1; i >= 0; i--){\n                m = childMarkers[i];\n                fg.removeLayer(m);\n                if (m._preSpiderfyLatlng) {\n                    m.setLatLng(m._preSpiderfyLatlng);\n                    delete m._preSpiderfyLatlng;\n                }\n                if (m.setZIndexOffset) {\n                    m.setZIndexOffset(0);\n                }\n                if (m._spiderLeg) {\n                    map.removeLayer(m._spiderLeg);\n                    delete m._spiderLeg;\n                }\n            }\n            group.fire(\"unspiderfied\", {\n                cluster: this,\n                markers: childMarkers\n            });\n            group._ignoreMove = false;\n            group._spiderfied = null;\n        }\n    });\n    //Non Animated versions of everything\n    L.MarkerClusterNonAnimated = L.MarkerCluster.extend({\n        _animationSpiderfy: function(childMarkers, positions) {\n            var group = this._group, map = group._map, fg = group._featureGroup, legOptions = this._group.options.spiderLegPolylineOptions, i, m, leg, newPos;\n            group._ignoreMove = true;\n            // Traverse in ascending order to make sure that inner circleMarkers are on top of further legs. Normal markers are re-ordered by newPosition.\n            // The reverse order trick no longer improves performance on modern browsers.\n            for(i = 0; i < childMarkers.length; i++){\n                newPos = map.layerPointToLatLng(positions[i]);\n                m = childMarkers[i];\n                // Add the leg before the marker, so that in case the latter is a circleMarker, the leg is behind it.\n                leg = new L.Polyline([\n                    this._latlng,\n                    newPos\n                ], legOptions);\n                map.addLayer(leg);\n                m._spiderLeg = leg;\n                // Now add the marker.\n                m._preSpiderfyLatlng = m._latlng;\n                m.setLatLng(newPos);\n                if (m.setZIndexOffset) {\n                    m.setZIndexOffset(1000000); //Make these appear on top of EVERYTHING\n                }\n                fg.addLayer(m);\n            }\n            this.setOpacity(0.3);\n            group._ignoreMove = false;\n            group.fire(\"spiderfied\", {\n                cluster: this,\n                markers: childMarkers\n            });\n        },\n        _animationUnspiderfy: function() {\n            this._noanimationUnspiderfy();\n        }\n    });\n    //Animated versions here\n    L.MarkerCluster.include({\n        _animationSpiderfy: function(childMarkers, positions) {\n            var me = this, group = this._group, map = group._map, fg = group._featureGroup, thisLayerLatLng = this._latlng, thisLayerPos = map.latLngToLayerPoint(thisLayerLatLng), svg = L.Path.SVG, legOptions = L.extend({}, this._group.options.spiderLegPolylineOptions), finalLegOpacity = legOptions.opacity, i, m, leg, legPath, legLength, newPos;\n            if (finalLegOpacity === undefined) {\n                finalLegOpacity = L.MarkerClusterGroup.prototype.options.spiderLegPolylineOptions.opacity;\n            }\n            if (svg) {\n                // If the initial opacity of the spider leg is not 0 then it appears before the animation starts.\n                legOptions.opacity = 0;\n                // Add the class for CSS transitions.\n                legOptions.className = (legOptions.className || \"\") + \" leaflet-cluster-spider-leg\";\n            } else {\n                // Make sure we have a defined opacity.\n                legOptions.opacity = finalLegOpacity;\n            }\n            group._ignoreMove = true;\n            // Add markers and spider legs to map, hidden at our center point.\n            // Traverse in ascending order to make sure that inner circleMarkers are on top of further legs. Normal markers are re-ordered by newPosition.\n            // The reverse order trick no longer improves performance on modern browsers.\n            for(i = 0; i < childMarkers.length; i++){\n                m = childMarkers[i];\n                newPos = map.layerPointToLatLng(positions[i]);\n                // Add the leg before the marker, so that in case the latter is a circleMarker, the leg is behind it.\n                leg = new L.Polyline([\n                    thisLayerLatLng,\n                    newPos\n                ], legOptions);\n                map.addLayer(leg);\n                m._spiderLeg = leg;\n                // Explanations: https://jakearchibald.com/2013/animated-line-drawing-svg/\n                // In our case the transition property is declared in the CSS file.\n                if (svg) {\n                    legPath = leg._path;\n                    legLength = legPath.getTotalLength() + 0.1; // Need a small extra length to avoid remaining dot in Firefox.\n                    legPath.style.strokeDasharray = legLength; // Just 1 length is enough, it will be duplicated.\n                    legPath.style.strokeDashoffset = legLength;\n                }\n                // If it is a marker, add it now and we'll animate it out\n                if (m.setZIndexOffset) {\n                    m.setZIndexOffset(1000000); // Make normal markers appear on top of EVERYTHING\n                }\n                if (m.clusterHide) {\n                    m.clusterHide();\n                }\n                // Vectors just get immediately added\n                fg.addLayer(m);\n                if (m._setPos) {\n                    m._setPos(thisLayerPos);\n                }\n            }\n            group._forceLayout();\n            group._animationStart();\n            // Reveal markers and spider legs.\n            for(i = childMarkers.length - 1; i >= 0; i--){\n                newPos = map.layerPointToLatLng(positions[i]);\n                m = childMarkers[i];\n                //Move marker to new position\n                m._preSpiderfyLatlng = m._latlng;\n                m.setLatLng(newPos);\n                if (m.clusterShow) {\n                    m.clusterShow();\n                }\n                // Animate leg (animation is actually delegated to CSS transition).\n                if (svg) {\n                    leg = m._spiderLeg;\n                    legPath = leg._path;\n                    legPath.style.strokeDashoffset = 0;\n                    //legPath.style.strokeOpacity = finalLegOpacity;\n                    leg.setStyle({\n                        opacity: finalLegOpacity\n                    });\n                }\n            }\n            this.setOpacity(0.3);\n            group._ignoreMove = false;\n            setTimeout(function() {\n                group._animationEnd();\n                group.fire(\"spiderfied\", {\n                    cluster: me,\n                    markers: childMarkers\n                });\n            }, 200);\n        },\n        _animationUnspiderfy: function(zoomDetails) {\n            var me = this, group = this._group, map = group._map, fg = group._featureGroup, thisLayerPos = zoomDetails ? map._latLngToNewLayerPoint(this._latlng, zoomDetails.zoom, zoomDetails.center) : map.latLngToLayerPoint(this._latlng), childMarkers = this.getAllChildMarkers(null, true), svg = L.Path.SVG, m, i, leg, legPath, legLength, nonAnimatable;\n            group._ignoreMove = true;\n            group._animationStart();\n            //Make us visible and bring the child markers back in\n            this.setOpacity(1);\n            for(i = childMarkers.length - 1; i >= 0; i--){\n                m = childMarkers[i];\n                //Marker was added to us after we were spiderfied\n                if (!m._preSpiderfyLatlng) {\n                    continue;\n                }\n                //Close any popup on the marker first, otherwise setting the location of the marker will make the map scroll\n                m.closePopup();\n                //Fix up the location to the real one\n                m.setLatLng(m._preSpiderfyLatlng);\n                delete m._preSpiderfyLatlng;\n                //Hack override the location to be our center\n                nonAnimatable = true;\n                if (m._setPos) {\n                    m._setPos(thisLayerPos);\n                    nonAnimatable = false;\n                }\n                if (m.clusterHide) {\n                    m.clusterHide();\n                    nonAnimatable = false;\n                }\n                if (nonAnimatable) {\n                    fg.removeLayer(m);\n                }\n                // Animate the spider leg back in (animation is actually delegated to CSS transition).\n                if (svg) {\n                    leg = m._spiderLeg;\n                    legPath = leg._path;\n                    legLength = legPath.getTotalLength() + 0.1;\n                    legPath.style.strokeDashoffset = legLength;\n                    leg.setStyle({\n                        opacity: 0\n                    });\n                }\n            }\n            group._ignoreMove = false;\n            setTimeout(function() {\n                //If we have only <= one child left then that marker will be shown on the map so don't remove it!\n                var stillThereChildCount = 0;\n                for(i = childMarkers.length - 1; i >= 0; i--){\n                    m = childMarkers[i];\n                    if (m._spiderLeg) {\n                        stillThereChildCount++;\n                    }\n                }\n                for(i = childMarkers.length - 1; i >= 0; i--){\n                    m = childMarkers[i];\n                    if (!m._spiderLeg) {\n                        continue;\n                    }\n                    if (m.clusterShow) {\n                        m.clusterShow();\n                    }\n                    if (m.setZIndexOffset) {\n                        m.setZIndexOffset(0);\n                    }\n                    if (stillThereChildCount > 1) {\n                        fg.removeLayer(m);\n                    }\n                    map.removeLayer(m._spiderLeg);\n                    delete m._spiderLeg;\n                }\n                group._animationEnd();\n                group.fire(\"unspiderfied\", {\n                    cluster: me,\n                    markers: childMarkers\n                });\n            }, 200);\n        }\n    });\n    L.MarkerClusterGroup.include({\n        //The MarkerCluster currently spiderfied (if any)\n        _spiderfied: null,\n        unspiderfy: function() {\n            this._unspiderfy.apply(this, arguments);\n        },\n        _spiderfierOnAdd: function() {\n            this._map.on(\"click\", this._unspiderfyWrapper, this);\n            if (this._map.options.zoomAnimation) {\n                this._map.on(\"zoomstart\", this._unspiderfyZoomStart, this);\n            }\n            //Browsers without zoomAnimation or a big zoom don't fire zoomstart\n            this._map.on(\"zoomend\", this._noanimationUnspiderfy, this);\n            if (!L.Browser.touch) {\n                this._map.getRenderer(this);\n            //Needs to happen in the pageload, not after, or animations don't work in webkit\n            //  http://stackoverflow.com/questions/8455200/svg-animate-with-dynamically-added-elements\n            //Disable on touch browsers as the animation messes up on a touch zoom and isn't very noticable\n            }\n        },\n        _spiderfierOnRemove: function() {\n            this._map.off(\"click\", this._unspiderfyWrapper, this);\n            this._map.off(\"zoomstart\", this._unspiderfyZoomStart, this);\n            this._map.off(\"zoomanim\", this._unspiderfyZoomAnim, this);\n            this._map.off(\"zoomend\", this._noanimationUnspiderfy, this);\n            //Ensure that markers are back where they should be\n            // Use no animation to avoid a sticky leaflet-cluster-anim class on mapPane\n            this._noanimationUnspiderfy();\n        },\n        //On zoom start we add a zoomanim handler so that we are guaranteed to be last (after markers are animated)\n        //This means we can define the animation they do rather than Markers doing an animation to their actual location\n        _unspiderfyZoomStart: function() {\n            if (!this._map) {\n                return;\n            }\n            this._map.on(\"zoomanim\", this._unspiderfyZoomAnim, this);\n        },\n        _unspiderfyZoomAnim: function(zoomDetails) {\n            //Wait until the first zoomanim after the user has finished touch-zooming before running the animation\n            if (L.DomUtil.hasClass(this._map._mapPane, \"leaflet-touching\")) {\n                return;\n            }\n            this._map.off(\"zoomanim\", this._unspiderfyZoomAnim, this);\n            this._unspiderfy(zoomDetails);\n        },\n        _unspiderfyWrapper: function() {\n            /// <summary>_unspiderfy but passes no arguments</summary>\n            this._unspiderfy();\n        },\n        _unspiderfy: function(zoomDetails) {\n            if (this._spiderfied) {\n                this._spiderfied.unspiderfy(zoomDetails);\n            }\n        },\n        _noanimationUnspiderfy: function() {\n            if (this._spiderfied) {\n                this._spiderfied._noanimationUnspiderfy();\n            }\n        },\n        //If the given layer is currently being spiderfied then we unspiderfy it so it isn't on the map anymore etc\n        _unspiderfyLayer: function(layer) {\n            if (layer._spiderLeg) {\n                this._featureGroup.removeLayer(layer);\n                if (layer.clusterShow) {\n                    layer.clusterShow();\n                }\n                //Position will be fixed up immediately in _animationUnspiderfy\n                if (layer.setZIndexOffset) {\n                    layer.setZIndexOffset(0);\n                }\n                this._map.removeLayer(layer._spiderLeg);\n                delete layer._spiderLeg;\n            }\n        }\n    });\n    /**\n\t * Adds 1 public method to MCG and 1 to L.Marker to facilitate changing\n\t * markers' icon options and refreshing their icon and their parent clusters\n\t * accordingly (case where their iconCreateFunction uses data of childMarkers\n\t * to make up the cluster icon).\n\t */ L.MarkerClusterGroup.include({\n        /**\n\t\t * Updates the icon of all clusters which are parents of the given marker(s).\n\t\t * In singleMarkerMode, also updates the given marker(s) icon.\n\t\t * @param layers L.MarkerClusterGroup|L.LayerGroup|Array(L.Marker)|Map(L.Marker)|\n\t\t * L.MarkerCluster|L.Marker (optional) list of markers (or single marker) whose parent\n\t\t * clusters need to be updated. If not provided, retrieves all child markers of this.\n\t\t * @returns {L.MarkerClusterGroup}\n\t\t */ refreshClusters: function(layers) {\n            if (!layers) {\n                layers = this._topClusterLevel.getAllChildMarkers();\n            } else if (layers instanceof L.MarkerClusterGroup) {\n                layers = layers._topClusterLevel.getAllChildMarkers();\n            } else if (layers instanceof L.LayerGroup) {\n                layers = layers._layers;\n            } else if (layers instanceof L.MarkerCluster) {\n                layers = layers.getAllChildMarkers();\n            } else if (layers instanceof L.Marker) {\n                layers = [\n                    layers\n                ];\n            } // else: must be an Array(L.Marker)|Map(L.Marker)\n            this._flagParentsIconsNeedUpdate(layers);\n            this._refreshClustersIcons();\n            // In case of singleMarkerMode, also re-draw the markers.\n            if (this.options.singleMarkerMode) {\n                this._refreshSingleMarkerModeMarkers(layers);\n            }\n            return this;\n        },\n        /**\n\t\t * Simply flags all parent clusters of the given markers as having a \"dirty\" icon.\n\t\t * @param layers Array(L.Marker)|Map(L.Marker) list of markers.\n\t\t * @private\n\t\t */ _flagParentsIconsNeedUpdate: function(layers) {\n            var id, parent;\n            // Assumes layers is an Array or an Object whose prototype is non-enumerable.\n            for(id in layers){\n                // Flag parent clusters' icon as \"dirty\", all the way up.\n                // Dumb process that flags multiple times upper parents, but still\n                // much more efficient than trying to be smart and make short lists,\n                // at least in the case of a hierarchy following a power law:\n                // http://jsperf.com/flag-nodes-in-power-hierarchy/2\n                parent = layers[id].__parent;\n                while(parent){\n                    parent._iconNeedsUpdate = true;\n                    parent = parent.__parent;\n                }\n            }\n        },\n        /**\n\t\t * Re-draws the icon of the supplied markers.\n\t\t * To be used in singleMarkerMode only.\n\t\t * @param layers Array(L.Marker)|Map(L.Marker) list of markers.\n\t\t * @private\n\t\t */ _refreshSingleMarkerModeMarkers: function(layers) {\n            var id, layer;\n            for(id in layers){\n                layer = layers[id];\n                // Make sure we do not override markers that do not belong to THIS group.\n                if (this.hasLayer(layer)) {\n                    // Need to re-create the icon first, then re-draw the marker.\n                    layer.setIcon(this._overrideMarkerIcon(layer));\n                }\n            }\n        }\n    });\n    L.Marker.include({\n        /**\n\t\t * Updates the given options in the marker's icon and refreshes the marker.\n\t\t * @param options map object of icon options.\n\t\t * @param directlyRefreshClusters boolean (optional) true to trigger\n\t\t * MCG.refreshClustersOf() right away with this single marker.\n\t\t * @returns {L.Marker}\n\t\t */ refreshIconOptions: function(options, directlyRefreshClusters) {\n            var icon = this.options.icon;\n            L.setOptions(icon, options);\n            this.setIcon(icon);\n            // Shortcut to refresh the associated MCG clusters right away.\n            // To be used when refreshing a single marker.\n            // Otherwise, better use MCG.refreshClusters() once at the end with\n            // the list of modified markers.\n            if (directlyRefreshClusters && this.__parent) {\n                this.__parent._group.refreshClusters(this);\n            }\n            return this;\n        }\n    });\n    exports1.MarkerClusterGroup = MarkerClusterGroup;\n    exports1.MarkerCluster = MarkerCluster;\n    Object.defineProperty(exports1, \"__esModule\", {\n        value: true\n    });\n}); //# sourceMappingURL=leaflet.markercluster-src.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/leaflet.markercluster/dist/leaflet.markercluster-src.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/leaflet.markercluster/dist/MarkerCluster.Default.css":
/*!***************************************************************************!*\
  !*** ./node_modules/leaflet.markercluster/dist/MarkerCluster.Default.css ***!
  \***************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"814dee228a5a\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sZWFmbGV0Lm1hcmtlcmNsdXN0ZXIvZGlzdC9NYXJrZXJDbHVzdGVyLkRlZmF1bHQuY3NzIiwibWFwcGluZ3MiOiI7QUFBQSwrREFBZSxjQUFjO0FBQzdCLElBQUksSUFBVSxJQUFJLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbGVhZmxldC5tYXJrZXJjbHVzdGVyL2Rpc3QvTWFya2VyQ2x1c3Rlci5EZWZhdWx0LmNzcz8wZDZlIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiODE0ZGVlMjI4YTVhXCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/leaflet.markercluster/dist/MarkerCluster.Default.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/leaflet.markercluster/dist/MarkerCluster.css":
/*!*******************************************************************!*\
  !*** ./node_modules/leaflet.markercluster/dist/MarkerCluster.css ***!
  \*******************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"e6270cc586ba\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sZWFmbGV0Lm1hcmtlcmNsdXN0ZXIvZGlzdC9NYXJrZXJDbHVzdGVyLmNzcyIsIm1hcHBpbmdzIjoiO0FBQUEsK0RBQWUsY0FBYztBQUM3QixJQUFJLElBQVUsSUFBSSxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xlYWZsZXQubWFya2VyY2x1c3Rlci9kaXN0L01hcmtlckNsdXN0ZXIuY3NzPzZiMjgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCJlNjI3MGNjNTg2YmFcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/leaflet.markercluster/dist/MarkerCluster.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./components/ZonesDesserviesMap.tsx":
/*!*******************************************!*\
  !*** ./components/ZonesDesserviesMap.tsx ***!
  \*******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ ZonesDesserviesMap; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_leaflet__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-leaflet */ \"(app-pages-browser)/./node_modules/react-leaflet/lib/hooks.js\");\n/* harmony import */ var react_leaflet__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-leaflet */ \"(app-pages-browser)/./node_modules/react-leaflet/lib/MapContainer.js\");\n/* harmony import */ var react_leaflet__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-leaflet */ \"(app-pages-browser)/./node_modules/react-leaflet/lib/TileLayer.js\");\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! leaflet */ \"(app-pages-browser)/./node_modules/leaflet/dist/leaflet-src.js\");\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(leaflet__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var leaflet_dist_leaflet_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! leaflet/dist/leaflet.css */ \"(app-pages-browser)/./node_modules/leaflet/dist/leaflet.css\");\n/* harmony import */ var leaflet_markercluster_dist_MarkerCluster_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! leaflet.markercluster/dist/MarkerCluster.css */ \"(app-pages-browser)/./node_modules/leaflet.markercluster/dist/MarkerCluster.css\");\n/* harmony import */ var leaflet_markercluster_dist_MarkerCluster_Default_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! leaflet.markercluster/dist/MarkerCluster.Default.css */ \"(app-pages-browser)/./node_modules/leaflet.markercluster/dist/MarkerCluster.Default.css\");\n/* harmony import */ var leaflet_markercluster__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! leaflet.markercluster */ \"(app-pages-browser)/./node_modules/leaflet.markercluster/dist/leaflet.markercluster-src.js\");\n/* harmony import */ var leaflet_markercluster__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(leaflet_markercluster__WEBPACK_IMPORTED_MODULE_6__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$();\n\n\n\n\n\n\n\n// Liste des centres hospitaliers de Toulouse\nconst hospitalPositions = [\n    {\n        name: \"H\\xf4pital Purpan\",\n        coords: [\n            43.6107,\n            1.4235\n        ]\n    },\n    {\n        name: \"H\\xf4pital Rangueil\",\n        coords: [\n            43.5372,\n            1.4436\n        ]\n    },\n    {\n        name: \"H\\xf4pital Larrey\",\n        coords: [\n            43.5378,\n            1.4451\n        ]\n    },\n    {\n        name: \"H\\xf4pital Pierre-Paul Riquet\",\n        coords: [\n            43.6150,\n            1.4322\n        ]\n    },\n    {\n        name: \"H\\xf4pital des enfants et Paule de Viguier\",\n        coords: [\n            43.5912,\n            1.4573\n        ]\n    },\n    {\n        name: \"H\\xf4pital La Grave - Cit\\xe9 de la sant\\xe9\",\n        coords: [\n            43.6002,\n            1.4445\n        ]\n    },\n    {\n        name: \"Institut Universitaire du Cancer Toulouse-Oncopole\",\n        coords: [\n            43.5471,\n            1.4424\n        ]\n    },\n    {\n        name: \"Centre Hospitalier G\\xe9rard Marchant\",\n        coords: [\n            43.5744,\n            1.4263\n        ]\n    }\n];\n// Icône personnalisée pour les markers\nconst useCustomIcon = ()=>{\n    _s();\n    return (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>new (leaflet__WEBPACK_IMPORTED_MODULE_1___default().Icon)({\n            iconUrl: \"/images/logo-marker.png\",\n            iconSize: [\n                40,\n                40\n            ],\n            iconAnchor: [\n                20,\n                40\n            ]\n        }), []);\n};\n_s(useCustomIcon, \"nwk+m61qLgjDVUp4IGV/072DDN4=\");\n// Ajuste le zoom pour afficher tous les markers\nfunction FitBounds(param) {\n    let { positions } = param;\n    _s1();\n    const map = (0,react_leaflet__WEBPACK_IMPORTED_MODULE_7__.useMap)();\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        if (positions.length > 0) {\n            const bounds = leaflet__WEBPACK_IMPORTED_MODULE_1___default().latLngBounds(positions.map((p)=>p.coords));\n            map.fitBounds(bounds, {\n                padding: [\n                    50,\n                    50\n                ]\n            });\n        }\n    }, [\n        map,\n        positions\n    ]);\n    return null;\n}\n_s1(FitBounds, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function() {\n    return [\n        react_leaflet__WEBPACK_IMPORTED_MODULE_7__.useMap\n    ];\n});\n_c = FitBounds;\nfunction ZonesDesserviesMap() {\n    _s2();\n    const customIcon = useCustomIcon();\n    const mapRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const [positions] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(hospitalPositions);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        if (!mapRef.current) return;\n        const map = mapRef.current;\n        // Crée le cluster\n        const markers = leaflet__WEBPACK_IMPORTED_MODULE_1___default().markerClusterGroup();\n        // Ajoute chaque marker\n        positions.forEach((param)=>{\n            let { coords, name } = param;\n            const marker = leaflet__WEBPACK_IMPORTED_MODULE_1___default().marker(coords, {\n                icon: customIcon\n            });\n            marker.bindPopup(\"<b>\".concat(name, \"</b>\"));\n            markers.addLayer(marker);\n        });\n        map.addLayer(markers);\n        // Ajuste le zoom pour tous les markers\n        map.fitBounds(markers.getBounds(), {\n            padding: [\n                50,\n                50\n            ]\n        });\n    }, [\n        positions,\n        customIcon\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"mt-10\",\n        style: {\n            height: \"400px\",\n            width: \"100%\"\n        },\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_leaflet__WEBPACK_IMPORTED_MODULE_8__.MapContainer, {\n            center: [\n                43.6045,\n                1.4442\n            ],\n            zoom: 10,\n            style: {\n                height: \"100%\",\n                width: \"100%\"\n            },\n            whenCreated: (mapInstance)=>mapRef.current = mapInstance,\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_leaflet__WEBPACK_IMPORTED_MODULE_9__.TileLayer, {\n                    url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n                    attribution: '\\xa9 <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n                }, void 0, false, {\n                    fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/components/ZonesDesserviesMap.tsx\",\n                    lineNumber: 80,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(FitBounds, {\n                    positions: positions\n                }, void 0, false, {\n                    fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/components/ZonesDesserviesMap.tsx\",\n                    lineNumber: 84,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/components/ZonesDesserviesMap.tsx\",\n            lineNumber: 74,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/components/ZonesDesserviesMap.tsx\",\n        lineNumber: 73,\n        columnNumber: 5\n    }, this);\n}\n_s2(ZonesDesserviesMap, \"NePr4v2HsKe6PUPqGmsczXMkIS0=\", false, function() {\n    return [\n        useCustomIcon\n    ];\n});\n_c1 = ZonesDesserviesMap;\nvar _c, _c1;\n$RefreshReg$(_c, \"FitBounds\");\n$RefreshReg$(_c1, \"ZonesDesserviesMap\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2NvbXBvbmVudHMvWm9uZXNEZXNzZXJ2aWVzTWFwLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRStEO0FBQ3hDO0FBQ3FDO0FBQzNCO0FBQ29CO0FBQ1E7QUFDL0I7QUFFOUIsNkNBQTZDO0FBQzdDLE1BQU1RLG9CQUFvQjtJQUN4QjtRQUFFQyxNQUFNO1FBQWtCQyxRQUFRO1lBQUM7WUFBUztTQUFPO0lBQUM7SUFDcEQ7UUFBRUQsTUFBTTtRQUFvQkMsUUFBUTtZQUFDO1lBQVM7U0FBTztJQUFDO0lBQ3REO1FBQUVELE1BQU07UUFBa0JDLFFBQVE7WUFBQztZQUFTO1NBQU87SUFBQztJQUNwRDtRQUFFRCxNQUFNO1FBQThCQyxRQUFRO1lBQUM7WUFBUztTQUFPO0lBQUM7SUFDaEU7UUFBRUQsTUFBTTtRQUEyQ0MsUUFBUTtZQUFDO1lBQVM7U0FBTztJQUFDO0lBQzdFO1FBQUVELE1BQU07UUFBdUNDLFFBQVE7WUFBQztZQUFTO1NBQU87SUFBQztJQUN6RTtRQUFFRCxNQUFNO1FBQXNEQyxRQUFRO1lBQUM7WUFBUztTQUFPO0lBQUM7SUFDeEY7UUFBRUQsTUFBTTtRQUFzQ0MsUUFBUTtZQUFDO1lBQVM7U0FBTztJQUFDO0NBQ3pFO0FBRUQsdUNBQXVDO0FBQ3ZDLE1BQU1DLGdCQUFnQjs7SUFDcEJOLE9BQUFBLDhDQUFPQSxDQUNMLElBQ0UsSUFBSUYscURBQU0sQ0FBQztZQUNUVSxTQUFTO1lBQ1RDLFVBQVU7Z0JBQUM7Z0JBQUk7YUFBRztZQUNsQkMsWUFBWTtnQkFBQztnQkFBSTthQUFHO1FBQ3RCLElBQ0YsRUFBRTtBQUNKO0dBVElKO0FBV04sZ0RBQWdEO0FBQ2hELFNBQVNLLFVBQVUsS0FBYTtRQUFiLEVBQUVDLFNBQVMsRUFBRSxHQUFiOztJQUNqQixNQUFNQyxNQUFNaEIscURBQU1BO0lBQ2xCRSxnREFBU0EsQ0FBQztRQUNSLElBQUlhLFVBQVVFLE1BQU0sR0FBRyxHQUFHO1lBQ3hCLE1BQU1DLFNBQVNqQiwyREFBYyxDQUFDYyxVQUFVQyxHQUFHLENBQUNJLENBQUFBLElBQUtBLEVBQUVaLE1BQU07WUFDekRRLElBQUlLLFNBQVMsQ0FBQ0gsUUFBUTtnQkFBRUksU0FBUztvQkFBQztvQkFBSTtpQkFBRztZQUFDO1FBQzVDO0lBQ0YsR0FBRztRQUFDTjtRQUFLRDtLQUFVO0lBQ25CLE9BQU87QUFDVDtJQVRTRDs7UUFDS2QsaURBQU1BOzs7S0FEWGM7QUFXTSxTQUFTUzs7SUFDdEIsTUFBTUMsYUFBYWY7SUFDbkIsTUFBTWdCLFNBQVNyQiw2Q0FBTUEsQ0FBQztJQUN0QixNQUFNLENBQUNXLFVBQVUsR0FBR1YsK0NBQVFBLENBQUNDO0lBRTdCSixnREFBU0EsQ0FBQztRQUNSLElBQUksQ0FBQ3VCLE9BQU9DLE9BQU8sRUFBRTtRQUNyQixNQUFNVixNQUFNUyxPQUFPQyxPQUFPO1FBRTFCLGtCQUFrQjtRQUNsQixNQUFNQyxVQUFVMUIsaUVBQW9CO1FBRXBDLHVCQUF1QjtRQUN2QmMsVUFBVWMsT0FBTyxDQUFDO2dCQUFDLEVBQUVyQixNQUFNLEVBQUVELElBQUksRUFBRTtZQUNqQyxNQUFNdUIsU0FBUzdCLHFEQUFRLENBQUNPLFFBQVE7Z0JBQUV1QixNQUFNUDtZQUFXO1lBQ25ETSxPQUFPRSxTQUFTLENBQUMsTUFBVyxPQUFMekIsTUFBSztZQUM1Qm9CLFFBQVFNLFFBQVEsQ0FBQ0g7UUFDbkI7UUFFQWQsSUFBSWlCLFFBQVEsQ0FBQ047UUFFYix1Q0FBdUM7UUFDdkNYLElBQUlLLFNBQVMsQ0FBQ00sUUFBUU8sU0FBUyxJQUFJO1lBQUVaLFNBQVM7Z0JBQUM7Z0JBQUk7YUFBRztRQUFDO0lBQ3pELEdBQUc7UUFBQ1A7UUFBV1M7S0FBVztJQUUxQixxQkFDRSw4REFBQ1c7UUFBSUMsV0FBVTtRQUFRQyxPQUFPO1lBQUVDLFFBQVE7WUFBU0MsT0FBTztRQUFPO2tCQUM3RCw0RUFBQ3pDLHVEQUFZQTtZQUNYMEMsUUFBUTtnQkFBQztnQkFBUzthQUFPO1lBQ3pCQyxNQUFNO1lBQ05KLE9BQU87Z0JBQUVDLFFBQVE7Z0JBQVFDLE9BQU87WUFBTztZQUN2Q0csYUFBYSxDQUFDQyxjQUFpQmxCLE9BQU9DLE9BQU8sR0FBR2lCOzs4QkFFaEQsOERBQUM1QyxvREFBU0E7b0JBQ1I2QyxLQUFJO29CQUNKQyxhQUFZOzs7Ozs7OEJBRWQsOERBQUMvQjtvQkFBVUMsV0FBV0E7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBSTlCO0lBekN3QlE7O1FBQ0hkOzs7TUFER2MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy9ab25lc0Rlc3NlcnZpZXNNYXAudHN4PzUwNWIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCJcblxuaW1wb3J0IHsgTWFwQ29udGFpbmVyLCBUaWxlTGF5ZXIsIHVzZU1hcCB9IGZyb20gXCJyZWFjdC1sZWFmbGV0XCJcbmltcG9ydCBMIGZyb20gXCJsZWFmbGV0XCJcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgXCJsZWFmbGV0L2Rpc3QvbGVhZmxldC5jc3NcIlxuaW1wb3J0IFwibGVhZmxldC5tYXJrZXJjbHVzdGVyL2Rpc3QvTWFya2VyQ2x1c3Rlci5jc3NcIlxuaW1wb3J0IFwibGVhZmxldC5tYXJrZXJjbHVzdGVyL2Rpc3QvTWFya2VyQ2x1c3Rlci5EZWZhdWx0LmNzc1wiXG5pbXBvcnQgXCJsZWFmbGV0Lm1hcmtlcmNsdXN0ZXJcIlxuXG4vLyBMaXN0ZSBkZXMgY2VudHJlcyBob3NwaXRhbGllcnMgZGUgVG91bG91c2VcbmNvbnN0IGhvc3BpdGFsUG9zaXRpb25zID0gW1xuICB7IG5hbWU6IFwiSMO0cGl0YWwgUHVycGFuXCIsIGNvb3JkczogWzQzLjYxMDcsIDEuNDIzNV0gfSxcbiAgeyBuYW1lOiBcIkjDtHBpdGFsIFJhbmd1ZWlsXCIsIGNvb3JkczogWzQzLjUzNzIsIDEuNDQzNl0gfSxcbiAgeyBuYW1lOiBcIkjDtHBpdGFsIExhcnJleVwiLCBjb29yZHM6IFs0My41Mzc4LCAxLjQ0NTFdIH0sXG4gIHsgbmFtZTogXCJIw7RwaXRhbCBQaWVycmUtUGF1bCBSaXF1ZXRcIiwgY29vcmRzOiBbNDMuNjE1MCwgMS40MzIyXSB9LFxuICB7IG5hbWU6IFwiSMO0cGl0YWwgZGVzIGVuZmFudHMgZXQgUGF1bGUgZGUgVmlndWllclwiLCBjb29yZHM6IFs0My41OTEyLCAxLjQ1NzNdIH0sXG4gIHsgbmFtZTogXCJIw7RwaXRhbCBMYSBHcmF2ZSAtIENpdMOpIGRlIGxhIHNhbnTDqVwiLCBjb29yZHM6IFs0My42MDAyLCAxLjQ0NDVdIH0sXG4gIHsgbmFtZTogXCJJbnN0aXR1dCBVbml2ZXJzaXRhaXJlIGR1IENhbmNlciBUb3Vsb3VzZS1PbmNvcG9sZVwiLCBjb29yZHM6IFs0My41NDcxLCAxLjQ0MjRdIH0sXG4gIHsgbmFtZTogXCJDZW50cmUgSG9zcGl0YWxpZXIgR8OpcmFyZCBNYXJjaGFudFwiLCBjb29yZHM6IFs0My41NzQ0LCAxLjQyNjNdIH0sXG5dXG5cbi8vIEljw7RuZSBwZXJzb25uYWxpc8OpZSBwb3VyIGxlcyBtYXJrZXJzXG5jb25zdCB1c2VDdXN0b21JY29uID0gKCkgPT5cbiAgdXNlTWVtbyhcbiAgICAoKSA9PlxuICAgICAgbmV3IEwuSWNvbih7XG4gICAgICAgIGljb25Vcmw6IFwiL2ltYWdlcy9sb2dvLW1hcmtlci5wbmdcIiwgLy8gY2hlbWluIGRhbnMgL3B1YmxpYy9pbWFnZXMvXG4gICAgICAgIGljb25TaXplOiBbNDAsIDQwXSxcbiAgICAgICAgaWNvbkFuY2hvcjogWzIwLCA0MF0sXG4gICAgICB9KSxcbiAgICBbXVxuICApXG5cbi8vIEFqdXN0ZSBsZSB6b29tIHBvdXIgYWZmaWNoZXIgdG91cyBsZXMgbWFya2Vyc1xuZnVuY3Rpb24gRml0Qm91bmRzKHsgcG9zaXRpb25zIH0pIHtcbiAgY29uc3QgbWFwID0gdXNlTWFwKClcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocG9zaXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGJvdW5kcyA9IEwubGF0TG5nQm91bmRzKHBvc2l0aW9ucy5tYXAocCA9PiBwLmNvb3JkcykpXG4gICAgICBtYXAuZml0Qm91bmRzKGJvdW5kcywgeyBwYWRkaW5nOiBbNTAsIDUwXSB9KVxuICAgIH1cbiAgfSwgW21hcCwgcG9zaXRpb25zXSlcbiAgcmV0dXJuIG51bGxcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gWm9uZXNEZXNzZXJ2aWVzTWFwKCkge1xuICBjb25zdCBjdXN0b21JY29uID0gdXNlQ3VzdG9tSWNvbigpXG4gIGNvbnN0IG1hcFJlZiA9IHVzZVJlZihudWxsKVxuICBjb25zdCBbcG9zaXRpb25zXSA9IHVzZVN0YXRlKGhvc3BpdGFsUG9zaXRpb25zKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFtYXBSZWYuY3VycmVudCkgcmV0dXJuXG4gICAgY29uc3QgbWFwID0gbWFwUmVmLmN1cnJlbnRcblxuICAgIC8vIENyw6llIGxlIGNsdXN0ZXJcbiAgICBjb25zdCBtYXJrZXJzID0gTC5tYXJrZXJDbHVzdGVyR3JvdXAoKVxuXG4gICAgLy8gQWpvdXRlIGNoYXF1ZSBtYXJrZXJcbiAgICBwb3NpdGlvbnMuZm9yRWFjaCgoeyBjb29yZHMsIG5hbWUgfSkgPT4ge1xuICAgICAgY29uc3QgbWFya2VyID0gTC5tYXJrZXIoY29vcmRzLCB7IGljb246IGN1c3RvbUljb24gfSlcbiAgICAgIG1hcmtlci5iaW5kUG9wdXAoYDxiPiR7bmFtZX08L2I+YClcbiAgICAgIG1hcmtlcnMuYWRkTGF5ZXIobWFya2VyKVxuICAgIH0pXG5cbiAgICBtYXAuYWRkTGF5ZXIobWFya2VycylcblxuICAgIC8vIEFqdXN0ZSBsZSB6b29tIHBvdXIgdG91cyBsZXMgbWFya2Vyc1xuICAgIG1hcC5maXRCb3VuZHMobWFya2Vycy5nZXRCb3VuZHMoKSwgeyBwYWRkaW5nOiBbNTAsIDUwXSB9KVxuICB9LCBbcG9zaXRpb25zLCBjdXN0b21JY29uXSlcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwibXQtMTBcIiBzdHlsZT17eyBoZWlnaHQ6IFwiNDAwcHhcIiwgd2lkdGg6IFwiMTAwJVwiIH19PlxuICAgICAgPE1hcENvbnRhaW5lclxuICAgICAgICBjZW50ZXI9e1s0My42MDQ1LCAxLjQ0NDJdfVxuICAgICAgICB6b29tPXsxMH1cbiAgICAgICAgc3R5bGU9e3sgaGVpZ2h0OiBcIjEwMCVcIiwgd2lkdGg6IFwiMTAwJVwiIH19XG4gICAgICAgIHdoZW5DcmVhdGVkPXsobWFwSW5zdGFuY2UpID0+IChtYXBSZWYuY3VycmVudCA9IG1hcEluc3RhbmNlKX1cbiAgICAgID5cbiAgICAgICAgPFRpbGVMYXllclxuICAgICAgICAgIHVybD1cImh0dHBzOi8ve3N9LnRpbGUub3BlbnN0cmVldG1hcC5vcmcve3p9L3t4fS97eX0ucG5nXCJcbiAgICAgICAgICBhdHRyaWJ1dGlvbj0nJmNvcHk7IDxhIGhyZWY9XCJodHRwczovL3d3dy5vcGVuc3RyZWV0bWFwLm9yZy9jb3B5cmlnaHRcIj5PcGVuU3RyZWV0TWFwPC9hPiBjb250cmlidXRvcnMnXG4gICAgICAgIC8+XG4gICAgICAgIDxGaXRCb3VuZHMgcG9zaXRpb25zPXtwb3NpdGlvbnN9IC8+XG4gICAgICA8L01hcENvbnRhaW5lcj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuIl0sIm5hbWVzIjpbIk1hcENvbnRhaW5lciIsIlRpbGVMYXllciIsInVzZU1hcCIsIkwiLCJ1c2VFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVmIiwidXNlU3RhdGUiLCJob3NwaXRhbFBvc2l0aW9ucyIsIm5hbWUiLCJjb29yZHMiLCJ1c2VDdXN0b21JY29uIiwiSWNvbiIsImljb25VcmwiLCJpY29uU2l6ZSIsImljb25BbmNob3IiLCJGaXRCb3VuZHMiLCJwb3NpdGlvbnMiLCJtYXAiLCJsZW5ndGgiLCJib3VuZHMiLCJsYXRMbmdCb3VuZHMiLCJwIiwiZml0Qm91bmRzIiwicGFkZGluZyIsIlpvbmVzRGVzc2Vydmllc01hcCIsImN1c3RvbUljb24iLCJtYXBSZWYiLCJjdXJyZW50IiwibWFya2VycyIsIm1hcmtlckNsdXN0ZXJHcm91cCIsImZvckVhY2giLCJtYXJrZXIiLCJpY29uIiwiYmluZFBvcHVwIiwiYWRkTGF5ZXIiLCJnZXRCb3VuZHMiLCJkaXYiLCJjbGFzc05hbWUiLCJzdHlsZSIsImhlaWdodCIsIndpZHRoIiwiY2VudGVyIiwiem9vbSIsIndoZW5DcmVhdGVkIiwibWFwSW5zdGFuY2UiLCJ1cmwiLCJhdHRyaWJ1dGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/ZonesDesserviesMap.tsx\n"));

/***/ })

});