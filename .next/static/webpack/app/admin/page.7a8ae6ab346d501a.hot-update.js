"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/page",{

/***/ "(app-pages-browser)/./node_modules/fast-png/lib-esm/PngDecoder.js":
/*!*****************************************************!*\
  !*** ./node_modules/fast-png/lib-esm/PngDecoder.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ PngDecoder; }\n/* harmony export */ });\n/* harmony import */ var iobuffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! iobuffer */ \"(app-pages-browser)/./node_modules/iobuffer/lib-esm/IOBuffer.js\");\n/* harmony import */ var pako__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pako */ \"(app-pages-browser)/./node_modules/pako/dist/pako.esm.mjs\");\n/* harmony import */ var _helpers_crc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/crc */ \"(app-pages-browser)/./node_modules/fast-png/lib-esm/helpers/crc.js\");\n/* harmony import */ var _helpers_decodeInterlaceAdam7__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers/decodeInterlaceAdam7 */ \"(app-pages-browser)/./node_modules/fast-png/lib-esm/helpers/decodeInterlaceAdam7.js\");\n/* harmony import */ var _helpers_decodeInterlaceNull__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers/decodeInterlaceNull */ \"(app-pages-browser)/./node_modules/fast-png/lib-esm/helpers/decodeInterlaceNull.js\");\n/* harmony import */ var _helpers_signature__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers/signature */ \"(app-pages-browser)/./node_modules/fast-png/lib-esm/helpers/signature.js\");\n/* harmony import */ var _helpers_text__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./helpers/text */ \"(app-pages-browser)/./node_modules/fast-png/lib-esm/helpers/text.js\");\n/* harmony import */ var _internalTypes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./internalTypes */ \"(app-pages-browser)/./node_modules/fast-png/lib-esm/internalTypes.js\");\n\n\n\n\n\n\n\n\nclass PngDecoder extends iobuffer__WEBPACK_IMPORTED_MODULE_0__.IOBuffer {\n    decode() {\n        (0,_helpers_signature__WEBPACK_IMPORTED_MODULE_5__.checkSignature)(this);\n        while(!this._end){\n            const length = this.readUint32();\n            const type = this.readChars(4);\n            this.decodeChunk(length, type);\n        }\n        this.decodeImage();\n        return this._png;\n    }\n    decodeApng() {\n        (0,_helpers_signature__WEBPACK_IMPORTED_MODULE_5__.checkSignature)(this);\n        while(!this._end){\n            const length = this.readUint32();\n            const type = this.readChars(4);\n            this.decodeApngChunk(length, type);\n        }\n        this.decodeApngImage();\n        return this._apng;\n    }\n    // https://www.w3.org/TR/PNG/#5Chunk-layout\n    decodeChunk(length, type) {\n        const offset = this.offset;\n        switch(type){\n            // 11.2 Critical chunks\n            case \"IHDR\":\n                this.decodeIHDR();\n                break;\n            case \"PLTE\":\n                this.decodePLTE(length);\n                break;\n            case \"IDAT\":\n                this.decodeIDAT(length);\n                break;\n            case \"IEND\":\n                this._end = true;\n                break;\n            // 11.3 Ancillary chunks\n            case \"tRNS\":\n                this.decodetRNS(length);\n                break;\n            case \"iCCP\":\n                this.decodeiCCP(length);\n                break;\n            case _helpers_text__WEBPACK_IMPORTED_MODULE_6__.textChunkName:\n                (0,_helpers_text__WEBPACK_IMPORTED_MODULE_6__.decodetEXt)(this._png.text, this, length);\n                break;\n            case \"pHYs\":\n                this.decodepHYs();\n                break;\n            default:\n                this.skip(length);\n                break;\n        }\n        if (this.offset - offset !== length) {\n            throw new Error(\"Length mismatch while decoding chunk \".concat(type));\n        }\n        if (this._checkCrc) {\n            (0,_helpers_crc__WEBPACK_IMPORTED_MODULE_2__.checkCrc)(this, length + 4, type);\n        } else {\n            this.skip(4);\n        }\n    }\n    decodeApngChunk(length, type) {\n        const offset = this.offset;\n        if (type !== \"fdAT\" && type !== \"IDAT\" && this._writingDataChunks) {\n            this.pushDataToFrame();\n        }\n        switch(type){\n            case \"acTL\":\n                this.decodeACTL();\n                break;\n            case \"fcTL\":\n                this.decodeFCTL();\n                break;\n            case \"fdAT\":\n                this.decodeFDAT(length);\n                break;\n            default:\n                this.decodeChunk(length, type);\n                this.offset = offset + length;\n                break;\n        }\n        if (this.offset - offset !== length) {\n            throw new Error(\"Length mismatch while decoding chunk \".concat(type));\n        }\n        if (this._checkCrc) {\n            (0,_helpers_crc__WEBPACK_IMPORTED_MODULE_2__.checkCrc)(this, length + 4, type);\n        } else {\n            this.skip(4);\n        }\n    }\n    // https://www.w3.org/TR/PNG/#11IHDR\n    decodeIHDR() {\n        const image = this._png;\n        image.width = this.readUint32();\n        image.height = this.readUint32();\n        image.depth = checkBitDepth(this.readUint8());\n        const colorType = this.readUint8();\n        this._colorType = colorType;\n        let channels;\n        switch(colorType){\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.GREYSCALE:\n                channels = 1;\n                break;\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.TRUECOLOUR:\n                channels = 3;\n                break;\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.INDEXED_COLOUR:\n                channels = 1;\n                break;\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.GREYSCALE_ALPHA:\n                channels = 2;\n                break;\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.TRUECOLOUR_ALPHA:\n                channels = 4;\n                break;\n            // Kept for exhaustiveness.\n            // eslint-disable-next-line unicorn/no-useless-switch-case\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.UNKNOWN:\n            default:\n                throw new Error(\"Unknown color type: \".concat(colorType));\n        }\n        this._png.channels = channels;\n        this._compressionMethod = this.readUint8();\n        if (this._compressionMethod !== _internalTypes__WEBPACK_IMPORTED_MODULE_7__.CompressionMethod.DEFLATE) {\n            throw new Error(\"Unsupported compression method: \".concat(this._compressionMethod));\n        }\n        this._filterMethod = this.readUint8();\n        this._interlaceMethod = this.readUint8();\n    }\n    decodeACTL() {\n        this._numberOfFrames = this.readUint32();\n        this._numberOfPlays = this.readUint32();\n        this._isAnimated = true;\n    }\n    decodeFCTL() {\n        const image = {\n            sequenceNumber: this.readUint32(),\n            width: this.readUint32(),\n            height: this.readUint32(),\n            xOffset: this.readUint32(),\n            yOffset: this.readUint32(),\n            delayNumber: this.readUint16(),\n            delayDenominator: this.readUint16(),\n            disposeOp: this.readUint8(),\n            blendOp: this.readUint8(),\n            data: new Uint8Array(0)\n        };\n        this._frames.push(image);\n    }\n    // https://www.w3.org/TR/PNG/#11PLTE\n    decodePLTE(length) {\n        if (length % 3 !== 0) {\n            throw new RangeError(\"PLTE field length must be a multiple of 3. Got \".concat(length));\n        }\n        const l = length / 3;\n        this._hasPalette = true;\n        const palette = [];\n        this._palette = palette;\n        for(let i = 0; i < l; i++){\n            palette.push([\n                this.readUint8(),\n                this.readUint8(),\n                this.readUint8()\n            ]);\n        }\n    }\n    // https://www.w3.org/TR/PNG/#11IDAT\n    decodeIDAT(length) {\n        this._writingDataChunks = true;\n        const dataLength = length;\n        const dataOffset = this.offset + this.byteOffset;\n        this._inflator.push(new Uint8Array(this.buffer, dataOffset, dataLength));\n        if (this._inflator.err) {\n            throw new Error(\"Error while decompressing the data: \".concat(this._inflator.err));\n        }\n        this.skip(length);\n    }\n    decodeFDAT(length) {\n        this._writingDataChunks = true;\n        let dataLength = length;\n        let dataOffset = this.offset + this.byteOffset;\n        dataOffset += 4;\n        dataLength -= 4;\n        this._inflator.push(new Uint8Array(this.buffer, dataOffset, dataLength));\n        if (this._inflator.err) {\n            throw new Error(\"Error while decompressing the data: \".concat(this._inflator.err));\n        }\n        this.skip(length);\n    }\n    // https://www.w3.org/TR/PNG/#11tRNS\n    decodetRNS(length) {\n        switch(this._colorType){\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.GREYSCALE:\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.TRUECOLOUR:\n                {\n                    if (length % 2 !== 0) {\n                        throw new RangeError(\"tRNS chunk length must be a multiple of 2. Got \".concat(length));\n                    }\n                    if (length / 2 > this._png.width * this._png.height) {\n                        throw new Error(\"tRNS chunk contains more alpha values than there are pixels (\".concat(length / 2, \" vs \").concat(this._png.width * this._png.height, \")\"));\n                    }\n                    this._hasTransparency = true;\n                    this._transparency = new Uint16Array(length / 2);\n                    for(let i = 0; i < length / 2; i++){\n                        this._transparency[i] = this.readUint16();\n                    }\n                    break;\n                }\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.INDEXED_COLOUR:\n                {\n                    if (length > this._palette.length) {\n                        throw new Error(\"tRNS chunk contains more alpha values than there are palette colors (\".concat(length, \" vs \").concat(this._palette.length, \")\"));\n                    }\n                    let i = 0;\n                    for(; i < length; i++){\n                        const alpha = this.readByte();\n                        this._palette[i].push(alpha);\n                    }\n                    for(; i < this._palette.length; i++){\n                        this._palette[i].push(255);\n                    }\n                    break;\n                }\n            // Kept for exhaustiveness.\n            /* eslint-disable unicorn/no-useless-switch-case */ case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.UNKNOWN:\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.GREYSCALE_ALPHA:\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.TRUECOLOUR_ALPHA:\n            default:\n                {\n                    throw new Error(\"tRNS chunk is not supported for color type \".concat(this._colorType));\n                }\n        }\n    }\n    // https://www.w3.org/TR/PNG/#11iCCP\n    decodeiCCP(length) {\n        const name = (0,_helpers_text__WEBPACK_IMPORTED_MODULE_6__.readKeyword)(this);\n        const compressionMethod = this.readUint8();\n        if (compressionMethod !== _internalTypes__WEBPACK_IMPORTED_MODULE_7__.CompressionMethod.DEFLATE) {\n            throw new Error(\"Unsupported iCCP compression method: \".concat(compressionMethod));\n        }\n        const compressedProfile = this.readBytes(length - name.length - 2);\n        this._png.iccEmbeddedProfile = {\n            name,\n            profile: (0,pako__WEBPACK_IMPORTED_MODULE_1__.inflate)(compressedProfile)\n        };\n    }\n    // https://www.w3.org/TR/PNG/#11pHYs\n    decodepHYs() {\n        const ppuX = this.readUint32();\n        const ppuY = this.readUint32();\n        const unitSpecifier = this.readByte();\n        this._png.resolution = {\n            x: ppuX,\n            y: ppuY,\n            unit: unitSpecifier\n        };\n    }\n    decodeApngImage() {\n        this._apng.width = this._png.width;\n        this._apng.height = this._png.height;\n        this._apng.channels = this._png.channels;\n        this._apng.depth = this._png.depth;\n        this._apng.numberOfFrames = this._numberOfFrames;\n        this._apng.numberOfPlays = this._numberOfPlays;\n        this._apng.text = this._png.text;\n        this._apng.resolution = this._png.resolution;\n        for(let i = 0; i < this._numberOfFrames; i++){\n            const newFrame = {\n                sequenceNumber: this._frames[i].sequenceNumber,\n                delayNumber: this._frames[i].delayNumber,\n                delayDenominator: this._frames[i].delayDenominator,\n                data: this._apng.depth === 8 ? new Uint8Array(this._apng.width * this._apng.height * this._apng.channels) : new Uint16Array(this._apng.width * this._apng.height * this._apng.channels)\n            };\n            const frame = this._frames.at(i);\n            if (frame) {\n                frame.data = (0,_helpers_decodeInterlaceNull__WEBPACK_IMPORTED_MODULE_4__.decodeInterlaceNull)({\n                    data: frame.data,\n                    width: frame.width,\n                    height: frame.height,\n                    channels: this._apng.channels,\n                    depth: this._apng.depth\n                });\n                if (this._hasPalette) {\n                    this._apng.palette = this._palette;\n                }\n                if (this._hasTransparency) {\n                    this._apng.transparency = this._transparency;\n                }\n                if (i === 0 || frame.xOffset === 0 && frame.yOffset === 0 && frame.width === this._png.width && frame.height === this._png.height) {\n                    newFrame.data = frame.data;\n                } else {\n                    const prevFrame = this._apng.frames.at(i - 1);\n                    this.disposeFrame(frame, prevFrame, newFrame);\n                    this.addFrameDataToCanvas(newFrame, frame);\n                }\n                this._apng.frames.push(newFrame);\n            }\n        }\n        return this._apng;\n    }\n    disposeFrame(frame, prevFrame, imageFrame) {\n        switch(frame.disposeOp){\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.DisposeOpType.NONE:\n                break;\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.DisposeOpType.BACKGROUND:\n                for(let row = 0; row < this._png.height; row++){\n                    for(let col = 0; col < this._png.width; col++){\n                        const index = (row * frame.width + col) * this._png.channels;\n                        for(let channel = 0; channel < this._png.channels; channel++){\n                            imageFrame.data[index + channel] = 0;\n                        }\n                    }\n                }\n                break;\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.DisposeOpType.PREVIOUS:\n                imageFrame.data.set(prevFrame.data);\n                break;\n            default:\n                throw new Error(\"Unknown disposeOp\");\n        }\n    }\n    addFrameDataToCanvas(imageFrame, frame) {\n        const maxValue = 1 << this._png.depth;\n        const calculatePixelIndices = (row, col)=>{\n            const index = ((row + frame.yOffset) * this._png.width + frame.xOffset + col) * this._png.channels;\n            const frameIndex = (row * frame.width + col) * this._png.channels;\n            return {\n                index,\n                frameIndex\n            };\n        };\n        switch(frame.blendOp){\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.BlendOpType.SOURCE:\n                for(let row = 0; row < frame.height; row++){\n                    for(let col = 0; col < frame.width; col++){\n                        const { index, frameIndex } = calculatePixelIndices(row, col);\n                        for(let channel = 0; channel < this._png.channels; channel++){\n                            imageFrame.data[index + channel] = frame.data[frameIndex + channel];\n                        }\n                    }\n                }\n                break;\n            // https://www.w3.org/TR/png-3/#13Alpha-channel-processing\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.BlendOpType.OVER:\n                for(let row = 0; row < frame.height; row++){\n                    for(let col = 0; col < frame.width; col++){\n                        const { index, frameIndex } = calculatePixelIndices(row, col);\n                        for(let channel = 0; channel < this._png.channels; channel++){\n                            const sourceAlpha = frame.data[frameIndex + this._png.channels - 1] / maxValue;\n                            const foregroundValue = channel % (this._png.channels - 1) === 0 ? 1 : frame.data[frameIndex + channel];\n                            const value = Math.floor(sourceAlpha * foregroundValue + (1 - sourceAlpha) * imageFrame.data[index + channel]);\n                            imageFrame.data[index + channel] += value;\n                        }\n                    }\n                }\n                break;\n            default:\n                throw new Error(\"Unknown blendOp\");\n        }\n    }\n    decodeImage() {\n        var _this__frames;\n        if (this._inflator.err) {\n            throw new Error(\"Error while decompressing the data: \".concat(this._inflator.err));\n        }\n        const data = this._isAnimated ? ((_this__frames = this._frames) === null || _this__frames === void 0 ? void 0 : _this__frames.at(0)).data : this._inflator.result;\n        if (this._filterMethod !== _internalTypes__WEBPACK_IMPORTED_MODULE_7__.FilterMethod.ADAPTIVE) {\n            throw new Error(\"Filter method \".concat(this._filterMethod, \" not supported\"));\n        }\n        if (this._interlaceMethod === _internalTypes__WEBPACK_IMPORTED_MODULE_7__.InterlaceMethod.NO_INTERLACE) {\n            this._png.data = (0,_helpers_decodeInterlaceNull__WEBPACK_IMPORTED_MODULE_4__.decodeInterlaceNull)({\n                data: data,\n                width: this._png.width,\n                height: this._png.height,\n                channels: this._png.channels,\n                depth: this._png.depth\n            });\n        } else if (this._interlaceMethod === _internalTypes__WEBPACK_IMPORTED_MODULE_7__.InterlaceMethod.ADAM7) {\n            this._png.data = (0,_helpers_decodeInterlaceAdam7__WEBPACK_IMPORTED_MODULE_3__.decodeInterlaceAdam7)({\n                data: data,\n                width: this._png.width,\n                height: this._png.height,\n                channels: this._png.channels,\n                depth: this._png.depth\n            });\n        } else {\n            throw new Error(\"Interlace method \".concat(this._interlaceMethod, \" not supported\"));\n        }\n        if (this._hasPalette) {\n            this._png.palette = this._palette;\n        }\n        if (this._hasTransparency) {\n            this._png.transparency = this._transparency;\n        }\n    }\n    pushDataToFrame() {\n        const result = this._inflator.result;\n        const lastFrame = this._frames.at(-1);\n        if (lastFrame) {\n            lastFrame.data = result;\n        } else {\n            this._frames.push({\n                sequenceNumber: 0,\n                width: this._png.width,\n                height: this._png.height,\n                xOffset: 0,\n                yOffset: 0,\n                delayNumber: 0,\n                delayDenominator: 0,\n                disposeOp: _internalTypes__WEBPACK_IMPORTED_MODULE_7__.DisposeOpType.NONE,\n                blendOp: _internalTypes__WEBPACK_IMPORTED_MODULE_7__.BlendOpType.SOURCE,\n                data: result\n            });\n        }\n        this._inflator = new pako__WEBPACK_IMPORTED_MODULE_1__.Inflate();\n        this._writingDataChunks = false;\n    }\n    constructor(data, options = {}){\n        super(data);\n        const { checkCrc = false } = options;\n        this._checkCrc = checkCrc;\n        this._inflator = new pako__WEBPACK_IMPORTED_MODULE_1__.Inflate();\n        this._png = {\n            width: -1,\n            height: -1,\n            channels: -1,\n            data: new Uint8Array(0),\n            depth: 1,\n            text: {}\n        };\n        this._apng = {\n            width: -1,\n            height: -1,\n            channels: -1,\n            depth: 1,\n            numberOfFrames: 1,\n            numberOfPlays: 0,\n            text: {},\n            frames: []\n        };\n        this._end = false;\n        this._hasPalette = false;\n        this._palette = [];\n        this._hasTransparency = false;\n        this._transparency = new Uint16Array(0);\n        this._compressionMethod = _internalTypes__WEBPACK_IMPORTED_MODULE_7__.CompressionMethod.UNKNOWN;\n        this._filterMethod = _internalTypes__WEBPACK_IMPORTED_MODULE_7__.FilterMethod.UNKNOWN;\n        this._interlaceMethod = _internalTypes__WEBPACK_IMPORTED_MODULE_7__.InterlaceMethod.UNKNOWN;\n        this._colorType = _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.UNKNOWN;\n        this._isAnimated = false;\n        this._numberOfFrames = 1;\n        this._numberOfPlays = 0;\n        this._frames = [];\n        this._writingDataChunks = false;\n        // PNG is always big endian\n        // https://www.w3.org/TR/PNG/#7Integers-and-byte-order\n        this.setBigEndian();\n    }\n}\n\nfunction checkBitDepth(value) {\n    if (value !== 1 && value !== 2 && value !== 4 && value !== 8 && value !== 16) {\n        throw new Error(\"invalid bit depth: \".concat(value));\n    }\n    return value;\n} //# sourceMappingURL=PngDecoder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/fast-png/lib-esm/PngDecoder.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/fast-png/lib-esm/PngEncoder.js":
/*!*****************************************************!*\
  !*** ./node_modules/fast-png/lib-esm/PngEncoder.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ PngEncoder; }\n/* harmony export */ });\n/* harmony import */ var iobuffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! iobuffer */ \"(app-pages-browser)/./node_modules/iobuffer/lib-esm/IOBuffer.js\");\n/* harmony import */ var pako__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pako */ \"(app-pages-browser)/./node_modules/pako/dist/pako.esm.mjs\");\n/* harmony import */ var _helpers_crc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/crc */ \"(app-pages-browser)/./node_modules/fast-png/lib-esm/helpers/crc.js\");\n/* harmony import */ var _helpers_signature__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers/signature */ \"(app-pages-browser)/./node_modules/fast-png/lib-esm/helpers/signature.js\");\n/* harmony import */ var _helpers_text__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers/text */ \"(app-pages-browser)/./node_modules/fast-png/lib-esm/helpers/text.js\");\n/* harmony import */ var _internalTypes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internalTypes */ \"(app-pages-browser)/./node_modules/fast-png/lib-esm/internalTypes.js\");\n\n\n\n\n\n\nconst defaultZlibOptions = {\n    level: 3\n};\nclass PngEncoder extends iobuffer__WEBPACK_IMPORTED_MODULE_0__.IOBuffer {\n    encode() {\n        (0,_helpers_signature__WEBPACK_IMPORTED_MODULE_3__.writeSignature)(this);\n        this.encodeIHDR();\n        if (this._png.palette) {\n            this.encodePLTE();\n            if (this._png.palette[0].length === 4) {\n                this.encodeTRNS();\n            }\n        }\n        this.encodeData();\n        if (this._png.text) {\n            for (const [keyword, text] of Object.entries(this._png.text)){\n                (0,_helpers_text__WEBPACK_IMPORTED_MODULE_4__.encodetEXt)(this, keyword, text);\n            }\n        }\n        this.encodeIEND();\n        return this.toArray();\n    }\n    // https://www.w3.org/TR/PNG/#11IHDR\n    encodeIHDR() {\n        this.writeUint32(13);\n        this.writeChars(\"IHDR\");\n        this.writeUint32(this._png.width);\n        this.writeUint32(this._png.height);\n        this.writeByte(this._png.depth);\n        this.writeByte(this._colorType);\n        this.writeByte(_internalTypes__WEBPACK_IMPORTED_MODULE_5__.CompressionMethod.DEFLATE);\n        this.writeByte(_internalTypes__WEBPACK_IMPORTED_MODULE_5__.FilterMethod.ADAPTIVE);\n        this.writeByte(this._interlaceMethod);\n        (0,_helpers_crc__WEBPACK_IMPORTED_MODULE_2__.writeCrc)(this, 17);\n    }\n    // https://www.w3.org/TR/PNG/#11IEND\n    encodeIEND() {\n        this.writeUint32(0);\n        this.writeChars(\"IEND\");\n        (0,_helpers_crc__WEBPACK_IMPORTED_MODULE_2__.writeCrc)(this, 4);\n    }\n    encodePLTE() {\n        var _this__png_palette;\n        const paletteLength = ((_this__png_palette = this._png.palette) === null || _this__png_palette === void 0 ? void 0 : _this__png_palette.length) * 3;\n        this.writeUint32(paletteLength);\n        this.writeChars(\"PLTE\");\n        for (const color of this._png.palette){\n            this.writeByte(color[0]);\n            this.writeByte(color[1]);\n            this.writeByte(color[2]);\n        }\n        (0,_helpers_crc__WEBPACK_IMPORTED_MODULE_2__.writeCrc)(this, 4 + paletteLength);\n    }\n    encodeTRNS() {\n        const alpha = this._png.palette.filter((color)=>{\n            return color.at(-1) !== 255;\n        });\n        this.writeUint32(alpha.length);\n        this.writeChars(\"tRNS\");\n        for (const el of alpha){\n            this.writeByte(el.at(-1));\n        }\n        (0,_helpers_crc__WEBPACK_IMPORTED_MODULE_2__.writeCrc)(this, 4 + alpha.length);\n    }\n    // https://www.w3.org/TR/PNG/#11IDAT\n    encodeIDAT(data) {\n        this.writeUint32(data.length);\n        this.writeChars(\"IDAT\");\n        this.writeBytes(data);\n        (0,_helpers_crc__WEBPACK_IMPORTED_MODULE_2__.writeCrc)(this, data.length + 4);\n    }\n    encodeData() {\n        const { width, height, channels, depth, data } = this._png;\n        const slotsPerLine = depth <= 8 ? Math.ceil(width * depth / 8) * channels : Math.ceil(width * depth / 8 * channels / 2);\n        const newData = new iobuffer__WEBPACK_IMPORTED_MODULE_0__.IOBuffer().setBigEndian();\n        let offset = 0;\n        if (this._interlaceMethod === _internalTypes__WEBPACK_IMPORTED_MODULE_5__.InterlaceMethod.NO_INTERLACE) {\n            for(let i = 0; i < height; i++){\n                newData.writeByte(0); // no filter\n                if (depth === 16) {\n                    offset = writeDataUint16(data, newData, slotsPerLine, offset);\n                } else {\n                    offset = writeDataBytes(data, newData, slotsPerLine, offset);\n                }\n            }\n        } else if (this._interlaceMethod === _internalTypes__WEBPACK_IMPORTED_MODULE_5__.InterlaceMethod.ADAM7) {\n            // Adam7 interlacing\n            offset = writeDataInterlaced(this._png, data, newData, offset);\n        }\n        const buffer = newData.toArray();\n        const compressed = (0,pako__WEBPACK_IMPORTED_MODULE_1__.deflate)(buffer, this._zlibOptions);\n        this.encodeIDAT(compressed);\n    }\n    _checkData(data) {\n        const { colorType, channels, depth } = getColorType(data, data.palette);\n        const png = {\n            width: checkInteger(data.width, \"width\"),\n            height: checkInteger(data.height, \"height\"),\n            channels,\n            data: data.data,\n            depth,\n            text: data.text,\n            palette: data.palette\n        };\n        this._colorType = colorType;\n        const expectedSize = depth < 8 ? Math.ceil(png.width * depth / 8) * png.height * channels : png.width * png.height * channels;\n        if (png.data.length !== expectedSize) {\n            throw new RangeError(\"wrong data size. Found \".concat(png.data.length, \", expected \").concat(expectedSize));\n        }\n        return png;\n    }\n    constructor(data, options = {}){\n        super();\n        this._colorType = _internalTypes__WEBPACK_IMPORTED_MODULE_5__.ColorType.UNKNOWN;\n        this._zlibOptions = {\n            ...defaultZlibOptions,\n            ...options.zlib\n        };\n        this._png = this._checkData(data);\n        var _ref;\n        this._interlaceMethod = (_ref = options.interlace === \"Adam7\" ? _internalTypes__WEBPACK_IMPORTED_MODULE_5__.InterlaceMethod.ADAM7 : _internalTypes__WEBPACK_IMPORTED_MODULE_5__.InterlaceMethod.NO_INTERLACE) !== null && _ref !== void 0 ? _ref : _internalTypes__WEBPACK_IMPORTED_MODULE_5__.InterlaceMethod.NO_INTERLACE;\n        this.setBigEndian();\n    }\n}\n\nfunction checkInteger(value, name) {\n    if (Number.isInteger(value) && value > 0) {\n        return value;\n    }\n    throw new TypeError(\"\".concat(name, \" must be a positive integer\"));\n}\nfunction getColorType(data, palette) {\n    const { channels = 4, depth = 8 } = data;\n    if (channels !== 4 && channels !== 3 && channels !== 2 && channels !== 1) {\n        throw new RangeError(\"unsupported number of channels: \".concat(channels));\n    }\n    const returnValue = {\n        channels,\n        depth,\n        colorType: _internalTypes__WEBPACK_IMPORTED_MODULE_5__.ColorType.UNKNOWN\n    };\n    switch(channels){\n        case 4:\n            returnValue.colorType = _internalTypes__WEBPACK_IMPORTED_MODULE_5__.ColorType.TRUECOLOUR_ALPHA;\n            break;\n        case 3:\n            returnValue.colorType = _internalTypes__WEBPACK_IMPORTED_MODULE_5__.ColorType.TRUECOLOUR;\n            break;\n        case 1:\n            if (palette) {\n                returnValue.colorType = _internalTypes__WEBPACK_IMPORTED_MODULE_5__.ColorType.INDEXED_COLOUR;\n            } else {\n                returnValue.colorType = _internalTypes__WEBPACK_IMPORTED_MODULE_5__.ColorType.GREYSCALE;\n            }\n            break;\n        case 2:\n            returnValue.colorType = _internalTypes__WEBPACK_IMPORTED_MODULE_5__.ColorType.GREYSCALE_ALPHA;\n            break;\n        default:\n            throw new Error(\"unsupported number of channels\");\n    }\n    return returnValue;\n}\nfunction writeDataBytes(data, newData, slotsPerLine, offset) {\n    for(let j = 0; j < slotsPerLine; j++){\n        newData.writeByte(data[offset++]);\n    }\n    return offset;\n}\nfunction writeDataInterlaced(imageData, data, newData, offset) {\n    const passes = [\n        {\n            x: 0,\n            y: 0,\n            xStep: 8,\n            yStep: 8\n        },\n        {\n            x: 4,\n            y: 0,\n            xStep: 8,\n            yStep: 8\n        },\n        {\n            x: 0,\n            y: 4,\n            xStep: 4,\n            yStep: 8\n        },\n        {\n            x: 2,\n            y: 0,\n            xStep: 4,\n            yStep: 4\n        },\n        {\n            x: 0,\n            y: 2,\n            xStep: 2,\n            yStep: 4\n        },\n        {\n            x: 1,\n            y: 0,\n            xStep: 2,\n            yStep: 2\n        },\n        {\n            x: 0,\n            y: 1,\n            xStep: 1,\n            yStep: 2\n        }\n    ];\n    const { width, height, channels, depth } = imageData;\n    let pixelSize = 0;\n    if (depth === 16) {\n        pixelSize = channels * depth / 8 / 2;\n    } else {\n        pixelSize = channels * depth / 8;\n    }\n    // Process each pass\n    for(let passIndex = 0; passIndex < 7; passIndex++){\n        const pass = passes[passIndex];\n        const passWidth = Math.floor((width - pass.x + pass.xStep - 1) / pass.xStep);\n        const passHeight = Math.floor((height - pass.y + pass.yStep - 1) / pass.yStep);\n        if (passWidth <= 0 || passHeight <= 0) continue;\n        const passLineBytes = passWidth * pixelSize;\n        // For each scanline in this pass\n        for(let y = 0; y < passHeight; y++){\n            const imageY = pass.y + y * pass.yStep;\n            // Extract raw scanline data\n            const rawScanline = depth <= 8 ? new Uint8Array(passLineBytes) : new Uint16Array(passLineBytes);\n            let rawOffset = 0;\n            for(let x = 0; x < passWidth; x++){\n                const imageX = pass.x + x * pass.xStep;\n                if (imageX < width && imageY < height) {\n                    const srcPos = (imageY * width + imageX) * pixelSize;\n                    for(let i = 0; i < pixelSize; i++){\n                        rawScanline[rawOffset++] = data[srcPos + i];\n                    }\n                }\n            }\n            newData.writeByte(0); // no filter\n            if (depth === 8) {\n                newData.writeBytes(rawScanline);\n            } else if (depth === 16) {\n                for (const value of rawScanline){\n                    newData.writeByte(value >> 8 & 0xff); // High byte\n                    newData.writeByte(value & 0xff);\n                }\n            }\n        }\n    }\n    return offset;\n}\nfunction writeDataUint16(data, newData, slotsPerLine, offset) {\n    for(let j = 0; j < slotsPerLine; j++){\n        newData.writeUint16(data[offset++]);\n    }\n    return offset;\n} //# sourceMappingURL=PngEncoder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9mYXN0LXBuZy9saWItZXNtL1BuZ0VuY29kZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFvQztBQUNMO0FBQ1U7QUFDWTtBQUNUO0FBQ21EO0FBQy9GLE1BQU1TLHFCQUFxQjtJQUN2QkMsT0FBTztBQUNYO0FBQ2UsTUFBTUMsbUJBQW1CWCw4Q0FBUUE7SUFnQjVDWSxTQUFTO1FBQ0xULGtFQUFjQSxDQUFDLElBQUk7UUFDbkIsSUFBSSxDQUFDVSxVQUFVO1FBQ2YsSUFBSSxJQUFJLENBQUNDLElBQUksQ0FBQ0MsT0FBTyxFQUFFO1lBQ25CLElBQUksQ0FBQ0MsVUFBVTtZQUNmLElBQUksSUFBSSxDQUFDRixJQUFJLENBQUNDLE9BQU8sQ0FBQyxFQUFFLENBQUNFLE1BQU0sS0FBSyxHQUFHO2dCQUNuQyxJQUFJLENBQUNDLFVBQVU7WUFDbkI7UUFDSjtRQUNBLElBQUksQ0FBQ0MsVUFBVTtRQUNmLElBQUksSUFBSSxDQUFDTCxJQUFJLENBQUNNLElBQUksRUFBRTtZQUNoQixLQUFLLE1BQU0sQ0FBQ0MsU0FBU0QsS0FBSyxJQUFJRSxPQUFPQyxPQUFPLENBQUMsSUFBSSxDQUFDVCxJQUFJLENBQUNNLElBQUksRUFBRztnQkFDMURoQix5REFBVUEsQ0FBQyxJQUFJLEVBQUVpQixTQUFTRDtZQUM5QjtRQUNKO1FBQ0EsSUFBSSxDQUFDSSxVQUFVO1FBQ2YsT0FBTyxJQUFJLENBQUNDLE9BQU87SUFDdkI7SUFDQSxvQ0FBb0M7SUFDcENaLGFBQWE7UUFDVCxJQUFJLENBQUNhLFdBQVcsQ0FBQztRQUNqQixJQUFJLENBQUNDLFVBQVUsQ0FBQztRQUNoQixJQUFJLENBQUNELFdBQVcsQ0FBQyxJQUFJLENBQUNaLElBQUksQ0FBQ2MsS0FBSztRQUNoQyxJQUFJLENBQUNGLFdBQVcsQ0FBQyxJQUFJLENBQUNaLElBQUksQ0FBQ2UsTUFBTTtRQUNqQyxJQUFJLENBQUNDLFNBQVMsQ0FBQyxJQUFJLENBQUNoQixJQUFJLENBQUNpQixLQUFLO1FBQzlCLElBQUksQ0FBQ0QsU0FBUyxDQUFDLElBQUksQ0FBQ0UsVUFBVTtRQUM5QixJQUFJLENBQUNGLFNBQVMsQ0FBQ3ZCLDZEQUFpQkEsQ0FBQzBCLE9BQU87UUFDeEMsSUFBSSxDQUFDSCxTQUFTLENBQUN0Qix3REFBWUEsQ0FBQzBCLFFBQVE7UUFDcEMsSUFBSSxDQUFDSixTQUFTLENBQUMsSUFBSSxDQUFDSyxnQkFBZ0I7UUFDcENqQyxzREFBUUEsQ0FBQyxJQUFJLEVBQUU7SUFDbkI7SUFDQSxvQ0FBb0M7SUFDcENzQixhQUFhO1FBQ1QsSUFBSSxDQUFDRSxXQUFXLENBQUM7UUFDakIsSUFBSSxDQUFDQyxVQUFVLENBQUM7UUFDaEJ6QixzREFBUUEsQ0FBQyxJQUFJLEVBQUU7SUFDbkI7SUFDQWMsYUFBYTtZQUNhO1FBQXRCLE1BQU1vQixnQkFBZ0IsMkJBQUksQ0FBQ3RCLElBQUksQ0FBQ0MsT0FBTyxjQUFqQiw0REFBbUJFLE1BQU0sSUFBRztRQUNsRCxJQUFJLENBQUNTLFdBQVcsQ0FBQ1U7UUFDakIsSUFBSSxDQUFDVCxVQUFVLENBQUM7UUFDaEIsS0FBSyxNQUFNVSxTQUFTLElBQUksQ0FBQ3ZCLElBQUksQ0FBQ0MsT0FBTyxDQUFFO1lBQ25DLElBQUksQ0FBQ2UsU0FBUyxDQUFDTyxLQUFLLENBQUMsRUFBRTtZQUN2QixJQUFJLENBQUNQLFNBQVMsQ0FBQ08sS0FBSyxDQUFDLEVBQUU7WUFDdkIsSUFBSSxDQUFDUCxTQUFTLENBQUNPLEtBQUssQ0FBQyxFQUFFO1FBQzNCO1FBQ0FuQyxzREFBUUEsQ0FBQyxJQUFJLEVBQUUsSUFBSWtDO0lBQ3ZCO0lBQ0FsQixhQUFhO1FBQ1QsTUFBTW9CLFFBQVEsSUFBSSxDQUFDeEIsSUFBSSxDQUFDQyxPQUFPLENBQUN3QixNQUFNLENBQUMsQ0FBQ0Y7WUFDcEMsT0FBT0EsTUFBTUcsRUFBRSxDQUFDLENBQUMsT0FBTztRQUM1QjtRQUNBLElBQUksQ0FBQ2QsV0FBVyxDQUFDWSxNQUFNckIsTUFBTTtRQUM3QixJQUFJLENBQUNVLFVBQVUsQ0FBQztRQUNoQixLQUFLLE1BQU1jLE1BQU1ILE1BQU87WUFDcEIsSUFBSSxDQUFDUixTQUFTLENBQUNXLEdBQUdELEVBQUUsQ0FBQyxDQUFDO1FBQzFCO1FBQ0F0QyxzREFBUUEsQ0FBQyxJQUFJLEVBQUUsSUFBSW9DLE1BQU1yQixNQUFNO0lBQ25DO0lBQ0Esb0NBQW9DO0lBQ3BDeUIsV0FBV0MsSUFBSSxFQUFFO1FBQ2IsSUFBSSxDQUFDakIsV0FBVyxDQUFDaUIsS0FBSzFCLE1BQU07UUFDNUIsSUFBSSxDQUFDVSxVQUFVLENBQUM7UUFDaEIsSUFBSSxDQUFDaUIsVUFBVSxDQUFDRDtRQUNoQnpDLHNEQUFRQSxDQUFDLElBQUksRUFBRXlDLEtBQUsxQixNQUFNLEdBQUc7SUFDakM7SUFDQUUsYUFBYTtRQUNULE1BQU0sRUFBRVMsS0FBSyxFQUFFQyxNQUFNLEVBQUVnQixRQUFRLEVBQUVkLEtBQUssRUFBRVksSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDN0IsSUFBSTtRQUMxRCxNQUFNZ0MsZUFBZWYsU0FBUyxJQUN4QmdCLEtBQUtDLElBQUksQ0FBQyxRQUFTakIsUUFBUyxLQUFLYyxXQUNqQ0UsS0FBS0MsSUFBSSxDQUFDLFFBQVdqQixRQUFTLElBQUtjLFdBQVk7UUFDckQsTUFBTUksVUFBVSxJQUFJakQsOENBQVFBLEdBQUdrRCxZQUFZO1FBQzNDLElBQUlDLFNBQVM7UUFDYixJQUFJLElBQUksQ0FBQ2hCLGdCQUFnQixLQUFLOUIsMkRBQWVBLENBQUMrQyxZQUFZLEVBQUU7WUFDeEQsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUl4QixRQUFRd0IsSUFBSztnQkFDN0JKLFFBQVFuQixTQUFTLENBQUMsSUFBSSxZQUFZO2dCQUNsQyxJQUFJQyxVQUFVLElBQUk7b0JBQ2RvQixTQUFTRyxnQkFBZ0JYLE1BQU1NLFNBQVNILGNBQWNLO2dCQUMxRCxPQUNLO29CQUNEQSxTQUFTSSxlQUFlWixNQUFNTSxTQUFTSCxjQUFjSztnQkFDekQ7WUFDSjtRQUNKLE9BQ0ssSUFBSSxJQUFJLENBQUNoQixnQkFBZ0IsS0FBSzlCLDJEQUFlQSxDQUFDbUQsS0FBSyxFQUFFO1lBQ3RELG9CQUFvQjtZQUNwQkwsU0FBU00sb0JBQW9CLElBQUksQ0FBQzNDLElBQUksRUFBRTZCLE1BQU1NLFNBQVNFO1FBQzNEO1FBQ0EsTUFBTU8sU0FBU1QsUUFBUXhCLE9BQU87UUFDOUIsTUFBTWtDLGFBQWExRCw2Q0FBT0EsQ0FBQ3lELFFBQVEsSUFBSSxDQUFDRSxZQUFZO1FBQ3BELElBQUksQ0FBQ2xCLFVBQVUsQ0FBQ2lCO0lBQ3BCO0lBQ0FFLFdBQVdsQixJQUFJLEVBQUU7UUFDYixNQUFNLEVBQUVtQixTQUFTLEVBQUVqQixRQUFRLEVBQUVkLEtBQUssRUFBRSxHQUFHZ0MsYUFBYXBCLE1BQU1BLEtBQUs1QixPQUFPO1FBQ3RFLE1BQU1pRCxNQUFNO1lBQ1JwQyxPQUFPcUMsYUFBYXRCLEtBQUtmLEtBQUssRUFBRTtZQUNoQ0MsUUFBUW9DLGFBQWF0QixLQUFLZCxNQUFNLEVBQUU7WUFDbENnQjtZQUNBRixNQUFNQSxLQUFLQSxJQUFJO1lBQ2ZaO1lBQ0FYLE1BQU11QixLQUFLdkIsSUFBSTtZQUNmTCxTQUFTNEIsS0FBSzVCLE9BQU87UUFDekI7UUFDQSxJQUFJLENBQUNpQixVQUFVLEdBQUc4QjtRQUNsQixNQUFNSSxlQUFlbkMsUUFBUSxJQUN2QmdCLEtBQUtDLElBQUksQ0FBQyxJQUFLcEIsS0FBSyxHQUFHRyxRQUFTLEtBQUtpQyxJQUFJbkMsTUFBTSxHQUFHZ0IsV0FDbERtQixJQUFJcEMsS0FBSyxHQUFHb0MsSUFBSW5DLE1BQU0sR0FBR2dCO1FBQy9CLElBQUltQixJQUFJckIsSUFBSSxDQUFDMUIsTUFBTSxLQUFLaUQsY0FBYztZQUNsQyxNQUFNLElBQUlDLFdBQVcsMEJBQXVERCxPQUE3QkYsSUFBSXJCLElBQUksQ0FBQzFCLE1BQU0sRUFBQyxlQUEwQixPQUFiaUQ7UUFDaEY7UUFDQSxPQUFPRjtJQUNYO0lBMUhBSSxZQUFZekIsSUFBSSxFQUFFMEIsVUFBVSxDQUFDLENBQUMsQ0FBRTtRQUM1QixLQUFLO1FBQ0wsSUFBSSxDQUFDckMsVUFBVSxHQUFHMUIscURBQVNBLENBQUNnRSxPQUFPO1FBQ25DLElBQUksQ0FBQ1YsWUFBWSxHQUFHO1lBQUUsR0FBR25ELGtCQUFrQjtZQUFFLEdBQUc0RCxRQUFRRSxJQUFJO1FBQUM7UUFDN0QsSUFBSSxDQUFDekQsSUFBSSxHQUFHLElBQUksQ0FBQytDLFVBQVUsQ0FBQ2xCO1lBRXZCMEI7UUFETCxJQUFJLENBQUNsQyxnQkFBZ0IsR0FDakIsQ0FBQ2tDLE9BQUFBLFFBQVFHLFNBQVMsS0FBSyxVQUNqQm5FLDJEQUFlQSxDQUFDbUQsS0FBSyxHQUNyQm5ELDJEQUFlQSxDQUFDK0MsWUFBWSxjQUZqQ2lCLGtCQUFBQSxPQUVzQ2hFLDJEQUFlQSxDQUFDK0MsWUFBWTtRQUN2RSxJQUFJLENBQUNGLFlBQVk7SUFDckI7QUFpSEo7QUFBQztBQUNELFNBQVNlLGFBQWFRLEtBQUssRUFBRUMsSUFBSTtJQUM3QixJQUFJQyxPQUFPQyxTQUFTLENBQUNILFVBQVVBLFFBQVEsR0FBRztRQUN0QyxPQUFPQTtJQUNYO0lBQ0EsTUFBTSxJQUFJSSxVQUFVLEdBQVEsT0FBTEgsTUFBSztBQUNoQztBQUNBLFNBQVNYLGFBQWFwQixJQUFJLEVBQUU1QixPQUFPO0lBQy9CLE1BQU0sRUFBRThCLFdBQVcsQ0FBQyxFQUFFZCxRQUFRLENBQUMsRUFBRSxHQUFHWTtJQUNwQyxJQUFJRSxhQUFhLEtBQUtBLGFBQWEsS0FBS0EsYUFBYSxLQUFLQSxhQUFhLEdBQUc7UUFDdEUsTUFBTSxJQUFJc0IsV0FBVyxtQ0FBNEMsT0FBVHRCO0lBQzVEO0lBQ0EsTUFBTWlDLGNBQWM7UUFDaEJqQztRQUNBZDtRQUNBK0IsV0FBV3hELHFEQUFTQSxDQUFDZ0UsT0FBTztJQUNoQztJQUNBLE9BQVF6QjtRQUNKLEtBQUs7WUFDRGlDLFlBQVloQixTQUFTLEdBQUd4RCxxREFBU0EsQ0FBQ3lFLGdCQUFnQjtZQUNsRDtRQUNKLEtBQUs7WUFDREQsWUFBWWhCLFNBQVMsR0FBR3hELHFEQUFTQSxDQUFDMEUsVUFBVTtZQUM1QztRQUNKLEtBQUs7WUFDRCxJQUFJakUsU0FBUztnQkFDVCtELFlBQVloQixTQUFTLEdBQUd4RCxxREFBU0EsQ0FBQzJFLGNBQWM7WUFDcEQsT0FDSztnQkFDREgsWUFBWWhCLFNBQVMsR0FBR3hELHFEQUFTQSxDQUFDNEUsU0FBUztZQUMvQztZQUNBO1FBQ0osS0FBSztZQUNESixZQUFZaEIsU0FBUyxHQUFHeEQscURBQVNBLENBQUM2RSxlQUFlO1lBQ2pEO1FBQ0o7WUFDSSxNQUFNLElBQUlDLE1BQU07SUFDeEI7SUFDQSxPQUFPTjtBQUNYO0FBQ0EsU0FBU3ZCLGVBQWVaLElBQUksRUFBRU0sT0FBTyxFQUFFSCxZQUFZLEVBQUVLLE1BQU07SUFDdkQsSUFBSyxJQUFJa0MsSUFBSSxHQUFHQSxJQUFJdkMsY0FBY3VDLElBQUs7UUFDbkNwQyxRQUFRbkIsU0FBUyxDQUFDYSxJQUFJLENBQUNRLFNBQVM7SUFDcEM7SUFDQSxPQUFPQTtBQUNYO0FBQ0EsU0FBU00sb0JBQW9CNkIsU0FBUyxFQUFFM0MsSUFBSSxFQUFFTSxPQUFPLEVBQUVFLE1BQU07SUFDekQsTUFBTW9DLFNBQVM7UUFDWDtZQUFFQyxHQUFHO1lBQUdDLEdBQUc7WUFBR0MsT0FBTztZQUFHQyxPQUFPO1FBQUU7UUFDakM7WUFBRUgsR0FBRztZQUFHQyxHQUFHO1lBQUdDLE9BQU87WUFBR0MsT0FBTztRQUFFO1FBQ2pDO1lBQUVILEdBQUc7WUFBR0MsR0FBRztZQUFHQyxPQUFPO1lBQUdDLE9BQU87UUFBRTtRQUNqQztZQUFFSCxHQUFHO1lBQUdDLEdBQUc7WUFBR0MsT0FBTztZQUFHQyxPQUFPO1FBQUU7UUFDakM7WUFBRUgsR0FBRztZQUFHQyxHQUFHO1lBQUdDLE9BQU87WUFBR0MsT0FBTztRQUFFO1FBQ2pDO1lBQUVILEdBQUc7WUFBR0MsR0FBRztZQUFHQyxPQUFPO1lBQUdDLE9BQU87UUFBRTtRQUNqQztZQUFFSCxHQUFHO1lBQUdDLEdBQUc7WUFBR0MsT0FBTztZQUFHQyxPQUFPO1FBQUU7S0FDcEM7SUFDRCxNQUFNLEVBQUUvRCxLQUFLLEVBQUVDLE1BQU0sRUFBRWdCLFFBQVEsRUFBRWQsS0FBSyxFQUFFLEdBQUd1RDtJQUMzQyxJQUFJTSxZQUFZO0lBQ2hCLElBQUk3RCxVQUFVLElBQUk7UUFDZDZELFlBQVksV0FBWTdELFFBQVMsSUFBSTtJQUN6QyxPQUNLO1FBQ0Q2RCxZQUFZLFdBQVk3RCxRQUFTO0lBQ3JDO0lBQ0Esb0JBQW9CO0lBQ3BCLElBQUssSUFBSThELFlBQVksR0FBR0EsWUFBWSxHQUFHQSxZQUFhO1FBQ2hELE1BQU1DLE9BQU9QLE1BQU0sQ0FBQ00sVUFBVTtRQUM5QixNQUFNRSxZQUFZaEQsS0FBS2lELEtBQUssQ0FBQyxDQUFDcEUsUUFBUWtFLEtBQUtOLENBQUMsR0FBR00sS0FBS0osS0FBSyxHQUFHLEtBQUtJLEtBQUtKLEtBQUs7UUFDM0UsTUFBTU8sYUFBYWxELEtBQUtpRCxLQUFLLENBQUMsQ0FBQ25FLFNBQVNpRSxLQUFLTCxDQUFDLEdBQUdLLEtBQUtILEtBQUssR0FBRyxLQUFLRyxLQUFLSCxLQUFLO1FBQzdFLElBQUlJLGFBQWEsS0FBS0UsY0FBYyxHQUNoQztRQUNKLE1BQU1DLGdCQUFnQkgsWUFBWUg7UUFDbEMsaUNBQWlDO1FBQ2pDLElBQUssSUFBSUgsSUFBSSxHQUFHQSxJQUFJUSxZQUFZUixJQUFLO1lBQ2pDLE1BQU1VLFNBQVNMLEtBQUtMLENBQUMsR0FBR0EsSUFBSUssS0FBS0gsS0FBSztZQUN0Qyw0QkFBNEI7WUFDNUIsTUFBTVMsY0FBY3JFLFNBQVMsSUFDdkIsSUFBSXNFLFdBQVdILGlCQUNmLElBQUlJLFlBQVlKO1lBQ3RCLElBQUlLLFlBQVk7WUFDaEIsSUFBSyxJQUFJZixJQUFJLEdBQUdBLElBQUlPLFdBQVdQLElBQUs7Z0JBQ2hDLE1BQU1nQixTQUFTVixLQUFLTixDQUFDLEdBQUdBLElBQUlNLEtBQUtKLEtBQUs7Z0JBQ3RDLElBQUljLFNBQVM1RSxTQUFTdUUsU0FBU3RFLFFBQVE7b0JBQ25DLE1BQU00RSxTQUFTLENBQUNOLFNBQVN2RSxRQUFRNEUsTUFBSyxJQUFLWjtvQkFDM0MsSUFBSyxJQUFJdkMsSUFBSSxHQUFHQSxJQUFJdUMsV0FBV3ZDLElBQUs7d0JBQ2hDK0MsV0FBVyxDQUFDRyxZQUFZLEdBQUc1RCxJQUFJLENBQUM4RCxTQUFTcEQsRUFBRTtvQkFDL0M7Z0JBQ0o7WUFDSjtZQUNBSixRQUFRbkIsU0FBUyxDQUFDLElBQUksWUFBWTtZQUNsQyxJQUFJQyxVQUFVLEdBQUc7Z0JBQ2JrQixRQUFRTCxVQUFVLENBQUN3RDtZQUN2QixPQUNLLElBQUlyRSxVQUFVLElBQUk7Z0JBQ25CLEtBQUssTUFBTTBDLFNBQVMyQixZQUFhO29CQUM3Qm5ELFFBQVFuQixTQUFTLENBQUMsU0FBVSxJQUFLLE9BQU8sWUFBWTtvQkFDcERtQixRQUFRbkIsU0FBUyxDQUFDMkMsUUFBUTtnQkFDOUI7WUFDSjtRQUNKO0lBQ0o7SUFDQSxPQUFPdEI7QUFDWDtBQUNBLFNBQVNHLGdCQUFnQlgsSUFBSSxFQUFFTSxPQUFPLEVBQUVILFlBQVksRUFBRUssTUFBTTtJQUN4RCxJQUFLLElBQUlrQyxJQUFJLEdBQUdBLElBQUl2QyxjQUFjdUMsSUFBSztRQUNuQ3BDLFFBQVF5RCxXQUFXLENBQUMvRCxJQUFJLENBQUNRLFNBQVM7SUFDdEM7SUFDQSxPQUFPQTtBQUNYLEVBQ0Esc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9mYXN0LXBuZy9saWItZXNtL1BuZ0VuY29kZXIuanM/Yjc3ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJT0J1ZmZlciB9IGZyb20gJ2lvYnVmZmVyJztcbmltcG9ydCB7IGRlZmxhdGUgfSBmcm9tICdwYWtvJztcbmltcG9ydCB7IHdyaXRlQ3JjIH0gZnJvbSAnLi9oZWxwZXJzL2NyYyc7XG5pbXBvcnQgeyB3cml0ZVNpZ25hdHVyZSB9IGZyb20gJy4vaGVscGVycy9zaWduYXR1cmUnO1xuaW1wb3J0IHsgZW5jb2RldEVYdCB9IGZyb20gJy4vaGVscGVycy90ZXh0JztcbmltcG9ydCB7IEludGVybGFjZU1ldGhvZCwgQ29sb3JUeXBlLCBDb21wcmVzc2lvbk1ldGhvZCwgRmlsdGVyTWV0aG9kLCB9IGZyb20gJy4vaW50ZXJuYWxUeXBlcyc7XG5jb25zdCBkZWZhdWx0WmxpYk9wdGlvbnMgPSB7XG4gICAgbGV2ZWw6IDMsXG59O1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG5nRW5jb2RlciBleHRlbmRzIElPQnVmZmVyIHtcbiAgICBfcG5nO1xuICAgIF96bGliT3B0aW9ucztcbiAgICBfY29sb3JUeXBlO1xuICAgIF9pbnRlcmxhY2VNZXRob2Q7XG4gICAgY29uc3RydWN0b3IoZGF0YSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX2NvbG9yVHlwZSA9IENvbG9yVHlwZS5VTktOT1dOO1xuICAgICAgICB0aGlzLl96bGliT3B0aW9ucyA9IHsgLi4uZGVmYXVsdFpsaWJPcHRpb25zLCAuLi5vcHRpb25zLnpsaWIgfTtcbiAgICAgICAgdGhpcy5fcG5nID0gdGhpcy5fY2hlY2tEYXRhKGRhdGEpO1xuICAgICAgICB0aGlzLl9pbnRlcmxhY2VNZXRob2QgPVxuICAgICAgICAgICAgKG9wdGlvbnMuaW50ZXJsYWNlID09PSAnQWRhbTcnXG4gICAgICAgICAgICAgICAgPyBJbnRlcmxhY2VNZXRob2QuQURBTTdcbiAgICAgICAgICAgICAgICA6IEludGVybGFjZU1ldGhvZC5OT19JTlRFUkxBQ0UpID8/IEludGVybGFjZU1ldGhvZC5OT19JTlRFUkxBQ0U7XG4gICAgICAgIHRoaXMuc2V0QmlnRW5kaWFuKCk7XG4gICAgfVxuICAgIGVuY29kZSgpIHtcbiAgICAgICAgd3JpdGVTaWduYXR1cmUodGhpcyk7XG4gICAgICAgIHRoaXMuZW5jb2RlSUhEUigpO1xuICAgICAgICBpZiAodGhpcy5fcG5nLnBhbGV0dGUpIHtcbiAgICAgICAgICAgIHRoaXMuZW5jb2RlUExURSgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3BuZy5wYWxldHRlWzBdLmxlbmd0aCA9PT0gNCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW5jb2RlVFJOUygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW5jb2RlRGF0YSgpO1xuICAgICAgICBpZiAodGhpcy5fcG5nLnRleHQpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2tleXdvcmQsIHRleHRdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuX3BuZy50ZXh0KSkge1xuICAgICAgICAgICAgICAgIGVuY29kZXRFWHQodGhpcywga2V5d29yZCwgdGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbmNvZGVJRU5EKCk7XG4gICAgICAgIHJldHVybiB0aGlzLnRvQXJyYXkoKTtcbiAgICB9XG4gICAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL1BORy8jMTFJSERSXG4gICAgZW5jb2RlSUhEUigpIHtcbiAgICAgICAgdGhpcy53cml0ZVVpbnQzMigxMyk7XG4gICAgICAgIHRoaXMud3JpdGVDaGFycygnSUhEUicpO1xuICAgICAgICB0aGlzLndyaXRlVWludDMyKHRoaXMuX3BuZy53aWR0aCk7XG4gICAgICAgIHRoaXMud3JpdGVVaW50MzIodGhpcy5fcG5nLmhlaWdodCk7XG4gICAgICAgIHRoaXMud3JpdGVCeXRlKHRoaXMuX3BuZy5kZXB0aCk7XG4gICAgICAgIHRoaXMud3JpdGVCeXRlKHRoaXMuX2NvbG9yVHlwZSk7XG4gICAgICAgIHRoaXMud3JpdGVCeXRlKENvbXByZXNzaW9uTWV0aG9kLkRFRkxBVEUpO1xuICAgICAgICB0aGlzLndyaXRlQnl0ZShGaWx0ZXJNZXRob2QuQURBUFRJVkUpO1xuICAgICAgICB0aGlzLndyaXRlQnl0ZSh0aGlzLl9pbnRlcmxhY2VNZXRob2QpO1xuICAgICAgICB3cml0ZUNyYyh0aGlzLCAxNyk7XG4gICAgfVxuICAgIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9QTkcvIzExSUVORFxuICAgIGVuY29kZUlFTkQoKSB7XG4gICAgICAgIHRoaXMud3JpdGVVaW50MzIoMCk7XG4gICAgICAgIHRoaXMud3JpdGVDaGFycygnSUVORCcpO1xuICAgICAgICB3cml0ZUNyYyh0aGlzLCA0KTtcbiAgICB9XG4gICAgZW5jb2RlUExURSgpIHtcbiAgICAgICAgY29uc3QgcGFsZXR0ZUxlbmd0aCA9IHRoaXMuX3BuZy5wYWxldHRlPy5sZW5ndGggKiAzO1xuICAgICAgICB0aGlzLndyaXRlVWludDMyKHBhbGV0dGVMZW5ndGgpO1xuICAgICAgICB0aGlzLndyaXRlQ2hhcnMoJ1BMVEUnKTtcbiAgICAgICAgZm9yIChjb25zdCBjb2xvciBvZiB0aGlzLl9wbmcucGFsZXR0ZSkge1xuICAgICAgICAgICAgdGhpcy53cml0ZUJ5dGUoY29sb3JbMF0pO1xuICAgICAgICAgICAgdGhpcy53cml0ZUJ5dGUoY29sb3JbMV0pO1xuICAgICAgICAgICAgdGhpcy53cml0ZUJ5dGUoY29sb3JbMl0pO1xuICAgICAgICB9XG4gICAgICAgIHdyaXRlQ3JjKHRoaXMsIDQgKyBwYWxldHRlTGVuZ3RoKTtcbiAgICB9XG4gICAgZW5jb2RlVFJOUygpIHtcbiAgICAgICAgY29uc3QgYWxwaGEgPSB0aGlzLl9wbmcucGFsZXR0ZS5maWx0ZXIoKGNvbG9yKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY29sb3IuYXQoLTEpICE9PSAyNTU7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLndyaXRlVWludDMyKGFscGhhLmxlbmd0aCk7XG4gICAgICAgIHRoaXMud3JpdGVDaGFycygndFJOUycpO1xuICAgICAgICBmb3IgKGNvbnN0IGVsIG9mIGFscGhhKSB7XG4gICAgICAgICAgICB0aGlzLndyaXRlQnl0ZShlbC5hdCgtMSkpO1xuICAgICAgICB9XG4gICAgICAgIHdyaXRlQ3JjKHRoaXMsIDQgKyBhbHBoYS5sZW5ndGgpO1xuICAgIH1cbiAgICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvUE5HLyMxMUlEQVRcbiAgICBlbmNvZGVJREFUKGRhdGEpIHtcbiAgICAgICAgdGhpcy53cml0ZVVpbnQzMihkYXRhLmxlbmd0aCk7XG4gICAgICAgIHRoaXMud3JpdGVDaGFycygnSURBVCcpO1xuICAgICAgICB0aGlzLndyaXRlQnl0ZXMoZGF0YSk7XG4gICAgICAgIHdyaXRlQ3JjKHRoaXMsIGRhdGEubGVuZ3RoICsgNCk7XG4gICAgfVxuICAgIGVuY29kZURhdGEoKSB7XG4gICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCwgY2hhbm5lbHMsIGRlcHRoLCBkYXRhIH0gPSB0aGlzLl9wbmc7XG4gICAgICAgIGNvbnN0IHNsb3RzUGVyTGluZSA9IGRlcHRoIDw9IDhcbiAgICAgICAgICAgID8gTWF0aC5jZWlsKCh3aWR0aCAqIGRlcHRoKSAvIDgpICogY2hhbm5lbHNcbiAgICAgICAgICAgIDogTWF0aC5jZWlsKCgoKHdpZHRoICogZGVwdGgpIC8gOCkgKiBjaGFubmVscykgLyAyKTtcbiAgICAgICAgY29uc3QgbmV3RGF0YSA9IG5ldyBJT0J1ZmZlcigpLnNldEJpZ0VuZGlhbigpO1xuICAgICAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICAgICAgaWYgKHRoaXMuX2ludGVybGFjZU1ldGhvZCA9PT0gSW50ZXJsYWNlTWV0aG9kLk5PX0lOVEVSTEFDRSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBoZWlnaHQ7IGkrKykge1xuICAgICAgICAgICAgICAgIG5ld0RhdGEud3JpdGVCeXRlKDApOyAvLyBubyBmaWx0ZXJcbiAgICAgICAgICAgICAgICBpZiAoZGVwdGggPT09IDE2KSB7XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IHdyaXRlRGF0YVVpbnQxNihkYXRhLCBuZXdEYXRhLCBzbG90c1BlckxpbmUsIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSB3cml0ZURhdGFCeXRlcyhkYXRhLCBuZXdEYXRhLCBzbG90c1BlckxpbmUsIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX2ludGVybGFjZU1ldGhvZCA9PT0gSW50ZXJsYWNlTWV0aG9kLkFEQU03KSB7XG4gICAgICAgICAgICAvLyBBZGFtNyBpbnRlcmxhY2luZ1xuICAgICAgICAgICAgb2Zmc2V0ID0gd3JpdGVEYXRhSW50ZXJsYWNlZCh0aGlzLl9wbmcsIGRhdGEsIG5ld0RhdGEsIG9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYnVmZmVyID0gbmV3RGF0YS50b0FycmF5KCk7XG4gICAgICAgIGNvbnN0IGNvbXByZXNzZWQgPSBkZWZsYXRlKGJ1ZmZlciwgdGhpcy5femxpYk9wdGlvbnMpO1xuICAgICAgICB0aGlzLmVuY29kZUlEQVQoY29tcHJlc3NlZCk7XG4gICAgfVxuICAgIF9jaGVja0RhdGEoZGF0YSkge1xuICAgICAgICBjb25zdCB7IGNvbG9yVHlwZSwgY2hhbm5lbHMsIGRlcHRoIH0gPSBnZXRDb2xvclR5cGUoZGF0YSwgZGF0YS5wYWxldHRlKTtcbiAgICAgICAgY29uc3QgcG5nID0ge1xuICAgICAgICAgICAgd2lkdGg6IGNoZWNrSW50ZWdlcihkYXRhLndpZHRoLCAnd2lkdGgnKSxcbiAgICAgICAgICAgIGhlaWdodDogY2hlY2tJbnRlZ2VyKGRhdGEuaGVpZ2h0LCAnaGVpZ2h0JyksXG4gICAgICAgICAgICBjaGFubmVscyxcbiAgICAgICAgICAgIGRhdGE6IGRhdGEuZGF0YSxcbiAgICAgICAgICAgIGRlcHRoLFxuICAgICAgICAgICAgdGV4dDogZGF0YS50ZXh0LFxuICAgICAgICAgICAgcGFsZXR0ZTogZGF0YS5wYWxldHRlLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9jb2xvclR5cGUgPSBjb2xvclR5cGU7XG4gICAgICAgIGNvbnN0IGV4cGVjdGVkU2l6ZSA9IGRlcHRoIDwgOFxuICAgICAgICAgICAgPyBNYXRoLmNlaWwoKHBuZy53aWR0aCAqIGRlcHRoKSAvIDgpICogcG5nLmhlaWdodCAqIGNoYW5uZWxzXG4gICAgICAgICAgICA6IHBuZy53aWR0aCAqIHBuZy5oZWlnaHQgKiBjaGFubmVscztcbiAgICAgICAgaWYgKHBuZy5kYXRhLmxlbmd0aCAhPT0gZXhwZWN0ZWRTaXplKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgd3JvbmcgZGF0YSBzaXplLiBGb3VuZCAke3BuZy5kYXRhLmxlbmd0aH0sIGV4cGVjdGVkICR7ZXhwZWN0ZWRTaXplfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwbmc7XG4gICAgfVxufVxuZnVuY3Rpb24gY2hlY2tJbnRlZ2VyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKE51bWJlci5pc0ludGVnZXIodmFsdWUpICYmIHZhbHVlID4gMCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7bmFtZX0gbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXJgKTtcbn1cbmZ1bmN0aW9uIGdldENvbG9yVHlwZShkYXRhLCBwYWxldHRlKSB7XG4gICAgY29uc3QgeyBjaGFubmVscyA9IDQsIGRlcHRoID0gOCB9ID0gZGF0YTtcbiAgICBpZiAoY2hhbm5lbHMgIT09IDQgJiYgY2hhbm5lbHMgIT09IDMgJiYgY2hhbm5lbHMgIT09IDIgJiYgY2hhbm5lbHMgIT09IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYHVuc3VwcG9ydGVkIG51bWJlciBvZiBjaGFubmVsczogJHtjaGFubmVsc31gKTtcbiAgICB9XG4gICAgY29uc3QgcmV0dXJuVmFsdWUgPSB7XG4gICAgICAgIGNoYW5uZWxzLFxuICAgICAgICBkZXB0aCxcbiAgICAgICAgY29sb3JUeXBlOiBDb2xvclR5cGUuVU5LTk9XTixcbiAgICB9O1xuICAgIHN3aXRjaCAoY2hhbm5lbHMpIHtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgcmV0dXJuVmFsdWUuY29sb3JUeXBlID0gQ29sb3JUeXBlLlRSVUVDT0xPVVJfQUxQSEE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgcmV0dXJuVmFsdWUuY29sb3JUeXBlID0gQ29sb3JUeXBlLlRSVUVDT0xPVVI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgaWYgKHBhbGV0dGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm5WYWx1ZS5jb2xvclR5cGUgPSBDb2xvclR5cGUuSU5ERVhFRF9DT0xPVVI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm5WYWx1ZS5jb2xvclR5cGUgPSBDb2xvclR5cGUuR1JFWVNDQUxFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHJldHVyblZhbHVlLmNvbG9yVHlwZSA9IENvbG9yVHlwZS5HUkVZU0NBTEVfQUxQSEE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5zdXBwb3J0ZWQgbnVtYmVyIG9mIGNoYW5uZWxzJyk7XG4gICAgfVxuICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbn1cbmZ1bmN0aW9uIHdyaXRlRGF0YUJ5dGVzKGRhdGEsIG5ld0RhdGEsIHNsb3RzUGVyTGluZSwgb2Zmc2V0KSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBzbG90c1BlckxpbmU7IGorKykge1xuICAgICAgICBuZXdEYXRhLndyaXRlQnl0ZShkYXRhW29mZnNldCsrXSk7XG4gICAgfVxuICAgIHJldHVybiBvZmZzZXQ7XG59XG5mdW5jdGlvbiB3cml0ZURhdGFJbnRlcmxhY2VkKGltYWdlRGF0YSwgZGF0YSwgbmV3RGF0YSwgb2Zmc2V0KSB7XG4gICAgY29uc3QgcGFzc2VzID0gW1xuICAgICAgICB7IHg6IDAsIHk6IDAsIHhTdGVwOiA4LCB5U3RlcDogOCB9LFxuICAgICAgICB7IHg6IDQsIHk6IDAsIHhTdGVwOiA4LCB5U3RlcDogOCB9LFxuICAgICAgICB7IHg6IDAsIHk6IDQsIHhTdGVwOiA0LCB5U3RlcDogOCB9LFxuICAgICAgICB7IHg6IDIsIHk6IDAsIHhTdGVwOiA0LCB5U3RlcDogNCB9LFxuICAgICAgICB7IHg6IDAsIHk6IDIsIHhTdGVwOiAyLCB5U3RlcDogNCB9LFxuICAgICAgICB7IHg6IDEsIHk6IDAsIHhTdGVwOiAyLCB5U3RlcDogMiB9LFxuICAgICAgICB7IHg6IDAsIHk6IDEsIHhTdGVwOiAxLCB5U3RlcDogMiB9LFxuICAgIF07XG4gICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0LCBjaGFubmVscywgZGVwdGggfSA9IGltYWdlRGF0YTtcbiAgICBsZXQgcGl4ZWxTaXplID0gMDtcbiAgICBpZiAoZGVwdGggPT09IDE2KSB7XG4gICAgICAgIHBpeGVsU2l6ZSA9IChjaGFubmVscyAqIGRlcHRoKSAvIDggLyAyO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcGl4ZWxTaXplID0gKGNoYW5uZWxzICogZGVwdGgpIC8gODtcbiAgICB9XG4gICAgLy8gUHJvY2VzcyBlYWNoIHBhc3NcbiAgICBmb3IgKGxldCBwYXNzSW5kZXggPSAwOyBwYXNzSW5kZXggPCA3OyBwYXNzSW5kZXgrKykge1xuICAgICAgICBjb25zdCBwYXNzID0gcGFzc2VzW3Bhc3NJbmRleF07XG4gICAgICAgIGNvbnN0IHBhc3NXaWR0aCA9IE1hdGguZmxvb3IoKHdpZHRoIC0gcGFzcy54ICsgcGFzcy54U3RlcCAtIDEpIC8gcGFzcy54U3RlcCk7XG4gICAgICAgIGNvbnN0IHBhc3NIZWlnaHQgPSBNYXRoLmZsb29yKChoZWlnaHQgLSBwYXNzLnkgKyBwYXNzLnlTdGVwIC0gMSkgLyBwYXNzLnlTdGVwKTtcbiAgICAgICAgaWYgKHBhc3NXaWR0aCA8PSAwIHx8IHBhc3NIZWlnaHQgPD0gMClcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCBwYXNzTGluZUJ5dGVzID0gcGFzc1dpZHRoICogcGl4ZWxTaXplO1xuICAgICAgICAvLyBGb3IgZWFjaCBzY2FubGluZSBpbiB0aGlzIHBhc3NcbiAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCBwYXNzSGVpZ2h0OyB5KyspIHtcbiAgICAgICAgICAgIGNvbnN0IGltYWdlWSA9IHBhc3MueSArIHkgKiBwYXNzLnlTdGVwO1xuICAgICAgICAgICAgLy8gRXh0cmFjdCByYXcgc2NhbmxpbmUgZGF0YVxuICAgICAgICAgICAgY29uc3QgcmF3U2NhbmxpbmUgPSBkZXB0aCA8PSA4XG4gICAgICAgICAgICAgICAgPyBuZXcgVWludDhBcnJheShwYXNzTGluZUJ5dGVzKVxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQxNkFycmF5KHBhc3NMaW5lQnl0ZXMpO1xuICAgICAgICAgICAgbGV0IHJhd09mZnNldCA9IDA7XG4gICAgICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHBhc3NXaWR0aDsgeCsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW1hZ2VYID0gcGFzcy54ICsgeCAqIHBhc3MueFN0ZXA7XG4gICAgICAgICAgICAgICAgaWYgKGltYWdlWCA8IHdpZHRoICYmIGltYWdlWSA8IGhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzcmNQb3MgPSAoaW1hZ2VZICogd2lkdGggKyBpbWFnZVgpICogcGl4ZWxTaXplO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBpeGVsU2l6ZTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByYXdTY2FubGluZVtyYXdPZmZzZXQrK10gPSBkYXRhW3NyY1BvcyArIGldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3RGF0YS53cml0ZUJ5dGUoMCk7IC8vIG5vIGZpbHRlclxuICAgICAgICAgICAgaWYgKGRlcHRoID09PSA4KSB7XG4gICAgICAgICAgICAgICAgbmV3RGF0YS53cml0ZUJ5dGVzKHJhd1NjYW5saW5lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGRlcHRoID09PSAxNikge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdmFsdWUgb2YgcmF3U2NhbmxpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3RGF0YS53cml0ZUJ5dGUoKHZhbHVlID4+IDgpICYgMHhmZik7IC8vIEhpZ2ggYnl0ZVxuICAgICAgICAgICAgICAgICAgICBuZXdEYXRhLndyaXRlQnl0ZSh2YWx1ZSAmIDB4ZmYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2Zmc2V0O1xufVxuZnVuY3Rpb24gd3JpdGVEYXRhVWludDE2KGRhdGEsIG5ld0RhdGEsIHNsb3RzUGVyTGluZSwgb2Zmc2V0KSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBzbG90c1BlckxpbmU7IGorKykge1xuICAgICAgICBuZXdEYXRhLndyaXRlVWludDE2KGRhdGFbb2Zmc2V0KytdKTtcbiAgICB9XG4gICAgcmV0dXJuIG9mZnNldDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBuZ0VuY29kZXIuanMubWFwIl0sIm5hbWVzIjpbIklPQnVmZmVyIiwiZGVmbGF0ZSIsIndyaXRlQ3JjIiwid3JpdGVTaWduYXR1cmUiLCJlbmNvZGV0RVh0IiwiSW50ZXJsYWNlTWV0aG9kIiwiQ29sb3JUeXBlIiwiQ29tcHJlc3Npb25NZXRob2QiLCJGaWx0ZXJNZXRob2QiLCJkZWZhdWx0WmxpYk9wdGlvbnMiLCJsZXZlbCIsIlBuZ0VuY29kZXIiLCJlbmNvZGUiLCJlbmNvZGVJSERSIiwiX3BuZyIsInBhbGV0dGUiLCJlbmNvZGVQTFRFIiwibGVuZ3RoIiwiZW5jb2RlVFJOUyIsImVuY29kZURhdGEiLCJ0ZXh0Iiwia2V5d29yZCIsIk9iamVjdCIsImVudHJpZXMiLCJlbmNvZGVJRU5EIiwidG9BcnJheSIsIndyaXRlVWludDMyIiwid3JpdGVDaGFycyIsIndpZHRoIiwiaGVpZ2h0Iiwid3JpdGVCeXRlIiwiZGVwdGgiLCJfY29sb3JUeXBlIiwiREVGTEFURSIsIkFEQVBUSVZFIiwiX2ludGVybGFjZU1ldGhvZCIsInBhbGV0dGVMZW5ndGgiLCJjb2xvciIsImFscGhhIiwiZmlsdGVyIiwiYXQiLCJlbCIsImVuY29kZUlEQVQiLCJkYXRhIiwid3JpdGVCeXRlcyIsImNoYW5uZWxzIiwic2xvdHNQZXJMaW5lIiwiTWF0aCIsImNlaWwiLCJuZXdEYXRhIiwic2V0QmlnRW5kaWFuIiwib2Zmc2V0IiwiTk9fSU5URVJMQUNFIiwiaSIsIndyaXRlRGF0YVVpbnQxNiIsIndyaXRlRGF0YUJ5dGVzIiwiQURBTTciLCJ3cml0ZURhdGFJbnRlcmxhY2VkIiwiYnVmZmVyIiwiY29tcHJlc3NlZCIsIl96bGliT3B0aW9ucyIsIl9jaGVja0RhdGEiLCJjb2xvclR5cGUiLCJnZXRDb2xvclR5cGUiLCJwbmciLCJjaGVja0ludGVnZXIiLCJleHBlY3RlZFNpemUiLCJSYW5nZUVycm9yIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwiVU5LTk9XTiIsInpsaWIiLCJpbnRlcmxhY2UiLCJ2YWx1ZSIsIm5hbWUiLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJUeXBlRXJyb3IiLCJyZXR1cm5WYWx1ZSIsIlRSVUVDT0xPVVJfQUxQSEEiLCJUUlVFQ09MT1VSIiwiSU5ERVhFRF9DT0xPVVIiLCJHUkVZU0NBTEUiLCJHUkVZU0NBTEVfQUxQSEEiLCJFcnJvciIsImoiLCJpbWFnZURhdGEiLCJwYXNzZXMiLCJ4IiwieSIsInhTdGVwIiwieVN0ZXAiLCJwaXhlbFNpemUiLCJwYXNzSW5kZXgiLCJwYXNzIiwicGFzc1dpZHRoIiwiZmxvb3IiLCJwYXNzSGVpZ2h0IiwicGFzc0xpbmVCeXRlcyIsImltYWdlWSIsInJhd1NjYW5saW5lIiwiVWludDhBcnJheSIsIlVpbnQxNkFycmF5IiwicmF3T2Zmc2V0IiwiaW1hZ2VYIiwic3JjUG9zIiwid3JpdGVVaW50MTYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/fast-png/lib-esm/PngEncoder.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/fast-png/lib-esm/convertIndexedToRgb.js":
/*!**************************************************************!*\
  !*** ./node_modules/fast-png/lib-esm/convertIndexedToRgb.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertIndexedToRgb: function() { return /* binding */ convertIndexedToRgb; }\n/* harmony export */ });\n/**\n * Converts indexed data into RGB/RGBA format\n * @param decodedImage - Image to decode data from.\n * @returns Uint8Array with RGB data.\n */ function convertIndexedToRgb(decodedImage) {\n    const palette = decodedImage.palette;\n    const depth = decodedImage.depth;\n    if (!palette) {\n        throw new Error(\"Color palette is undefined.\");\n    }\n    checkDataSize(decodedImage);\n    const indexSize = decodedImage.width * decodedImage.height;\n    const resSize = indexSize * palette[0].length;\n    const res = new Uint8Array(resSize);\n    let indexPos = 0;\n    let offset = 0;\n    const indexes = new Uint8Array(indexSize);\n    let bit = 0xff;\n    switch(depth){\n        case 1:\n            bit = 0x80;\n            break;\n        case 2:\n            bit = 0xc0;\n            break;\n        case 4:\n            bit = 0xf0;\n            break;\n        case 8:\n            bit = 0xff;\n            break;\n        default:\n            throw new Error(\"Incorrect depth value\");\n    }\n    for (const byte of decodedImage.data){\n        let bit2 = bit;\n        let shift = 8;\n        while(bit2){\n            shift -= depth;\n            indexes[indexPos++] = (byte & bit2) >> shift;\n            bit2 = bit2 >> depth;\n            if (indexPos % decodedImage.width === 0) {\n                break;\n            }\n        }\n    }\n    if (decodedImage.palette) {\n        for (const index of indexes){\n            const color = decodedImage.palette.at(index);\n            if (!color) {\n                throw new Error(\"Incorrect index of palette color\");\n            }\n            res.set(color, offset);\n            offset += color.length;\n        }\n    }\n    return res;\n}\nfunction checkDataSize(image) {\n    const expectedSize = image.depth < 8 ? Math.ceil(image.width * image.depth / 8) * image.height * image.channels : image.width * image.height * image.channels;\n    if (image.data.length !== expectedSize) {\n        throw new RangeError(\"wrong data size. Found \".concat(image.data.length, \", expected \").concat(expectedSize));\n    }\n} //# sourceMappingURL=convertIndexedToRgb.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9mYXN0LXBuZy9saWItZXNtL2NvbnZlcnRJbmRleGVkVG9SZ2IuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7O0NBSUMsR0FDTSxTQUFTQSxvQkFBb0JDLFlBQVk7SUFDNUMsTUFBTUMsVUFBVUQsYUFBYUMsT0FBTztJQUNwQyxNQUFNQyxRQUFRRixhQUFhRSxLQUFLO0lBQ2hDLElBQUksQ0FBQ0QsU0FBUztRQUNWLE1BQU0sSUFBSUUsTUFBTTtJQUNwQjtJQUNBQyxjQUFjSjtJQUNkLE1BQU1LLFlBQVlMLGFBQWFNLEtBQUssR0FBR04sYUFBYU8sTUFBTTtJQUMxRCxNQUFNQyxVQUFVSCxZQUFZSixPQUFPLENBQUMsRUFBRSxDQUFDUSxNQUFNO0lBQzdDLE1BQU1DLE1BQU0sSUFBSUMsV0FBV0g7SUFDM0IsSUFBSUksV0FBVztJQUNmLElBQUlDLFNBQVM7SUFDYixNQUFNQyxVQUFVLElBQUlILFdBQVdOO0lBQy9CLElBQUlVLE1BQU07SUFDVixPQUFRYjtRQUNKLEtBQUs7WUFDRGEsTUFBTTtZQUNOO1FBQ0osS0FBSztZQUNEQSxNQUFNO1lBQ047UUFDSixLQUFLO1lBQ0RBLE1BQU07WUFDTjtRQUNKLEtBQUs7WUFDREEsTUFBTTtZQUNOO1FBQ0o7WUFDSSxNQUFNLElBQUlaLE1BQU07SUFDeEI7SUFDQSxLQUFLLE1BQU1hLFFBQVFoQixhQUFhaUIsSUFBSSxDQUFFO1FBQ2xDLElBQUlDLE9BQU9IO1FBQ1gsSUFBSUksUUFBUTtRQUNaLE1BQU9ELEtBQU07WUFDVEMsU0FBU2pCO1lBQ1RZLE9BQU8sQ0FBQ0YsV0FBVyxHQUFHLENBQUNJLE9BQU9FLElBQUcsS0FBTUM7WUFDdkNELE9BQU9BLFFBQVFoQjtZQUNmLElBQUlVLFdBQVdaLGFBQWFNLEtBQUssS0FBSyxHQUFHO2dCQUNyQztZQUNKO1FBQ0o7SUFDSjtJQUNBLElBQUlOLGFBQWFDLE9BQU8sRUFBRTtRQUN0QixLQUFLLE1BQU1tQixTQUFTTixRQUFTO1lBQ3pCLE1BQU1PLFFBQVFyQixhQUFhQyxPQUFPLENBQUNxQixFQUFFLENBQUNGO1lBQ3RDLElBQUksQ0FBQ0MsT0FBTztnQkFDUixNQUFNLElBQUlsQixNQUFNO1lBQ3BCO1lBQ0FPLElBQUlhLEdBQUcsQ0FBQ0YsT0FBT1I7WUFDZkEsVUFBVVEsTUFBTVosTUFBTTtRQUMxQjtJQUNKO0lBQ0EsT0FBT0M7QUFDWDtBQUNBLFNBQVNOLGNBQWNvQixLQUFLO0lBQ3hCLE1BQU1DLGVBQWVELE1BQU10QixLQUFLLEdBQUcsSUFDN0J3QixLQUFLQyxJQUFJLENBQUMsTUFBT3JCLEtBQUssR0FBR2tCLE1BQU10QixLQUFLLEdBQUksS0FDdENzQixNQUFNakIsTUFBTSxHQUNaaUIsTUFBTUksUUFBUSxHQUNoQkosTUFBTWxCLEtBQUssR0FBR2tCLE1BQU1qQixNQUFNLEdBQUdpQixNQUFNSSxRQUFRO0lBQ2pELElBQUlKLE1BQU1QLElBQUksQ0FBQ1IsTUFBTSxLQUFLZ0IsY0FBYztRQUNwQyxNQUFNLElBQUlJLFdBQVcsMEJBQXlESixPQUEvQkQsTUFBTVAsSUFBSSxDQUFDUixNQUFNLEVBQUMsZUFBMEIsT0FBYmdCO0lBQ2xGO0FBQ0osRUFDQSwrQ0FBK0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2Zhc3QtcG5nL2xpYi1lc20vY29udmVydEluZGV4ZWRUb1JnYi5qcz9jM2Y2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29udmVydHMgaW5kZXhlZCBkYXRhIGludG8gUkdCL1JHQkEgZm9ybWF0XG4gKiBAcGFyYW0gZGVjb2RlZEltYWdlIC0gSW1hZ2UgdG8gZGVjb2RlIGRhdGEgZnJvbS5cbiAqIEByZXR1cm5zIFVpbnQ4QXJyYXkgd2l0aCBSR0IgZGF0YS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRJbmRleGVkVG9SZ2IoZGVjb2RlZEltYWdlKSB7XG4gICAgY29uc3QgcGFsZXR0ZSA9IGRlY29kZWRJbWFnZS5wYWxldHRlO1xuICAgIGNvbnN0IGRlcHRoID0gZGVjb2RlZEltYWdlLmRlcHRoO1xuICAgIGlmICghcGFsZXR0ZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbG9yIHBhbGV0dGUgaXMgdW5kZWZpbmVkLicpO1xuICAgIH1cbiAgICBjaGVja0RhdGFTaXplKGRlY29kZWRJbWFnZSk7XG4gICAgY29uc3QgaW5kZXhTaXplID0gZGVjb2RlZEltYWdlLndpZHRoICogZGVjb2RlZEltYWdlLmhlaWdodDtcbiAgICBjb25zdCByZXNTaXplID0gaW5kZXhTaXplICogcGFsZXR0ZVswXS5sZW5ndGg7XG4gICAgY29uc3QgcmVzID0gbmV3IFVpbnQ4QXJyYXkocmVzU2l6ZSk7XG4gICAgbGV0IGluZGV4UG9zID0gMDtcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBjb25zdCBpbmRleGVzID0gbmV3IFVpbnQ4QXJyYXkoaW5kZXhTaXplKTtcbiAgICBsZXQgYml0ID0gMHhmZjtcbiAgICBzd2l0Y2ggKGRlcHRoKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGJpdCA9IDB4ODA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgYml0ID0gMHhjMDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICBiaXQgPSAweGYwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgIGJpdCA9IDB4ZmY7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW5jb3JyZWN0IGRlcHRoIHZhbHVlJyk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgYnl0ZSBvZiBkZWNvZGVkSW1hZ2UuZGF0YSkge1xuICAgICAgICBsZXQgYml0MiA9IGJpdDtcbiAgICAgICAgbGV0IHNoaWZ0ID0gODtcbiAgICAgICAgd2hpbGUgKGJpdDIpIHtcbiAgICAgICAgICAgIHNoaWZ0IC09IGRlcHRoO1xuICAgICAgICAgICAgaW5kZXhlc1tpbmRleFBvcysrXSA9IChieXRlICYgYml0MikgPj4gc2hpZnQ7XG4gICAgICAgICAgICBiaXQyID0gYml0MiA+PiBkZXB0aDtcbiAgICAgICAgICAgIGlmIChpbmRleFBvcyAlIGRlY29kZWRJbWFnZS53aWR0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChkZWNvZGVkSW1hZ2UucGFsZXR0ZSkge1xuICAgICAgICBmb3IgKGNvbnN0IGluZGV4IG9mIGluZGV4ZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gZGVjb2RlZEltYWdlLnBhbGV0dGUuYXQoaW5kZXgpO1xuICAgICAgICAgICAgaWYgKCFjb2xvcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW5jb3JyZWN0IGluZGV4IG9mIHBhbGV0dGUgY29sb3InKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcy5zZXQoY29sb3IsIG9mZnNldCk7XG4gICAgICAgICAgICBvZmZzZXQgKz0gY29sb3IubGVuZ3RoO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBjaGVja0RhdGFTaXplKGltYWdlKSB7XG4gICAgY29uc3QgZXhwZWN0ZWRTaXplID0gaW1hZ2UuZGVwdGggPCA4XG4gICAgICAgID8gTWF0aC5jZWlsKChpbWFnZS53aWR0aCAqIGltYWdlLmRlcHRoKSAvIDgpICpcbiAgICAgICAgICAgIGltYWdlLmhlaWdodCAqXG4gICAgICAgICAgICBpbWFnZS5jaGFubmVsc1xuICAgICAgICA6IGltYWdlLndpZHRoICogaW1hZ2UuaGVpZ2h0ICogaW1hZ2UuY2hhbm5lbHM7XG4gICAgaWYgKGltYWdlLmRhdGEubGVuZ3RoICE9PSBleHBlY3RlZFNpemUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYHdyb25nIGRhdGEgc2l6ZS4gRm91bmQgJHtpbWFnZS5kYXRhLmxlbmd0aH0sIGV4cGVjdGVkICR7ZXhwZWN0ZWRTaXplfWApO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnZlcnRJbmRleGVkVG9SZ2IuanMubWFwIl0sIm5hbWVzIjpbImNvbnZlcnRJbmRleGVkVG9SZ2IiLCJkZWNvZGVkSW1hZ2UiLCJwYWxldHRlIiwiZGVwdGgiLCJFcnJvciIsImNoZWNrRGF0YVNpemUiLCJpbmRleFNpemUiLCJ3aWR0aCIsImhlaWdodCIsInJlc1NpemUiLCJsZW5ndGgiLCJyZXMiLCJVaW50OEFycmF5IiwiaW5kZXhQb3MiLCJvZmZzZXQiLCJpbmRleGVzIiwiYml0IiwiYnl0ZSIsImRhdGEiLCJiaXQyIiwic2hpZnQiLCJpbmRleCIsImNvbG9yIiwiYXQiLCJzZXQiLCJpbWFnZSIsImV4cGVjdGVkU2l6ZSIsIk1hdGgiLCJjZWlsIiwiY2hhbm5lbHMiLCJSYW5nZUVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/fast-png/lib-esm/convertIndexedToRgb.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/fast-png/lib-esm/helpers/applyUnfilter.js":
/*!****************************************************************!*\
  !*** ./node_modules/fast-png/lib-esm/helpers/applyUnfilter.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyUnfilter: function() { return /* binding */ applyUnfilter; }\n/* harmony export */ });\n/* harmony import */ var _unfilter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unfilter */ \"(app-pages-browser)/./node_modules/fast-png/lib-esm/helpers/unfilter.js\");\n\n/**\n * Apllies filter on scanline based on the filter type.\n * @param filterType - The filter type to apply.\n * @param currentLine - The current line of pixel data.\n * @param newLine - The new line of pixel data.\n * @param prevLine - The previous line of pixel data.\n * @param passLineBytes - The number of bytes in the pass line.\n * @param bytesPerPixel - The number of bytes per pixel.\n */ function applyUnfilter(filterType, currentLine, newLine, prevLine, passLineBytes, bytesPerPixel) {\n    switch(filterType){\n        case 0:\n            (0,_unfilter__WEBPACK_IMPORTED_MODULE_0__.unfilterNone)(currentLine, newLine, passLineBytes);\n            break;\n        case 1:\n            (0,_unfilter__WEBPACK_IMPORTED_MODULE_0__.unfilterSub)(currentLine, newLine, passLineBytes, bytesPerPixel);\n            break;\n        case 2:\n            (0,_unfilter__WEBPACK_IMPORTED_MODULE_0__.unfilterUp)(currentLine, newLine, prevLine, passLineBytes);\n            break;\n        case 3:\n            (0,_unfilter__WEBPACK_IMPORTED_MODULE_0__.unfilterAverage)(currentLine, newLine, prevLine, passLineBytes, bytesPerPixel);\n            break;\n        case 4:\n            (0,_unfilter__WEBPACK_IMPORTED_MODULE_0__.unfilterPaeth)(currentLine, newLine, prevLine, passLineBytes, bytesPerPixel);\n            break;\n        default:\n            throw new Error(\"Unsupported filter: \".concat(filterType));\n    }\n} //# sourceMappingURL=applyUnfilter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9mYXN0LXBuZy9saWItZXNtL2hlbHBlcnMvYXBwbHlVbmZpbHRlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFvRztBQUNwRzs7Ozs7Ozs7Q0FRQyxHQUNNLFNBQVNLLGNBQWNDLFVBQVUsRUFBRUMsV0FBVyxFQUFFQyxPQUFPLEVBQUVDLFFBQVEsRUFBRUMsYUFBYSxFQUFFQyxhQUFhO0lBQ2xHLE9BQVFMO1FBQ0osS0FBSztZQUNETCx1REFBWUEsQ0FBQ00sYUFBYUMsU0FBU0U7WUFDbkM7UUFDSixLQUFLO1lBQ0RQLHNEQUFXQSxDQUFDSSxhQUFhQyxTQUFTRSxlQUFlQztZQUNqRDtRQUNKLEtBQUs7WUFDRFAscURBQVVBLENBQUNHLGFBQWFDLFNBQVNDLFVBQVVDO1lBQzNDO1FBQ0osS0FBSztZQUNEViwwREFBZUEsQ0FBQ08sYUFBYUMsU0FBU0MsVUFBVUMsZUFBZUM7WUFDL0Q7UUFDSixLQUFLO1lBQ0RULHdEQUFhQSxDQUFDSyxhQUFhQyxTQUFTQyxVQUFVQyxlQUFlQztZQUM3RDtRQUNKO1lBQ0ksTUFBTSxJQUFJQyxNQUFNLHVCQUFrQyxPQUFYTjtJQUMvQztBQUNKLEVBQ0EseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9mYXN0LXBuZy9saWItZXNtL2hlbHBlcnMvYXBwbHlVbmZpbHRlci5qcz8zNjQ1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVuZmlsdGVyQXZlcmFnZSwgdW5maWx0ZXJOb25lLCB1bmZpbHRlclBhZXRoLCB1bmZpbHRlclN1YiwgdW5maWx0ZXJVcCwgfSBmcm9tICcuL3VuZmlsdGVyJztcbi8qKlxuICogQXBsbGllcyBmaWx0ZXIgb24gc2NhbmxpbmUgYmFzZWQgb24gdGhlIGZpbHRlciB0eXBlLlxuICogQHBhcmFtIGZpbHRlclR5cGUgLSBUaGUgZmlsdGVyIHR5cGUgdG8gYXBwbHkuXG4gKiBAcGFyYW0gY3VycmVudExpbmUgLSBUaGUgY3VycmVudCBsaW5lIG9mIHBpeGVsIGRhdGEuXG4gKiBAcGFyYW0gbmV3TGluZSAtIFRoZSBuZXcgbGluZSBvZiBwaXhlbCBkYXRhLlxuICogQHBhcmFtIHByZXZMaW5lIC0gVGhlIHByZXZpb3VzIGxpbmUgb2YgcGl4ZWwgZGF0YS5cbiAqIEBwYXJhbSBwYXNzTGluZUJ5dGVzIC0gVGhlIG51bWJlciBvZiBieXRlcyBpbiB0aGUgcGFzcyBsaW5lLlxuICogQHBhcmFtIGJ5dGVzUGVyUGl4ZWwgLSBUaGUgbnVtYmVyIG9mIGJ5dGVzIHBlciBwaXhlbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5VW5maWx0ZXIoZmlsdGVyVHlwZSwgY3VycmVudExpbmUsIG5ld0xpbmUsIHByZXZMaW5lLCBwYXNzTGluZUJ5dGVzLCBieXRlc1BlclBpeGVsKSB7XG4gICAgc3dpdGNoIChmaWx0ZXJUeXBlKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIHVuZmlsdGVyTm9uZShjdXJyZW50TGluZSwgbmV3TGluZSwgcGFzc0xpbmVCeXRlcyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgdW5maWx0ZXJTdWIoY3VycmVudExpbmUsIG5ld0xpbmUsIHBhc3NMaW5lQnl0ZXMsIGJ5dGVzUGVyUGl4ZWwpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHVuZmlsdGVyVXAoY3VycmVudExpbmUsIG5ld0xpbmUsIHByZXZMaW5lLCBwYXNzTGluZUJ5dGVzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICB1bmZpbHRlckF2ZXJhZ2UoY3VycmVudExpbmUsIG5ld0xpbmUsIHByZXZMaW5lLCBwYXNzTGluZUJ5dGVzLCBieXRlc1BlclBpeGVsKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICB1bmZpbHRlclBhZXRoKGN1cnJlbnRMaW5lLCBuZXdMaW5lLCBwcmV2TGluZSwgcGFzc0xpbmVCeXRlcywgYnl0ZXNQZXJQaXhlbCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZmlsdGVyOiAke2ZpbHRlclR5cGV9YCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwbHlVbmZpbHRlci5qcy5tYXAiXSwibmFtZXMiOlsidW5maWx0ZXJBdmVyYWdlIiwidW5maWx0ZXJOb25lIiwidW5maWx0ZXJQYWV0aCIsInVuZmlsdGVyU3ViIiwidW5maWx0ZXJVcCIsImFwcGx5VW5maWx0ZXIiLCJmaWx0ZXJUeXBlIiwiY3VycmVudExpbmUiLCJuZXdMaW5lIiwicHJldkxpbmUiLCJwYXNzTGluZUJ5dGVzIiwiYnl0ZXNQZXJQaXhlbCIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/fast-png/lib-esm/helpers/applyUnfilter.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/fast-png/lib-esm/helpers/crc.js":
/*!******************************************************!*\
  !*** ./node_modules/fast-png/lib-esm/helpers/crc.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkCrc: function() { return /* binding */ checkCrc; },\n/* harmony export */   writeCrc: function() { return /* binding */ writeCrc; }\n/* harmony export */ });\nconst crcTable = [];\nfor(let n = 0; n < 256; n++){\n    let c = n;\n    for(let k = 0; k < 8; k++){\n        if (c & 1) {\n            c = 0xedb88320 ^ c >>> 1;\n        } else {\n            c = c >>> 1;\n        }\n    }\n    crcTable[n] = c;\n}\nconst initialCrc = 0xffffffff;\nfunction updateCrc(currentCrc, data, length) {\n    let c = currentCrc;\n    for(let n = 0; n < length; n++){\n        c = crcTable[(c ^ data[n]) & 0xff] ^ c >>> 8;\n    }\n    return c;\n}\nfunction crc(data, length) {\n    return (updateCrc(initialCrc, data, length) ^ initialCrc) >>> 0;\n}\nfunction checkCrc(buffer, crcLength, chunkName) {\n    const expectedCrc = buffer.readUint32();\n    const actualCrc = crc(new Uint8Array(buffer.buffer, buffer.byteOffset + buffer.offset - crcLength - 4, crcLength), crcLength); // \"- 4\" because we already advanced by reading the CRC\n    if (actualCrc !== expectedCrc) {\n        throw new Error(\"CRC mismatch for chunk \".concat(chunkName, \". Expected \").concat(expectedCrc, \", found \").concat(actualCrc));\n    }\n}\nfunction writeCrc(buffer, length) {\n    buffer.writeUint32(crc(new Uint8Array(buffer.buffer, buffer.byteOffset + buffer.offset - length, length), length));\n} //# sourceMappingURL=crc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9mYXN0LXBuZy9saWItZXNtL2hlbHBlcnMvY3JjLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsTUFBTUEsV0FBVyxFQUFFO0FBQ25CLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJLEtBQUtBLElBQUs7SUFDMUIsSUFBSUMsSUFBSUQ7SUFDUixJQUFLLElBQUlFLElBQUksR0FBR0EsSUFBSSxHQUFHQSxJQUFLO1FBQ3hCLElBQUlELElBQUksR0FBRztZQUNQQSxJQUFJLGFBQWNBLE1BQU07UUFDNUIsT0FDSztZQUNEQSxJQUFJQSxNQUFNO1FBQ2Q7SUFDSjtJQUNBRixRQUFRLENBQUNDLEVBQUUsR0FBR0M7QUFDbEI7QUFDQSxNQUFNRSxhQUFhO0FBQ25CLFNBQVNDLFVBQVVDLFVBQVUsRUFBRUMsSUFBSSxFQUFFQyxNQUFNO0lBQ3ZDLElBQUlOLElBQUlJO0lBQ1IsSUFBSyxJQUFJTCxJQUFJLEdBQUdBLElBQUlPLFFBQVFQLElBQUs7UUFDN0JDLElBQUlGLFFBQVEsQ0FBQyxDQUFDRSxJQUFJSyxJQUFJLENBQUNOLEVBQUUsSUFBSSxLQUFLLEdBQUlDLE1BQU07SUFDaEQ7SUFDQSxPQUFPQTtBQUNYO0FBQ0EsU0FBU08sSUFBSUYsSUFBSSxFQUFFQyxNQUFNO0lBQ3JCLE9BQU8sQ0FBQ0gsVUFBVUQsWUFBWUcsTUFBTUMsVUFBVUosVUFBUyxNQUFPO0FBQ2xFO0FBQ08sU0FBU00sU0FBU0MsTUFBTSxFQUFFQyxTQUFTLEVBQUVDLFNBQVM7SUFDakQsTUFBTUMsY0FBY0gsT0FBT0ksVUFBVTtJQUNyQyxNQUFNQyxZQUFZUCxJQUFJLElBQUlRLFdBQVdOLE9BQU9BLE1BQU0sRUFBRUEsT0FBT08sVUFBVSxHQUFHUCxPQUFPUSxNQUFNLEdBQUdQLFlBQVksR0FBR0EsWUFBWUEsWUFBWSx1REFBdUQ7SUFDdEwsSUFBSUksY0FBY0YsYUFBYTtRQUMzQixNQUFNLElBQUlNLE1BQU0sMEJBQWlETixPQUF2QkQsV0FBVSxlQUFtQ0csT0FBdEJGLGFBQVksWUFBb0IsT0FBVkU7SUFDM0Y7QUFDSjtBQUNPLFNBQVNLLFNBQVNWLE1BQU0sRUFBRUgsTUFBTTtJQUNuQ0csT0FBT1csV0FBVyxDQUFDYixJQUFJLElBQUlRLFdBQVdOLE9BQU9BLE1BQU0sRUFBRUEsT0FBT08sVUFBVSxHQUFHUCxPQUFPUSxNQUFNLEdBQUdYLFFBQVFBLFNBQVNBO0FBQzlHLEVBQ0EsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9mYXN0LXBuZy9saWItZXNtL2hlbHBlcnMvY3JjLmpzP2E0ZjgiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY3JjVGFibGUgPSBbXTtcbmZvciAobGV0IG4gPSAwOyBuIDwgMjU2OyBuKyspIHtcbiAgICBsZXQgYyA9IG47XG4gICAgZm9yIChsZXQgayA9IDA7IGsgPCA4OyBrKyspIHtcbiAgICAgICAgaWYgKGMgJiAxKSB7XG4gICAgICAgICAgICBjID0gMHhlZGI4ODMyMCBeIChjID4+PiAxKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGMgPSBjID4+PiAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNyY1RhYmxlW25dID0gYztcbn1cbmNvbnN0IGluaXRpYWxDcmMgPSAweGZmZmZmZmZmO1xuZnVuY3Rpb24gdXBkYXRlQ3JjKGN1cnJlbnRDcmMsIGRhdGEsIGxlbmd0aCkge1xuICAgIGxldCBjID0gY3VycmVudENyYztcbiAgICBmb3IgKGxldCBuID0gMDsgbiA8IGxlbmd0aDsgbisrKSB7XG4gICAgICAgIGMgPSBjcmNUYWJsZVsoYyBeIGRhdGFbbl0pICYgMHhmZl0gXiAoYyA+Pj4gOCk7XG4gICAgfVxuICAgIHJldHVybiBjO1xufVxuZnVuY3Rpb24gY3JjKGRhdGEsIGxlbmd0aCkge1xuICAgIHJldHVybiAodXBkYXRlQ3JjKGluaXRpYWxDcmMsIGRhdGEsIGxlbmd0aCkgXiBpbml0aWFsQ3JjKSA+Pj4gMDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0NyYyhidWZmZXIsIGNyY0xlbmd0aCwgY2h1bmtOYW1lKSB7XG4gICAgY29uc3QgZXhwZWN0ZWRDcmMgPSBidWZmZXIucmVhZFVpbnQzMigpO1xuICAgIGNvbnN0IGFjdHVhbENyYyA9IGNyYyhuZXcgVWludDhBcnJheShidWZmZXIuYnVmZmVyLCBidWZmZXIuYnl0ZU9mZnNldCArIGJ1ZmZlci5vZmZzZXQgLSBjcmNMZW5ndGggLSA0LCBjcmNMZW5ndGgpLCBjcmNMZW5ndGgpOyAvLyBcIi0gNFwiIGJlY2F1c2Ugd2UgYWxyZWFkeSBhZHZhbmNlZCBieSByZWFkaW5nIHRoZSBDUkNcbiAgICBpZiAoYWN0dWFsQ3JjICE9PSBleHBlY3RlZENyYykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENSQyBtaXNtYXRjaCBmb3IgY2h1bmsgJHtjaHVua05hbWV9LiBFeHBlY3RlZCAke2V4cGVjdGVkQ3JjfSwgZm91bmQgJHthY3R1YWxDcmN9YCk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlQ3JjKGJ1ZmZlciwgbGVuZ3RoKSB7XG4gICAgYnVmZmVyLndyaXRlVWludDMyKGNyYyhuZXcgVWludDhBcnJheShidWZmZXIuYnVmZmVyLCBidWZmZXIuYnl0ZU9mZnNldCArIGJ1ZmZlci5vZmZzZXQgLSBsZW5ndGgsIGxlbmd0aCksIGxlbmd0aCkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JjLmpzLm1hcCJdLCJuYW1lcyI6WyJjcmNUYWJsZSIsIm4iLCJjIiwiayIsImluaXRpYWxDcmMiLCJ1cGRhdGVDcmMiLCJjdXJyZW50Q3JjIiwiZGF0YSIsImxlbmd0aCIsImNyYyIsImNoZWNrQ3JjIiwiYnVmZmVyIiwiY3JjTGVuZ3RoIiwiY2h1bmtOYW1lIiwiZXhwZWN0ZWRDcmMiLCJyZWFkVWludDMyIiwiYWN0dWFsQ3JjIiwiVWludDhBcnJheSIsImJ5dGVPZmZzZXQiLCJvZmZzZXQiLCJFcnJvciIsIndyaXRlQ3JjIiwid3JpdGVVaW50MzIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/fast-png/lib-esm/helpers/crc.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/fast-png/lib-esm/helpers/decodeInterlaceAdam7.js":
/*!***********************************************************************!*\
  !*** ./node_modules/fast-png/lib-esm/helpers/decodeInterlaceAdam7.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeInterlaceAdam7: function() { return /* binding */ decodeInterlaceAdam7; }\n/* harmony export */ });\n/* harmony import */ var _applyUnfilter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./applyUnfilter */ \"(app-pages-browser)/./node_modules/fast-png/lib-esm/helpers/applyUnfilter.js\");\n\nconst uint16 = new Uint16Array([\n    0x00ff\n]);\nconst uint8 = new Uint8Array(uint16.buffer);\nconst osIsLittleEndian = uint8[0] === 0xff;\n/**\n * Decodes the Adam7 interlaced PNG data.\n *\n * @param params - DecodeInterlaceNullParams\n * @returns - array of pixel data.\n */ function decodeInterlaceAdam7(params) {\n    const { data, width, height, channels, depth } = params;\n    // Adam7 interlacing pattern\n    const passes = [\n        {\n            x: 0,\n            y: 0,\n            xStep: 8,\n            yStep: 8\n        },\n        {\n            x: 4,\n            y: 0,\n            xStep: 8,\n            yStep: 8\n        },\n        {\n            x: 0,\n            y: 4,\n            xStep: 4,\n            yStep: 8\n        },\n        {\n            x: 2,\n            y: 0,\n            xStep: 4,\n            yStep: 4\n        },\n        {\n            x: 0,\n            y: 2,\n            xStep: 2,\n            yStep: 4\n        },\n        {\n            x: 1,\n            y: 0,\n            xStep: 2,\n            yStep: 2\n        },\n        {\n            x: 0,\n            y: 1,\n            xStep: 1,\n            yStep: 2\n        }\n    ];\n    const bytesPerPixel = Math.ceil(depth / 8) * channels;\n    const resultData = new Uint8Array(height * width * bytesPerPixel);\n    let offset = 0;\n    // Process each pass\n    for(let passIndex = 0; passIndex < 7; passIndex++){\n        const pass = passes[passIndex];\n        // Calculate pass dimensions\n        const passWidth = Math.ceil((width - pass.x) / pass.xStep);\n        const passHeight = Math.ceil((height - pass.y) / pass.yStep);\n        if (passWidth <= 0 || passHeight <= 0) continue;\n        const passLineBytes = passWidth * bytesPerPixel;\n        const prevLine = new Uint8Array(passLineBytes);\n        // Process each scanline in this pass\n        for(let y = 0; y < passHeight; y++){\n            // First byte is the filter type\n            const filterType = data[offset++];\n            const currentLine = data.subarray(offset, offset + passLineBytes);\n            offset += passLineBytes;\n            // Create a new line for the unfiltered data\n            const newLine = new Uint8Array(passLineBytes);\n            // Apply the appropriate unfilter\n            (0,_applyUnfilter__WEBPACK_IMPORTED_MODULE_0__.applyUnfilter)(filterType, currentLine, newLine, prevLine, passLineBytes, bytesPerPixel);\n            prevLine.set(newLine);\n            for(let x = 0; x < passWidth; x++){\n                const outputX = pass.x + x * pass.xStep;\n                const outputY = pass.y + y * pass.yStep;\n                if (outputX >= width || outputY >= height) continue;\n                for(let i = 0; i < bytesPerPixel; i++){\n                    resultData[(outputY * width + outputX) * bytesPerPixel + i] = newLine[x * bytesPerPixel + i];\n                }\n            }\n        }\n    }\n    if (depth === 16) {\n        const uint16Data = new Uint16Array(resultData.buffer);\n        if (osIsLittleEndian) {\n            for(let k = 0; k < uint16Data.length; k++){\n                // PNG is always big endian. Swap the bytes.\n                uint16Data[k] = swap16(uint16Data[k]);\n            }\n        }\n        return uint16Data;\n    } else {\n        return resultData;\n    }\n}\nfunction swap16(val) {\n    return (val & 0xff) << 8 | val >> 8 & 0xff;\n} //# sourceMappingURL=decodeInterlaceAdam7.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/fast-png/lib-esm/helpers/decodeInterlaceAdam7.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/fast-png/lib-esm/helpers/decodeInterlaceNull.js":
/*!**********************************************************************!*\
  !*** ./node_modules/fast-png/lib-esm/helpers/decodeInterlaceNull.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeInterlaceNull: function() { return /* binding */ decodeInterlaceNull; }\n/* harmony export */ });\n/* harmony import */ var _unfilter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unfilter */ \"(app-pages-browser)/./node_modules/fast-png/lib-esm/helpers/unfilter.js\");\n\nconst uint16 = new Uint16Array([\n    0x00ff\n]);\nconst uint8 = new Uint8Array(uint16.buffer);\nconst osIsLittleEndian = uint8[0] === 0xff;\nconst empty = new Uint8Array(0);\nfunction decodeInterlaceNull(params) {\n    const { data, width, height, channels, depth } = params;\n    const bytesPerPixel = Math.ceil(depth / 8) * channels;\n    const bytesPerLine = Math.ceil(depth / 8 * channels * width);\n    const newData = new Uint8Array(height * bytesPerLine);\n    let prevLine = empty;\n    let offset = 0;\n    let currentLine;\n    let newLine;\n    for(let i = 0; i < height; i++){\n        currentLine = data.subarray(offset + 1, offset + 1 + bytesPerLine);\n        newLine = newData.subarray(i * bytesPerLine, (i + 1) * bytesPerLine);\n        switch(data[offset]){\n            case 0:\n                (0,_unfilter__WEBPACK_IMPORTED_MODULE_0__.unfilterNone)(currentLine, newLine, bytesPerLine);\n                break;\n            case 1:\n                (0,_unfilter__WEBPACK_IMPORTED_MODULE_0__.unfilterSub)(currentLine, newLine, bytesPerLine, bytesPerPixel);\n                break;\n            case 2:\n                (0,_unfilter__WEBPACK_IMPORTED_MODULE_0__.unfilterUp)(currentLine, newLine, prevLine, bytesPerLine);\n                break;\n            case 3:\n                (0,_unfilter__WEBPACK_IMPORTED_MODULE_0__.unfilterAverage)(currentLine, newLine, prevLine, bytesPerLine, bytesPerPixel);\n                break;\n            case 4:\n                (0,_unfilter__WEBPACK_IMPORTED_MODULE_0__.unfilterPaeth)(currentLine, newLine, prevLine, bytesPerLine, bytesPerPixel);\n                break;\n            default:\n                throw new Error(\"Unsupported filter: \".concat(data[offset]));\n        }\n        prevLine = newLine;\n        offset += bytesPerLine + 1;\n    }\n    if (depth === 16) {\n        const uint16Data = new Uint16Array(newData.buffer);\n        if (osIsLittleEndian) {\n            for(let k = 0; k < uint16Data.length; k++){\n                // PNG is always big endian. Swap the bytes.\n                uint16Data[k] = swap16(uint16Data[k]);\n            }\n        }\n        return uint16Data;\n    } else {\n        return newData;\n    }\n}\nfunction swap16(val) {\n    return (val & 0xff) << 8 | val >> 8 & 0xff;\n} //# sourceMappingURL=decodeInterlaceNull.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9mYXN0LXBuZy9saWItZXNtL2hlbHBlcnMvZGVjb2RlSW50ZXJsYWNlTnVsbC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFvRztBQUNwRyxNQUFNSyxTQUFTLElBQUlDLFlBQVk7SUFBQztDQUFPO0FBQ3ZDLE1BQU1DLFFBQVEsSUFBSUMsV0FBV0gsT0FBT0ksTUFBTTtBQUMxQyxNQUFNQyxtQkFBbUJILEtBQUssQ0FBQyxFQUFFLEtBQUs7QUFDdEMsTUFBTUksUUFBUSxJQUFJSCxXQUFXO0FBQ3RCLFNBQVNJLG9CQUFvQkMsTUFBTTtJQUN0QyxNQUFNLEVBQUVDLElBQUksRUFBRUMsS0FBSyxFQUFFQyxNQUFNLEVBQUVDLFFBQVEsRUFBRUMsS0FBSyxFQUFFLEdBQUdMO0lBQ2pELE1BQU1NLGdCQUFnQkMsS0FBS0MsSUFBSSxDQUFDSCxRQUFRLEtBQUtEO0lBQzdDLE1BQU1LLGVBQWVGLEtBQUtDLElBQUksQ0FBQyxRQUFTLElBQUtKLFdBQVdGO0lBQ3hELE1BQU1RLFVBQVUsSUFBSWYsV0FBV1EsU0FBU007SUFDeEMsSUFBSUUsV0FBV2I7SUFDZixJQUFJYyxTQUFTO0lBQ2IsSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJWixRQUFRWSxJQUFLO1FBQzdCRixjQUFjWixLQUFLZSxRQUFRLENBQUNKLFNBQVMsR0FBR0EsU0FBUyxJQUFJSDtRQUNyREssVUFBVUosUUFBUU0sUUFBUSxDQUFDRCxJQUFJTixjQUFjLENBQUNNLElBQUksS0FBS047UUFDdkQsT0FBUVIsSUFBSSxDQUFDVyxPQUFPO1lBQ2hCLEtBQUs7Z0JBQ0R4Qix1REFBWUEsQ0FBQ3lCLGFBQWFDLFNBQVNMO2dCQUNuQztZQUNKLEtBQUs7Z0JBQ0RuQixzREFBV0EsQ0FBQ3VCLGFBQWFDLFNBQVNMLGNBQWNIO2dCQUNoRDtZQUNKLEtBQUs7Z0JBQ0RmLHFEQUFVQSxDQUFDc0IsYUFBYUMsU0FBU0gsVUFBVUY7Z0JBQzNDO1lBQ0osS0FBSztnQkFDRHRCLDBEQUFlQSxDQUFDMEIsYUFBYUMsU0FBU0gsVUFBVUYsY0FBY0g7Z0JBQzlEO1lBQ0osS0FBSztnQkFDRGpCLHdEQUFhQSxDQUFDd0IsYUFBYUMsU0FBU0gsVUFBVUYsY0FBY0g7Z0JBQzVEO1lBQ0o7Z0JBQ0ksTUFBTSxJQUFJVyxNQUFNLHVCQUFvQyxPQUFiaEIsSUFBSSxDQUFDVyxPQUFPO1FBQzNEO1FBQ0FELFdBQVdHO1FBQ1hGLFVBQVVILGVBQWU7SUFDN0I7SUFDQSxJQUFJSixVQUFVLElBQUk7UUFDZCxNQUFNYSxhQUFhLElBQUl6QixZQUFZaUIsUUFBUWQsTUFBTTtRQUNqRCxJQUFJQyxrQkFBa0I7WUFDbEIsSUFBSyxJQUFJc0IsSUFBSSxHQUFHQSxJQUFJRCxXQUFXRSxNQUFNLEVBQUVELElBQUs7Z0JBQ3hDLDRDQUE0QztnQkFDNUNELFVBQVUsQ0FBQ0MsRUFBRSxHQUFHRSxPQUFPSCxVQUFVLENBQUNDLEVBQUU7WUFDeEM7UUFDSjtRQUNBLE9BQU9EO0lBQ1gsT0FDSztRQUNELE9BQU9SO0lBQ1g7QUFDSjtBQUNBLFNBQVNXLE9BQU9DLEdBQUc7SUFDZixPQUFPLENBQUVBLE1BQU0sSUFBRyxLQUFNLElBQU0sT0FBUSxJQUFLO0FBQy9DLEVBQ0EsK0NBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9mYXN0LXBuZy9saWItZXNtL2hlbHBlcnMvZGVjb2RlSW50ZXJsYWNlTnVsbC5qcz80MjlmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVuZmlsdGVyQXZlcmFnZSwgdW5maWx0ZXJOb25lLCB1bmZpbHRlclBhZXRoLCB1bmZpbHRlclN1YiwgdW5maWx0ZXJVcCwgfSBmcm9tICcuL3VuZmlsdGVyJztcbmNvbnN0IHVpbnQxNiA9IG5ldyBVaW50MTZBcnJheShbMHgwMGZmXSk7XG5jb25zdCB1aW50OCA9IG5ldyBVaW50OEFycmF5KHVpbnQxNi5idWZmZXIpO1xuY29uc3Qgb3NJc0xpdHRsZUVuZGlhbiA9IHVpbnQ4WzBdID09PSAweGZmO1xuY29uc3QgZW1wdHkgPSBuZXcgVWludDhBcnJheSgwKTtcbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVJbnRlcmxhY2VOdWxsKHBhcmFtcykge1xuICAgIGNvbnN0IHsgZGF0YSwgd2lkdGgsIGhlaWdodCwgY2hhbm5lbHMsIGRlcHRoIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgYnl0ZXNQZXJQaXhlbCA9IE1hdGguY2VpbChkZXB0aCAvIDgpICogY2hhbm5lbHM7XG4gICAgY29uc3QgYnl0ZXNQZXJMaW5lID0gTWF0aC5jZWlsKChkZXB0aCAvIDgpICogY2hhbm5lbHMgKiB3aWR0aCk7XG4gICAgY29uc3QgbmV3RGF0YSA9IG5ldyBVaW50OEFycmF5KGhlaWdodCAqIGJ5dGVzUGVyTGluZSk7XG4gICAgbGV0IHByZXZMaW5lID0gZW1wdHk7XG4gICAgbGV0IG9mZnNldCA9IDA7XG4gICAgbGV0IGN1cnJlbnRMaW5lO1xuICAgIGxldCBuZXdMaW5lO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGVpZ2h0OyBpKyspIHtcbiAgICAgICAgY3VycmVudExpbmUgPSBkYXRhLnN1YmFycmF5KG9mZnNldCArIDEsIG9mZnNldCArIDEgKyBieXRlc1BlckxpbmUpO1xuICAgICAgICBuZXdMaW5lID0gbmV3RGF0YS5zdWJhcnJheShpICogYnl0ZXNQZXJMaW5lLCAoaSArIDEpICogYnl0ZXNQZXJMaW5lKTtcbiAgICAgICAgc3dpdGNoIChkYXRhW29mZnNldF0pIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICB1bmZpbHRlck5vbmUoY3VycmVudExpbmUsIG5ld0xpbmUsIGJ5dGVzUGVyTGluZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgdW5maWx0ZXJTdWIoY3VycmVudExpbmUsIG5ld0xpbmUsIGJ5dGVzUGVyTGluZSwgYnl0ZXNQZXJQaXhlbCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgdW5maWx0ZXJVcChjdXJyZW50TGluZSwgbmV3TGluZSwgcHJldkxpbmUsIGJ5dGVzUGVyTGluZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgdW5maWx0ZXJBdmVyYWdlKGN1cnJlbnRMaW5lLCBuZXdMaW5lLCBwcmV2TGluZSwgYnl0ZXNQZXJMaW5lLCBieXRlc1BlclBpeGVsKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICB1bmZpbHRlclBhZXRoKGN1cnJlbnRMaW5lLCBuZXdMaW5lLCBwcmV2TGluZSwgYnl0ZXNQZXJMaW5lLCBieXRlc1BlclBpeGVsKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBmaWx0ZXI6ICR7ZGF0YVtvZmZzZXRdfWApO1xuICAgICAgICB9XG4gICAgICAgIHByZXZMaW5lID0gbmV3TGluZTtcbiAgICAgICAgb2Zmc2V0ICs9IGJ5dGVzUGVyTGluZSArIDE7XG4gICAgfVxuICAgIGlmIChkZXB0aCA9PT0gMTYpIHtcbiAgICAgICAgY29uc3QgdWludDE2RGF0YSA9IG5ldyBVaW50MTZBcnJheShuZXdEYXRhLmJ1ZmZlcik7XG4gICAgICAgIGlmIChvc0lzTGl0dGxlRW5kaWFuKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IHVpbnQxNkRhdGEubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgICAgICAvLyBQTkcgaXMgYWx3YXlzIGJpZyBlbmRpYW4uIFN3YXAgdGhlIGJ5dGVzLlxuICAgICAgICAgICAgICAgIHVpbnQxNkRhdGFba10gPSBzd2FwMTYodWludDE2RGF0YVtrXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVpbnQxNkRhdGE7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3RGF0YTtcbiAgICB9XG59XG5mdW5jdGlvbiBzd2FwMTYodmFsKSB7XG4gICAgcmV0dXJuICgodmFsICYgMHhmZikgPDwgOCkgfCAoKHZhbCA+PiA4KSAmIDB4ZmYpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVjb2RlSW50ZXJsYWNlTnVsbC5qcy5tYXAiXSwibmFtZXMiOlsidW5maWx0ZXJBdmVyYWdlIiwidW5maWx0ZXJOb25lIiwidW5maWx0ZXJQYWV0aCIsInVuZmlsdGVyU3ViIiwidW5maWx0ZXJVcCIsInVpbnQxNiIsIlVpbnQxNkFycmF5IiwidWludDgiLCJVaW50OEFycmF5IiwiYnVmZmVyIiwib3NJc0xpdHRsZUVuZGlhbiIsImVtcHR5IiwiZGVjb2RlSW50ZXJsYWNlTnVsbCIsInBhcmFtcyIsImRhdGEiLCJ3aWR0aCIsImhlaWdodCIsImNoYW5uZWxzIiwiZGVwdGgiLCJieXRlc1BlclBpeGVsIiwiTWF0aCIsImNlaWwiLCJieXRlc1BlckxpbmUiLCJuZXdEYXRhIiwicHJldkxpbmUiLCJvZmZzZXQiLCJjdXJyZW50TGluZSIsIm5ld0xpbmUiLCJpIiwic3ViYXJyYXkiLCJFcnJvciIsInVpbnQxNkRhdGEiLCJrIiwibGVuZ3RoIiwic3dhcDE2IiwidmFsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/fast-png/lib-esm/helpers/decodeInterlaceNull.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/fast-png/lib-esm/helpers/signature.js":
/*!************************************************************!*\
  !*** ./node_modules/fast-png/lib-esm/helpers/signature.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkSignature: function() { return /* binding */ checkSignature; },\n/* harmony export */   hasPngSignature: function() { return /* binding */ hasPngSignature; },\n/* harmony export */   writeSignature: function() { return /* binding */ writeSignature; }\n/* harmony export */ });\n// https://www.w3.org/TR/PNG/#5PNG-file-signature\nconst pngSignature = Uint8Array.of(137, 80, 78, 71, 13, 10, 26, 10);\nfunction writeSignature(buffer) {\n    buffer.writeBytes(pngSignature);\n}\nfunction checkSignature(buffer) {\n    if (!hasPngSignature(buffer.readBytes(pngSignature.length))) {\n        throw new Error(\"wrong PNG signature\");\n    }\n}\nfunction hasPngSignature(array) {\n    if (array.length < pngSignature.length) {\n        return false;\n    }\n    for(let i = 0; i < pngSignature.length; i++){\n        if (array[i] !== pngSignature[i]) {\n            return false;\n        }\n    }\n    return true;\n} //# sourceMappingURL=signature.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9mYXN0LXBuZy9saWItZXNtL2hlbHBlcnMvc2lnbmF0dXJlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGlEQUFpRDtBQUNqRCxNQUFNQSxlQUFlQyxXQUFXQyxFQUFFLENBQUMsS0FBSyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSTtBQUN6RCxTQUFTQyxlQUFlQyxNQUFNO0lBQ2pDQSxPQUFPQyxVQUFVLENBQUNMO0FBQ3RCO0FBQ08sU0FBU00sZUFBZUYsTUFBTTtJQUNqQyxJQUFJLENBQUNHLGdCQUFnQkgsT0FBT0ksU0FBUyxDQUFDUixhQUFhUyxNQUFNLElBQUk7UUFDekQsTUFBTSxJQUFJQyxNQUFNO0lBQ3BCO0FBQ0o7QUFDTyxTQUFTSCxnQkFBZ0JJLEtBQUs7SUFDakMsSUFBSUEsTUFBTUYsTUFBTSxHQUFHVCxhQUFhUyxNQUFNLEVBQUU7UUFDcEMsT0FBTztJQUNYO0lBQ0EsSUFBSyxJQUFJRyxJQUFJLEdBQUdBLElBQUlaLGFBQWFTLE1BQU0sRUFBRUcsSUFBSztRQUMxQyxJQUFJRCxLQUFLLENBQUNDLEVBQUUsS0FBS1osWUFBWSxDQUFDWSxFQUFFLEVBQUU7WUFDOUIsT0FBTztRQUNYO0lBQ0o7SUFDQSxPQUFPO0FBQ1gsRUFDQSxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2Zhc3QtcG5nL2xpYi1lc20vaGVscGVycy9zaWduYXR1cmUuanM/NTU1OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL3d3dy53My5vcmcvVFIvUE5HLyM1UE5HLWZpbGUtc2lnbmF0dXJlXG5jb25zdCBwbmdTaWduYXR1cmUgPSBVaW50OEFycmF5Lm9mKDEzNywgODAsIDc4LCA3MSwgMTMsIDEwLCAyNiwgMTApO1xuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlU2lnbmF0dXJlKGJ1ZmZlcikge1xuICAgIGJ1ZmZlci53cml0ZUJ5dGVzKHBuZ1NpZ25hdHVyZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY2hlY2tTaWduYXR1cmUoYnVmZmVyKSB7XG4gICAgaWYgKCFoYXNQbmdTaWduYXR1cmUoYnVmZmVyLnJlYWRCeXRlcyhwbmdTaWduYXR1cmUubGVuZ3RoKSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBQTkcgc2lnbmF0dXJlJyk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGhhc1BuZ1NpZ25hdHVyZShhcnJheSkge1xuICAgIGlmIChhcnJheS5sZW5ndGggPCBwbmdTaWduYXR1cmUubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwbmdTaWduYXR1cmUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGFycmF5W2ldICE9PSBwbmdTaWduYXR1cmVbaV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpZ25hdHVyZS5qcy5tYXAiXSwibmFtZXMiOlsicG5nU2lnbmF0dXJlIiwiVWludDhBcnJheSIsIm9mIiwid3JpdGVTaWduYXR1cmUiLCJidWZmZXIiLCJ3cml0ZUJ5dGVzIiwiY2hlY2tTaWduYXR1cmUiLCJoYXNQbmdTaWduYXR1cmUiLCJyZWFkQnl0ZXMiLCJsZW5ndGgiLCJFcnJvciIsImFycmF5IiwiaSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/fast-png/lib-esm/helpers/signature.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/fast-png/lib-esm/helpers/text.js":
/*!*******************************************************!*\
  !*** ./node_modules/fast-png/lib-esm/helpers/text.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodetEXt: function() { return /* binding */ decodetEXt; },\n/* harmony export */   encodetEXt: function() { return /* binding */ encodetEXt; },\n/* harmony export */   readKeyword: function() { return /* binding */ readKeyword; },\n/* harmony export */   readLatin1: function() { return /* binding */ readLatin1; },\n/* harmony export */   textChunkName: function() { return /* binding */ textChunkName; }\n/* harmony export */ });\n/* harmony import */ var _crc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./crc */ \"(app-pages-browser)/./node_modules/fast-png/lib-esm/helpers/crc.js\");\n\n// https://www.w3.org/TR/png/#11tEXt\nconst textChunkName = \"tEXt\";\nconst NULL = 0;\nconst latin1Decoder = new TextDecoder(\"latin1\");\nfunction validateKeyword(keyword) {\n    validateLatin1(keyword);\n    if (keyword.length === 0 || keyword.length > 79) {\n        throw new Error(\"keyword length must be between 1 and 79\");\n    }\n}\n// eslint-disable-next-line no-control-regex\nconst latin1Regex = /^[\\u0000-\\u00FF]*$/;\nfunction validateLatin1(text) {\n    if (!latin1Regex.test(text)) {\n        throw new Error(\"invalid latin1 text\");\n    }\n}\nfunction decodetEXt(text, buffer, length) {\n    const keyword = readKeyword(buffer);\n    text[keyword] = readLatin1(buffer, length - keyword.length - 1);\n}\nfunction encodetEXt(buffer, keyword, text) {\n    validateKeyword(keyword);\n    validateLatin1(text);\n    const length = keyword.length + 1 /* NULL */  + text.length;\n    buffer.writeUint32(length);\n    buffer.writeChars(textChunkName);\n    buffer.writeChars(keyword);\n    buffer.writeByte(NULL);\n    buffer.writeChars(text);\n    (0,_crc__WEBPACK_IMPORTED_MODULE_0__.writeCrc)(buffer, length + 4);\n}\n// https://www.w3.org/TR/png/#11keywords\nfunction readKeyword(buffer) {\n    buffer.mark();\n    while(buffer.readByte() !== NULL){\n    /* advance */ }\n    const end = buffer.offset;\n    buffer.reset();\n    const keyword = latin1Decoder.decode(buffer.readBytes(end - buffer.offset - 1));\n    // NULL\n    buffer.skip(1);\n    validateKeyword(keyword);\n    return keyword;\n}\nfunction readLatin1(buffer, length) {\n    return latin1Decoder.decode(buffer.readBytes(length));\n} //# sourceMappingURL=text.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9mYXN0LXBuZy9saWItZXNtL2hlbHBlcnMvdGV4dC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBaUM7QUFDakMsb0NBQW9DO0FBQzdCLE1BQU1DLGdCQUFnQixPQUFPO0FBQ3BDLE1BQU1DLE9BQU87QUFDYixNQUFNQyxnQkFBZ0IsSUFBSUMsWUFBWTtBQUN0QyxTQUFTQyxnQkFBZ0JDLE9BQU87SUFDNUJDLGVBQWVEO0lBQ2YsSUFBSUEsUUFBUUUsTUFBTSxLQUFLLEtBQUtGLFFBQVFFLE1BQU0sR0FBRyxJQUFJO1FBQzdDLE1BQU0sSUFBSUMsTUFBTTtJQUNwQjtBQUNKO0FBQ0EsNENBQTRDO0FBQzVDLE1BQU1DLGNBQWM7QUFDcEIsU0FBU0gsZUFBZUksSUFBSTtJQUN4QixJQUFJLENBQUNELFlBQVlFLElBQUksQ0FBQ0QsT0FBTztRQUN6QixNQUFNLElBQUlGLE1BQU07SUFDcEI7QUFDSjtBQUNPLFNBQVNJLFdBQVdGLElBQUksRUFBRUcsTUFBTSxFQUFFTixNQUFNO0lBQzNDLE1BQU1GLFVBQVVTLFlBQVlEO0lBQzVCSCxJQUFJLENBQUNMLFFBQVEsR0FBR1UsV0FBV0YsUUFBUU4sU0FBU0YsUUFBUUUsTUFBTSxHQUFHO0FBQ2pFO0FBQ08sU0FBU1MsV0FBV0gsTUFBTSxFQUFFUixPQUFPLEVBQUVLLElBQUk7SUFDNUNOLGdCQUFnQkM7SUFDaEJDLGVBQWVJO0lBQ2YsTUFBTUgsU0FBU0YsUUFBUUUsTUFBTSxHQUFHLEVBQUUsUUFBUSxNQUFLRyxLQUFLSCxNQUFNO0lBQzFETSxPQUFPSSxXQUFXLENBQUNWO0lBQ25CTSxPQUFPSyxVQUFVLENBQUNsQjtJQUNsQmEsT0FBT0ssVUFBVSxDQUFDYjtJQUNsQlEsT0FBT00sU0FBUyxDQUFDbEI7SUFDakJZLE9BQU9LLFVBQVUsQ0FBQ1I7SUFDbEJYLDhDQUFRQSxDQUFDYyxRQUFRTixTQUFTO0FBQzlCO0FBQ0Esd0NBQXdDO0FBQ2pDLFNBQVNPLFlBQVlELE1BQU07SUFDOUJBLE9BQU9PLElBQUk7SUFDWCxNQUFPUCxPQUFPUSxRQUFRLE9BQU9wQixLQUFNO0lBQy9CLFdBQVcsR0FDZjtJQUNBLE1BQU1xQixNQUFNVCxPQUFPVSxNQUFNO0lBQ3pCVixPQUFPVyxLQUFLO0lBQ1osTUFBTW5CLFVBQVVILGNBQWN1QixNQUFNLENBQUNaLE9BQU9hLFNBQVMsQ0FBQ0osTUFBTVQsT0FBT1UsTUFBTSxHQUFHO0lBQzVFLE9BQU87SUFDUFYsT0FBT2MsSUFBSSxDQUFDO0lBQ1p2QixnQkFBZ0JDO0lBQ2hCLE9BQU9BO0FBQ1g7QUFDTyxTQUFTVSxXQUFXRixNQUFNLEVBQUVOLE1BQU07SUFDckMsT0FBT0wsY0FBY3VCLE1BQU0sQ0FBQ1osT0FBT2EsU0FBUyxDQUFDbkI7QUFDakQsRUFDQSxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2Zhc3QtcG5nL2xpYi1lc20vaGVscGVycy90ZXh0LmpzP2FlODkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgd3JpdGVDcmMgfSBmcm9tICcuL2NyYyc7XG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvcG5nLyMxMXRFWHRcbmV4cG9ydCBjb25zdCB0ZXh0Q2h1bmtOYW1lID0gJ3RFWHQnO1xuY29uc3QgTlVMTCA9IDA7XG5jb25zdCBsYXRpbjFEZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCdsYXRpbjEnKTtcbmZ1bmN0aW9uIHZhbGlkYXRlS2V5d29yZChrZXl3b3JkKSB7XG4gICAgdmFsaWRhdGVMYXRpbjEoa2V5d29yZCk7XG4gICAgaWYgKGtleXdvcmQubGVuZ3RoID09PSAwIHx8IGtleXdvcmQubGVuZ3RoID4gNzkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdrZXl3b3JkIGxlbmd0aCBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNzknKTtcbiAgICB9XG59XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udHJvbC1yZWdleFxuY29uc3QgbGF0aW4xUmVnZXggPSAvXltcXHUwMDAwLVxcdTAwRkZdKiQvO1xuZnVuY3Rpb24gdmFsaWRhdGVMYXRpbjEodGV4dCkge1xuICAgIGlmICghbGF0aW4xUmVnZXgudGVzdCh0ZXh0KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgbGF0aW4xIHRleHQnKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZGVjb2RldEVYdCh0ZXh0LCBidWZmZXIsIGxlbmd0aCkge1xuICAgIGNvbnN0IGtleXdvcmQgPSByZWFkS2V5d29yZChidWZmZXIpO1xuICAgIHRleHRba2V5d29yZF0gPSByZWFkTGF0aW4xKGJ1ZmZlciwgbGVuZ3RoIC0ga2V5d29yZC5sZW5ndGggLSAxKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGV0RVh0KGJ1ZmZlciwga2V5d29yZCwgdGV4dCkge1xuICAgIHZhbGlkYXRlS2V5d29yZChrZXl3b3JkKTtcbiAgICB2YWxpZGF0ZUxhdGluMSh0ZXh0KTtcbiAgICBjb25zdCBsZW5ndGggPSBrZXl3b3JkLmxlbmd0aCArIDEgLyogTlVMTCAqLyArIHRleHQubGVuZ3RoO1xuICAgIGJ1ZmZlci53cml0ZVVpbnQzMihsZW5ndGgpO1xuICAgIGJ1ZmZlci53cml0ZUNoYXJzKHRleHRDaHVua05hbWUpO1xuICAgIGJ1ZmZlci53cml0ZUNoYXJzKGtleXdvcmQpO1xuICAgIGJ1ZmZlci53cml0ZUJ5dGUoTlVMTCk7XG4gICAgYnVmZmVyLndyaXRlQ2hhcnModGV4dCk7XG4gICAgd3JpdGVDcmMoYnVmZmVyLCBsZW5ndGggKyA0KTtcbn1cbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9wbmcvIzExa2V5d29yZHNcbmV4cG9ydCBmdW5jdGlvbiByZWFkS2V5d29yZChidWZmZXIpIHtcbiAgICBidWZmZXIubWFyaygpO1xuICAgIHdoaWxlIChidWZmZXIucmVhZEJ5dGUoKSAhPT0gTlVMTCkge1xuICAgICAgICAvKiBhZHZhbmNlICovXG4gICAgfVxuICAgIGNvbnN0IGVuZCA9IGJ1ZmZlci5vZmZzZXQ7XG4gICAgYnVmZmVyLnJlc2V0KCk7XG4gICAgY29uc3Qga2V5d29yZCA9IGxhdGluMURlY29kZXIuZGVjb2RlKGJ1ZmZlci5yZWFkQnl0ZXMoZW5kIC0gYnVmZmVyLm9mZnNldCAtIDEpKTtcbiAgICAvLyBOVUxMXG4gICAgYnVmZmVyLnNraXAoMSk7XG4gICAgdmFsaWRhdGVLZXl3b3JkKGtleXdvcmQpO1xuICAgIHJldHVybiBrZXl3b3JkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRMYXRpbjEoYnVmZmVyLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gbGF0aW4xRGVjb2Rlci5kZWNvZGUoYnVmZmVyLnJlYWRCeXRlcyhsZW5ndGgpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRleHQuanMubWFwIl0sIm5hbWVzIjpbIndyaXRlQ3JjIiwidGV4dENodW5rTmFtZSIsIk5VTEwiLCJsYXRpbjFEZWNvZGVyIiwiVGV4dERlY29kZXIiLCJ2YWxpZGF0ZUtleXdvcmQiLCJrZXl3b3JkIiwidmFsaWRhdGVMYXRpbjEiLCJsZW5ndGgiLCJFcnJvciIsImxhdGluMVJlZ2V4IiwidGV4dCIsInRlc3QiLCJkZWNvZGV0RVh0IiwiYnVmZmVyIiwicmVhZEtleXdvcmQiLCJyZWFkTGF0aW4xIiwiZW5jb2RldEVYdCIsIndyaXRlVWludDMyIiwid3JpdGVDaGFycyIsIndyaXRlQnl0ZSIsIm1hcmsiLCJyZWFkQnl0ZSIsImVuZCIsIm9mZnNldCIsInJlc2V0IiwiZGVjb2RlIiwicmVhZEJ5dGVzIiwic2tpcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/fast-png/lib-esm/helpers/text.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/fast-png/lib-esm/helpers/unfilter.js":
/*!***********************************************************!*\
  !*** ./node_modules/fast-png/lib-esm/helpers/unfilter.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   unfilterAverage: function() { return /* binding */ unfilterAverage; },\n/* harmony export */   unfilterNone: function() { return /* binding */ unfilterNone; },\n/* harmony export */   unfilterPaeth: function() { return /* binding */ unfilterPaeth; },\n/* harmony export */   unfilterSub: function() { return /* binding */ unfilterSub; },\n/* harmony export */   unfilterUp: function() { return /* binding */ unfilterUp; }\n/* harmony export */ });\nfunction unfilterNone(currentLine, newLine, bytesPerLine) {\n    for(let i = 0; i < bytesPerLine; i++){\n        newLine[i] = currentLine[i];\n    }\n}\nfunction unfilterSub(currentLine, newLine, bytesPerLine, bytesPerPixel) {\n    let i = 0;\n    for(; i < bytesPerPixel; i++){\n        // just copy first bytes\n        newLine[i] = currentLine[i];\n    }\n    for(; i < bytesPerLine; i++){\n        newLine[i] = currentLine[i] + newLine[i - bytesPerPixel] & 0xff;\n    }\n}\nfunction unfilterUp(currentLine, newLine, prevLine, bytesPerLine) {\n    let i = 0;\n    if (prevLine.length === 0) {\n        // just copy bytes for first line\n        for(; i < bytesPerLine; i++){\n            newLine[i] = currentLine[i];\n        }\n    } else {\n        for(; i < bytesPerLine; i++){\n            newLine[i] = currentLine[i] + prevLine[i] & 0xff;\n        }\n    }\n}\nfunction unfilterAverage(currentLine, newLine, prevLine, bytesPerLine, bytesPerPixel) {\n    let i = 0;\n    if (prevLine.length === 0) {\n        for(; i < bytesPerPixel; i++){\n            newLine[i] = currentLine[i];\n        }\n        for(; i < bytesPerLine; i++){\n            newLine[i] = currentLine[i] + (newLine[i - bytesPerPixel] >> 1) & 0xff;\n        }\n    } else {\n        for(; i < bytesPerPixel; i++){\n            newLine[i] = currentLine[i] + (prevLine[i] >> 1) & 0xff;\n        }\n        for(; i < bytesPerLine; i++){\n            newLine[i] = currentLine[i] + (newLine[i - bytesPerPixel] + prevLine[i] >> 1) & 0xff;\n        }\n    }\n}\nfunction unfilterPaeth(currentLine, newLine, prevLine, bytesPerLine, bytesPerPixel) {\n    let i = 0;\n    if (prevLine.length === 0) {\n        for(; i < bytesPerPixel; i++){\n            newLine[i] = currentLine[i];\n        }\n        for(; i < bytesPerLine; i++){\n            newLine[i] = currentLine[i] + newLine[i - bytesPerPixel] & 0xff;\n        }\n    } else {\n        for(; i < bytesPerPixel; i++){\n            newLine[i] = currentLine[i] + prevLine[i] & 0xff;\n        }\n        for(; i < bytesPerLine; i++){\n            newLine[i] = currentLine[i] + paethPredictor(newLine[i - bytesPerPixel], prevLine[i], prevLine[i - bytesPerPixel]) & 0xff;\n        }\n    }\n}\nfunction paethPredictor(a, b, c) {\n    const p = a + b - c;\n    const pa = Math.abs(p - a);\n    const pb = Math.abs(p - b);\n    const pc = Math.abs(p - c);\n    if (pa <= pb && pa <= pc) return a;\n    else if (pb <= pc) return b;\n    else return c;\n} //# sourceMappingURL=unfilter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9mYXN0LXBuZy9saWItZXNtL2hlbHBlcnMvdW5maWx0ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBTyxTQUFTQSxhQUFhQyxXQUFXLEVBQUVDLE9BQU8sRUFBRUMsWUFBWTtJQUMzRCxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUQsY0FBY0MsSUFBSztRQUNuQ0YsT0FBTyxDQUFDRSxFQUFFLEdBQUdILFdBQVcsQ0FBQ0csRUFBRTtJQUMvQjtBQUNKO0FBQ08sU0FBU0MsWUFBWUosV0FBVyxFQUFFQyxPQUFPLEVBQUVDLFlBQVksRUFBRUcsYUFBYTtJQUN6RSxJQUFJRixJQUFJO0lBQ1IsTUFBT0EsSUFBSUUsZUFBZUYsSUFBSztRQUMzQix3QkFBd0I7UUFDeEJGLE9BQU8sQ0FBQ0UsRUFBRSxHQUFHSCxXQUFXLENBQUNHLEVBQUU7SUFDL0I7SUFDQSxNQUFPQSxJQUFJRCxjQUFjQyxJQUFLO1FBQzFCRixPQUFPLENBQUNFLEVBQUUsR0FBRyxXQUFZLENBQUNBLEVBQUUsR0FBR0YsT0FBTyxDQUFDRSxJQUFJRSxjQUFjLEdBQUk7SUFDakU7QUFDSjtBQUNPLFNBQVNDLFdBQVdOLFdBQVcsRUFBRUMsT0FBTyxFQUFFTSxRQUFRLEVBQUVMLFlBQVk7SUFDbkUsSUFBSUMsSUFBSTtJQUNSLElBQUlJLFNBQVNDLE1BQU0sS0FBSyxHQUFHO1FBQ3ZCLGlDQUFpQztRQUNqQyxNQUFPTCxJQUFJRCxjQUFjQyxJQUFLO1lBQzFCRixPQUFPLENBQUNFLEVBQUUsR0FBR0gsV0FBVyxDQUFDRyxFQUFFO1FBQy9CO0lBQ0osT0FDSztRQUNELE1BQU9BLElBQUlELGNBQWNDLElBQUs7WUFDMUJGLE9BQU8sQ0FBQ0UsRUFBRSxHQUFHLFdBQVksQ0FBQ0EsRUFBRSxHQUFHSSxRQUFRLENBQUNKLEVBQUUsR0FBSTtRQUNsRDtJQUNKO0FBQ0o7QUFDTyxTQUFTTSxnQkFBZ0JULFdBQVcsRUFBRUMsT0FBTyxFQUFFTSxRQUFRLEVBQUVMLFlBQVksRUFBRUcsYUFBYTtJQUN2RixJQUFJRixJQUFJO0lBQ1IsSUFBSUksU0FBU0MsTUFBTSxLQUFLLEdBQUc7UUFDdkIsTUFBT0wsSUFBSUUsZUFBZUYsSUFBSztZQUMzQkYsT0FBTyxDQUFDRSxFQUFFLEdBQUdILFdBQVcsQ0FBQ0csRUFBRTtRQUMvQjtRQUNBLE1BQU9BLElBQUlELGNBQWNDLElBQUs7WUFDMUJGLE9BQU8sQ0FBQ0UsRUFBRSxHQUFHLFdBQVksQ0FBQ0EsRUFBRSxHQUFJRixDQUFBQSxPQUFPLENBQUNFLElBQUlFLGNBQWMsSUFBSSxLQUFNO1FBQ3hFO0lBQ0osT0FDSztRQUNELE1BQU9GLElBQUlFLGVBQWVGLElBQUs7WUFDM0JGLE9BQU8sQ0FBQ0UsRUFBRSxHQUFHLFdBQVksQ0FBQ0EsRUFBRSxHQUFJSSxDQUFBQSxRQUFRLENBQUNKLEVBQUUsSUFBSSxLQUFNO1FBQ3pEO1FBQ0EsTUFBT0EsSUFBSUQsY0FBY0MsSUFBSztZQUMxQkYsT0FBTyxDQUFDRSxFQUFFLEdBQ04sV0FBWSxDQUFDQSxFQUFFLEdBQUksUUFBUSxDQUFDQSxJQUFJRSxjQUFjLEdBQUdFLFFBQVEsQ0FBQ0osRUFBRSxJQUFLLEtBQzdEO1FBQ1o7SUFDSjtBQUNKO0FBQ08sU0FBU08sY0FBY1YsV0FBVyxFQUFFQyxPQUFPLEVBQUVNLFFBQVEsRUFBRUwsWUFBWSxFQUFFRyxhQUFhO0lBQ3JGLElBQUlGLElBQUk7SUFDUixJQUFJSSxTQUFTQyxNQUFNLEtBQUssR0FBRztRQUN2QixNQUFPTCxJQUFJRSxlQUFlRixJQUFLO1lBQzNCRixPQUFPLENBQUNFLEVBQUUsR0FBR0gsV0FBVyxDQUFDRyxFQUFFO1FBQy9CO1FBQ0EsTUFBT0EsSUFBSUQsY0FBY0MsSUFBSztZQUMxQkYsT0FBTyxDQUFDRSxFQUFFLEdBQUcsV0FBWSxDQUFDQSxFQUFFLEdBQUdGLE9BQU8sQ0FBQ0UsSUFBSUUsY0FBYyxHQUFJO1FBQ2pFO0lBQ0osT0FDSztRQUNELE1BQU9GLElBQUlFLGVBQWVGLElBQUs7WUFDM0JGLE9BQU8sQ0FBQ0UsRUFBRSxHQUFHLFdBQVksQ0FBQ0EsRUFBRSxHQUFHSSxRQUFRLENBQUNKLEVBQUUsR0FBSTtRQUNsRDtRQUNBLE1BQU9BLElBQUlELGNBQWNDLElBQUs7WUFDMUJGLE9BQU8sQ0FBQ0UsRUFBRSxHQUNOLFdBQVksQ0FBQ0EsRUFBRSxHQUNYUSxlQUFlVixPQUFPLENBQUNFLElBQUlFLGNBQWMsRUFBRUUsUUFBUSxDQUFDSixFQUFFLEVBQUVJLFFBQVEsQ0FBQ0osSUFBSUUsY0FBYyxJQUNuRjtRQUNaO0lBQ0o7QUFDSjtBQUNBLFNBQVNNLGVBQWVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDO0lBQzNCLE1BQU1DLElBQUlILElBQUlDLElBQUlDO0lBQ2xCLE1BQU1FLEtBQUtDLEtBQUtDLEdBQUcsQ0FBQ0gsSUFBSUg7SUFDeEIsTUFBTU8sS0FBS0YsS0FBS0MsR0FBRyxDQUFDSCxJQUFJRjtJQUN4QixNQUFNTyxLQUFLSCxLQUFLQyxHQUFHLENBQUNILElBQUlEO0lBQ3hCLElBQUlFLE1BQU1HLE1BQU1ILE1BQU1JLElBQ2xCLE9BQU9SO1NBQ04sSUFBSU8sTUFBTUMsSUFDWCxPQUFPUDtTQUVQLE9BQU9DO0FBQ2YsRUFDQSxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2Zhc3QtcG5nL2xpYi1lc20vaGVscGVycy91bmZpbHRlci5qcz8zMmYyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiB1bmZpbHRlck5vbmUoY3VycmVudExpbmUsIG5ld0xpbmUsIGJ5dGVzUGVyTGluZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXNQZXJMaW5lOyBpKyspIHtcbiAgICAgICAgbmV3TGluZVtpXSA9IGN1cnJlbnRMaW5lW2ldO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiB1bmZpbHRlclN1YihjdXJyZW50TGluZSwgbmV3TGluZSwgYnl0ZXNQZXJMaW5lLCBieXRlc1BlclBpeGVsKSB7XG4gICAgbGV0IGkgPSAwO1xuICAgIGZvciAoOyBpIDwgYnl0ZXNQZXJQaXhlbDsgaSsrKSB7XG4gICAgICAgIC8vIGp1c3QgY29weSBmaXJzdCBieXRlc1xuICAgICAgICBuZXdMaW5lW2ldID0gY3VycmVudExpbmVbaV07XG4gICAgfVxuICAgIGZvciAoOyBpIDwgYnl0ZXNQZXJMaW5lOyBpKyspIHtcbiAgICAgICAgbmV3TGluZVtpXSA9IChjdXJyZW50TGluZVtpXSArIG5ld0xpbmVbaSAtIGJ5dGVzUGVyUGl4ZWxdKSAmIDB4ZmY7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHVuZmlsdGVyVXAoY3VycmVudExpbmUsIG5ld0xpbmUsIHByZXZMaW5lLCBieXRlc1BlckxpbmUpIHtcbiAgICBsZXQgaSA9IDA7XG4gICAgaWYgKHByZXZMaW5lLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAvLyBqdXN0IGNvcHkgYnl0ZXMgZm9yIGZpcnN0IGxpbmVcbiAgICAgICAgZm9yICg7IGkgPCBieXRlc1BlckxpbmU7IGkrKykge1xuICAgICAgICAgICAgbmV3TGluZVtpXSA9IGN1cnJlbnRMaW5lW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmb3IgKDsgaSA8IGJ5dGVzUGVyTGluZTsgaSsrKSB7XG4gICAgICAgICAgICBuZXdMaW5lW2ldID0gKGN1cnJlbnRMaW5lW2ldICsgcHJldkxpbmVbaV0pICYgMHhmZjtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiB1bmZpbHRlckF2ZXJhZ2UoY3VycmVudExpbmUsIG5ld0xpbmUsIHByZXZMaW5lLCBieXRlc1BlckxpbmUsIGJ5dGVzUGVyUGl4ZWwpIHtcbiAgICBsZXQgaSA9IDA7XG4gICAgaWYgKHByZXZMaW5lLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBmb3IgKDsgaSA8IGJ5dGVzUGVyUGl4ZWw7IGkrKykge1xuICAgICAgICAgICAgbmV3TGluZVtpXSA9IGN1cnJlbnRMaW5lW2ldO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoOyBpIDwgYnl0ZXNQZXJMaW5lOyBpKyspIHtcbiAgICAgICAgICAgIG5ld0xpbmVbaV0gPSAoY3VycmVudExpbmVbaV0gKyAobmV3TGluZVtpIC0gYnl0ZXNQZXJQaXhlbF0gPj4gMSkpICYgMHhmZjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZm9yICg7IGkgPCBieXRlc1BlclBpeGVsOyBpKyspIHtcbiAgICAgICAgICAgIG5ld0xpbmVbaV0gPSAoY3VycmVudExpbmVbaV0gKyAocHJldkxpbmVbaV0gPj4gMSkpICYgMHhmZjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKDsgaSA8IGJ5dGVzUGVyTGluZTsgaSsrKSB7XG4gICAgICAgICAgICBuZXdMaW5lW2ldID1cbiAgICAgICAgICAgICAgICAoY3VycmVudExpbmVbaV0gKyAoKG5ld0xpbmVbaSAtIGJ5dGVzUGVyUGl4ZWxdICsgcHJldkxpbmVbaV0pID4+IDEpKSAmXG4gICAgICAgICAgICAgICAgICAgIDB4ZmY7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gdW5maWx0ZXJQYWV0aChjdXJyZW50TGluZSwgbmV3TGluZSwgcHJldkxpbmUsIGJ5dGVzUGVyTGluZSwgYnl0ZXNQZXJQaXhlbCkge1xuICAgIGxldCBpID0gMDtcbiAgICBpZiAocHJldkxpbmUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGZvciAoOyBpIDwgYnl0ZXNQZXJQaXhlbDsgaSsrKSB7XG4gICAgICAgICAgICBuZXdMaW5lW2ldID0gY3VycmVudExpbmVbaV07XG4gICAgICAgIH1cbiAgICAgICAgZm9yICg7IGkgPCBieXRlc1BlckxpbmU7IGkrKykge1xuICAgICAgICAgICAgbmV3TGluZVtpXSA9IChjdXJyZW50TGluZVtpXSArIG5ld0xpbmVbaSAtIGJ5dGVzUGVyUGl4ZWxdKSAmIDB4ZmY7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGZvciAoOyBpIDwgYnl0ZXNQZXJQaXhlbDsgaSsrKSB7XG4gICAgICAgICAgICBuZXdMaW5lW2ldID0gKGN1cnJlbnRMaW5lW2ldICsgcHJldkxpbmVbaV0pICYgMHhmZjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKDsgaSA8IGJ5dGVzUGVyTGluZTsgaSsrKSB7XG4gICAgICAgICAgICBuZXdMaW5lW2ldID1cbiAgICAgICAgICAgICAgICAoY3VycmVudExpbmVbaV0gK1xuICAgICAgICAgICAgICAgICAgICBwYWV0aFByZWRpY3RvcihuZXdMaW5lW2kgLSBieXRlc1BlclBpeGVsXSwgcHJldkxpbmVbaV0sIHByZXZMaW5lW2kgLSBieXRlc1BlclBpeGVsXSkpICZcbiAgICAgICAgICAgICAgICAgICAgMHhmZjtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHBhZXRoUHJlZGljdG9yKGEsIGIsIGMpIHtcbiAgICBjb25zdCBwID0gYSArIGIgLSBjO1xuICAgIGNvbnN0IHBhID0gTWF0aC5hYnMocCAtIGEpO1xuICAgIGNvbnN0IHBiID0gTWF0aC5hYnMocCAtIGIpO1xuICAgIGNvbnN0IHBjID0gTWF0aC5hYnMocCAtIGMpO1xuICAgIGlmIChwYSA8PSBwYiAmJiBwYSA8PSBwYylcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgZWxzZSBpZiAocGIgPD0gcGMpXG4gICAgICAgIHJldHVybiBiO1xuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIGM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11bmZpbHRlci5qcy5tYXAiXSwibmFtZXMiOlsidW5maWx0ZXJOb25lIiwiY3VycmVudExpbmUiLCJuZXdMaW5lIiwiYnl0ZXNQZXJMaW5lIiwiaSIsInVuZmlsdGVyU3ViIiwiYnl0ZXNQZXJQaXhlbCIsInVuZmlsdGVyVXAiLCJwcmV2TGluZSIsImxlbmd0aCIsInVuZmlsdGVyQXZlcmFnZSIsInVuZmlsdGVyUGFldGgiLCJwYWV0aFByZWRpY3RvciIsImEiLCJiIiwiYyIsInAiLCJwYSIsIk1hdGgiLCJhYnMiLCJwYiIsInBjIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/fast-png/lib-esm/helpers/unfilter.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/fast-png/lib-esm/index.js":
/*!************************************************!*\
  !*** ./node_modules/fast-png/lib-esm/index.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ResolutionUnitSpecifier: function() { return /* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_3__.ResolutionUnitSpecifier; },\n/* harmony export */   convertIndexedToRgb: function() { return /* reexport safe */ _convertIndexedToRgb__WEBPACK_IMPORTED_MODULE_4__.convertIndexedToRgb; },\n/* harmony export */   decode: function() { return /* binding */ decodePng; },\n/* harmony export */   decodeApng: function() { return /* binding */ decodeApng; },\n/* harmony export */   encode: function() { return /* binding */ encodePng; },\n/* harmony export */   hasPngSignature: function() { return /* reexport safe */ _helpers_signature__WEBPACK_IMPORTED_MODULE_2__.hasPngSignature; }\n/* harmony export */ });\n/* harmony import */ var _PngDecoder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PngDecoder */ \"(app-pages-browser)/./node_modules/fast-png/lib-esm/PngDecoder.js\");\n/* harmony import */ var _PngEncoder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PngEncoder */ \"(app-pages-browser)/./node_modules/fast-png/lib-esm/PngEncoder.js\");\n/* harmony import */ var _helpers_signature__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/signature */ \"(app-pages-browser)/./node_modules/fast-png/lib-esm/helpers/signature.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types */ \"(app-pages-browser)/./node_modules/fast-png/lib-esm/types.js\");\n/* harmony import */ var _convertIndexedToRgb__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./convertIndexedToRgb */ \"(app-pages-browser)/./node_modules/fast-png/lib-esm/convertIndexedToRgb.js\");\n\n\n\n\nfunction decodePng(data, options) {\n    const decoder = new _PngDecoder__WEBPACK_IMPORTED_MODULE_0__[\"default\"](data, options);\n    return decoder.decode();\n}\nfunction encodePng(png, options) {\n    const encoder = new _PngEncoder__WEBPACK_IMPORTED_MODULE_1__[\"default\"](png, options);\n    return encoder.encode();\n}\nfunction decodeApng(data, options) {\n    const decoder = new _PngDecoder__WEBPACK_IMPORTED_MODULE_0__[\"default\"](data, options);\n    return decoder.decodeApng();\n}\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9mYXN0LXBuZy9saWItZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQXNDO0FBQ0E7QUFDZ0I7QUFDOUI7QUFDeEIsU0FBU0csVUFBVUMsSUFBSSxFQUFFQyxPQUFPO0lBQzVCLE1BQU1DLFVBQVUsSUFBSU4sbURBQVVBLENBQUNJLE1BQU1DO0lBQ3JDLE9BQU9DLFFBQVFDLE1BQU07QUFDekI7QUFDQSxTQUFTQyxVQUFVQyxHQUFHLEVBQUVKLE9BQU87SUFDM0IsTUFBTUssVUFBVSxJQUFJVCxtREFBVUEsQ0FBQ1EsS0FBS0o7SUFDcEMsT0FBT0ssUUFBUUMsTUFBTTtBQUN6QjtBQUNBLFNBQVNDLFdBQVdSLElBQUksRUFBRUMsT0FBTztJQUM3QixNQUFNQyxVQUFVLElBQUlOLG1EQUFVQSxDQUFDSSxNQUFNQztJQUNyQyxPQUFPQyxRQUFRTSxVQUFVO0FBQzdCO0FBQ2dFO0FBQ0osQ0FDNUQsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9mYXN0LXBuZy9saWItZXNtL2luZGV4LmpzPzRhZjIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFBuZ0RlY29kZXIgZnJvbSAnLi9QbmdEZWNvZGVyJztcbmltcG9ydCBQbmdFbmNvZGVyIGZyb20gJy4vUG5nRW5jb2Rlcic7XG5leHBvcnQgeyBoYXNQbmdTaWduYXR1cmUgfSBmcm9tICcuL2hlbHBlcnMvc2lnbmF0dXJlJztcbmV4cG9ydCAqIGZyb20gJy4vdHlwZXMnO1xuZnVuY3Rpb24gZGVjb2RlUG5nKGRhdGEsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBkZWNvZGVyID0gbmV3IFBuZ0RlY29kZXIoZGF0YSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIGRlY29kZXIuZGVjb2RlKCk7XG59XG5mdW5jdGlvbiBlbmNvZGVQbmcocG5nLCBvcHRpb25zKSB7XG4gICAgY29uc3QgZW5jb2RlciA9IG5ldyBQbmdFbmNvZGVyKHBuZywgb3B0aW9ucyk7XG4gICAgcmV0dXJuIGVuY29kZXIuZW5jb2RlKCk7XG59XG5mdW5jdGlvbiBkZWNvZGVBcG5nKGRhdGEsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBkZWNvZGVyID0gbmV3IFBuZ0RlY29kZXIoZGF0YSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIGRlY29kZXIuZGVjb2RlQXBuZygpO1xufVxuZXhwb3J0IHsgZGVjb2RlUG5nIGFzIGRlY29kZSwgZW5jb2RlUG5nIGFzIGVuY29kZSwgZGVjb2RlQXBuZyB9O1xuZXhwb3J0IHsgY29udmVydEluZGV4ZWRUb1JnYiB9IGZyb20gJy4vY29udmVydEluZGV4ZWRUb1JnYic7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiUG5nRGVjb2RlciIsIlBuZ0VuY29kZXIiLCJoYXNQbmdTaWduYXR1cmUiLCJkZWNvZGVQbmciLCJkYXRhIiwib3B0aW9ucyIsImRlY29kZXIiLCJkZWNvZGUiLCJlbmNvZGVQbmciLCJwbmciLCJlbmNvZGVyIiwiZW5jb2RlIiwiZGVjb2RlQXBuZyIsImNvbnZlcnRJbmRleGVkVG9SZ2IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/fast-png/lib-esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/fast-png/lib-esm/internalTypes.js":
/*!********************************************************!*\
  !*** ./node_modules/fast-png/lib-esm/internalTypes.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlendOpType: function() { return /* binding */ BlendOpType; },\n/* harmony export */   ColorType: function() { return /* binding */ ColorType; },\n/* harmony export */   CompressionMethod: function() { return /* binding */ CompressionMethod; },\n/* harmony export */   DisposeOpType: function() { return /* binding */ DisposeOpType; },\n/* harmony export */   FilterMethod: function() { return /* binding */ FilterMethod; },\n/* harmony export */   InterlaceMethod: function() { return /* binding */ InterlaceMethod; }\n/* harmony export */ });\nconst ColorType = {\n    UNKNOWN: -1,\n    GREYSCALE: 0,\n    TRUECOLOUR: 2,\n    INDEXED_COLOUR: 3,\n    GREYSCALE_ALPHA: 4,\n    TRUECOLOUR_ALPHA: 6\n};\nconst CompressionMethod = {\n    UNKNOWN: -1,\n    DEFLATE: 0\n};\nconst FilterMethod = {\n    UNKNOWN: -1,\n    ADAPTIVE: 0\n};\nconst InterlaceMethod = {\n    UNKNOWN: -1,\n    NO_INTERLACE: 0,\n    ADAM7: 1\n};\nconst DisposeOpType = {\n    NONE: 0,\n    BACKGROUND: 1,\n    PREVIOUS: 2\n};\nconst BlendOpType = {\n    SOURCE: 0,\n    OVER: 1\n}; //# sourceMappingURL=internalTypes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9mYXN0LXBuZy9saWItZXNtL2ludGVybmFsVHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQU8sTUFBTUEsWUFBWTtJQUNyQkMsU0FBUyxDQUFDO0lBQ1ZDLFdBQVc7SUFDWEMsWUFBWTtJQUNaQyxnQkFBZ0I7SUFDaEJDLGlCQUFpQjtJQUNqQkMsa0JBQWtCO0FBQ3RCLEVBQUU7QUFDSyxNQUFNQyxvQkFBb0I7SUFDN0JOLFNBQVMsQ0FBQztJQUNWTyxTQUFTO0FBQ2IsRUFBRTtBQUNLLE1BQU1DLGVBQWU7SUFDeEJSLFNBQVMsQ0FBQztJQUNWUyxVQUFVO0FBQ2QsRUFBRTtBQUNLLE1BQU1DLGtCQUFrQjtJQUMzQlYsU0FBUyxDQUFDO0lBQ1ZXLGNBQWM7SUFDZEMsT0FBTztBQUNYLEVBQUU7QUFDSyxNQUFNQyxnQkFBZ0I7SUFDekJDLE1BQU07SUFDTkMsWUFBWTtJQUNaQyxVQUFVO0FBQ2QsRUFBRTtBQUNLLE1BQU1DLGNBQWM7SUFDdkJDLFFBQVE7SUFDUkMsTUFBTTtBQUNWLEVBQUUsQ0FDRix5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2Zhc3QtcG5nL2xpYi1lc20vaW50ZXJuYWxUeXBlcy5qcz9jMTNhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBDb2xvclR5cGUgPSB7XG4gICAgVU5LTk9XTjogLTEsXG4gICAgR1JFWVNDQUxFOiAwLFxuICAgIFRSVUVDT0xPVVI6IDIsXG4gICAgSU5ERVhFRF9DT0xPVVI6IDMsXG4gICAgR1JFWVNDQUxFX0FMUEhBOiA0LFxuICAgIFRSVUVDT0xPVVJfQUxQSEE6IDYsXG59O1xuZXhwb3J0IGNvbnN0IENvbXByZXNzaW9uTWV0aG9kID0ge1xuICAgIFVOS05PV046IC0xLFxuICAgIERFRkxBVEU6IDAsXG59O1xuZXhwb3J0IGNvbnN0IEZpbHRlck1ldGhvZCA9IHtcbiAgICBVTktOT1dOOiAtMSxcbiAgICBBREFQVElWRTogMCxcbn07XG5leHBvcnQgY29uc3QgSW50ZXJsYWNlTWV0aG9kID0ge1xuICAgIFVOS05PV046IC0xLFxuICAgIE5PX0lOVEVSTEFDRTogMCxcbiAgICBBREFNNzogMSxcbn07XG5leHBvcnQgY29uc3QgRGlzcG9zZU9wVHlwZSA9IHtcbiAgICBOT05FOiAwLFxuICAgIEJBQ0tHUk9VTkQ6IDEsXG4gICAgUFJFVklPVVM6IDIsXG59O1xuZXhwb3J0IGNvbnN0IEJsZW5kT3BUeXBlID0ge1xuICAgIFNPVVJDRTogMCxcbiAgICBPVkVSOiAxLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVybmFsVHlwZXMuanMubWFwIl0sIm5hbWVzIjpbIkNvbG9yVHlwZSIsIlVOS05PV04iLCJHUkVZU0NBTEUiLCJUUlVFQ09MT1VSIiwiSU5ERVhFRF9DT0xPVVIiLCJHUkVZU0NBTEVfQUxQSEEiLCJUUlVFQ09MT1VSX0FMUEhBIiwiQ29tcHJlc3Npb25NZXRob2QiLCJERUZMQVRFIiwiRmlsdGVyTWV0aG9kIiwiQURBUFRJVkUiLCJJbnRlcmxhY2VNZXRob2QiLCJOT19JTlRFUkxBQ0UiLCJBREFNNyIsIkRpc3Bvc2VPcFR5cGUiLCJOT05FIiwiQkFDS0dST1VORCIsIlBSRVZJT1VTIiwiQmxlbmRPcFR5cGUiLCJTT1VSQ0UiLCJPVkVSIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/fast-png/lib-esm/internalTypes.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/fast-png/lib-esm/types.js":
/*!************************************************!*\
  !*** ./node_modules/fast-png/lib-esm/types.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ResolutionUnitSpecifier: function() { return /* binding */ ResolutionUnitSpecifier; }\n/* harmony export */ });\nvar ResolutionUnitSpecifier;\n(function(ResolutionUnitSpecifier) {\n    /**\n     * Unit is unknown\n     */ ResolutionUnitSpecifier[ResolutionUnitSpecifier[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    /**\n     * Unit is the metre\n     */ ResolutionUnitSpecifier[ResolutionUnitSpecifier[\"METRE\"] = 1] = \"METRE\";\n})(ResolutionUnitSpecifier || (ResolutionUnitSpecifier = {})); //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9mYXN0LXBuZy9saWItZXNtL3R5cGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxJQUFJQSx3QkFBd0I7QUFDbEMsVUFBVUEsdUJBQXVCO0lBQzlCOztLQUVDLEdBQ0RBLHVCQUF1QixDQUFDQSx1QkFBdUIsQ0FBQyxVQUFVLEdBQUcsRUFBRSxHQUFHO0lBQ2xFOztLQUVDLEdBQ0RBLHVCQUF1QixDQUFDQSx1QkFBdUIsQ0FBQyxRQUFRLEdBQUcsRUFBRSxHQUFHO0FBQ3BFLEdBQUdBLDJCQUE0QkEsQ0FBQUEsMEJBQTBCLENBQUMsS0FDMUQsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9mYXN0LXBuZy9saWItZXNtL3R5cGVzLmpzP2U1YTUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBSZXNvbHV0aW9uVW5pdFNwZWNpZmllcjtcbihmdW5jdGlvbiAoUmVzb2x1dGlvblVuaXRTcGVjaWZpZXIpIHtcbiAgICAvKipcbiAgICAgKiBVbml0IGlzIHVua25vd25cbiAgICAgKi9cbiAgICBSZXNvbHV0aW9uVW5pdFNwZWNpZmllcltSZXNvbHV0aW9uVW5pdFNwZWNpZmllcltcIlVOS05PV05cIl0gPSAwXSA9IFwiVU5LTk9XTlwiO1xuICAgIC8qKlxuICAgICAqIFVuaXQgaXMgdGhlIG1ldHJlXG4gICAgICovXG4gICAgUmVzb2x1dGlvblVuaXRTcGVjaWZpZXJbUmVzb2x1dGlvblVuaXRTcGVjaWZpZXJbXCJNRVRSRVwiXSA9IDFdID0gXCJNRVRSRVwiO1xufSkoUmVzb2x1dGlvblVuaXRTcGVjaWZpZXIgfHwgKFJlc29sdXRpb25Vbml0U3BlY2lmaWVyID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6WyJSZXNvbHV0aW9uVW5pdFNwZWNpZmllciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/fast-png/lib-esm/types.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/fflate/esm/browser.js":
/*!********************************************!*\
  !*** ./node_modules/fflate/esm/browser.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncCompress: function() { return /* binding */ AsyncGzip; },\n/* harmony export */   AsyncDecompress: function() { return /* binding */ AsyncDecompress; },\n/* harmony export */   AsyncDeflate: function() { return /* binding */ AsyncDeflate; },\n/* harmony export */   AsyncGunzip: function() { return /* binding */ AsyncGunzip; },\n/* harmony export */   AsyncGzip: function() { return /* binding */ AsyncGzip; },\n/* harmony export */   AsyncInflate: function() { return /* binding */ AsyncInflate; },\n/* harmony export */   AsyncUnzipInflate: function() { return /* binding */ AsyncUnzipInflate; },\n/* harmony export */   AsyncUnzlib: function() { return /* binding */ AsyncUnzlib; },\n/* harmony export */   AsyncZipDeflate: function() { return /* binding */ AsyncZipDeflate; },\n/* harmony export */   AsyncZlib: function() { return /* binding */ AsyncZlib; },\n/* harmony export */   Compress: function() { return /* binding */ Gzip; },\n/* harmony export */   DecodeUTF8: function() { return /* binding */ DecodeUTF8; },\n/* harmony export */   Decompress: function() { return /* binding */ Decompress; },\n/* harmony export */   Deflate: function() { return /* binding */ Deflate; },\n/* harmony export */   EncodeUTF8: function() { return /* binding */ EncodeUTF8; },\n/* harmony export */   FlateErrorCode: function() { return /* binding */ FlateErrorCode; },\n/* harmony export */   Gunzip: function() { return /* binding */ Gunzip; },\n/* harmony export */   Gzip: function() { return /* binding */ Gzip; },\n/* harmony export */   Inflate: function() { return /* binding */ Inflate; },\n/* harmony export */   Unzip: function() { return /* binding */ Unzip; },\n/* harmony export */   UnzipInflate: function() { return /* binding */ UnzipInflate; },\n/* harmony export */   UnzipPassThrough: function() { return /* binding */ UnzipPassThrough; },\n/* harmony export */   Unzlib: function() { return /* binding */ Unzlib; },\n/* harmony export */   Zip: function() { return /* binding */ Zip; },\n/* harmony export */   ZipDeflate: function() { return /* binding */ ZipDeflate; },\n/* harmony export */   ZipPassThrough: function() { return /* binding */ ZipPassThrough; },\n/* harmony export */   Zlib: function() { return /* binding */ Zlib; },\n/* harmony export */   compress: function() { return /* binding */ gzip; },\n/* harmony export */   compressSync: function() { return /* binding */ gzipSync; },\n/* harmony export */   decompress: function() { return /* binding */ decompress; },\n/* harmony export */   decompressSync: function() { return /* binding */ decompressSync; },\n/* harmony export */   deflate: function() { return /* binding */ deflate; },\n/* harmony export */   deflateSync: function() { return /* binding */ deflateSync; },\n/* harmony export */   gunzip: function() { return /* binding */ gunzip; },\n/* harmony export */   gunzipSync: function() { return /* binding */ gunzipSync; },\n/* harmony export */   gzip: function() { return /* binding */ gzip; },\n/* harmony export */   gzipSync: function() { return /* binding */ gzipSync; },\n/* harmony export */   inflate: function() { return /* binding */ inflate; },\n/* harmony export */   inflateSync: function() { return /* binding */ inflateSync; },\n/* harmony export */   strFromU8: function() { return /* binding */ strFromU8; },\n/* harmony export */   strToU8: function() { return /* binding */ strToU8; },\n/* harmony export */   unzip: function() { return /* binding */ unzip; },\n/* harmony export */   unzipSync: function() { return /* binding */ unzipSync; },\n/* harmony export */   unzlib: function() { return /* binding */ unzlib; },\n/* harmony export */   unzlibSync: function() { return /* binding */ unzlibSync; },\n/* harmony export */   zip: function() { return /* binding */ zip; },\n/* harmony export */   zipSync: function() { return /* binding */ zipSync; },\n/* harmony export */   zlib: function() { return /* binding */ zlib; },\n/* harmony export */   zlibSync: function() { return /* binding */ zlibSync; }\n/* harmony export */ });\n// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\nvar ch2 = {};\nvar wk = function(c, id, msg, transfer, cb) {\n    var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([\n        c + ';addEventListener(\"error\",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'\n    ], {\n        type: \"text/javascript\"\n    }))));\n    w.onmessage = function(e) {\n        var d = e.data, ed = d.$e$;\n        if (ed) {\n            var err = new Error(ed[0]);\n            err[\"code\"] = ed[1];\n            err.stack = ed[2];\n            cb(err, null);\n        } else cb(null, d);\n    };\n    w.postMessage(msg, transfer);\n    return w;\n};\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;\n// fixed length extra bits\nvar fleb = new u8([\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    1,\n    1,\n    2,\n    2,\n    2,\n    2,\n    3,\n    3,\n    3,\n    3,\n    4,\n    4,\n    4,\n    4,\n    5,\n    5,\n    5,\n    5,\n    0,\n    /* unused */ 0,\n    0,\n    /* impossible */ 0\n]);\n// fixed distance extra bits\nvar fdeb = new u8([\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    2,\n    2,\n    3,\n    3,\n    4,\n    4,\n    5,\n    5,\n    6,\n    6,\n    7,\n    7,\n    8,\n    8,\n    9,\n    9,\n    10,\n    10,\n    11,\n    11,\n    12,\n    12,\n    13,\n    13,\n    /* unused */ 0,\n    0\n]);\n// code length index map\nvar clim = new u8([\n    16,\n    17,\n    18,\n    0,\n    8,\n    7,\n    9,\n    6,\n    10,\n    5,\n    11,\n    4,\n    12,\n    3,\n    13,\n    2,\n    14,\n    1,\n    15\n]);\n// get base, reverse index map from extra bits\nvar freb = function(eb, start) {\n    var b = new u16(31);\n    for(var i = 0; i < 31; ++i){\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new i32(b[30]);\n    for(var i = 1; i < 30; ++i){\n        for(var j = b[i]; j < b[i + 1]; ++j){\n            r[j] = j - b[i] << 5 | i;\n        }\n    }\n    return {\n        b: b,\n        r: r\n    };\n};\nvar _a = freb(fleb, 2), fl = _a.b, revfl = _a.r;\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b.b, revfd = _b.r;\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor(var i = 0; i < 32768; ++i){\n    // reverse table algorithm from SO\n    var x = (i & 0xAAAA) >> 1 | (i & 0x5555) << 1;\n    x = (x & 0xCCCC) >> 2 | (x & 0x3333) << 2;\n    x = (x & 0xF0F0) >> 4 | (x & 0x0F0F) << 4;\n    rev[i] = ((x & 0xFF00) >> 8 | (x & 0x00FF) << 8) >> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = function(cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for(; i < s; ++i){\n        if (cd[i]) ++l[cd[i] - 1];\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for(i = 1; i < mb; ++i){\n        le[i] = le[i - 1] + l[i - 1] << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for(i = 0; i < s; ++i){\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = i << 4 | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for(var m = v | (1 << r_1) - 1; v <= m; ++v){\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >> rvb] = sv;\n                }\n            }\n        }\n    } else {\n        co = new u16(s);\n        for(i = 0; i < s; ++i){\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >> 15 - cd[i];\n            }\n        }\n    }\n    return co;\n};\n// fixed length tree\nvar flt = new u8(288);\nfor(var i = 0; i < 144; ++i)flt[i] = 8;\nfor(var i = 144; i < 256; ++i)flt[i] = 9;\nfor(var i = 256; i < 280; ++i)flt[i] = 7;\nfor(var i = 280; i < 288; ++i)flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor(var i = 0; i < 32; ++i)fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function(a) {\n    var m = a[0];\n    for(var i = 1; i < a.length; ++i){\n        if (a[i] > m) m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function(d, p, m) {\n    var o = p / 8 | 0;\n    return (d[o] | d[o + 1] << 8) >> (p & 7) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function(d, p) {\n    var o = p / 8 | 0;\n    return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >> (p & 7);\n};\n// get end of byte\nvar shft = function(p) {\n    return (p + 7) / 8 | 0;\n};\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function(v, s, e) {\n    if (s == null || s < 0) s = 0;\n    if (e == null || e > v.length) e = v.length;\n    // can't use .constructor in case user-supplied\n    return new u8(v.subarray(s, e));\n};\n/**\n * Codes for errors generated within this library\n */ var FlateErrorCode = {\n    UnexpectedEOF: 0,\n    InvalidBlockType: 1,\n    InvalidLengthLiteral: 2,\n    InvalidDistance: 3,\n    StreamFinished: 4,\n    NoStreamHandler: 5,\n    InvalidHeader: 6,\n    NoCallback: 7,\n    InvalidUTF8: 8,\n    ExtraFieldTooLong: 9,\n    InvalidDate: 10,\n    FilenameTooLong: 11,\n    StreamFinishing: 12,\n    InvalidZipData: 13,\n    UnknownCompressionMethod: 14\n};\n// error codes\nvar ec = [\n    \"unexpected EOF\",\n    \"invalid block type\",\n    \"invalid length/literal\",\n    \"invalid distance\",\n    \"stream finished\",\n    \"no stream handler\",\n    ,\n    \"no callback\",\n    \"invalid UTF-8 data\",\n    \"extra field too long\",\n    \"date not in range 1980-2099\",\n    \"filename too long\",\n    \"stream finishing\",\n    \"invalid zip data\"\n];\n;\nvar err = function(ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace) Error.captureStackTrace(e, err);\n    if (!nt) throw e;\n    return e;\n};\n// expands raw DEFLATE data\nvar inflt = function(dat, st, buf, dict) {\n    // source length       dict length\n    var sl = dat.length, dl = dict ? dict.length : 0;\n    if (!sl || st.f && !st.l) return buf || new u8(0);\n    var noBuf = !buf;\n    // have to estimate size\n    var resize = noBuf || st.i != 2;\n    // no state\n    var noSt = st.i;\n    // Assumes roughly 33% compression ratio average\n    if (noBuf) buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function(l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | dat[s - 3] << 8, t = s + l;\n                if (t > sl) {\n                    if (noSt) err(0);\n                    break;\n                }\n                // ensure size\n                if (resize) cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            } else if (type == 1) lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for(var i = 0; i < hcLen; ++i){\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for(var i = 0; i < tl;){\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    } else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16) n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17) n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18) n = 11 + bits(dat, pos, 127), pos += 7;\n                        while(n--)ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            } else err(1);\n            if (pos > tbts) {\n                if (noSt) err(0);\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17\n        if (resize) cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for(;; lpos = pos){\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt) err(0);\n                break;\n            }\n            if (!c) err(2);\n            if (sym < 256) buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            } else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;\n                if (!d) err(3);\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & (1 << b) - 1, pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt) err(0);\n                    break;\n                }\n                if (resize) cbuf(bt + 131072);\n                var end = bt + add;\n                if (bt < dt) {\n                    var shift = dl - dt, dend = Math.min(dt, end);\n                    if (shift + bt < 0) err(3);\n                    for(; bt < dend; ++bt)buf[bt] = dict[shift + bt];\n                }\n                for(; bt < end; ++bt)buf[bt] = buf[bt - dt];\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm) final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    }while (!final);\n    // don't reallocate for streams or user buffers\n    return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function(d, p, v) {\n    v <<= p & 7;\n    var o = p / 8 | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function(d, p, v) {\n    v <<= p & 7;\n    var o = p / 8 | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n    d[o + 2] |= v >> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function(d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for(var i = 0; i < d.length; ++i){\n        if (d[i]) t.push({\n            s: i,\n            f: d[i]\n        });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s) return {\n        t: et,\n        l: 0\n    };\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return {\n            t: v,\n            l: 1\n        };\n    }\n    t.sort(function(a, b) {\n        return a.f - b.f;\n    });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({\n        s: -1,\n        f: 25001\n    });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = {\n        s: -1,\n        f: l.f + r.f,\n        l: l,\n        r: r\n    };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while(i1 != s - 1){\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = {\n            s: -1,\n            f: l.f + r.f,\n            l: l,\n            r: r\n        };\n    }\n    var maxSym = t2[0].s;\n    for(var i = 1; i < s; ++i){\n        if (t2[i].s > maxSym) maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function(a, b) {\n            return tr[b.s] - tr[a.s] || a.f - b.f;\n        });\n        for(; i < s; ++i){\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << mbt - tr[i2_1]);\n                tr[i2_1] = mb;\n            } else break;\n        }\n        dt >>= lft;\n        while(dt > 0){\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb) dt -= 1 << mb - tr[i2_2]++ - 1;\n            else ++i;\n        }\n        for(; i >= 0 && dt; --i){\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return {\n        t: new u8(tr),\n        l: mbt\n    };\n};\n// get the max length and assign length codes\nvar ln = function(n, l, d) {\n    return n.s == -1 ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1)) : l[n.s] = d;\n};\n// length codes generation\nvar lc = function(c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while(s && !c[--s]);\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function(v) {\n        cl[cli++] = v;\n    };\n    for(var i = 1; i <= s; ++i){\n        if (c[i] == cln && i != s) ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for(; cls > 138; cls -= 138)w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? cls - 11 << 5 | 28690 : cls - 3 << 5 | 12305);\n                    cls = 0;\n                }\n            } else if (cls > 3) {\n                w(cln), --cls;\n                for(; cls > 6; cls -= 6)w(8304);\n                if (cls > 2) w(cls - 3 << 5 | 8208), cls = 0;\n            }\n            while(cls--)w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return {\n        c: cl.subarray(0, cli),\n        n: s\n    };\n};\n// calculate the length of output from tree, code lengths\nvar clen = function(cf, cl) {\n    var l = 0;\n    for(var i = 0; i < cl.length; ++i)l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function(out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for(var i = 0; i < s; ++i)out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function(dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a.t, mlb = _a.l;\n    var _b = hTree(df, 15), ddt = _b.t, mdb = _b.l;\n    var _c = lc(dlt), lclt = _c.c, nlc = _c.n;\n    var _d = lc(ddt), lcdt = _d.c, ndc = _d.n;\n    var lcfreq = new u16(19);\n    for(var i = 0; i < lclt.length; ++i)++lcfreq[lclt[i] & 31];\n    for(var i = 0; i < lcdt.length; ++i)++lcfreq[lcdt[i] & 31];\n    var _e = hTree(lcfreq, 7), lct = _e.t, mlcb = _e.l;\n    var nlcc = 19;\n    for(; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc);\n    var flen = bl + 5 << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + 2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18];\n    if (bs >= 0 && flen <= ftlen && flen <= dtlen) return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for(var i = 0; i < nlcc; ++i)wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [\n            lclt,\n            lcdt\n        ];\n        for(var it = 0; it < 2; ++it){\n            var clct = lcts[it];\n            for(var i = 0; i < clct.length; ++i){\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15) wbits(out, p, clct[i] >> 5 & 127), p += clct[i] >> 12;\n            }\n        }\n    } else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for(var i = 0; i < li; ++i){\n        var sym = syms[i];\n        if (sym > 255) {\n            var len = sym >> 18 & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7) wbits(out, p, sym >> 23 & 31), p += fleb[len];\n            var dst = sym & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3) wbits16(out, p, sym >> 5 & 8191), p += fdeb[dst];\n        } else {\n            wbits16(out, p, lm[sym]), p += ll[sym];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new i32([\n    65540,\n    131080,\n    131088,\n    131104,\n    262176,\n    1048704,\n    1048832,\n    2114560,\n    2117632\n]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function(dat, lvl, plvl, pre, post, st) {\n    var s = st.z || dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var lst = st.l;\n    var pos = (st.r || 0) & 7;\n    if (lvl) {\n        if (pos) w[0] = st.r >> 3;\n        var opt = deo[lvl - 1];\n        var n = opt >> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = st.p || new u16(32768), head = st.h || new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function(i) {\n            return (dat[i] ^ dat[i + 1] << bs1_1 ^ dat[i + 2] << bs2_1) & msk_1;\n        };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new i32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index          l/lind  waitdx          blkpos\n        var lc_1 = 0, eb = 0, i = st.i || 0, li = 0, wi = st.w || 0, bs = 0;\n        for(; i + 2 < s; ++i){\n            // hash value\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && (rem > 423 || !lst)) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for(var j = 0; j < 286; ++j)lf[j] = 0;\n                    for(var j = 0; j < 30; ++j)df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while(dif <= maxd && --ch_1 && imod != pimod){\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for(; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl);\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn) break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for(var j = 0; j < mmd; ++j){\n                                    var ti = i - dif + j & 32767;\n                                    var pti = prev[ti];\n                                    var cd = ti - pti & 32767;\n                                    if (cd > md) md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += imod - pimod & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one int32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | revfl[l] << 18 | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                } else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        for(i = Math.max(i, wi); i < s; ++i){\n            syms[li++] = dat[i];\n            ++lf[dat[i]];\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        if (!lst) {\n            st.r = pos & 7 | w[pos / 8 | 0] << 3;\n            // shft(pos) now 1 less if pos & 7 != 0\n            pos -= 7;\n            st.h = head, st.p = prev, st.i = i, st.w = wi;\n        }\n    } else {\n        for(var i = st.w || 0; i < s + lst; i += 65535){\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[pos / 8 | 0] = lst;\n                e = s;\n            }\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n        st.i = s;\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ function() {\n    var t = new Int32Array(256);\n    for(var i = 0; i < 256; ++i){\n        var c = i, k = 9;\n        while(--k)c = (c & 1 && -306674912) ^ c >>> 1;\n        t[i] = c;\n    }\n    return t;\n}();\n// CRC32\nvar crc = function() {\n    var c = -1;\n    return {\n        p: function(d) {\n            // closures have awful performance\n            var cr = c;\n            for(var i = 0; i < d.length; ++i)cr = crct[cr & 255 ^ d[i]] ^ cr >>> 8;\n            c = cr;\n        },\n        d: function() {\n            return ~c;\n        }\n    };\n};\n// Adler32\nvar adler = function() {\n    var a = 1, b = 0;\n    return {\n        p: function(d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for(var i = 0; i != l;){\n                var e = Math.min(i + 2655, l);\n                for(; i < e; ++i)m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function() {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a & 0xFF00) << 8 | (b & 255) << 8 | b >> 8;\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function(dat, opt, pre, post, st) {\n    if (!st) {\n        st = {\n            l: 1\n        };\n        if (opt.dictionary) {\n            var dict = opt.dictionary.subarray(-32768);\n            var newDat = new u8(dict.length + dat.length);\n            newDat.set(dict);\n            newDat.set(dat, dict.length);\n            dat = newDat;\n            st.w = dict.length;\n        }\n    }\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? st.l ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 20 : 12 + opt.mem, pre, post, st);\n};\n// Walmart object spread\nvar mrg = function(a, b) {\n    var o = {};\n    for(var k in a)o[k] = a[k];\n    for(var k in b)o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function(fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf(\"[\") + 1, st.lastIndexOf(\"]\")).replace(/\\s+/g, \"\").split(\",\");\n    for(var i = 0; i < dt.length; ++i){\n        var v = dt[i], k = ks[i];\n        if (typeof v == \"function\") {\n            fnStr += \";\" + k + \"=\";\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf(\"[native code]\") != -1) {\n                    var spInd = st_1.indexOf(\" \", 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf(\"(\", spInd));\n                } else {\n                    fnStr += st_1;\n                    for(var t in v.prototype)fnStr += \";\" + k + \".prototype.\" + t + \"=\" + v.prototype[t].toString();\n                }\n            } else fnStr += st_1;\n        } else td[k] = v;\n    }\n    return fnStr;\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function(v) {\n    var tl = [];\n    for(var k in v){\n        if (v[k].buffer) {\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n        }\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function(fns, init, id, cb) {\n    if (!ch[id]) {\n        var fnStr = \"\", td_1 = {}, m = fns.length - 1;\n        for(var i = 0; i < m; ++i)fnStr = wcln(fns[i], fnStr, td_1);\n        ch[id] = {\n            c: wcln(fns[m], fnStr, td_1),\n            e: td_1\n        };\n    }\n    var td = mrg({}, ch[id].e);\n    return wk(ch[id].c + \";onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=\" + init.toString() + \"}\", id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function() {\n    return [\n        u8,\n        u16,\n        i32,\n        fleb,\n        fdeb,\n        clim,\n        fl,\n        fd,\n        flrm,\n        fdrm,\n        rev,\n        ec,\n        hMap,\n        max,\n        bits,\n        bits16,\n        shft,\n        slc,\n        err,\n        inflt,\n        inflateSync,\n        pbf,\n        gopt\n    ];\n};\nvar bDflt = function() {\n    return [\n        u8,\n        u16,\n        i32,\n        fleb,\n        fdeb,\n        clim,\n        revfl,\n        revfd,\n        flm,\n        flt,\n        fdm,\n        fdt,\n        rev,\n        deo,\n        et,\n        hMap,\n        wbits,\n        wbits16,\n        hTree,\n        ln,\n        lc,\n        clen,\n        wfblk,\n        wblk,\n        shft,\n        slc,\n        dflt,\n        dopt,\n        deflateSync,\n        pbf\n    ];\n};\n// gzip extra\nvar gze = function() {\n    return [\n        gzh,\n        gzhl,\n        wbytes,\n        crc,\n        crct\n    ];\n};\n// gunzip extra\nvar guze = function() {\n    return [\n        gzs,\n        gzl\n    ];\n};\n// zlib extra\nvar zle = function() {\n    return [\n        zlh,\n        wbytes,\n        adler\n    ];\n};\n// unzlib extra\nvar zule = function() {\n    return [\n        zls\n    ];\n};\n// post buf\nvar pbf = function(msg) {\n    return postMessage(msg, [\n        msg.buffer\n    ]);\n};\n// get opts\nvar gopt = function(o) {\n    return o && {\n        out: o.size && new u8(o.size),\n        dictionary: o.dictionary\n    };\n};\n// async helper\nvar cbify = function(dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function(err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([\n        dat,\n        opts\n    ], opts.consume ? [\n        dat.buffer\n    ] : []);\n    return function() {\n        w.terminate();\n    };\n};\n// auto stream\nvar astrm = function(strm) {\n    strm.ondata = function(dat, final) {\n        return postMessage([\n            dat,\n            final\n        ], [\n            dat.buffer\n        ]);\n    };\n    return function(ev) {\n        if (ev.data.length) {\n            strm.push(ev.data[0], ev.data[1]);\n            postMessage([\n                ev.data[0].length\n            ]);\n        } else strm.flush();\n    };\n};\n// async stream attach\nvar astrmify = function(fns, strm, opts, init, id, flush, ext) {\n    var t;\n    var w = wrkr(fns, init, id, function(err, dat) {\n        if (err) w.terminate(), strm.ondata.call(strm, err);\n        else if (!Array.isArray(dat)) ext(dat);\n        else if (dat.length == 1) {\n            strm.queuedSize -= dat[0];\n            if (strm.ondrain) strm.ondrain(dat[0]);\n        } else {\n            if (dat[1]) w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.queuedSize = 0;\n    strm.push = function(d, f) {\n        if (!strm.ondata) err(5);\n        if (t) strm.ondata(err(4, 0, 1), null, !!f);\n        strm.queuedSize += d.length;\n        w.postMessage([\n            d,\n            t = f\n        ], [\n            d.buffer\n        ]);\n    };\n    strm.terminate = function() {\n        w.terminate();\n    };\n    if (flush) {\n        strm.flush = function() {\n            w.postMessage([]);\n        };\n    }\n};\n// read 2 bytes\nvar b2 = function(d, b) {\n    return d[b] | d[b + 1] << 8;\n};\n// read 4 bytes\nvar b4 = function(d, b) {\n    return (d[b] | d[b + 1] << 8 | d[b + 2] << 16 | d[b + 3] << 24) >>> 0;\n};\nvar b8 = function(d, b) {\n    return b4(d, b) + b4(d, b + 4) * 4294967296;\n};\n// write bytes\nvar wbytes = function(d, b, v) {\n    for(; v; ++b)d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function(c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0) wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for(var i = 0; i <= fn.length; ++i)c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function(d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8) err(6, \"invalid gzip data\");\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4) st += (d[10] | d[11] << 8) + 2;\n    for(var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++]);\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function(d) {\n    var l = d.length;\n    return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16 | d[l - 1] << 24) >>> 0;\n};\n// gzip header length\nvar gzhl = function(o) {\n    return 10 + (o.filename ? o.filename.length + 1 : 0);\n};\n// zlib header\nvar zlh = function(c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = fl << 6 | (o.dictionary && 32);\n    c[1] |= 31 - (c[0] << 8 | c[1]) % 31;\n    if (o.dictionary) {\n        var h = adler();\n        h.p(o.dictionary);\n        wbytes(c, 2, h.d());\n    }\n};\n// zlib start\nvar zls = function(d, dict) {\n    if ((d[0] & 15) != 8 || d[0] >> 4 > 7 || (d[0] << 8 | d[1]) % 31) err(6, \"invalid zlib data\");\n    if ((d[1] >> 5 & 1) == +!dict) err(6, \"invalid zlib data: \" + (d[1] & 32 ? \"need\" : \"unexpected\") + \" dictionary\");\n    return (d[1] >> 3 & 4) + 2;\n};\nfunction StrmOpt(opts, cb) {\n    if (typeof opts == \"function\") cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n_c = StrmOpt;\n/**\n * Streaming DEFLATE compression\n */ var Deflate = /*#__PURE__*/ function() {\n    function Deflate(opts, cb) {\n        if (typeof opts == \"function\") cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n        this.s = {\n            l: 0,\n            i: 32768,\n            w: 32768,\n            z: 32768\n        };\n        // Buffer length must always be 0 mod 32768 for index calculations to be correct when modifying head and prev\n        // 98304 = 32768 (lookback) + 65536 (common chunk size)\n        this.b = new u8(98304);\n        if (this.o.dictionary) {\n            var dict = this.o.dictionary.subarray(-32768);\n            this.b.set(dict, 32768 - dict.length);\n            this.s.i = 32768 - dict.length;\n        }\n    }\n    Deflate.prototype.p = function(c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, this.s), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */ Deflate.prototype.push = function(chunk, final) {\n        if (!this.ondata) err(5);\n        if (this.s.l) err(4);\n        var endLen = chunk.length + this.s.z;\n        if (endLen > this.b.length) {\n            if (endLen > 2 * this.b.length - 32768) {\n                var newBuf = new u8(endLen & -32768);\n                newBuf.set(this.b.subarray(0, this.s.z));\n                this.b = newBuf;\n            }\n            var split = this.b.length - this.s.z;\n            this.b.set(chunk.subarray(0, split), this.s.z);\n            this.s.z = this.b.length;\n            this.p(this.b, false);\n            this.b.set(this.b.subarray(-32768));\n            this.b.set(chunk.subarray(split), 32768);\n            this.s.z = chunk.length - split + 32768;\n            this.s.i = 32766, this.s.w = 32768;\n        } else {\n            this.b.set(chunk, this.s.z);\n            this.s.z += chunk.length;\n        }\n        this.s.l = final & 1;\n        if (this.s.z > this.s.w + 8191 || final) {\n            this.p(this.b, final || false);\n            this.s.w = this.s.i, this.s.i -= 2;\n        }\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * deflated output for small inputs.\n     */ Deflate.prototype.flush = function() {\n        if (!this.ondata) err(5);\n        if (this.s.l) err(4);\n        this.p(this.b, false);\n        this.s.w = this.s.i, this.s.i -= 2;\n    };\n    return Deflate;\n}();\n\n/**\n * Asynchronous streaming DEFLATE compression\n */ var AsyncDeflate = /*#__PURE__*/ function() {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function() {\n                return [\n                    astrm,\n                    Deflate\n                ];\n            }\n        ], this, StrmOpt.call(this, opts, cb), function(ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6, 1);\n    }\n    return AsyncDeflate;\n}();\n\nfunction deflate(data, opts, cb) {\n    if (!cb) cb = opts, opts = {};\n    if (typeof cb != \"function\") err(7);\n    return cbify(data, opts, [\n        bDflt\n    ], function(ev) {\n        return pbf(deflateSync(ev.data[0], ev.data[1]));\n    }, 0, cb);\n}\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */ function deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\n/**\n * Streaming DEFLATE decompression\n */ var Inflate = /*#__PURE__*/ function() {\n    function Inflate(opts, cb) {\n        // no StrmOpt here to avoid adding to workerizer\n        if (typeof opts == \"function\") cb = opts, opts = {};\n        this.ondata = cb;\n        var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);\n        this.s = {\n            i: 0,\n            b: dict ? dict.length : 0\n        };\n        this.o = new u8(32768);\n        this.p = new u8(0);\n        if (dict) this.o.set(dict);\n    }\n    Inflate.prototype.e = function(c) {\n        if (!this.ondata) err(5);\n        if (this.d) err(4);\n        if (!this.p.length) this.p = c;\n        else if (c.length) {\n            var n = new u8(this.p.length + c.length);\n            n.set(this.p), n.set(c, this.p.length), this.p = n;\n        }\n    };\n    Inflate.prototype.c = function(final) {\n        this.s.i = +(this.d = final || false);\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.s, this.o);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, this.s.p / 8 | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */ Inflate.prototype.push = function(chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}();\n\n/**\n * Asynchronous streaming DEFLATE decompression\n */ var AsyncInflate = /*#__PURE__*/ function() {\n    function AsyncInflate(opts, cb) {\n        astrmify([\n            bInflt,\n            function() {\n                return [\n                    astrm,\n                    Inflate\n                ];\n            }\n        ], this, StrmOpt.call(this, opts, cb), function(ev) {\n            var strm = new Inflate(ev.data);\n            onmessage = astrm(strm);\n        }, 7, 0);\n    }\n    return AsyncInflate;\n}();\n\nfunction inflate(data, opts, cb) {\n    if (!cb) cb = opts, opts = {};\n    if (typeof cb != \"function\") err(7);\n    return cbify(data, opts, [\n        bInflt\n    ], function(ev) {\n        return pbf(inflateSync(ev.data[0], gopt(ev.data[1])));\n    }, 1, cb);\n}\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */ function inflateSync(data, opts) {\n    return inflt(data, {\n        i: 2\n    }, opts && opts.out, opts && opts.dictionary);\n}\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */ var Gzip = /*#__PURE__*/ function() {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */ Gzip.prototype.push = function(chunk, final) {\n        this.c.p(chunk);\n        this.l += chunk.length;\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function(c, f) {\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, this.s);\n        if (this.v) gzh(raw, this.o), this.v = 0;\n        if (f) wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * GZIPped output for small inputs.\n     */ Gzip.prototype.flush = function() {\n        Deflate.prototype.flush.call(this);\n    };\n    return Gzip;\n}();\n\n/**\n * Asynchronous streaming GZIP compression\n */ var AsyncGzip = /*#__PURE__*/ function() {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function() {\n                return [\n                    astrm,\n                    Deflate,\n                    Gzip\n                ];\n            }\n        ], this, StrmOpt.call(this, opts, cb), function(ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8, 1);\n    }\n    return AsyncGzip;\n}();\n\nfunction gzip(data, opts, cb) {\n    if (!cb) cb = opts, opts = {};\n    if (typeof cb != \"function\") err(7);\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function() {\n            return [\n                gzipSync\n            ];\n        }\n    ], function(ev) {\n        return pbf(gzipSync(ev.data[0], ev.data[1]));\n    }, 2, cb);\n}\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */ function gzipSync(data, opts) {\n    if (!opts) opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\n/**\n * Streaming single or multi-member GZIP decompression\n */ var Gunzip = /*#__PURE__*/ function() {\n    function Gunzip(opts, cb) {\n        this.v = 1;\n        this.r = 0;\n        Inflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */ Gunzip.prototype.push = function(chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        this.r += chunk.length;\n        if (this.v) {\n            var p = this.p.subarray(this.v - 1);\n            var s = p.length > 3 ? gzs(p) : 4;\n            if (s > p.length) {\n                if (!final) return;\n            } else if (this.v > 1 && this.onmember) {\n                this.onmember(this.r - p.length);\n            }\n            this.p = p.subarray(s), this.v = 0;\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n        // process concatenated GZIP\n        if (this.s.f && !this.s.l && !final) {\n            this.v = shft(this.s.p) + 9;\n            this.s = {\n                i: 0\n            };\n            this.o = new u8(0);\n            this.push(new u8(0), final);\n        }\n    };\n    return Gunzip;\n}();\n\n/**\n * Asynchronous streaming single or multi-member GZIP decompression\n */ var AsyncGunzip = /*#__PURE__*/ function() {\n    function AsyncGunzip(opts, cb) {\n        var _this = this;\n        astrmify([\n            bInflt,\n            guze,\n            function() {\n                return [\n                    astrm,\n                    Inflate,\n                    Gunzip\n                ];\n            }\n        ], this, StrmOpt.call(this, opts, cb), function(ev) {\n            var strm = new Gunzip(ev.data);\n            strm.onmember = function(offset) {\n                return postMessage(offset);\n            };\n            onmessage = astrm(strm);\n        }, 9, 0, function(offset) {\n            return _this.onmember && _this.onmember(offset);\n        });\n    }\n    return AsyncGunzip;\n}();\n\nfunction gunzip(data, opts, cb) {\n    if (!cb) cb = opts, opts = {};\n    if (typeof cb != \"function\") err(7);\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function() {\n            return [\n                gunzipSync\n            ];\n        }\n    ], function(ev) {\n        return pbf(gunzipSync(ev.data[0], ev.data[1]));\n    }, 3, cb);\n}\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */ function gunzipSync(data, opts) {\n    var st = gzs(data);\n    if (st + 8 > data.length) err(6, \"invalid gzip data\");\n    return inflt(data.subarray(st, -8), {\n        i: 2\n    }, opts && opts.out || new u8(gzl(data)), opts && opts.dictionary);\n}\n/**\n * Streaming Zlib compression\n */ var Zlib = /*#__PURE__*/ function() {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */ Zlib.prototype.push = function(chunk, final) {\n        this.c.p(chunk);\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function(c, f) {\n        var raw = dopt(c, this.o, this.v && (this.o.dictionary ? 6 : 2), f && 4, this.s);\n        if (this.v) zlh(raw, this.o), this.v = 0;\n        if (f) wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * zlibbed output for small inputs.\n     */ Zlib.prototype.flush = function() {\n        Deflate.prototype.flush.call(this);\n    };\n    return Zlib;\n}();\n\n/**\n * Asynchronous streaming Zlib compression\n */ var AsyncZlib = /*#__PURE__*/ function() {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function() {\n                return [\n                    astrm,\n                    Deflate,\n                    Zlib\n                ];\n            }\n        ], this, StrmOpt.call(this, opts, cb), function(ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10, 1);\n    }\n    return AsyncZlib;\n}();\n\nfunction zlib(data, opts, cb) {\n    if (!cb) cb = opts, opts = {};\n    if (typeof cb != \"function\") err(7);\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function() {\n            return [\n                zlibSync\n            ];\n        }\n    ], function(ev) {\n        return pbf(zlibSync(ev.data[0], ev.data[1]));\n    }, 4, cb);\n}\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */ function zlibSync(data, opts) {\n    if (!opts) opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, opts.dictionary ? 6 : 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\n/**\n * Streaming Zlib decompression\n */ var Unzlib = /*#__PURE__*/ function() {\n    function Unzlib(opts, cb) {\n        Inflate.call(this, opts, cb);\n        this.v = opts && opts.dictionary ? 2 : 1;\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */ Unzlib.prototype.push = function(chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 6 && !final) return;\n            this.p = this.p.subarray(zls(this.p, this.v - 1)), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4) err(6, \"invalid zlib data\");\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}();\n\n/**\n * Asynchronous streaming Zlib decompression\n */ var AsyncUnzlib = /*#__PURE__*/ function() {\n    function AsyncUnzlib(opts, cb) {\n        astrmify([\n            bInflt,\n            zule,\n            function() {\n                return [\n                    astrm,\n                    Inflate,\n                    Unzlib\n                ];\n            }\n        ], this, StrmOpt.call(this, opts, cb), function(ev) {\n            var strm = new Unzlib(ev.data);\n            onmessage = astrm(strm);\n        }, 11, 0);\n    }\n    return AsyncUnzlib;\n}();\n\nfunction unzlib(data, opts, cb) {\n    if (!cb) cb = opts, opts = {};\n    if (typeof cb != \"function\") err(7);\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function() {\n            return [\n                unzlibSync\n            ];\n        }\n    ], function(ev) {\n        return pbf(unzlibSync(ev.data[0], gopt(ev.data[1])));\n    }, 5, cb);\n}\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */ function unzlibSync(data, opts) {\n    return inflt(data.subarray(zls(data, opts && opts.dictionary), -4), {\n        i: 2\n    }, opts && opts.out, opts && opts.dictionary);\n}\n// Default algorithm for compression (used because having a known output size allows faster decompression)\n\n\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */ var Decompress = /*#__PURE__*/ function() {\n    function Decompress(opts, cb) {\n        this.o = StrmOpt.call(this, opts, cb) || {};\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n    }\n    // init substream\n    // overriden by AsyncDecompress\n    Decompress.prototype.i = function() {\n        var _this = this;\n        this.s.ondata = function(dat, final) {\n            _this.ondata(dat, final);\n        };\n    };\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */ Decompress.prototype.push = function(chunk, final) {\n        if (!this.ondata) err(5);\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            } else this.p = chunk;\n            if (this.p.length > 2) {\n                this.s = this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8 ? new this.G(this.o) : (this.p[0] & 15) != 8 || this.p[0] >> 4 > 7 || (this.p[0] << 8 | this.p[1]) % 31 ? new this.I(this.o) : new this.Z(this.o);\n                this.i();\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        } else this.s.push(chunk, final);\n    };\n    return Decompress;\n}();\n\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */ var AsyncDecompress = /*#__PURE__*/ function() {\n    function AsyncDecompress(opts, cb) {\n        Decompress.call(this, opts, cb);\n        this.queuedSize = 0;\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n    }\n    AsyncDecompress.prototype.i = function() {\n        var _this = this;\n        this.s.ondata = function(err, dat, final) {\n            _this.ondata(err, dat, final);\n        };\n        this.s.ondrain = function(size) {\n            _this.queuedSize -= size;\n            if (_this.ondrain) _this.ondrain(size);\n        };\n    };\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */ AsyncDecompress.prototype.push = function(chunk, final) {\n        this.queuedSize += chunk.length;\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}();\n\nfunction decompress(data, opts, cb) {\n    if (!cb) cb = opts, opts = {};\n    if (typeof cb != \"function\") err(7);\n    return data[0] == 31 && data[1] == 139 && data[2] == 8 ? gunzip(data, opts, cb) : (data[0] & 15) != 8 || data[0] >> 4 > 7 || (data[0] << 8 | data[1]) % 31 ? inflate(data, opts, cb) : unzlib(data, opts, cb);\n}\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */ function decompressSync(data, opts) {\n    return data[0] == 31 && data[1] == 139 && data[2] == 8 ? gunzipSync(data, opts) : (data[0] & 15) != 8 || data[0] >> 4 > 7 || (data[0] << 8 | data[1]) % 31 ? inflateSync(data, opts) : unzlibSync(data, opts);\n}\n// flatten a directory structure\nvar fltn = function(d, p, t, o) {\n    for(var k in d){\n        var val = d[k], n = p + k, op = o;\n        if (Array.isArray(val)) op = mrg(o, val[1]), val = val[0];\n        if (val instanceof u8) t[n] = [\n            val,\n            op\n        ];\n        else {\n            t[n += \"/\"] = [\n                new u8(0),\n                op\n            ];\n            fltn(val, n, t, o);\n        }\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != \"undefined\" && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != \"undefined\" && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, {\n        stream: true\n    });\n    tds = 1;\n} catch (e) {}\n// decode UTF8\nvar dutf8 = function(d) {\n    for(var r = \"\", i = 0;;){\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length) return {\n            s: r,\n            r: slc(d, i - 1)\n        };\n        if (!eb) r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | d[i++] & 63) - 65536, r += String.fromCharCode(55296 | c >> 10, 56320 | c & 1023);\n        } else if (eb & 1) r += String.fromCharCode((c & 31) << 6 | d[i++] & 63);\n        else r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | d[i++] & 63);\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */ var DecodeUTF8 = /*#__PURE__*/ function() {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */ function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds) this.t = new TextDecoder();\n        else this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */ DecodeUTF8.prototype.push = function(chunk, final) {\n        if (!this.ondata) err(5);\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, {\n                stream: true\n            }), final);\n            if (final) {\n                if (this.t.decode().length) err(8);\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p) err(4);\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (final) {\n            if (r.length) err(8);\n            this.p = null;\n        } else this.p = r;\n        this.ondata(s, final);\n    };\n    return DecodeUTF8;\n}();\n\n/**\n * Streaming UTF-8 encoding\n */ var EncodeUTF8 = /*#__PURE__*/ function() {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */ function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */ EncodeUTF8.prototype.push = function(chunk, final) {\n        if (!this.ondata) err(5);\n        if (this.d) err(4);\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}();\n\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */ function strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for(var i = 0; i < str.length; ++i)ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te) return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function(v) {\n        ar[ai++] = v;\n    };\n    for(var i = 0; i < l; ++i){\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + (l - i << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1) w(c);\n        else if (c < 2048) w(192 | c >> 6), w(128 | c & 63);\n        else if (c > 55295 && c < 57344) c = 65536 + (c & 1023 << 10) | str.charCodeAt(++i) & 1023, w(240 | c >> 18), w(128 | c >> 12 & 63), w(128 | c >> 6 & 63), w(128 | c & 63);\n        else w(224 | c >> 12), w(128 | c >> 6 & 63), w(128 | c & 63);\n    }\n    return slc(ar, 0, ai);\n}\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */ function strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = \"\";\n        for(var i = 0; i < dat.length; i += 16384)r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    } else if (td) {\n        return td.decode(dat);\n    } else {\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (r.length) err(8);\n        return s;\n    }\n}\n;\n// deflate bit flag\nvar dbf = function(l) {\n    return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0;\n};\n// skip local zip header\nvar slzh = function(d, b) {\n    return b + 30 + b2(d, b + 26) + b2(d, b + 28);\n};\n// read zip header\nvar zh = function(d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [\n        bs,\n        b4(d, b + 24),\n        b4(d, b + 42)\n    ], sc = _a[0], su = _a[1], off = _a[2];\n    return [\n        b2(d, b + 10),\n        sc,\n        su,\n        fn,\n        es + b2(d, b + 30) + b2(d, b + 32),\n        off\n    ];\n};\n// read zip64 extra field\nvar z64e = function(d, b) {\n    for(; b2(d, b) != 1; b += 4 + b2(d, b + 2));\n    return [\n        b8(d, b + 12),\n        b8(d, b + 4),\n        b8(d, b + 20)\n    ];\n};\n// extra field length\nvar exfl = function(ex) {\n    var le = 0;\n    if (ex) {\n        for(var k in ex){\n            var l = ex[k].length;\n            if (l > 65535) err(9);\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function(d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null) d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = f.flag << 1 | (c < 0 && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119) err(10);\n    wbytes(d, b, y << 25 | dt.getMonth() + 1 << 21 | dt.getDate() << 16 | dt.getHours() << 11 | dt.getMinutes() << 5 | dt.getSeconds() >> 1), b += 4;\n    if (c != -1) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c < 0 ? -c - 2 : c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for(var k in ex){\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col) d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function(o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */ var ZipPassThrough = /*#__PURE__*/ function() {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */ function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */ ZipPassThrough.prototype.process = function(chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */ ZipPassThrough.prototype.push = function(chunk, final) {\n        if (!this.ondata) err(5);\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final) this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}();\n\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */ var ZipDeflate = /*#__PURE__*/ function() {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */ function ZipDeflate(filename, opts) {\n        var _this = this;\n        if (!opts) opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function(dat, final) {\n            _this.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function(chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        } catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */ ZipDeflate.prototype.push = function(chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}();\n\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */ var AsyncZipDeflate = /*#__PURE__*/ function() {\n    /**\n     * Creates an asynchronous DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */ function AsyncZipDeflate(filename, opts) {\n        var _this = this;\n        if (!opts) opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function(err, dat, final) {\n            _this.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function(chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */ AsyncZipDeflate.prototype.push = function(chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}();\n\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */ var Zip = /*#__PURE__*/ function() {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */ function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */ Zip.prototype.add = function(file) {\n        var _this = this;\n        if (!this.ondata) err(5);\n        // finishing or finished\n        if (this.d & 2) this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);\n        else {\n            var f = strToU8(file.filename), fl_1 = f.length;\n            var com = file.comment, o = com && strToU8(com);\n            var u = fl_1 != file.filename.length || o && com.length != o.length;\n            var hl_1 = fl_1 + exfl(file.extra) + 30;\n            if (fl_1 > 65535) this.ondata(err(11, 0, 1), null, false);\n            var header = new u8(hl_1);\n            wzh(header, 0, file, f, u, -1);\n            var chks_1 = [\n                header\n            ];\n            var pAll_1 = function() {\n                for(var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++){\n                    var chk = chks_2[_i];\n                    _this.ondata(null, chk, false);\n                }\n                chks_1 = [];\n            };\n            var tr_1 = this.d;\n            this.d = 0;\n            var ind_1 = this.u.length;\n            var uf_1 = mrg(file, {\n                f: f,\n                u: u,\n                o: o,\n                t: function() {\n                    if (file.terminate) file.terminate();\n                },\n                r: function() {\n                    pAll_1();\n                    if (tr_1) {\n                        var nxt = _this.u[ind_1 + 1];\n                        if (nxt) nxt.r();\n                        else _this.d = 1;\n                    }\n                    tr_1 = 1;\n                }\n            });\n            var cl_1 = 0;\n            file.ondata = function(err, dat, final) {\n                if (err) {\n                    _this.ondata(err, dat, final);\n                    _this.terminate();\n                } else {\n                    cl_1 += dat.length;\n                    chks_1.push(dat);\n                    if (final) {\n                        var dd = new u8(16);\n                        wbytes(dd, 0, 0x8074B50);\n                        wbytes(dd, 4, file.crc);\n                        wbytes(dd, 8, cl_1);\n                        wbytes(dd, 12, file.size);\n                        chks_1.push(dd);\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\n                        if (tr_1) uf_1.r();\n                        tr_1 = 1;\n                    } else if (tr_1) pAll_1();\n                }\n            };\n            this.u.push(uf_1);\n        }\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */ Zip.prototype.end = function() {\n        var _this = this;\n        if (this.d & 2) {\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);\n            return;\n        }\n        if (this.d) this.e();\n        else this.u.push({\n            r: function() {\n                if (!(_this.d & 1)) return;\n                _this.u.splice(-1, 1);\n                _this.e();\n            },\n            t: function() {}\n        });\n        this.d = 3;\n    };\n    Zip.prototype.e = function() {\n        var bt = 0, l = 0, tl = 0;\n        for(var _i = 0, _a = this.u; _i < _a.length; _i++){\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for(var _b = 0, _c = this.u; _b < _c.length; _b++){\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, -f.c - 2, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */ Zip.prototype.terminate = function() {\n        for(var _i = 0, _a = this.u; _i < _a.length; _i++){\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}();\n\nfunction zip(data, opts, cb) {\n    if (!cb) cb = opts, opts = {};\n    if (typeof cb != \"function\") err(7);\n    var r = {};\n    fltn(data, \"\", r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function() {\n        for(var i = 0; i < term.length; ++i)term[i]();\n    };\n    var cbd = function(a, b) {\n        mt(function() {\n            cb(a, b);\n        });\n    };\n    mt(function() {\n        cbd = cb;\n    });\n    var cbf = function() {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for(var i = 0; i < slft; ++i){\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            } catch (e) {\n                return cbd(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cbd(null, out);\n    };\n    if (!lft) cbf();\n    var _loop_1 = function(i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function(e, d) {\n            if (e) {\n                tAll();\n                cbd(e, null);\n            } else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || m && com.length != ms,\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft) cbf();\n            }\n        };\n        if (s > 65535) cbl(err(11, 0, 1), null);\n        if (!compression) cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            } catch (e) {\n                cbl(e, null);\n            }\n        } else term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for(var i = 0; i < slft; ++i){\n        _loop_1(i);\n    }\n    return tAll;\n}\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */ function zipSync(data, opts) {\n    if (!opts) opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, \"\", r, opts);\n    var o = 0;\n    var tot = 0;\n    for(var fn in r){\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535) err(11);\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || m && com.length != ms,\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for(var i = 0; i < files.length; ++i){\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\n/**\n * Streaming pass-through decompression for ZIP archives\n */ var UnzipPassThrough = /*#__PURE__*/ function() {\n    function UnzipPassThrough() {}\n    UnzipPassThrough.prototype.push = function(data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}();\n\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */ var UnzipInflate = /*#__PURE__*/ function() {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */ function UnzipInflate() {\n        var _this = this;\n        this.i = new Inflate(function(dat, final) {\n            _this.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function(data, final) {\n        try {\n            this.i.push(data, final);\n        } catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}();\n\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */ var AsyncUnzipInflate = /*#__PURE__*/ function() {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */ function AsyncUnzipInflate(_, sz) {\n        var _this = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function(dat, final) {\n                _this.ondata(null, dat, final);\n            });\n        } else {\n            this.i = new AsyncInflate(function(err, dat, final) {\n                _this.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function(data, final) {\n        if (this.i.terminate) data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}();\n\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */ var Unzip = /*#__PURE__*/ function() {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */ function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */ Unzip.prototype.push = function(chunk, final) {\n        var _this = this;\n        if (!this.onfile) err(5);\n        if (!this.p) err(4);\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d) this.d.push(toAdd, !this.c);\n            else this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length) return this.push(chunk, final);\n        } else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length) buf = chunk;\n            else if (!chunk.length) buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function() {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_3 = [];\n                        this_1.k.unshift(chks_3);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [\n                                -2\n                            ] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        } else if (dd) sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function() {\n                                if (!file_1.ondata) err(5);\n                                if (!sc_1) file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this.o[cmp_1];\n                                    if (!ctr) file_1.ondata(err(14, \"unknown compression type \" + cmp_1, 1), null, false);\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function(err, dat, final) {\n                                        file_1.ondata(err, dat, final);\n                                    };\n                                    for(var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++){\n                                        var dat = chks_4[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this.k[0] == chks_3 && _this.c) _this.d = d_1;\n                                    else d_1.push(et, true);\n                                }\n                            },\n                            terminate: function() {\n                                if (d_1 && d_1.terminate) d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0) file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                } else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    } else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for(; i < l - 4; ++i){\n                var state_1 = _loop_2();\n                if (state_1 === \"break\") break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add) add.push(dat, !!f);\n                else this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2) return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c) err(13);\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */ Unzip.prototype.register = function(decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}();\n\nvar mt = typeof queueMicrotask == \"function\" ? queueMicrotask : typeof setTimeout == \"function\" ? setTimeout : function(fn) {\n    fn();\n};\nfunction unzip(data, opts, cb) {\n    if (!cb) cb = opts, opts = {};\n    if (typeof cb != \"function\") err(7);\n    var term = [];\n    var tAll = function() {\n        for(var i = 0; i < term.length; ++i)term[i]();\n    };\n    var files = {};\n    var cbd = function(a, b) {\n        mt(function() {\n            cb(a, b);\n        });\n    };\n    mt(function() {\n        cbd = cb;\n    });\n    var e = data.length - 22;\n    for(; b4(data, e) != 0x6054B50; --e){\n        if (!e || data.length - e > 65558) {\n            cbd(err(13, 0, 1), null);\n            return tAll;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (lft) {\n        var c = lft;\n        var o = b4(data, e + 16);\n        var z = o == 4294967295 || c == 65535;\n        if (z) {\n            var ze = b4(data, e - 12);\n            z = b4(data, ze) == 0x6064B50;\n            if (z) {\n                c = lft = b4(data, ze + 32);\n                o = b4(data, ze + 48);\n            }\n        }\n        var fltr = opts && opts.filter;\n        var _loop_3 = function(i) {\n            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n            o = no;\n            var cbl = function(e, d) {\n                if (e) {\n                    tAll();\n                    cbd(e, null);\n                } else {\n                    if (d) files[fn] = d;\n                    if (!--lft) cbd(null, files);\n                }\n            };\n            if (!fltr || fltr({\n                name: fn,\n                size: sc,\n                originalSize: su,\n                compression: c_1\n            })) {\n                if (!c_1) cbl(null, slc(data, b, b + sc));\n                else if (c_1 == 8) {\n                    var infl = data.subarray(b, b + sc);\n                    // Synchronously decompress under 512KB, or barely-compressed data\n                    if (su < 524288 || sc > 0.8 * su) {\n                        try {\n                            cbl(null, inflateSync(infl, {\n                                out: new u8(su)\n                            }));\n                        } catch (e) {\n                            cbl(e, null);\n                        }\n                    } else term.push(inflate(infl, {\n                        size: su\n                    }, cbl));\n                } else cbl(err(14, \"unknown compression type \" + c_1, 1), null);\n            } else cbl(null, null);\n        };\n        for(var i = 0; i < c; ++i){\n            _loop_3(i);\n        }\n    } else cbd(null, {});\n    return tAll;\n}\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @param opts The ZIP extraction options\n * @returns The decompressed files\n */ function unzipSync(data, opts) {\n    var files = {};\n    var e = data.length - 22;\n    for(; b4(data, e) != 0x6054B50; --e){\n        if (!e || data.length - e > 65558) err(13);\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c) return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295 || c == 65535;\n    if (z) {\n        var ze = b4(data, e - 12);\n        z = b4(data, ze) == 0x6064B50;\n        if (z) {\n            c = b4(data, ze + 32);\n            o = b4(data, ze + 48);\n        }\n    }\n    var fltr = opts && opts.filter;\n    for(var i = 0; i < c; ++i){\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!fltr || fltr({\n            name: fn,\n            size: sc,\n            originalSize: su,\n            compression: c_2\n        })) {\n            if (!c_2) files[fn] = slc(data, b, b + sc);\n            else if (c_2 == 8) files[fn] = inflateSync(data.subarray(b, b + sc), {\n                out: new u8(su)\n            });\n            else err(14, \"unknown compression type \" + c_2);\n        }\n    }\n    return files;\n}\nvar _c;\n$RefreshReg$(_c, \"StrmOpt\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/fflate/esm/browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/iobuffer/lib-esm/IOBuffer.js":
/*!***************************************************!*\
  !*** ./node_modules/iobuffer/lib-esm/IOBuffer.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IOBuffer: function() { return /* binding */ IOBuffer; }\n/* harmony export */ });\n/* harmony import */ var _text__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./text */ \"(app-pages-browser)/./node_modules/iobuffer/lib-esm/text.js\");\n\nconst defaultByteLength = 1024 * 8;\nconst hostBigEndian = (()=>{\n    const array = new Uint8Array(4);\n    const view = new Uint32Array(array.buffer);\n    return !((view[0] = 1) & array[0]);\n})();\nconst typedArrays = {\n    int8: globalThis.Int8Array,\n    uint8: globalThis.Uint8Array,\n    int16: globalThis.Int16Array,\n    uint16: globalThis.Uint16Array,\n    int32: globalThis.Int32Array,\n    uint32: globalThis.Uint32Array,\n    uint64: globalThis.BigUint64Array,\n    int64: globalThis.BigInt64Array,\n    float32: globalThis.Float32Array,\n    float64: globalThis.Float64Array\n};\nclass IOBuffer {\n    /**\n     * Checks if the memory allocated to the buffer is sufficient to store more\n     * bytes after the offset.\n     * @param byteLength - The needed memory in bytes.\n     * @returns `true` if there is sufficient space and `false` otherwise.\n     */ available() {\n        let byteLength = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;\n        return this.offset + byteLength <= this.length;\n    }\n    /**\n     * Check if little-endian mode is used for reading and writing multi-byte\n     * values.\n     * @returns `true` if little-endian mode is used, `false` otherwise.\n     */ isLittleEndian() {\n        return this.littleEndian;\n    }\n    /**\n     * Set little-endian mode for reading and writing multi-byte values.\n     * @returns This.\n     */ setLittleEndian() {\n        this.littleEndian = true;\n        return this;\n    }\n    /**\n     * Check if big-endian mode is used for reading and writing multi-byte values.\n     * @returns `true` if big-endian mode is used, `false` otherwise.\n     */ isBigEndian() {\n        return !this.littleEndian;\n    }\n    /**\n     * Switches to big-endian mode for reading and writing multi-byte values.\n     * @returns This.\n     */ setBigEndian() {\n        this.littleEndian = false;\n        return this;\n    }\n    /**\n     * Move the pointer n bytes forward.\n     * @param n - Number of bytes to skip.\n     * @returns This.\n     */ skip() {\n        let n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;\n        this.offset += n;\n        return this;\n    }\n    /**\n     * Move the pointer n bytes backward.\n     * @param n - Number of bytes to move back.\n     * @returns This.\n     */ back() {\n        let n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;\n        this.offset -= n;\n        return this;\n    }\n    /**\n     * Move the pointer to the given offset.\n     * @param offset - The offset to move to.\n     * @returns This.\n     */ seek(offset) {\n        this.offset = offset;\n        return this;\n    }\n    /**\n     * Store the current pointer offset.\n     * @see {@link IOBuffer#reset}\n     * @returns This.\n     */ mark() {\n        this._mark = this.offset;\n        return this;\n    }\n    /**\n     * Move the pointer back to the last pointer offset set by mark.\n     * @see {@link IOBuffer#mark}\n     * @returns This.\n     */ reset() {\n        this.offset = this._mark;\n        return this;\n    }\n    /**\n     * Push the current pointer offset to the mark stack.\n     * @see {@link IOBuffer#popMark}\n     * @returns This.\n     */ pushMark() {\n        this._marks.push(this.offset);\n        return this;\n    }\n    /**\n     * Pop the last pointer offset from the mark stack, and set the current\n     * pointer offset to the popped value.\n     * @see {@link IOBuffer#pushMark}\n     * @returns This.\n     */ popMark() {\n        const offset = this._marks.pop();\n        if (offset === undefined) {\n            throw new Error(\"Mark stack empty\");\n        }\n        this.seek(offset);\n        return this;\n    }\n    /**\n     * Move the pointer offset back to 0.\n     * @returns This.\n     */ rewind() {\n        this.offset = 0;\n        return this;\n    }\n    /**\n     * Make sure the buffer has sufficient memory to write a given byteLength at\n     * the current pointer offset.\n     * If the buffer's memory is insufficient, this method will create a new\n     * buffer (a copy) with a length that is twice (byteLength + current offset).\n     * @param byteLength - The needed memory in bytes.\n     * @returns This.\n     */ ensureAvailable() {\n        let byteLength = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;\n        if (!this.available(byteLength)) {\n            const lengthNeeded = this.offset + byteLength;\n            const newLength = lengthNeeded * 2;\n            const newArray = new Uint8Array(newLength);\n            newArray.set(new Uint8Array(this.buffer));\n            this.buffer = newArray.buffer;\n            this.length = newLength;\n            this.byteLength = newLength;\n            this._data = new DataView(this.buffer);\n        }\n        return this;\n    }\n    /**\n     * Read a byte and return false if the byte's value is 0, or true otherwise.\n     * Moves pointer forward by one byte.\n     * @returns The read boolean.\n     */ readBoolean() {\n        return this.readUint8() !== 0;\n    }\n    /**\n     * Read a signed 8-bit integer and move pointer forward by 1 byte.\n     * @returns The read byte.\n     */ readInt8() {\n        return this._data.getInt8(this.offset++);\n    }\n    /**\n     * Read an unsigned 8-bit integer and move pointer forward by 1 byte.\n     * @returns The read byte.\n     */ readUint8() {\n        return this._data.getUint8(this.offset++);\n    }\n    /**\n     * Alias for {@link IOBuffer#readUint8}.\n     * @returns The read byte.\n     */ readByte() {\n        return this.readUint8();\n    }\n    /**\n     * Read `n` bytes and move pointer forward by `n` bytes.\n     * @param n - Number of bytes to read.\n     * @returns The read bytes.\n     */ readBytes() {\n        let n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;\n        return this.readArray(n, \"uint8\");\n    }\n    /**\n     * Creates an array of corresponding to the type `type` and size `size`.\n     * For example type `uint8` will create a `Uint8Array`.\n     * @param size - size of the resulting array\n     * @param type - number type of elements to read\n     * @returns The read array.\n     */ readArray(size, type) {\n        const bytes = typedArrays[type].BYTES_PER_ELEMENT * size;\n        const offset = this.byteOffset + this.offset;\n        const slice = this.buffer.slice(offset, offset + bytes);\n        if (this.littleEndian === hostBigEndian && type !== \"uint8\" && type !== \"int8\") {\n            const slice = new Uint8Array(this.buffer.slice(offset, offset + bytes));\n            slice.reverse();\n            const returnArray = new typedArrays[type](slice.buffer);\n            this.offset += bytes;\n            returnArray.reverse();\n            return returnArray;\n        }\n        const returnArray = new typedArrays[type](slice);\n        this.offset += bytes;\n        return returnArray;\n    }\n    /**\n     * Read a 16-bit signed integer and move pointer forward by 2 bytes.\n     * @returns The read value.\n     */ readInt16() {\n        const value = this._data.getInt16(this.offset, this.littleEndian);\n        this.offset += 2;\n        return value;\n    }\n    /**\n     * Read a 16-bit unsigned integer and move pointer forward by 2 bytes.\n     * @returns The read value.\n     */ readUint16() {\n        const value = this._data.getUint16(this.offset, this.littleEndian);\n        this.offset += 2;\n        return value;\n    }\n    /**\n     * Read a 32-bit signed integer and move pointer forward by 4 bytes.\n     * @returns The read value.\n     */ readInt32() {\n        const value = this._data.getInt32(this.offset, this.littleEndian);\n        this.offset += 4;\n        return value;\n    }\n    /**\n     * Read a 32-bit unsigned integer and move pointer forward by 4 bytes.\n     * @returns The read value.\n     */ readUint32() {\n        const value = this._data.getUint32(this.offset, this.littleEndian);\n        this.offset += 4;\n        return value;\n    }\n    /**\n     * Read a 32-bit floating number and move pointer forward by 4 bytes.\n     * @returns The read value.\n     */ readFloat32() {\n        const value = this._data.getFloat32(this.offset, this.littleEndian);\n        this.offset += 4;\n        return value;\n    }\n    /**\n     * Read a 64-bit floating number and move pointer forward by 8 bytes.\n     * @returns The read value.\n     */ readFloat64() {\n        const value = this._data.getFloat64(this.offset, this.littleEndian);\n        this.offset += 8;\n        return value;\n    }\n    /**\n     * Read a 64-bit signed integer number and move pointer forward by 8 bytes.\n     * @returns The read value.\n     */ readBigInt64() {\n        const value = this._data.getBigInt64(this.offset, this.littleEndian);\n        this.offset += 8;\n        return value;\n    }\n    /**\n     * Read a 64-bit unsigned integer number and move pointer forward by 8 bytes.\n     * @returns The read value.\n     */ readBigUint64() {\n        const value = this._data.getBigUint64(this.offset, this.littleEndian);\n        this.offset += 8;\n        return value;\n    }\n    /**\n     * Read a 1-byte ASCII character and move pointer forward by 1 byte.\n     * @returns The read character.\n     */ readChar() {\n        // eslint-disable-next-line unicorn/prefer-code-point\n        return String.fromCharCode(this.readInt8());\n    }\n    /**\n     * Read `n` 1-byte ASCII characters and move pointer forward by `n` bytes.\n     * @param n - Number of characters to read.\n     * @returns The read characters.\n     */ readChars() {\n        let n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;\n        let result = \"\";\n        for(let i = 0; i < n; i++){\n            result += this.readChar();\n        }\n        return result;\n    }\n    /**\n     * Read the next `n` bytes, return a UTF-8 decoded string and move pointer\n     * forward by `n` bytes.\n     * @param n - Number of bytes to read.\n     * @returns The decoded string.\n     */ readUtf8() {\n        let n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;\n        return (0,_text__WEBPACK_IMPORTED_MODULE_0__.decode)(this.readBytes(n));\n    }\n    /**\n     * Read the next `n` bytes, return a string decoded with `encoding` and move pointer\n     * forward by `n` bytes.\n     * If no encoding is passed, the function is equivalent to @see {@link IOBuffer#readUtf8}\n     * @param n - Number of bytes to read.\n     * @param encoding - The encoding to use. Default is 'utf8'.\n     * @returns The decoded string.\n     */ decodeText() {\n        let n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, encoding = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"utf8\";\n        return (0,_text__WEBPACK_IMPORTED_MODULE_0__.decode)(this.readBytes(n), encoding);\n    }\n    /**\n     * Write 0xff if the passed value is truthy, 0x00 otherwise and move pointer\n     * forward by 1 byte.\n     * @param value - The value to write.\n     * @returns This.\n     */ writeBoolean(value) {\n        this.writeUint8(value ? 0xff : 0x00);\n        return this;\n    }\n    /**\n     * Write `value` as an 8-bit signed integer and move pointer forward by 1 byte.\n     * @param value - The value to write.\n     * @returns This.\n     */ writeInt8(value) {\n        this.ensureAvailable(1);\n        this._data.setInt8(this.offset++, value);\n        this._updateLastWrittenByte();\n        return this;\n    }\n    /**\n     * Write `value` as an 8-bit unsigned integer and move pointer forward by 1\n     * byte.\n     * @param value - The value to write.\n     * @returns This.\n     */ writeUint8(value) {\n        this.ensureAvailable(1);\n        this._data.setUint8(this.offset++, value);\n        this._updateLastWrittenByte();\n        return this;\n    }\n    /**\n     * An alias for {@link IOBuffer#writeUint8}.\n     * @param value - The value to write.\n     * @returns This.\n     */ writeByte(value) {\n        return this.writeUint8(value);\n    }\n    /**\n     * Write all elements of `bytes` as uint8 values and move pointer forward by\n     * `bytes.length` bytes.\n     * @param bytes - The array of bytes to write.\n     * @returns This.\n     */ writeBytes(bytes) {\n        this.ensureAvailable(bytes.length);\n        // eslint-disable-next-line @typescript-eslint/prefer-for-of\n        for(let i = 0; i < bytes.length; i++){\n            this._data.setUint8(this.offset++, bytes[i]);\n        }\n        this._updateLastWrittenByte();\n        return this;\n    }\n    /**\n     * Write `value` as a 16-bit signed integer and move pointer forward by 2\n     * bytes.\n     * @param value - The value to write.\n     * @returns This.\n     */ writeInt16(value) {\n        this.ensureAvailable(2);\n        this._data.setInt16(this.offset, value, this.littleEndian);\n        this.offset += 2;\n        this._updateLastWrittenByte();\n        return this;\n    }\n    /**\n     * Write `value` as a 16-bit unsigned integer and move pointer forward by 2\n     * bytes.\n     * @param value - The value to write.\n     * @returns This.\n     */ writeUint16(value) {\n        this.ensureAvailable(2);\n        this._data.setUint16(this.offset, value, this.littleEndian);\n        this.offset += 2;\n        this._updateLastWrittenByte();\n        return this;\n    }\n    /**\n     * Write `value` as a 32-bit signed integer and move pointer forward by 4\n     * bytes.\n     * @param value - The value to write.\n     * @returns This.\n     */ writeInt32(value) {\n        this.ensureAvailable(4);\n        this._data.setInt32(this.offset, value, this.littleEndian);\n        this.offset += 4;\n        this._updateLastWrittenByte();\n        return this;\n    }\n    /**\n     * Write `value` as a 32-bit unsigned integer and move pointer forward by 4\n     * bytes.\n     * @param value - The value to write.\n     * @returns This.\n     */ writeUint32(value) {\n        this.ensureAvailable(4);\n        this._data.setUint32(this.offset, value, this.littleEndian);\n        this.offset += 4;\n        this._updateLastWrittenByte();\n        return this;\n    }\n    /**\n     * Write `value` as a 32-bit floating number and move pointer forward by 4\n     * bytes.\n     * @param value - The value to write.\n     * @returns This.\n     */ writeFloat32(value) {\n        this.ensureAvailable(4);\n        this._data.setFloat32(this.offset, value, this.littleEndian);\n        this.offset += 4;\n        this._updateLastWrittenByte();\n        return this;\n    }\n    /**\n     * Write `value` as a 64-bit floating number and move pointer forward by 8\n     * bytes.\n     * @param value - The value to write.\n     * @returns This.\n     */ writeFloat64(value) {\n        this.ensureAvailable(8);\n        this._data.setFloat64(this.offset, value, this.littleEndian);\n        this.offset += 8;\n        this._updateLastWrittenByte();\n        return this;\n    }\n    /**\n     * Write `value` as a 64-bit signed bigint and move pointer forward by 8\n     * bytes.\n     * @param value - The value to write.\n     * @returns This.\n     */ writeBigInt64(value) {\n        this.ensureAvailable(8);\n        this._data.setBigInt64(this.offset, value, this.littleEndian);\n        this.offset += 8;\n        this._updateLastWrittenByte();\n        return this;\n    }\n    /**\n     * Write `value` as a 64-bit unsigned bigint and move pointer forward by 8\n     * bytes.\n     * @param value - The value to write.\n     * @returns This.\n     */ writeBigUint64(value) {\n        this.ensureAvailable(8);\n        this._data.setBigUint64(this.offset, value, this.littleEndian);\n        this.offset += 8;\n        this._updateLastWrittenByte();\n        return this;\n    }\n    /**\n     * Write the charCode of `str`'s first character as an 8-bit unsigned integer\n     * and move pointer forward by 1 byte.\n     * @param str - The character to write.\n     * @returns This.\n     */ writeChar(str) {\n        // eslint-disable-next-line unicorn/prefer-code-point\n        return this.writeUint8(str.charCodeAt(0));\n    }\n    /**\n     * Write the charCodes of all `str`'s characters as 8-bit unsigned integers\n     * and move pointer forward by `str.length` bytes.\n     * @param str - The characters to write.\n     * @returns This.\n     */ writeChars(str) {\n        for(let i = 0; i < str.length; i++){\n            // eslint-disable-next-line unicorn/prefer-code-point\n            this.writeUint8(str.charCodeAt(i));\n        }\n        return this;\n    }\n    /**\n     * UTF-8 encode and write `str` to the current pointer offset and move pointer\n     * forward according to the encoded length.\n     * @param str - The string to write.\n     * @returns This.\n     */ writeUtf8(str) {\n        return this.writeBytes((0,_text__WEBPACK_IMPORTED_MODULE_0__.encode)(str));\n    }\n    /**\n     * Export a Uint8Array view of the internal buffer.\n     * The view starts at the byte offset and its length\n     * is calculated to stop at the last written byte or the original length.\n     * @returns A new Uint8Array view.\n     */ toArray() {\n        return new Uint8Array(this.buffer, this.byteOffset, this.lastWrittenByte);\n    }\n    /**\n     *  Get the total number of bytes written so far, regardless of the current offset.\n     * @returns - Total number of bytes.\n     */ getWrittenByteLength() {\n        return this.lastWrittenByte - this.byteOffset;\n    }\n    /**\n     * Update the last written byte offset\n     * @private\n     */ _updateLastWrittenByte() {\n        if (this.offset > this.lastWrittenByte) {\n            this.lastWrittenByte = this.offset;\n        }\n    }\n    /**\n     * Create a new IOBuffer.\n     * @param data - The data to construct the IOBuffer with.\n     * If data is a number, it will be the new buffer's length<br>\n     * If data is `undefined`, the buffer will be initialized with a default length of 8Kb<br>\n     * If data is an ArrayBuffer, SharedArrayBuffer, an ArrayBufferView (Typed Array), an IOBuffer instance,\n     * or a Node.js Buffer, a view will be created over the underlying ArrayBuffer.\n     * @param options - An object for the options.\n     * @returns A new IOBuffer instance.\n     */ constructor(data = defaultByteLength, options = {}){\n        let dataIsGiven = false;\n        if (typeof data === \"number\") {\n            data = new ArrayBuffer(data);\n        } else {\n            dataIsGiven = true;\n            this.lastWrittenByte = data.byteLength;\n        }\n        const offset = options.offset ? options.offset >>> 0 : 0;\n        const byteLength = data.byteLength - offset;\n        let dvOffset = offset;\n        if (ArrayBuffer.isView(data) || data instanceof IOBuffer) {\n            if (data.byteLength !== data.buffer.byteLength) {\n                dvOffset = data.byteOffset + offset;\n            }\n            data = data.buffer;\n        }\n        if (dataIsGiven) {\n            this.lastWrittenByte = byteLength;\n        } else {\n            this.lastWrittenByte = 0;\n        }\n        this.buffer = data;\n        this.length = byteLength;\n        this.byteLength = byteLength;\n        this.byteOffset = dvOffset;\n        this.offset = 0;\n        this.littleEndian = true;\n        this._data = new DataView(this.buffer, dvOffset, byteLength);\n        this._mark = 0;\n        this._marks = [];\n    }\n} //# sourceMappingURL=IOBuffer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/iobuffer/lib-esm/IOBuffer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/iobuffer/lib-esm/text.js":
/*!***********************************************!*\
  !*** ./node_modules/iobuffer/lib-esm/text.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: function() { return /* binding */ decode; },\n/* harmony export */   encode: function() { return /* binding */ encode; }\n/* harmony export */ });\nfunction decode(bytes) {\n    let encoding = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"utf8\";\n    const decoder = new TextDecoder(encoding);\n    return decoder.decode(bytes);\n}\nconst encoder = new TextEncoder();\nfunction encode(str) {\n    return encoder.encode(str);\n} //# sourceMappingURL=text.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9pb2J1ZmZlci9saWItZXNtL3RleHQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxTQUFTQSxPQUFPQyxLQUFLO1FBQUVDLFdBQUFBLGlFQUFXO0lBQ3JDLE1BQU1DLFVBQVUsSUFBSUMsWUFBWUY7SUFDaEMsT0FBT0MsUUFBUUgsTUFBTSxDQUFDQztBQUMxQjtBQUNBLE1BQU1JLFVBQVUsSUFBSUM7QUFDYixTQUFTQyxPQUFPQyxHQUFHO0lBQ3RCLE9BQU9ILFFBQVFFLE1BQU0sQ0FBQ0M7QUFDMUIsRUFDQSxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2lvYnVmZmVyL2xpYi1lc20vdGV4dC5qcz9kNzZmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBkZWNvZGUoYnl0ZXMsIGVuY29kaW5nID0gJ3V0ZjgnKSB7XG4gICAgY29uc3QgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcihlbmNvZGluZyk7XG4gICAgcmV0dXJuIGRlY29kZXIuZGVjb2RlKGJ5dGVzKTtcbn1cbmNvbnN0IGVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGUoc3RyKSB7XG4gICAgcmV0dXJuIGVuY29kZXIuZW5jb2RlKHN0cik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZXh0LmpzLm1hcCJdLCJuYW1lcyI6WyJkZWNvZGUiLCJieXRlcyIsImVuY29kaW5nIiwiZGVjb2RlciIsIlRleHREZWNvZGVyIiwiZW5jb2RlciIsIlRleHRFbmNvZGVyIiwiZW5jb2RlIiwic3RyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/iobuffer/lib-esm/text.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/jspdf/dist/jspdf.es.min.js":
/*!*************************************************!*\
  !*** ./node_modules/jspdf/dist/jspdf.es.min.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AcroForm: function() { return /* binding */ St; },\n/* harmony export */   AcroFormAppearance: function() { return /* binding */ xt; },\n/* harmony export */   AcroFormButton: function() { return /* binding */ mt; },\n/* harmony export */   AcroFormCheckBox: function() { return /* binding */ wt; },\n/* harmony export */   AcroFormChoiceField: function() { return /* binding */ ft; },\n/* harmony export */   AcroFormComboBox: function() { return /* binding */ pt; },\n/* harmony export */   AcroFormEditBox: function() { return /* binding */ gt; },\n/* harmony export */   AcroFormListBox: function() { return /* binding */ dt; },\n/* harmony export */   AcroFormPasswordField: function() { return /* binding */ Lt; },\n/* harmony export */   AcroFormPushButton: function() { return /* binding */ vt; },\n/* harmony export */   AcroFormRadioButton: function() { return /* binding */ bt; },\n/* harmony export */   AcroFormTextField: function() { return /* binding */ Nt; },\n/* harmony export */   GState: function() { return /* binding */ O; },\n/* harmony export */   ShadingPattern: function() { return /* binding */ M; },\n/* harmony export */   TilingPattern: function() { return /* binding */ q; },\n/* harmony export */   \"default\": function() { return /* binding */ E; },\n/* harmony export */   jsPDF: function() { return /* binding */ E; }\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/typeof.js\");\n/* harmony import */ var fflate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fflate */ \"(app-pages-browser)/./node_modules/fflate/esm/browser.js\");\n/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\");\n/* harmony import */ var fast_png__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fast-png */ \"(app-pages-browser)/./node_modules/fast-png/lib-esm/index.js\");\n/** @license\n *\n * jsPDF - PDF Document creation from JavaScript\n * Version 3.0.3 Built on 2025-09-18T08:03:54.261Z\n *                      CommitID 00000000\n *\n * Copyright (c) 2010-2025 James Hall <james@parall.ax>, https://github.com/MrRio/jsPDF\n *               2015-2025 yWorks GmbH, http://www.yworks.com\n *               2015-2025 Lukas Holländer <lukas.hollaender@yworks.com>, https://github.com/HackbrettXXX\n *               2016-2018 Aras Abbasi <aras.abbasi@gmail.com>\n *               2010 Aaron Spike, https://github.com/acspike\n *               2012 Willow Systems Corporation, https://github.com/willowsystems\n *               2012 Pablo Hess, https://github.com/pablohess\n *               2012 Florian Jenett, https://github.com/fjenett\n *               2013 Warren Weckesser, https://github.com/warrenweckesser\n *               2013 Youssef Beddad, https://github.com/lifof\n *               2013 Lee Driscoll, https://github.com/lsdriscoll\n *               2013 Stefan Slonevskiy, https://github.com/stefslon\n *               2013 Jeremy Morel, https://github.com/jmorel\n *               2013 Christoph Hartmann, https://github.com/chris-rock\n *               2014 Juan Pablo Gaviria, https://github.com/juanpgaviria\n *               2014 James Makes, https://github.com/dollaruw\n *               2014 Diego Casorran, https://github.com/diegocr\n *               2014 Steven Spungin, https://github.com/Flamenco\n *               2014 Kenneth Glassey, https://github.com/Gavvers\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * Contributor(s):\n *    siefkenj, ahwolf, rickygu, Midnith, saintclair, eaparango,\n *    kim3er, mfo, alnorth, Flamenco\n */ \n\n\n\nvar i = function() {\n    return  true ? window : 0;\n}();\nfunction a() {\n    i.console && \"function\" == typeof i.console.log && i.console.log.apply(i.console, arguments);\n}\nvar o = {\n    log: a,\n    warn: function(t) {\n        i.console && (\"function\" == typeof i.console.warn ? i.console.warn.apply(i.console, arguments) : a.call(null, arguments));\n    },\n    error: function(t) {\n        i.console && (\"function\" == typeof i.console.error ? i.console.error.apply(i.console, arguments) : a(t));\n    }\n};\nfunction s(t, e, n) {\n    var r = new XMLHttpRequest;\n    r.open(\"GET\", t), r.responseType = \"blob\", r.onload = function() {\n        l(r.response, e, n);\n    }, r.onerror = function() {\n        o.error(\"could not download file\");\n    }, r.send();\n}\nfunction u(t) {\n    var e = new XMLHttpRequest;\n    e.open(\"HEAD\", t, !1);\n    try {\n        e.send();\n    } catch (n) {}\n    return e.status >= 200 && e.status <= 299;\n}\nfunction c(t) {\n    try {\n        t.dispatchEvent(new MouseEvent(\"click\"));\n    } catch (n) {\n        var e = document.createEvent(\"MouseEvents\");\n        e.initMouseEvent(\"click\", !0, !0, window, 0, 0, 0, 80, 20, !1, !1, !1, !1, 0, null), t.dispatchEvent(e);\n    }\n}\nvar l = i.saveAs || (\"object\" !== ( false ? 0 : (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(window)) || window !== i ? function() {} : \"undefined\" != typeof HTMLAnchorElement && \"download\" in HTMLAnchorElement.prototype ? function(t, e, n) {\n    var r = i.URL || i.webkitURL, a = document.createElement(\"a\");\n    e = e || t.name || \"download\", a.download = e, a.rel = \"noopener\", \"string\" == typeof t ? (a.href = t, a.origin !== location.origin ? u(a.href) ? s(t, e, n) : c(a, a.target = \"_blank\") : c(a)) : (a.href = r.createObjectURL(t), setTimeout(function() {\n        r.revokeObjectURL(a.href);\n    }, 4e4), setTimeout(function() {\n        c(a);\n    }, 0));\n} : \"msSaveOrOpenBlob\" in navigator ? function(e, n, r) {\n    if (n = n || e.name || \"download\", \"string\" == typeof e) if (u(e)) s(e, n, r);\n    else {\n        var i = document.createElement(\"a\");\n        i.href = e, i.target = \"_blank\", setTimeout(function() {\n            c(i);\n        });\n    }\n    else navigator.msSaveOrOpenBlob(function(e, n) {\n        return void 0 === n ? n = {\n            autoBom: !1\n        } : \"object\" !== (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(n) && (o.warn(\"Deprecated: Expected third argument to be a object\"), n = {\n            autoBom: !n\n        }), n.autoBom && /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(e.type) ? new Blob([\n            String.fromCharCode(65279),\n            e\n        ], {\n            type: e.type\n        }) : e;\n    }(e, r), n);\n} : function(e, n, r, a) {\n    if ((a = a || open(\"\", \"_blank\")) && (a.document.title = a.document.body.innerText = \"downloading...\"), \"string\" == typeof e) return s(e, n, r);\n    var o = \"application/octet-stream\" === e.type, u = /constructor/i.test(i.HTMLElement) || i.safari, c = /CriOS\\/[\\d]+/.test(navigator.userAgent);\n    if ((c || o && u) && \"object\" === (\"undefined\" == typeof FileReader ? \"undefined\" : (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(FileReader))) {\n        var l = new FileReader;\n        l.onloadend = function() {\n            var t = l.result;\n            t = c ? t : t.replace(/^data:[^;]*;/, \"data:attachment/file;\"), a ? a.location.href = t : location = t, a = null;\n        }, l.readAsDataURL(e);\n    } else {\n        var h = i.URL || i.webkitURL, f = h.createObjectURL(e);\n        a ? a.location = f : location.href = f, a = null, setTimeout(function() {\n            h.revokeObjectURL(f);\n        }, 4e4);\n    }\n});\n/**\n * A class to parse color values\n * @author Stoyan Stefanov <sstoo@gmail.com>\n * {@link   http://www.phpied.com/rgb-color-parser-in-javascript/}\n * @license Use it if you like it\n */ function h(t) {\n    var e;\n    t = t || \"\", this.ok = !1, \"#\" == t.charAt(0) && (t = t.substr(1, 6)), t = ({\n        aliceblue: \"f0f8ff\",\n        antiquewhite: \"faebd7\",\n        aqua: \"00ffff\",\n        aquamarine: \"7fffd4\",\n        azure: \"f0ffff\",\n        beige: \"f5f5dc\",\n        bisque: \"ffe4c4\",\n        black: \"000000\",\n        blanchedalmond: \"ffebcd\",\n        blue: \"0000ff\",\n        blueviolet: \"8a2be2\",\n        brown: \"a52a2a\",\n        burlywood: \"deb887\",\n        cadetblue: \"5f9ea0\",\n        chartreuse: \"7fff00\",\n        chocolate: \"d2691e\",\n        coral: \"ff7f50\",\n        cornflowerblue: \"6495ed\",\n        cornsilk: \"fff8dc\",\n        crimson: \"dc143c\",\n        cyan: \"00ffff\",\n        darkblue: \"00008b\",\n        darkcyan: \"008b8b\",\n        darkgoldenrod: \"b8860b\",\n        darkgray: \"a9a9a9\",\n        darkgreen: \"006400\",\n        darkkhaki: \"bdb76b\",\n        darkmagenta: \"8b008b\",\n        darkolivegreen: \"556b2f\",\n        darkorange: \"ff8c00\",\n        darkorchid: \"9932cc\",\n        darkred: \"8b0000\",\n        darksalmon: \"e9967a\",\n        darkseagreen: \"8fbc8f\",\n        darkslateblue: \"483d8b\",\n        darkslategray: \"2f4f4f\",\n        darkturquoise: \"00ced1\",\n        darkviolet: \"9400d3\",\n        deeppink: \"ff1493\",\n        deepskyblue: \"00bfff\",\n        dimgray: \"696969\",\n        dodgerblue: \"1e90ff\",\n        feldspar: \"d19275\",\n        firebrick: \"b22222\",\n        floralwhite: \"fffaf0\",\n        forestgreen: \"228b22\",\n        fuchsia: \"ff00ff\",\n        gainsboro: \"dcdcdc\",\n        ghostwhite: \"f8f8ff\",\n        gold: \"ffd700\",\n        goldenrod: \"daa520\",\n        gray: \"808080\",\n        green: \"008000\",\n        greenyellow: \"adff2f\",\n        honeydew: \"f0fff0\",\n        hotpink: \"ff69b4\",\n        indianred: \"cd5c5c\",\n        indigo: \"4b0082\",\n        ivory: \"fffff0\",\n        khaki: \"f0e68c\",\n        lavender: \"e6e6fa\",\n        lavenderblush: \"fff0f5\",\n        lawngreen: \"7cfc00\",\n        lemonchiffon: \"fffacd\",\n        lightblue: \"add8e6\",\n        lightcoral: \"f08080\",\n        lightcyan: \"e0ffff\",\n        lightgoldenrodyellow: \"fafad2\",\n        lightgrey: \"d3d3d3\",\n        lightgreen: \"90ee90\",\n        lightpink: \"ffb6c1\",\n        lightsalmon: \"ffa07a\",\n        lightseagreen: \"20b2aa\",\n        lightskyblue: \"87cefa\",\n        lightslateblue: \"8470ff\",\n        lightslategray: \"778899\",\n        lightsteelblue: \"b0c4de\",\n        lightyellow: \"ffffe0\",\n        lime: \"00ff00\",\n        limegreen: \"32cd32\",\n        linen: \"faf0e6\",\n        magenta: \"ff00ff\",\n        maroon: \"800000\",\n        mediumaquamarine: \"66cdaa\",\n        mediumblue: \"0000cd\",\n        mediumorchid: \"ba55d3\",\n        mediumpurple: \"9370d8\",\n        mediumseagreen: \"3cb371\",\n        mediumslateblue: \"7b68ee\",\n        mediumspringgreen: \"00fa9a\",\n        mediumturquoise: \"48d1cc\",\n        mediumvioletred: \"c71585\",\n        midnightblue: \"191970\",\n        mintcream: \"f5fffa\",\n        mistyrose: \"ffe4e1\",\n        moccasin: \"ffe4b5\",\n        navajowhite: \"ffdead\",\n        navy: \"000080\",\n        oldlace: \"fdf5e6\",\n        olive: \"808000\",\n        olivedrab: \"6b8e23\",\n        orange: \"ffa500\",\n        orangered: \"ff4500\",\n        orchid: \"da70d6\",\n        palegoldenrod: \"eee8aa\",\n        palegreen: \"98fb98\",\n        paleturquoise: \"afeeee\",\n        palevioletred: \"d87093\",\n        papayawhip: \"ffefd5\",\n        peachpuff: \"ffdab9\",\n        peru: \"cd853f\",\n        pink: \"ffc0cb\",\n        plum: \"dda0dd\",\n        powderblue: \"b0e0e6\",\n        purple: \"800080\",\n        red: \"ff0000\",\n        rosybrown: \"bc8f8f\",\n        royalblue: \"4169e1\",\n        saddlebrown: \"8b4513\",\n        salmon: \"fa8072\",\n        sandybrown: \"f4a460\",\n        seagreen: \"2e8b57\",\n        seashell: \"fff5ee\",\n        sienna: \"a0522d\",\n        silver: \"c0c0c0\",\n        skyblue: \"87ceeb\",\n        slateblue: \"6a5acd\",\n        slategray: \"708090\",\n        snow: \"fffafa\",\n        springgreen: \"00ff7f\",\n        steelblue: \"4682b4\",\n        tan: \"d2b48c\",\n        teal: \"008080\",\n        thistle: \"d8bfd8\",\n        tomato: \"ff6347\",\n        turquoise: \"40e0d0\",\n        violet: \"ee82ee\",\n        violetred: \"d02090\",\n        wheat: \"f5deb3\",\n        white: \"ffffff\",\n        whitesmoke: \"f5f5f5\",\n        yellow: \"ffff00\",\n        yellowgreen: \"9acd32\"\n    })[t = (t = t.replace(/ /g, \"\")).toLowerCase()] || t;\n    for(var n = [\n        {\n            re: /^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/,\n            example: [\n                \"rgb(123, 234, 45)\",\n                \"rgb(255,234,245)\"\n            ],\n            process: function(t) {\n                return [\n                    parseInt(t[1]),\n                    parseInt(t[2]),\n                    parseInt(t[3])\n                ];\n            }\n        },\n        {\n            re: /^(\\w{2})(\\w{2})(\\w{2})$/,\n            example: [\n                \"#00ff00\",\n                \"336699\"\n            ],\n            process: function(t) {\n                return [\n                    parseInt(t[1], 16),\n                    parseInt(t[2], 16),\n                    parseInt(t[3], 16)\n                ];\n            }\n        },\n        {\n            re: /^(\\w{1})(\\w{1})(\\w{1})$/,\n            example: [\n                \"#fb0\",\n                \"f0f\"\n            ],\n            process: function(t) {\n                return [\n                    parseInt(t[1] + t[1], 16),\n                    parseInt(t[2] + t[2], 16),\n                    parseInt(t[3] + t[3], 16)\n                ];\n            }\n        }\n    ], r = 0; r < n.length; r++){\n        var i = n[r].re, a = n[r].process, o = i.exec(t);\n        o && (e = a(o), this.r = e[0], this.g = e[1], this.b = e[2], this.ok = !0);\n    }\n    this.r = this.r < 0 || isNaN(this.r) ? 0 : this.r > 255 ? 255 : this.r, this.g = this.g < 0 || isNaN(this.g) ? 0 : this.g > 255 ? 255 : this.g, this.b = this.b < 0 || isNaN(this.b) ? 0 : this.b > 255 ? 255 : this.b, this.toRGB = function() {\n        return \"rgb(\" + this.r + \", \" + this.g + \", \" + this.b + \")\";\n    }, this.toHex = function() {\n        var t = this.r.toString(16), e = this.g.toString(16), n = this.b.toString(16);\n        return 1 == t.length && (t = \"0\" + t), 1 == e.length && (e = \"0\" + e), 1 == n.length && (n = \"0\" + n), \"#\" + t + e + n;\n    };\n}\nvar f = i.atob.bind(i), d = i.btoa.bind(i);\n/**\n * @license\n * Joseph Myers does not specify a particular license for his work.\n *\n * Author: Joseph Myers\n * Accessed from: http://www.myersdaily.org/joseph/javascript/md5.js\n *\n * Modified by: Owen Leong\n */ function p(t, e) {\n    var n = t[0], r = t[1], i = t[2], a = t[3];\n    n = m(n, r, i, a, e[0], 7, -680876936), a = m(a, n, r, i, e[1], 12, -389564586), i = m(i, a, n, r, e[2], 17, 606105819), r = m(r, i, a, n, e[3], 22, -1044525330), n = m(n, r, i, a, e[4], 7, -176418897), a = m(a, n, r, i, e[5], 12, 1200080426), i = m(i, a, n, r, e[6], 17, -1473231341), r = m(r, i, a, n, e[7], 22, -45705983), n = m(n, r, i, a, e[8], 7, 1770035416), a = m(a, n, r, i, e[9], 12, -1958414417), i = m(i, a, n, r, e[10], 17, -42063), r = m(r, i, a, n, e[11], 22, -1990404162), n = m(n, r, i, a, e[12], 7, 1804603682), a = m(a, n, r, i, e[13], 12, -40341101), i = m(i, a, n, r, e[14], 17, -1502002290), n = v(n, r = m(r, i, a, n, e[15], 22, 1236535329), i, a, e[1], 5, -165796510), a = v(a, n, r, i, e[6], 9, -1069501632), i = v(i, a, n, r, e[11], 14, 643717713), r = v(r, i, a, n, e[0], 20, -373897302), n = v(n, r, i, a, e[5], 5, -701558691), a = v(a, n, r, i, e[10], 9, 38016083), i = v(i, a, n, r, e[15], 14, -660478335), r = v(r, i, a, n, e[4], 20, -405537848), n = v(n, r, i, a, e[9], 5, 568446438), a = v(a, n, r, i, e[14], 9, -1019803690), i = v(i, a, n, r, e[3], 14, -187363961), r = v(r, i, a, n, e[8], 20, 1163531501), n = v(n, r, i, a, e[13], 5, -1444681467), a = v(a, n, r, i, e[2], 9, -51403784), i = v(i, a, n, r, e[7], 14, 1735328473), n = b(n, r = v(r, i, a, n, e[12], 20, -1926607734), i, a, e[5], 4, -378558), a = b(a, n, r, i, e[8], 11, -2022574463), i = b(i, a, n, r, e[11], 16, 1839030562), r = b(r, i, a, n, e[14], 23, -35309556), n = b(n, r, i, a, e[1], 4, -1530992060), a = b(a, n, r, i, e[4], 11, 1272893353), i = b(i, a, n, r, e[7], 16, -155497632), r = b(r, i, a, n, e[10], 23, -1094730640), n = b(n, r, i, a, e[13], 4, 681279174), a = b(a, n, r, i, e[0], 11, -358537222), i = b(i, a, n, r, e[3], 16, -722521979), r = b(r, i, a, n, e[6], 23, 76029189), n = b(n, r, i, a, e[9], 4, -640364487), a = b(a, n, r, i, e[12], 11, -421815835), i = b(i, a, n, r, e[15], 16, 530742520), n = y(n, r = b(r, i, a, n, e[2], 23, -995338651), i, a, e[0], 6, -198630844), a = y(a, n, r, i, e[7], 10, 1126891415), i = y(i, a, n, r, e[14], 15, -1416354905), r = y(r, i, a, n, e[5], 21, -57434055), n = y(n, r, i, a, e[12], 6, 1700485571), a = y(a, n, r, i, e[3], 10, -1894986606), i = y(i, a, n, r, e[10], 15, -1051523), r = y(r, i, a, n, e[1], 21, -2054922799), n = y(n, r, i, a, e[8], 6, 1873313359), a = y(a, n, r, i, e[15], 10, -30611744), i = y(i, a, n, r, e[6], 15, -1560198380), r = y(r, i, a, n, e[13], 21, 1309151649), n = y(n, r, i, a, e[4], 6, -145523070), a = y(a, n, r, i, e[11], 10, -1120210379), i = y(i, a, n, r, e[2], 15, 718787259), r = y(r, i, a, n, e[9], 21, -343485551), t[0] = P(n, t[0]), t[1] = P(r, t[1]), t[2] = P(i, t[2]), t[3] = P(a, t[3]);\n}\nfunction g(t, e, n, r, i, a) {\n    return e = P(P(e, t), P(r, a)), P(e << i | e >>> 32 - i, n);\n}\nfunction m(t, e, n, r, i, a, o) {\n    return g(e & n | ~e & r, t, e, i, a, o);\n}\nfunction v(t, e, n, r, i, a, o) {\n    return g(e & r | n & ~r, t, e, i, a, o);\n}\nfunction b(t, e, n, r, i, a, o) {\n    return g(e ^ n ^ r, t, e, i, a, o);\n}\nfunction y(t, e, n, r, i, a, o) {\n    return g(n ^ (e | ~r), t, e, i, a, o);\n}\nfunction w(t) {\n    var e, n = t.length, r = [\n        1732584193,\n        -271733879,\n        -1732584194,\n        271733878\n    ];\n    for(e = 64; e <= t.length; e += 64)p(r, N(t.substring(e - 64, e)));\n    t = t.substring(e - 64);\n    var i = [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n    ];\n    for(e = 0; e < t.length; e++)i[e >> 2] |= t.charCodeAt(e) << (e % 4 << 3);\n    if (i[e >> 2] |= 128 << (e % 4 << 3), e > 55) for(p(r, i), e = 0; e < 16; e++)i[e] = 0;\n    return i[14] = 8 * n, p(r, i), r;\n}\nfunction N(t) {\n    var e, n = [];\n    for(e = 0; e < 64; e += 4)n[e >> 2] = t.charCodeAt(e) + (t.charCodeAt(e + 1) << 8) + (t.charCodeAt(e + 2) << 16) + (t.charCodeAt(e + 3) << 24);\n    return n;\n}\n_c = N;\nvar L = \"0123456789abcdef\".split(\"\");\nfunction x(t) {\n    for(var e = \"\", n = 0; n < 4; n++)e += L[t >> 8 * n + 4 & 15] + L[t >> 8 * n & 15];\n    return e;\n}\nfunction A(t) {\n    return String.fromCharCode(255 & t, (65280 & t) >> 8, (16711680 & t) >> 16, (4278190080 & t) >> 24);\n}\n_c1 = A;\nfunction S(t) {\n    return w(t).map(A).join(\"\");\n}\n_c2 = S;\nvar _ = \"5d41402abc4b2a76b9719d911017c592\" != function(t) {\n    for(var e = 0; e < t.length; e++)t[e] = x(t[e]);\n    return t.join(\"\");\n}(w(\"hello\"));\nfunction P(t, e) {\n    if (_) {\n        var n = (65535 & t) + (65535 & e);\n        return (t >> 16) + (e >> 16) + (n >> 16) << 16 | 65535 & n;\n    }\n    return t + e & 4294967295;\n}\n_c3 = P;\n/**\n * @license\n * FPDF is released under a permissive license: there is no usage restriction.\n * You may embed it freely in your application (commercial or not), with or\n * without modifications.\n *\n * Reference: http://www.fpdf.org/en/script/script37.php\n */ function k(t, e) {\n    var n, r, i, a;\n    if (t !== n) {\n        for(var o = (i = t, a = 1 + (256 / t.length | 0), new Array(a + 1).join(i)), s = [], u = 0; u < 256; u++)s[u] = u;\n        var c = 0;\n        for(u = 0; u < 256; u++){\n            var l = s[u];\n            c = (c + l + o.charCodeAt(u)) % 256, s[u] = s[c], s[c] = l;\n        }\n        n = t, r = s;\n    } else s = r;\n    var h = e.length, f = 0, d = 0, p = \"\";\n    for(u = 0; u < h; u++)d = (d + (l = s[f = (f + 1) % 256])) % 256, s[f] = s[d], s[d] = l, o = s[(s[f] + s[d]) % 256], p += String.fromCharCode(e.charCodeAt(u) ^ o);\n    return p;\n}\n/**\n * @license\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n * Author: Owen Leong (@owenl131)\n * Date: 15 Oct 2020\n * References:\n * https://www.cs.cmu.edu/~dst/Adobe/Gallery/anon21jul01-pdf-encryption.txt\n * https://github.com/foliojs/pdfkit/blob/master/lib/security.js\n * http://www.fpdf.org/en/script/script37.php\n */ var F = {\n    print: 4,\n    modify: 8,\n    copy: 16,\n    \"annot-forms\": 32\n};\nfunction I(t, e, n, r) {\n    this.v = 1, this.r = 2;\n    var i = 192;\n    t.forEach(function(t) {\n        if (void 0 !== F.perm) throw new Error(\"Invalid permission: \" + t);\n        i += F[t];\n    }), this.padding = \"(\\xbfN^Nu\\x8aAd\\x00NV\\xff\\xfa\\x01\\b..\\x00\\xb6\\xd0h>\\x80/\\f\\xa9\\xfedSiz\";\n    var a = (e + this.padding).substr(0, 32), o = (n + this.padding).substr(0, 32);\n    this.O = this.processOwnerPassword(a, o), this.P = -(1 + (255 ^ i)), this.encryptionKey = S(a + this.O + this.lsbFirstWord(this.P) + this.hexToBytes(r)).substr(0, 5), this.U = k(this.encryptionKey, this.padding);\n}\n_c4 = I;\nfunction j(t) {\n    if (/[^\\u0000-\\u00ff]/.test(t)) throw new Error(\"Invalid PDF Name Object: \" + t + \", Only accept ASCII characters.\");\n    for(var e = \"\", n = t.length, r = 0; r < n; r++){\n        var i = t.charCodeAt(r);\n        e += i < 33 || 35 === i || 37 === i || 40 === i || 41 === i || 47 === i || 60 === i || 62 === i || 91 === i || 93 === i || 123 === i || 125 === i || i > 126 ? \"#\" + (\"0\" + i.toString(16)).slice(-2) : t[r];\n    }\n    return e;\n}\nfunction C(e) {\n    if (\"object\" !== (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(e)) throw new Error(\"Invalid Context passed to initialize PubSub (jsPDF-module)\");\n    var n = {};\n    this.subscribe = function(t, e, r) {\n        if (r = r || !1, \"string\" != typeof t || \"function\" != typeof e || \"boolean\" != typeof r) throw new Error(\"Invalid arguments passed to PubSub.subscribe (jsPDF-module)\");\n        n.hasOwnProperty(t) || (n[t] = {});\n        var i = Math.random().toString(35);\n        return n[t][i] = [\n            e,\n            !!r\n        ], i;\n    }, this.unsubscribe = function(t) {\n        for(var e in n)if (n[e][t]) return delete n[e][t], 0 === Object.keys(n[e]).length && delete n[e], !0;\n        return !1;\n    }, this.publish = function(t) {\n        if (n.hasOwnProperty(t)) {\n            var r = Array.prototype.slice.call(arguments, 1), a = [];\n            for(var s in n[t]){\n                var u = n[t][s];\n                try {\n                    u[0].apply(e, r);\n                } catch (c) {\n                    i.console && o.error(\"jsPDF PubSub Error\", c.message, c);\n                }\n                u[1] && a.push(s);\n            }\n            a.length && a.forEach(this.unsubscribe);\n        }\n    }, this.getTopics = function() {\n        return n;\n    };\n}\n_c5 = C;\nfunction O(t) {\n    if (!(this instanceof O)) return new O(t);\n    var e = \"opacity,stroke-opacity\".split(\",\");\n    for(var n in t)t.hasOwnProperty(n) && e.indexOf(n) >= 0 && (this[n] = t[n]);\n    this.id = \"\", this.objectNumber = -1;\n}\n_c6 = O;\nfunction B(t, e) {\n    this.gState = t, this.matrix = e, this.id = \"\", this.objectNumber = -1;\n}\n_c7 = B;\nfunction M(t, e, n, r, i) {\n    if (!(this instanceof M)) return new M(t, e, n, r, i);\n    this.type = \"axial\" === t ? 2 : 3, this.coords = e, this.colors = n, B.call(this, r, i);\n}\n_c8 = M;\nfunction q(t, e, n, r, i) {\n    if (!(this instanceof q)) return new q(t, e, n, r, i);\n    this.boundingBox = t, this.xStep = e, this.yStep = n, this.stream = \"\", this.cloneIndex = 0, B.call(this, r, i);\n}\nfunction E(e) {\n    var n, r = \"string\" == typeof arguments[0] ? arguments[0] : \"p\", a = arguments[1], s = arguments[2], u = arguments[3], c = [], f = 1, p = 16, g = \"S\", m = null;\n    \"object\" === (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(e = e || {}) && (r = e.orientation, a = e.unit || a, s = e.format || s, u = e.compress || e.compressPdf || u, null !== (m = e.encryption || null) && (m.userPassword = m.userPassword || \"\", m.ownerPassword = m.ownerPassword || \"\", m.userPermissions = m.userPermissions || []), f = \"number\" == typeof e.userUnit ? Math.abs(e.userUnit) : 1, void 0 !== e.precision && (n = e.precision), void 0 !== e.floatPrecision && (p = e.floatPrecision), g = e.defaultPathOperation || \"S\"), c = e.filters || (!0 === u ? [\n        \"FlateEncode\"\n    ] : c), a = a || \"mm\", r = (\"\" + (r || \"P\")).toLowerCase();\n    var v = e.putOnlyUsedFonts || !1, b = {}, y = {\n        internal: {},\n        __private__: {}\n    };\n    y.__private__.PubSub = C;\n    var w = \"1.3\", N = y.__private__.getPdfVersion = function() {\n        return w;\n    };\n    y.__private__.setPdfVersion = function(t) {\n        w = t;\n    };\n    var L = {\n        a0: [\n            2383.94,\n            3370.39\n        ],\n        a1: [\n            1683.78,\n            2383.94\n        ],\n        a2: [\n            1190.55,\n            1683.78\n        ],\n        a3: [\n            841.89,\n            1190.55\n        ],\n        a4: [\n            595.28,\n            841.89\n        ],\n        a5: [\n            419.53,\n            595.28\n        ],\n        a6: [\n            297.64,\n            419.53\n        ],\n        a7: [\n            209.76,\n            297.64\n        ],\n        a8: [\n            147.4,\n            209.76\n        ],\n        a9: [\n            104.88,\n            147.4\n        ],\n        a10: [\n            73.7,\n            104.88\n        ],\n        b0: [\n            2834.65,\n            4008.19\n        ],\n        b1: [\n            2004.09,\n            2834.65\n        ],\n        b2: [\n            1417.32,\n            2004.09\n        ],\n        b3: [\n            1000.63,\n            1417.32\n        ],\n        b4: [\n            708.66,\n            1000.63\n        ],\n        b5: [\n            498.9,\n            708.66\n        ],\n        b6: [\n            354.33,\n            498.9\n        ],\n        b7: [\n            249.45,\n            354.33\n        ],\n        b8: [\n            175.75,\n            249.45\n        ],\n        b9: [\n            124.72,\n            175.75\n        ],\n        b10: [\n            87.87,\n            124.72\n        ],\n        c0: [\n            2599.37,\n            3676.54\n        ],\n        c1: [\n            1836.85,\n            2599.37\n        ],\n        c2: [\n            1298.27,\n            1836.85\n        ],\n        c3: [\n            918.43,\n            1298.27\n        ],\n        c4: [\n            649.13,\n            918.43\n        ],\n        c5: [\n            459.21,\n            649.13\n        ],\n        c6: [\n            323.15,\n            459.21\n        ],\n        c7: [\n            229.61,\n            323.15\n        ],\n        c8: [\n            161.57,\n            229.61\n        ],\n        c9: [\n            113.39,\n            161.57\n        ],\n        c10: [\n            79.37,\n            113.39\n        ],\n        dl: [\n            311.81,\n            623.62\n        ],\n        letter: [\n            612,\n            792\n        ],\n        \"government-letter\": [\n            576,\n            756\n        ],\n        legal: [\n            612,\n            1008\n        ],\n        \"junior-legal\": [\n            576,\n            360\n        ],\n        ledger: [\n            1224,\n            792\n        ],\n        tabloid: [\n            792,\n            1224\n        ],\n        \"credit-card\": [\n            153,\n            243\n        ]\n    };\n    y.__private__.getPageFormats = function() {\n        return L;\n    };\n    var x = y.__private__.getPageFormat = function(t) {\n        return L[t];\n    };\n    s = s || \"a4\";\n    var A = \"compat\", S = \"advanced\", _ = A;\n    function P() {\n        this.saveGraphicsState(), lt(new Wt(St, 0, 0, -St, 0, _n() * St).toString() + \" cm\"), this.setFontSize(this.getFontSize() / St), g = \"n\", _ = S;\n    }\n    function k() {\n        this.restoreGraphicsState(), g = \"S\", _ = A;\n    }\n    var F = y.__private__.combineFontStyleAndFontWeight = function(t, e) {\n        if (\"bold\" == t && \"normal\" == e || \"bold\" == t && 400 == e || \"normal\" == t && \"italic\" == e || \"bold\" == t && \"italic\" == e) throw new Error(\"Invalid Combination of fontweight and fontstyle\");\n        return e && (t = 400 == e || \"normal\" === e ? \"italic\" === t ? \"italic\" : \"normal\" : 700 != e && \"bold\" !== e || \"normal\" !== t ? (700 == e ? \"bold\" : e) + \"\" + t : \"bold\"), t;\n    };\n    y.advancedAPI = function(t) {\n        var e = _ === A;\n        return e && P.call(this), \"function\" != typeof t || (t(this), e && k.call(this)), this;\n    }, y.compatAPI = function(t) {\n        var e = _ === S;\n        return e && k.call(this), \"function\" != typeof t || (t(this), e && P.call(this)), this;\n    }, y.isAdvancedAPI = function() {\n        return _ === S;\n    };\n    var B, R = function(t) {\n        if (_ !== S) throw new Error(t + \" is only available in 'advanced' API mode. You need to call advancedAPI() first.\");\n    }, D = y.roundToPrecision = y.__private__.roundToPrecision = function(t, e) {\n        var r = n || e;\n        if (isNaN(t) || isNaN(r)) throw new Error(\"Invalid argument passed to jsPDF.roundToPrecision\");\n        return t.toFixed(r).replace(/0+$/, \"\");\n    };\n    B = y.hpf = y.__private__.hpf = \"number\" == typeof p ? function(t) {\n        if (isNaN(t)) throw new Error(\"Invalid argument passed to jsPDF.hpf\");\n        return D(t, p);\n    } : \"smart\" === p ? function(t) {\n        if (isNaN(t)) throw new Error(\"Invalid argument passed to jsPDF.hpf\");\n        return D(t, t > -1 && t < 1 ? 16 : 5);\n    } : function(t) {\n        if (isNaN(t)) throw new Error(\"Invalid argument passed to jsPDF.hpf\");\n        return D(t, 16);\n    };\n    var T = y.f2 = y.__private__.f2 = function(t) {\n        if (isNaN(t)) throw new Error(\"Invalid argument passed to jsPDF.f2\");\n        return D(t, 2);\n    }, z = y.__private__.f3 = function(t) {\n        if (isNaN(t)) throw new Error(\"Invalid argument passed to jsPDF.f3\");\n        return D(t, 3);\n    }, U = y.scale = y.__private__.scale = function(t) {\n        if (isNaN(t)) throw new Error(\"Invalid argument passed to jsPDF.scale\");\n        return _ === A ? t * St : _ === S ? t : void 0;\n    }, H = function(t) {\n        return U(function(t) {\n            return _ === A ? _n() - t : _ === S ? t : void 0;\n        }(t));\n    };\n    y.__private__.setPrecision = y.setPrecision = function(t) {\n        \"number\" == typeof parseInt(t, 10) && (n = parseInt(t, 10));\n    };\n    var W, V = \"00000000000000000000000000000000\", G = y.__private__.getFileId = function() {\n        return V;\n    }, Y = y.__private__.setFileId = function(t) {\n        return V = void 0 !== t && /^[a-fA-F0-9]{32}$/.test(t) ? t.toUpperCase() : V.split(\"\").map(function() {\n            return \"ABCDEF0123456789\".charAt(Math.floor(16 * Math.random()));\n        }).join(\"\"), null !== m && (je = new I(m.userPermissions, m.userPassword, m.ownerPassword, V)), V;\n    };\n    y.setFileId = function(t) {\n        return Y(t), this;\n    }, y.getFileId = function() {\n        return G();\n    };\n    var J = y.__private__.convertDateToPDFDate = function(t) {\n        var e = t.getTimezoneOffset(), n = e < 0 ? \"+\" : \"-\", r = Math.floor(Math.abs(e / 60)), i = Math.abs(e % 60), a = [\n            n,\n            Q(r),\n            \"'\",\n            Q(i),\n            \"'\"\n        ].join(\"\");\n        return [\n            \"D:\",\n            t.getFullYear(),\n            Q(t.getMonth() + 1),\n            Q(t.getDate()),\n            Q(t.getHours()),\n            Q(t.getMinutes()),\n            Q(t.getSeconds()),\n            a\n        ].join(\"\");\n    }, X = y.__private__.convertPDFDateToDate = function(t) {\n        var e = parseInt(t.substr(2, 4), 10), n = parseInt(t.substr(6, 2), 10) - 1, r = parseInt(t.substr(8, 2), 10), i = parseInt(t.substr(10, 2), 10), a = parseInt(t.substr(12, 2), 10), o = parseInt(t.substr(14, 2), 10);\n        return new Date(e, n, r, i, a, o, 0);\n    }, K = y.__private__.setCreationDate = function(t) {\n        var e;\n        if (void 0 === t && (t = new Date), t instanceof Date) e = J(t);\n        else {\n            if (!/^D:(20[0-2][0-9]|203[0-7]|19[7-9][0-9])(0[0-9]|1[0-2])([0-2][0-9]|3[0-1])(0[0-9]|1[0-9]|2[0-3])(0[0-9]|[1-5][0-9])(0[0-9]|[1-5][0-9])(\\+0[0-9]|\\+1[0-4]|-0[0-9]|-1[0-1])'(0[0-9]|[1-5][0-9])'?$/.test(t)) throw new Error(\"Invalid argument passed to jsPDF.setCreationDate\");\n            e = t;\n        }\n        return W = e;\n    }, Z = y.__private__.getCreationDate = function(t) {\n        var e = W;\n        return \"jsDate\" === t && (e = X(W)), e;\n    };\n    y.setCreationDate = function(t) {\n        return K(t), this;\n    }, y.getCreationDate = function(t) {\n        return Z(t);\n    };\n    var $, Q = y.__private__.padd2 = function(t) {\n        return (\"0\" + parseInt(t)).slice(-2);\n    }, tt = y.__private__.padd2Hex = function(t) {\n        return (\"00\" + (t = t.toString())).substr(t.length);\n    }, et = 0, nt = [], rt = [], it = 0, at = [], ot = [], st = !1, ut = rt;\n    y.__private__.setCustomOutputDestination = function(t) {\n        st = !0, ut = t;\n    };\n    var ct = function(t) {\n        st || (ut = t);\n    };\n    y.__private__.resetCustomOutputDestination = function() {\n        st = !1, ut = rt;\n    };\n    var lt = y.__private__.out = function(t) {\n        return t = t.toString(), it += t.length + 1, ut.push(t), ut;\n    }, ht = y.__private__.write = function(t) {\n        return lt(1 === arguments.length ? t.toString() : Array.prototype.join.call(arguments, \" \"));\n    }, ft = y.__private__.getArrayBuffer = function(t) {\n        for(var e = t.length, n = new ArrayBuffer(e), r = new Uint8Array(n); e--;)r[e] = t.charCodeAt(e);\n        return n;\n    }, dt = [\n        [\n            \"Helvetica\",\n            \"helvetica\",\n            \"normal\",\n            \"WinAnsiEncoding\"\n        ],\n        [\n            \"Helvetica-Bold\",\n            \"helvetica\",\n            \"bold\",\n            \"WinAnsiEncoding\"\n        ],\n        [\n            \"Helvetica-Oblique\",\n            \"helvetica\",\n            \"italic\",\n            \"WinAnsiEncoding\"\n        ],\n        [\n            \"Helvetica-BoldOblique\",\n            \"helvetica\",\n            \"bolditalic\",\n            \"WinAnsiEncoding\"\n        ],\n        [\n            \"Courier\",\n            \"courier\",\n            \"normal\",\n            \"WinAnsiEncoding\"\n        ],\n        [\n            \"Courier-Bold\",\n            \"courier\",\n            \"bold\",\n            \"WinAnsiEncoding\"\n        ],\n        [\n            \"Courier-Oblique\",\n            \"courier\",\n            \"italic\",\n            \"WinAnsiEncoding\"\n        ],\n        [\n            \"Courier-BoldOblique\",\n            \"courier\",\n            \"bolditalic\",\n            \"WinAnsiEncoding\"\n        ],\n        [\n            \"Times-Roman\",\n            \"times\",\n            \"normal\",\n            \"WinAnsiEncoding\"\n        ],\n        [\n            \"Times-Bold\",\n            \"times\",\n            \"bold\",\n            \"WinAnsiEncoding\"\n        ],\n        [\n            \"Times-Italic\",\n            \"times\",\n            \"italic\",\n            \"WinAnsiEncoding\"\n        ],\n        [\n            \"Times-BoldItalic\",\n            \"times\",\n            \"bolditalic\",\n            \"WinAnsiEncoding\"\n        ],\n        [\n            \"ZapfDingbats\",\n            \"zapfdingbats\",\n            \"normal\",\n            null\n        ],\n        [\n            \"Symbol\",\n            \"symbol\",\n            \"normal\",\n            null\n        ]\n    ];\n    y.__private__.getStandardFonts = function() {\n        return dt;\n    };\n    var pt = e.fontSize || 16;\n    y.__private__.setFontSize = y.setFontSize = function(t) {\n        return pt = _ === S ? t / St : t, this;\n    };\n    var gt, mt = y.__private__.getFontSize = y.getFontSize = function() {\n        return _ === A ? pt : pt * St;\n    }, vt = e.R2L || !1;\n    y.__private__.setR2L = y.setR2L = function(t) {\n        return vt = t, this;\n    }, y.__private__.getR2L = y.getR2L = function() {\n        return vt;\n    };\n    var bt, yt = y.__private__.setZoomMode = function(t) {\n        if (/^(?:\\d+\\.\\d*|\\d*\\.\\d+|\\d+)%$/.test(t)) gt = t;\n        else if (isNaN(t)) {\n            if (-1 === [\n                void 0,\n                null,\n                \"fullwidth\",\n                \"fullheight\",\n                \"fullpage\",\n                \"original\"\n            ].indexOf(t)) throw new Error('zoom must be Integer (e.g. 2), a percentage Value (e.g. 300%) or fullwidth, fullheight, fullpage, original. \"' + t + '\" is not recognized.');\n            gt = t;\n        } else gt = parseInt(t, 10);\n    };\n    y.__private__.getZoomMode = function() {\n        return gt;\n    };\n    var wt, Nt = y.__private__.setPageMode = function(t) {\n        if (-1 == [\n            void 0,\n            null,\n            \"UseNone\",\n            \"UseOutlines\",\n            \"UseThumbs\",\n            \"FullScreen\"\n        ].indexOf(t)) throw new Error('Page mode must be one of UseNone, UseOutlines, UseThumbs, or FullScreen. \"' + t + '\" is not recognized.');\n        bt = t;\n    };\n    y.__private__.getPageMode = function() {\n        return bt;\n    };\n    var Lt = y.__private__.setLayoutMode = function(t) {\n        if (-1 == [\n            void 0,\n            null,\n            \"continuous\",\n            \"single\",\n            \"twoleft\",\n            \"tworight\",\n            \"two\"\n        ].indexOf(t)) throw new Error('Layout mode must be one of continuous, single, twoleft, tworight. \"' + t + '\" is not recognized.');\n        wt = t;\n    };\n    y.__private__.getLayoutMode = function() {\n        return wt;\n    }, y.__private__.setDisplayMode = y.setDisplayMode = function(t, e, n) {\n        return yt(t), Lt(e), Nt(n), this;\n    };\n    var xt = {\n        title: \"\",\n        subject: \"\",\n        author: \"\",\n        keywords: \"\",\n        creator: \"\"\n    };\n    y.__private__.getDocumentProperty = function(t) {\n        if (-1 === Object.keys(xt).indexOf(t)) throw new Error(\"Invalid argument passed to jsPDF.getDocumentProperty\");\n        return xt[t];\n    }, y.__private__.getDocumentProperties = function() {\n        return xt;\n    }, y.__private__.setDocumentProperties = y.setProperties = y.setDocumentProperties = function(t) {\n        for(var e in xt)xt.hasOwnProperty(e) && t[e] && (xt[e] = t[e]);\n        return this;\n    }, y.__private__.setDocumentProperty = function(t, e) {\n        if (-1 === Object.keys(xt).indexOf(t)) throw new Error(\"Invalid arguments passed to jsPDF.setDocumentProperty\");\n        return xt[t] = e;\n    };\n    var At, St, _t, Pt, kt, Ft = {}, It = {}, jt = [], Ct = {}, Ot = {}, Bt = {}, Mt = {}, qt = null, Et = 0, Rt = [], Dt = new C(y), Tt = e.hotfixes || [], zt = {}, Ut = {}, Ht = [], Wt = function t(e, n, r, i, a, o) {\n        if (!(this instanceof t)) return new t(e, n, r, i, a, o);\n        isNaN(e) && (e = 1), isNaN(n) && (n = 0), isNaN(r) && (r = 0), isNaN(i) && (i = 1), isNaN(a) && (a = 0), isNaN(o) && (o = 0), this._matrix = [\n            e,\n            n,\n            r,\n            i,\n            a,\n            o\n        ];\n    };\n    Object.defineProperty(Wt.prototype, \"sx\", {\n        get: function() {\n            return this._matrix[0];\n        },\n        set: function(t) {\n            this._matrix[0] = t;\n        }\n    }), Object.defineProperty(Wt.prototype, \"shy\", {\n        get: function() {\n            return this._matrix[1];\n        },\n        set: function(t) {\n            this._matrix[1] = t;\n        }\n    }), Object.defineProperty(Wt.prototype, \"shx\", {\n        get: function() {\n            return this._matrix[2];\n        },\n        set: function(t) {\n            this._matrix[2] = t;\n        }\n    }), Object.defineProperty(Wt.prototype, \"sy\", {\n        get: function() {\n            return this._matrix[3];\n        },\n        set: function(t) {\n            this._matrix[3] = t;\n        }\n    }), Object.defineProperty(Wt.prototype, \"tx\", {\n        get: function() {\n            return this._matrix[4];\n        },\n        set: function(t) {\n            this._matrix[4] = t;\n        }\n    }), Object.defineProperty(Wt.prototype, \"ty\", {\n        get: function() {\n            return this._matrix[5];\n        },\n        set: function(t) {\n            this._matrix[5] = t;\n        }\n    }), Object.defineProperty(Wt.prototype, \"a\", {\n        get: function() {\n            return this._matrix[0];\n        },\n        set: function(t) {\n            this._matrix[0] = t;\n        }\n    }), Object.defineProperty(Wt.prototype, \"b\", {\n        get: function() {\n            return this._matrix[1];\n        },\n        set: function(t) {\n            this._matrix[1] = t;\n        }\n    }), Object.defineProperty(Wt.prototype, \"c\", {\n        get: function() {\n            return this._matrix[2];\n        },\n        set: function(t) {\n            this._matrix[2] = t;\n        }\n    }), Object.defineProperty(Wt.prototype, \"d\", {\n        get: function() {\n            return this._matrix[3];\n        },\n        set: function(t) {\n            this._matrix[3] = t;\n        }\n    }), Object.defineProperty(Wt.prototype, \"e\", {\n        get: function() {\n            return this._matrix[4];\n        },\n        set: function(t) {\n            this._matrix[4] = t;\n        }\n    }), Object.defineProperty(Wt.prototype, \"f\", {\n        get: function() {\n            return this._matrix[5];\n        },\n        set: function(t) {\n            this._matrix[5] = t;\n        }\n    }), Object.defineProperty(Wt.prototype, \"rotation\", {\n        get: function() {\n            return Math.atan2(this.shx, this.sx);\n        }\n    }), Object.defineProperty(Wt.prototype, \"scaleX\", {\n        get: function() {\n            return this.decompose().scale.sx;\n        }\n    }), Object.defineProperty(Wt.prototype, \"scaleY\", {\n        get: function() {\n            return this.decompose().scale.sy;\n        }\n    }), Object.defineProperty(Wt.prototype, \"isIdentity\", {\n        get: function() {\n            return 1 === this.sx && 0 === this.shy && 0 === this.shx && 1 === this.sy && 0 === this.tx && 0 === this.ty;\n        }\n    }), Wt.prototype.join = function(t) {\n        return [\n            this.sx,\n            this.shy,\n            this.shx,\n            this.sy,\n            this.tx,\n            this.ty\n        ].map(B).join(t);\n    }, Wt.prototype.multiply = function(t) {\n        var e = t.sx * this.sx + t.shy * this.shx, n = t.sx * this.shy + t.shy * this.sy, r = t.shx * this.sx + t.sy * this.shx, i = t.shx * this.shy + t.sy * this.sy, a = t.tx * this.sx + t.ty * this.shx + this.tx, o = t.tx * this.shy + t.ty * this.sy + this.ty;\n        return new Wt(e, n, r, i, a, o);\n    }, Wt.prototype.decompose = function() {\n        var t = this.sx, e = this.shy, n = this.shx, r = this.sy, i = this.tx, a = this.ty, o = Math.sqrt(t * t + e * e), s = (t /= o) * n + (e /= o) * r;\n        n -= t * s, r -= e * s;\n        var u = Math.sqrt(n * n + r * r);\n        return s /= u, t * (r /= u) < e * (n /= u) && (t = -t, e = -e, s = -s, o = -o), {\n            scale: new Wt(o, 0, 0, u, 0, 0),\n            translate: new Wt(1, 0, 0, 1, i, a),\n            rotate: new Wt(t, e, -e, t, 0, 0),\n            skew: new Wt(1, 0, s, 1, 0, 0)\n        };\n    }, Wt.prototype.toString = function(t) {\n        return this.join(\" \");\n    }, Wt.prototype.inversed = function() {\n        var t = this.sx, e = this.shy, n = this.shx, r = this.sy, i = this.tx, a = this.ty, o = 1 / (t * r - e * n), s = r * o, u = -e * o, c = -n * o, l = t * o;\n        return new Wt(s, u, c, l, -s * i - c * a, -u * i - l * a);\n    }, Wt.prototype.applyToPoint = function(t) {\n        var e = t.x * this.sx + t.y * this.shx + this.tx, n = t.x * this.shy + t.y * this.sy + this.ty;\n        return new gn(e, n);\n    }, Wt.prototype.applyToRectangle = function(t) {\n        var e = this.applyToPoint(t), n = this.applyToPoint(new gn(t.x + t.w, t.y + t.h));\n        return new mn(e.x, e.y, n.x - e.x, n.y - e.y);\n    }, Wt.prototype.clone = function() {\n        var t = this.sx, e = this.shy, n = this.shx, r = this.sy, i = this.tx, a = this.ty;\n        return new Wt(t, e, n, r, i, a);\n    }, y.Matrix = Wt;\n    var Vt = y.matrixMult = function(t, e) {\n        return e.multiply(t);\n    }, Gt = new Wt(1, 0, 0, 1, 0, 0);\n    y.unitMatrix = y.identityMatrix = Gt;\n    var Yt = function(t, e) {\n        if (!Ot[t]) {\n            var n = (e instanceof M ? \"Sh\" : \"P\") + (Object.keys(Ct).length + 1).toString(10);\n            e.id = n, Ot[t] = n, Ct[n] = e, Dt.publish(\"addPattern\", e);\n        }\n    };\n    y.ShadingPattern = M, y.TilingPattern = q, y.addShadingPattern = function(t, e) {\n        return R(\"addShadingPattern()\"), Yt(t, e), this;\n    }, y.beginTilingPattern = function(t) {\n        R(\"beginTilingPattern()\"), bn(t.boundingBox[0], t.boundingBox[1], t.boundingBox[2] - t.boundingBox[0], t.boundingBox[3] - t.boundingBox[1], t.matrix);\n    }, y.endTilingPattern = function(t, e) {\n        R(\"endTilingPattern()\"), e.stream = ot[$].join(\"\\n\"), Yt(t, e), Dt.publish(\"endTilingPattern\", e), Ht.pop().restore();\n    };\n    var Jt, Xt = y.__private__.newObject = function() {\n        var t = Kt();\n        return Zt(t, !0), t;\n    }, Kt = y.__private__.newObjectDeferred = function() {\n        return et++, nt[et] = function() {\n            return it;\n        }, et;\n    }, Zt = function(t, e) {\n        return e = \"boolean\" == typeof e && e, nt[t] = it, e && lt(t + \" 0 obj\"), t;\n    }, $t = y.__private__.newAdditionalObject = function() {\n        var t = {\n            objId: Kt(),\n            content: \"\"\n        };\n        return at.push(t), t;\n    }, Qt = Kt(), te = Kt(), ee = y.__private__.decodeColorString = function(t) {\n        var e = t.split(\" \");\n        if (2 !== e.length || \"g\" !== e[1] && \"G\" !== e[1]) 5 !== e.length || \"k\" !== e[4] && \"K\" !== e[4] || (e = [\n            (1 - e[0]) * (1 - e[3]),\n            (1 - e[1]) * (1 - e[3]),\n            (1 - e[2]) * (1 - e[3]),\n            \"r\"\n        ]);\n        else {\n            var n = parseFloat(e[0]);\n            e = [\n                n,\n                n,\n                n,\n                \"r\"\n            ];\n        }\n        for(var r = \"#\", i = 0; i < 3; i++)r += (\"0\" + Math.floor(255 * parseFloat(e[i])).toString(16)).slice(-2);\n        return r;\n    }, ne = y.__private__.encodeColorString = function(e) {\n        var n;\n        \"string\" == typeof e && (e = {\n            ch1: e\n        });\n        var r = e.ch1, i = e.ch2, a = e.ch3, o = e.ch4, s = \"draw\" === e.pdfColorType ? [\n            \"G\",\n            \"RG\",\n            \"K\"\n        ] : [\n            \"g\",\n            \"rg\",\n            \"k\"\n        ];\n        if (\"string\" == typeof r && \"#\" !== r.charAt(0)) {\n            var u = new h(r);\n            if (u.ok) r = u.toHex();\n            else if (!/^\\d*\\.?\\d*$/.test(r)) throw new Error('Invalid color \"' + r + '\" passed to jsPDF.encodeColorString.');\n        }\n        if (\"string\" == typeof r && /^#[0-9A-Fa-f]{3}$/.test(r) && (r = \"#\" + r[1] + r[1] + r[2] + r[2] + r[3] + r[3]), \"string\" == typeof r && /^#[0-9A-Fa-f]{6}$/.test(r)) {\n            var c = parseInt(r.substr(1), 16);\n            r = c >> 16 & 255, i = c >> 8 & 255, a = 255 & c;\n        }\n        if (void 0 === i || void 0 === o && r === i && i === a) n = \"string\" == typeof r ? r + \" \" + s[0] : 2 === e.precision ? T(r / 255) + \" \" + s[0] : z(r / 255) + \" \" + s[0];\n        else if (void 0 === o || \"object\" === (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(o)) {\n            if (o && !isNaN(o.a) && 0 === o.a) return [\n                \"1.\",\n                \"1.\",\n                \"1.\",\n                s[1]\n            ].join(\" \");\n            n = \"string\" == typeof r ? [\n                r,\n                i,\n                a,\n                s[1]\n            ].join(\" \") : 2 === e.precision ? [\n                T(r / 255),\n                T(i / 255),\n                T(a / 255),\n                s[1]\n            ].join(\" \") : [\n                z(r / 255),\n                z(i / 255),\n                z(a / 255),\n                s[1]\n            ].join(\" \");\n        } else n = \"string\" == typeof r ? [\n            r,\n            i,\n            a,\n            o,\n            s[2]\n        ].join(\" \") : 2 === e.precision ? [\n            T(r),\n            T(i),\n            T(a),\n            T(o),\n            s[2]\n        ].join(\" \") : [\n            z(r),\n            z(i),\n            z(a),\n            z(o),\n            s[2]\n        ].join(\" \");\n        return n;\n    }, re = y.__private__.getFilters = function() {\n        return c;\n    }, ie = y.__private__.putStream = function(t) {\n        var e = (t = t || {}).data || \"\", n = t.filters || re(), r = t.alreadyAppliedFilters || [], i = t.addLength1 || !1, a = e.length, o = t.objectId, s = function(t) {\n            return t;\n        };\n        if (null !== m && void 0 === o) throw new Error(\"ObjectId must be passed to putStream for file encryption\");\n        null !== m && (s = je.encryptor(o, 0));\n        var u = {};\n        !0 === n && (n = [\n            \"FlateEncode\"\n        ]);\n        var c = t.additionalKeyValues || [], l = (u = void 0 !== E.API.processDataByFilters ? E.API.processDataByFilters(e, n) : {\n            data: e,\n            reverseChain: []\n        }).reverseChain + (Array.isArray(r) ? r.join(\" \") : r.toString());\n        if (0 !== u.data.length && (c.push({\n            key: \"Length\",\n            value: u.data.length\n        }), !0 === i && c.push({\n            key: \"Length1\",\n            value: a\n        })), 0 != l.length) if (l.split(\"/\").length - 1 == 1) c.push({\n            key: \"Filter\",\n            value: l\n        });\n        else {\n            c.push({\n                key: \"Filter\",\n                value: \"[\" + l + \"]\"\n            });\n            for(var h = 0; h < c.length; h += 1)if (\"DecodeParms\" === c[h].key) {\n                for(var f = [], d = 0; d < u.reverseChain.split(\"/\").length - 1; d += 1)f.push(\"null\");\n                f.push(c[h].value), c[h].value = \"[\" + f.join(\" \") + \"]\";\n            }\n        }\n        lt(\"<<\");\n        for(var p = 0; p < c.length; p++)lt(\"/\" + c[p].key + \" \" + c[p].value);\n        lt(\">>\"), 0 !== u.data.length && (lt(\"stream\"), lt(s(u.data)), lt(\"endstream\"));\n    }, ae = y.__private__.putPage = function(t) {\n        var e = t.number, n = t.data, r = t.objId, i = t.contentsObjId;\n        Zt(r, !0), lt(\"<</Type /Page\"), lt(\"/Parent \" + t.rootDictionaryObjId + \" 0 R\"), lt(\"/Resources \" + t.resourceDictionaryObjId + \" 0 R\"), lt(\"/MediaBox [\" + parseFloat(B(t.mediaBox.bottomLeftX)) + \" \" + parseFloat(B(t.mediaBox.bottomLeftY)) + \" \" + B(t.mediaBox.topRightX) + \" \" + B(t.mediaBox.topRightY) + \"]\"), null !== t.cropBox && lt(\"/CropBox [\" + B(t.cropBox.bottomLeftX) + \" \" + B(t.cropBox.bottomLeftY) + \" \" + B(t.cropBox.topRightX) + \" \" + B(t.cropBox.topRightY) + \"]\"), null !== t.bleedBox && lt(\"/BleedBox [\" + B(t.bleedBox.bottomLeftX) + \" \" + B(t.bleedBox.bottomLeftY) + \" \" + B(t.bleedBox.topRightX) + \" \" + B(t.bleedBox.topRightY) + \"]\"), null !== t.trimBox && lt(\"/TrimBox [\" + B(t.trimBox.bottomLeftX) + \" \" + B(t.trimBox.bottomLeftY) + \" \" + B(t.trimBox.topRightX) + \" \" + B(t.trimBox.topRightY) + \"]\"), null !== t.artBox && lt(\"/ArtBox [\" + B(t.artBox.bottomLeftX) + \" \" + B(t.artBox.bottomLeftY) + \" \" + B(t.artBox.topRightX) + \" \" + B(t.artBox.topRightY) + \"]\"), \"number\" == typeof t.userUnit && 1 !== t.userUnit && lt(\"/UserUnit \" + t.userUnit), Dt.publish(\"putPage\", {\n            objId: r,\n            pageContext: Rt[e],\n            pageNumber: e,\n            page: n\n        }), lt(\"/Contents \" + i + \" 0 R\"), lt(\">>\"), lt(\"endobj\");\n        var a = n.join(\"\\n\");\n        return _ === S && (a += \"\\nQ\"), Zt(i, !0), ie({\n            data: a,\n            filters: re(),\n            objectId: i\n        }), lt(\"endobj\"), r;\n    }, oe = y.__private__.putPages = function() {\n        var t, e, n = [];\n        for(t = 1; t <= Et; t++)Rt[t].objId = Kt(), Rt[t].contentsObjId = Kt();\n        for(t = 1; t <= Et; t++)n.push(ae({\n            number: t,\n            data: ot[t],\n            objId: Rt[t].objId,\n            contentsObjId: Rt[t].contentsObjId,\n            mediaBox: Rt[t].mediaBox,\n            cropBox: Rt[t].cropBox,\n            bleedBox: Rt[t].bleedBox,\n            trimBox: Rt[t].trimBox,\n            artBox: Rt[t].artBox,\n            userUnit: Rt[t].userUnit,\n            rootDictionaryObjId: Qt,\n            resourceDictionaryObjId: te\n        }));\n        Zt(Qt, !0), lt(\"<</Type /Pages\");\n        var r = \"/Kids [\";\n        for(e = 0; e < Et; e++)r += n[e] + \" 0 R \";\n        lt(r + \"]\"), lt(\"/Count \" + Et), lt(\">>\"), lt(\"endobj\"), Dt.publish(\"postPutPages\");\n    }, se = function(t) {\n        Dt.publish(\"putFont\", {\n            font: t,\n            out: lt,\n            newObject: Xt,\n            putStream: ie\n        }), !0 !== t.isAlreadyPutted && (t.objectNumber = Xt(), lt(\"<<\"), lt(\"/Type /Font\"), lt(\"/BaseFont /\" + j(t.postScriptName)), lt(\"/Subtype /Type1\"), \"string\" == typeof t.encoding && lt(\"/Encoding /\" + t.encoding), lt(\"/FirstChar 32\"), lt(\"/LastChar 255\"), lt(\">>\"), lt(\"endobj\"));\n    }, ue = function(t) {\n        t.objectNumber = Xt();\n        var e = [];\n        e.push({\n            key: \"Type\",\n            value: \"/XObject\"\n        }), e.push({\n            key: \"Subtype\",\n            value: \"/Form\"\n        }), e.push({\n            key: \"BBox\",\n            value: \"[\" + [\n                B(t.x),\n                B(t.y),\n                B(t.x + t.width),\n                B(t.y + t.height)\n            ].join(\" \") + \"]\"\n        }), e.push({\n            key: \"Matrix\",\n            value: \"[\" + t.matrix.toString() + \"]\"\n        });\n        var n = t.pages[1].join(\"\\n\");\n        ie({\n            data: n,\n            additionalKeyValues: e,\n            objectId: t.objectNumber\n        }), lt(\"endobj\");\n    }, ce = function(t, e) {\n        e || (e = 21);\n        var n = Xt(), r = function(t, e) {\n            var n, r = [], i = 1 / (e - 1);\n            for(n = 0; n < 1; n += i)r.push(n);\n            if (r.push(1), 0 != t[0].offset) {\n                var a = {\n                    offset: 0,\n                    color: t[0].color\n                };\n                t.unshift(a);\n            }\n            if (1 != t[t.length - 1].offset) {\n                var o = {\n                    offset: 1,\n                    color: t[t.length - 1].color\n                };\n                t.push(o);\n            }\n            for(var s = \"\", u = 0, c = 0; c < r.length; c++){\n                for(n = r[c]; n > t[u + 1].offset;)u++;\n                var l = t[u].offset, h = (n - l) / (t[u + 1].offset - l), f = t[u].color, d = t[u + 1].color;\n                s += tt(Math.round((1 - h) * f[0] + h * d[0]).toString(16)) + tt(Math.round((1 - h) * f[1] + h * d[1]).toString(16)) + tt(Math.round((1 - h) * f[2] + h * d[2]).toString(16));\n            }\n            return s.trim();\n        }(t.colors, e), i = [];\n        i.push({\n            key: \"FunctionType\",\n            value: \"0\"\n        }), i.push({\n            key: \"Domain\",\n            value: \"[0.0 1.0]\"\n        }), i.push({\n            key: \"Size\",\n            value: \"[\" + e + \"]\"\n        }), i.push({\n            key: \"BitsPerSample\",\n            value: \"8\"\n        }), i.push({\n            key: \"Range\",\n            value: \"[0.0 1.0 0.0 1.0 0.0 1.0]\"\n        }), i.push({\n            key: \"Decode\",\n            value: \"[0.0 1.0 0.0 1.0 0.0 1.0]\"\n        }), ie({\n            data: r,\n            additionalKeyValues: i,\n            alreadyAppliedFilters: [\n                \"/ASCIIHexDecode\"\n            ],\n            objectId: n\n        }), lt(\"endobj\"), t.objectNumber = Xt(), lt(\"<< /ShadingType \" + t.type), lt(\"/ColorSpace /DeviceRGB\");\n        var a = \"/Coords [\" + B(parseFloat(t.coords[0])) + \" \" + B(parseFloat(t.coords[1])) + \" \";\n        2 === t.type ? a += B(parseFloat(t.coords[2])) + \" \" + B(parseFloat(t.coords[3])) : a += B(parseFloat(t.coords[2])) + \" \" + B(parseFloat(t.coords[3])) + \" \" + B(parseFloat(t.coords[4])) + \" \" + B(parseFloat(t.coords[5])), lt(a += \"]\"), t.matrix && lt(\"/Matrix [\" + t.matrix.toString() + \"]\"), lt(\"/Function \" + n + \" 0 R\"), lt(\"/Extend [true true]\"), lt(\">>\"), lt(\"endobj\");\n    }, le = function(t, e) {\n        var n = Kt(), r = Xt();\n        e.push({\n            resourcesOid: n,\n            objectOid: r\n        }), t.objectNumber = r;\n        var i = [];\n        i.push({\n            key: \"Type\",\n            value: \"/Pattern\"\n        }), i.push({\n            key: \"PatternType\",\n            value: \"1\"\n        }), i.push({\n            key: \"PaintType\",\n            value: \"1\"\n        }), i.push({\n            key: \"TilingType\",\n            value: \"1\"\n        }), i.push({\n            key: \"BBox\",\n            value: \"[\" + t.boundingBox.map(B).join(\" \") + \"]\"\n        }), i.push({\n            key: \"XStep\",\n            value: B(t.xStep)\n        }), i.push({\n            key: \"YStep\",\n            value: B(t.yStep)\n        }), i.push({\n            key: \"Resources\",\n            value: n + \" 0 R\"\n        }), t.matrix && i.push({\n            key: \"Matrix\",\n            value: \"[\" + t.matrix.toString() + \"]\"\n        }), ie({\n            data: t.stream,\n            additionalKeyValues: i,\n            objectId: t.objectNumber\n        }), lt(\"endobj\");\n    }, he = function(t) {\n        for(var e in t.objectNumber = Xt(), lt(\"<<\"), t)switch(e){\n            case \"opacity\":\n                lt(\"/ca \" + T(t[e]));\n                break;\n            case \"stroke-opacity\":\n                lt(\"/CA \" + T(t[e]));\n        }\n        lt(\">>\"), lt(\"endobj\");\n    }, fe = function(t) {\n        Zt(t.resourcesOid, !0), lt(\"<<\"), lt(\"/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]\"), function() {\n            for(var t in lt(\"/Font <<\"), Ft)Ft.hasOwnProperty(t) && (!1 === v || !0 === v && b.hasOwnProperty(t)) && lt(\"/\" + t + \" \" + Ft[t].objectNumber + \" 0 R\");\n            lt(\">>\");\n        }(), function() {\n            if (Object.keys(Ct).length > 0) {\n                for(var t in lt(\"/Shading <<\"), Ct)Ct.hasOwnProperty(t) && Ct[t] instanceof M && Ct[t].objectNumber >= 0 && lt(\"/\" + t + \" \" + Ct[t].objectNumber + \" 0 R\");\n                Dt.publish(\"putShadingPatternDict\"), lt(\">>\");\n            }\n        }(), function(t) {\n            if (Object.keys(Ct).length > 0) {\n                for(var e in lt(\"/Pattern <<\"), Ct)Ct.hasOwnProperty(e) && Ct[e] instanceof y.TilingPattern && Ct[e].objectNumber >= 0 && Ct[e].objectNumber < t && lt(\"/\" + e + \" \" + Ct[e].objectNumber + \" 0 R\");\n                Dt.publish(\"putTilingPatternDict\"), lt(\">>\");\n            }\n        }(t.objectOid), function() {\n            if (Object.keys(Bt).length > 0) {\n                var t;\n                for(t in lt(\"/ExtGState <<\"), Bt)Bt.hasOwnProperty(t) && Bt[t].objectNumber >= 0 && lt(\"/\" + t + \" \" + Bt[t].objectNumber + \" 0 R\");\n                Dt.publish(\"putGStateDict\"), lt(\">>\");\n            }\n        }(), function() {\n            for(var t in lt(\"/XObject <<\"), zt)zt.hasOwnProperty(t) && zt[t].objectNumber >= 0 && lt(\"/\" + t + \" \" + zt[t].objectNumber + \" 0 R\");\n            Dt.publish(\"putXobjectDict\"), lt(\">>\");\n        }(), lt(\">>\"), lt(\"endobj\");\n    }, de = function(t) {\n        It[t.fontName] = It[t.fontName] || {}, It[t.fontName][t.fontStyle] = t.id;\n    }, pe = function(t, e, n, r, i) {\n        var a = {\n            id: \"F\" + (Object.keys(Ft).length + 1).toString(10),\n            postScriptName: t,\n            fontName: e,\n            fontStyle: n,\n            encoding: r,\n            isStandardFont: i || !1,\n            metadata: {}\n        };\n        return Dt.publish(\"addFont\", {\n            font: a,\n            instance: this\n        }), Ft[a.id] = a, de(a), a.id;\n    }, ge = y.__private__.pdfEscape = y.pdfEscape = function(t, e) {\n        return (function(t, e) {\n            var n, r, i, a, o, s, u, c, l;\n            if (i = (e = e || {}).sourceEncoding || \"Unicode\", o = e.outputEncoding, (e.autoencode || o) && Ft[At].metadata && Ft[At].metadata[i] && Ft[At].metadata[i].encoding && (a = Ft[At].metadata[i].encoding, !o && Ft[At].encoding && (o = Ft[At].encoding), !o && a.codePages && (o = a.codePages[0]), \"string\" == typeof o && (o = a[o]), o)) {\n                for(u = !1, s = [], n = 0, r = t.length; n < r; n++)(c = o[t.charCodeAt(n)]) ? s.push(String.fromCharCode(c)) : s.push(t[n]), s[n].charCodeAt(0) >> 8 && (u = !0);\n                t = s.join(\"\");\n            }\n            for(n = t.length; void 0 === u && 0 !== n;)t.charCodeAt(n - 1) >> 8 && (u = !0), n--;\n            if (!u) return t;\n            for(s = e.noBOM ? [] : [\n                254,\n                255\n            ], n = 0, r = t.length; n < r; n++){\n                if ((l = (c = t.charCodeAt(n)) >> 8) >> 8) throw new Error(\"Character at position \" + n + \" of string '\" + t + \"' exceeds 16bits. Cannot be encoded into UCS-2 BE\");\n                s.push(l), s.push(c - (l << 8));\n            }\n            return String.fromCharCode.apply(void 0, s);\n        })(t, e).replace(/\\\\/g, \"\\\\\\\\\").replace(/\\(/g, \"\\\\(\").replace(/\\)/g, \"\\\\)\");\n    }, me = y.__private__.beginPage = function(t) {\n        ot[++Et] = [], Rt[Et] = {\n            objId: 0,\n            contentsObjId: 0,\n            userUnit: Number(f),\n            artBox: null,\n            bleedBox: null,\n            cropBox: null,\n            trimBox: null,\n            mediaBox: {\n                bottomLeftX: 0,\n                bottomLeftY: 0,\n                topRightX: Number(t[0]),\n                topRightY: Number(t[1])\n            }\n        }, ye(Et), ct(ot[$]);\n    }, ve = function(t, e) {\n        var n, i, a;\n        switch(r = e || r, \"string\" == typeof t && (n = x(t.toLowerCase()), Array.isArray(n) && (i = n[0], a = n[1])), Array.isArray(t) && (i = t[0] * St, a = t[1] * St), isNaN(i) && (i = s[0], a = s[1]), (i > 14400 || a > 14400) && (o.warn(\"A page in a PDF can not be wider or taller than 14400 userUnit. jsPDF limits the width/height to 14400\"), i = Math.min(14400, i), a = Math.min(14400, a)), s = [\n            i,\n            a\n        ], r.substr(0, 1)){\n            case \"l\":\n                a > i && (s = [\n                    a,\n                    i\n                ]);\n                break;\n            case \"p\":\n                i > a && (s = [\n                    a,\n                    i\n                ]);\n        }\n        me(s), Ze(Xe), lt(on), 0 !== fn && lt(fn + \" J\"), 0 !== dn && lt(dn + \" j\"), Dt.publish(\"addPage\", {\n            pageNumber: Et\n        });\n    }, be = function(t) {\n        t > 0 && t <= Et && (ot.splice(t, 1), Rt.splice(t, 1), Et--, $ > Et && ($ = Et), this.setPage($));\n    }, ye = function(t) {\n        t > 0 && t <= Et && ($ = t);\n    }, we = y.__private__.getNumberOfPages = y.getNumberOfPages = function() {\n        return ot.length - 1;\n    }, Ne = function(t, e, n) {\n        var r, i = void 0;\n        return n = n || {}, t = void 0 !== t ? t : Ft[At].fontName, e = void 0 !== e ? e : Ft[At].fontStyle, r = t.toLowerCase(), void 0 !== It[r] && void 0 !== It[r][e] ? i = It[r][e] : void 0 !== It[t] && void 0 !== It[t][e] ? i = It[t][e] : !1 === n.disableWarning && o.warn(\"Unable to look up font label for font '\" + t + \"', '\" + e + \"'. Refer to getFontList() for available fonts.\"), i || n.noFallback || null == (i = It.times[e]) && (i = It.times.normal), i;\n    }, Le = y.__private__.putInfo = function() {\n        var t = Xt(), e = function(t) {\n            return t;\n        };\n        for(var n in null !== m && (e = je.encryptor(t, 0)), lt(\"<<\"), lt(\"/Producer (\" + ge(e(\"jsPDF \" + E.version)) + \")\"), xt)xt.hasOwnProperty(n) && xt[n] && lt(\"/\" + n.substr(0, 1).toUpperCase() + n.substr(1) + \" (\" + ge(e(xt[n])) + \")\");\n        lt(\"/CreationDate (\" + ge(e(W)) + \")\"), lt(\">>\"), lt(\"endobj\");\n    }, xe = y.__private__.putCatalog = function(t) {\n        var e = (t = t || {}).rootDictionaryObjId || Qt;\n        switch(Xt(), lt(\"<<\"), lt(\"/Type /Catalog\"), lt(\"/Pages \" + e + \" 0 R\"), gt || (gt = \"fullwidth\"), gt){\n            case \"fullwidth\":\n                lt(\"/OpenAction [3 0 R /FitH null]\");\n                break;\n            case \"fullheight\":\n                lt(\"/OpenAction [3 0 R /FitV null]\");\n                break;\n            case \"fullpage\":\n                lt(\"/OpenAction [3 0 R /Fit]\");\n                break;\n            case \"original\":\n                lt(\"/OpenAction [3 0 R /XYZ null null 1]\");\n                break;\n            default:\n                var n = \"\" + gt;\n                \"%\" === n.substr(n.length - 1) && (gt = parseInt(gt) / 100), \"number\" == typeof gt && lt(\"/OpenAction [3 0 R /XYZ null null \" + T(gt) + \"]\");\n        }\n        switch(wt || (wt = \"continuous\"), wt){\n            case \"continuous\":\n                lt(\"/PageLayout /OneColumn\");\n                break;\n            case \"single\":\n                lt(\"/PageLayout /SinglePage\");\n                break;\n            case \"two\":\n            case \"twoleft\":\n                lt(\"/PageLayout /TwoColumnLeft\");\n                break;\n            case \"tworight\":\n                lt(\"/PageLayout /TwoColumnRight\");\n        }\n        bt && lt(\"/PageMode /\" + bt), Dt.publish(\"putCatalog\"), lt(\">>\"), lt(\"endobj\");\n    }, Ae = y.__private__.putTrailer = function() {\n        lt(\"trailer\"), lt(\"<<\"), lt(\"/Size \" + (et + 1)), lt(\"/Root \" + et + \" 0 R\"), lt(\"/Info \" + (et - 1) + \" 0 R\"), null !== m && lt(\"/Encrypt \" + je.oid + \" 0 R\"), lt(\"/ID [ <\" + V + \"> <\" + V + \"> ]\"), lt(\">>\");\n    }, Se = y.__private__.putHeader = function() {\n        lt(\"%PDF-\" + w), lt(\"%\\xba\\xdf\\xac\\xe0\");\n    }, _e = y.__private__.putXRef = function() {\n        var t = \"0000000000\";\n        lt(\"xref\"), lt(\"0 \" + (et + 1)), lt(\"0000000000 65535 f \");\n        for(var e = 1; e <= et; e++)\"function\" == typeof nt[e] ? lt((t + nt[e]()).slice(-10) + \" 00000 n \") : void 0 !== nt[e] ? lt((t + nt[e]).slice(-10) + \" 00000 n \") : lt(\"0000000000 00000 n \");\n    }, Pe = y.__private__.buildDocument = function() {\n        var t;\n        et = 0, it = 0, rt = [], nt = [], at = [], Qt = Kt(), te = Kt(), ct(rt), Dt.publish(\"buildDocument\"), Se(), oe(), function() {\n            Dt.publish(\"putAdditionalObjects\");\n            for(var t = 0; t < at.length; t++){\n                var e = at[t];\n                Zt(e.objId, !0), lt(e.content), lt(\"endobj\");\n            }\n            Dt.publish(\"postPutAdditionalObjects\");\n        }(), t = [], function() {\n            for(var t in Ft)Ft.hasOwnProperty(t) && (!1 === v || !0 === v && b.hasOwnProperty(t)) && se(Ft[t]);\n        }(), function() {\n            var t;\n            for(t in Bt)Bt.hasOwnProperty(t) && he(Bt[t]);\n        }(), function() {\n            for(var t in zt)zt.hasOwnProperty(t) && ue(zt[t]);\n        }(), function(t) {\n            var e;\n            for(e in Ct)Ct.hasOwnProperty(e) && (Ct[e] instanceof M ? ce(Ct[e]) : Ct[e] instanceof q && le(Ct[e], t));\n        }(t), Dt.publish(\"putResources\"), t.forEach(fe), fe({\n            resourcesOid: te,\n            objectOid: Number.MAX_SAFE_INTEGER\n        }), Dt.publish(\"postPutResources\"), null !== m && (je.oid = Xt(), lt(\"<<\"), lt(\"/Filter /Standard\"), lt(\"/V \" + je.v), lt(\"/R \" + je.r), lt(\"/U <\" + je.toHexString(je.U) + \">\"), lt(\"/O <\" + je.toHexString(je.O) + \">\"), lt(\"/P \" + je.P), lt(\">>\"), lt(\"endobj\")), Le(), xe();\n        var e = it;\n        return _e(), Ae(), lt(\"startxref\"), lt(\"\" + e), lt(\"%%EOF\"), ct(ot[$]), rt.join(\"\\n\");\n    }, ke = y.__private__.getBlob = function(t) {\n        return new Blob([\n            ft(t)\n        ], {\n            type: \"application/pdf\"\n        });\n    }, Fe = y.output = y.__private__.output = (Jt = function(t, e) {\n        switch(\"string\" == typeof (e = e || {}) ? e = {\n            filename: e\n        } : e.filename = e.filename || \"generated.pdf\", t){\n            case void 0:\n                return Pe();\n            case \"save\":\n                y.save(e.filename);\n                break;\n            case \"arraybuffer\":\n                return ft(Pe());\n            case \"blob\":\n                return ke(Pe());\n            case \"bloburi\":\n            case \"bloburl\":\n                if (void 0 !== i.URL && \"function\" == typeof i.URL.createObjectURL) return i.URL && i.URL.createObjectURL(ke(Pe())) || void 0;\n                o.warn(\"bloburl is not supported by your system, because URL.createObjectURL is not supported by your browser.\");\n                break;\n            case \"datauristring\":\n            case \"dataurlstring\":\n                var n = \"\", r = Pe();\n                try {\n                    n = d(r);\n                } catch (m) {\n                    n = d(unescape(encodeURIComponent(r)));\n                }\n                return \"data:application/pdf;filename=\" + e.filename + \";base64,\" + n;\n            case \"pdfobjectnewwindow\":\n                if (\"[object Window]\" === Object.prototype.toString.call(i)) {\n                    var a = \"https://cdnjs.cloudflare.com/ajax/libs/pdfobject/2.1.1/pdfobject.min.js\", s = ' integrity=\"sha512-4ze/a9/4jqu+tX9dfOqJYSvyYd5M6qum/3HpCLr+/Jqf0whc37VUbkpNGHR7/8pSnCFw47T1fmIpwBV7UySh3g==\" crossorigin=\"anonymous\"';\n                    e.pdfObjectUrl && (a = e.pdfObjectUrl, s = \"\");\n                    var u = '<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><script src=\"' + a + '\"' + s + '></script><script >PDFObject.embed(\"' + this.output(\"dataurlstring\") + '\", ' + JSON.stringify(e) + \");</script></body></html>\", c = i.open();\n                    return null !== c && c.document.write(u), c;\n                }\n                throw new Error(\"The option pdfobjectnewwindow just works in a browser-environment.\");\n            case \"pdfjsnewwindow\":\n                if (\"[object Window]\" === Object.prototype.toString.call(i)) {\n                    var l = '<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><iframe id=\"pdfViewer\" src=\"' + (e.pdfJsUrl || \"examples/PDF.js/web/viewer.html\") + \"?file=&downloadName=\" + e.filename + '\" width=\"500px\" height=\"400px\" /></body></html>', h = i.open();\n                    if (null !== h) {\n                        h.document.write(l);\n                        var f = this;\n                        h.document.documentElement.querySelector(\"#pdfViewer\").onload = function() {\n                            h.document.title = e.filename, h.document.documentElement.querySelector(\"#pdfViewer\").contentWindow.PDFViewerApplication.open(f.output(\"bloburl\"));\n                        };\n                    }\n                    return h;\n                }\n                throw new Error(\"The option pdfjsnewwindow just works in a browser-environment.\");\n            case \"dataurlnewwindow\":\n                if (\"[object Window]\" !== Object.prototype.toString.call(i)) throw new Error(\"The option dataurlnewwindow just works in a browser-environment.\");\n                var p = '<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><iframe src=\"' + this.output(\"datauristring\", e) + '\"></iframe></body></html>', g = i.open();\n                if (null !== g && (g.document.write(p), g.document.title = e.filename), g || \"undefined\" == typeof safari) return g;\n                break;\n            case \"datauri\":\n            case \"dataurl\":\n                return i.document.location.href = this.output(\"datauristring\", e);\n            default:\n                return null;\n        }\n    }, Jt.foo = function() {\n        try {\n            return Jt.apply(this, arguments);\n        } catch (n) {\n            var t = n.stack || \"\";\n            ~t.indexOf(\" at \") && (t = t.split(\" at \")[1]);\n            var e = \"Error in function \" + t.split(\"\\n\")[0].split(\"<\")[0] + \": \" + n.message;\n            if (!i.console) throw new Error(e);\n            i.console.error(e, n), i.alert && alert(e);\n        }\n    }, Jt.foo.bar = Jt, Jt.foo), Ie = function(t) {\n        return !0 === Array.isArray(Tt) && Tt.indexOf(t) > -1;\n    };\n    switch(a){\n        case \"pt\":\n            St = 1;\n            break;\n        case \"mm\":\n            St = 72 / 25.4;\n            break;\n        case \"cm\":\n            St = 72 / 2.54;\n            break;\n        case \"in\":\n            St = 72;\n            break;\n        case \"px\":\n            St = 1 == Ie(\"px_scaling\") ? .75 : 96 / 72;\n            break;\n        case \"pc\":\n        case \"em\":\n            St = 12;\n            break;\n        case \"ex\":\n            St = 6;\n            break;\n        default:\n            if (\"number\" != typeof a) throw new Error(\"Invalid unit: \" + a);\n            St = a;\n    }\n    var je = null;\n    K(), Y();\n    var Ce = y.__private__.getPageInfo = y.getPageInfo = function(t) {\n        if (isNaN(t) || t % 1 != 0) throw new Error(\"Invalid argument passed to jsPDF.getPageInfo\");\n        return {\n            objId: Rt[t].objId,\n            pageNumber: t,\n            pageContext: Rt[t]\n        };\n    }, Oe = y.__private__.getPageInfoByObjId = function(t) {\n        if (isNaN(t) || t % 1 != 0) throw new Error(\"Invalid argument passed to jsPDF.getPageInfoByObjId\");\n        for(var e in Rt)if (Rt[e].objId === t) break;\n        return Ce(e);\n    }, Be = y.__private__.getCurrentPageInfo = y.getCurrentPageInfo = function() {\n        return {\n            objId: Rt[$].objId,\n            pageNumber: $,\n            pageContext: Rt[$]\n        };\n    };\n    y.addPage = function() {\n        return ve.apply(this, arguments), this;\n    }, y.setPage = function() {\n        return ye.apply(this, arguments), ct.call(this, ot[$]), this;\n    }, y.insertPage = function(t) {\n        return this.addPage(), this.movePage($, t), this;\n    }, y.movePage = function(t, e) {\n        var n, r;\n        if (t > e) {\n            n = ot[t], r = Rt[t];\n            for(var i = t; i > e; i--)ot[i] = ot[i - 1], Rt[i] = Rt[i - 1];\n            ot[e] = n, Rt[e] = r, this.setPage(e);\n        } else if (t < e) {\n            n = ot[t], r = Rt[t];\n            for(var a = t; a < e; a++)ot[a] = ot[a + 1], Rt[a] = Rt[a + 1];\n            ot[e] = n, Rt[e] = r, this.setPage(e);\n        }\n        return this;\n    }, y.deletePage = function() {\n        return be.apply(this, arguments), this;\n    }, y.__private__.text = y.text = function(e, n, r, i, a) {\n        var o, s, u, c, l, h, f, d, p, g = (i = i || {}).scope || this;\n        if (\"number\" == typeof e && \"number\" == typeof n && (\"string\" == typeof r || Array.isArray(r))) {\n            var m = r;\n            r = n, n = e, e = m;\n        }\n        if (arguments[3] instanceof Wt == 0 ? (u = arguments[4], c = arguments[5], \"object\" === (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(f = arguments[3]) && null !== f || (\"string\" == typeof u && (c = u, u = null), \"string\" == typeof f && (c = f, f = null), \"number\" == typeof f && (u = f, f = null), i = {\n            flags: f,\n            angle: u,\n            align: c\n        })) : (R(\"The transform parameter of text() with a Matrix value\"), p = a), isNaN(n) || isNaN(r) || null == e) throw new Error(\"Invalid arguments passed to jsPDF.text\");\n        if (0 === e.length) return g;\n        var v, y = \"\", w = \"number\" == typeof i.lineHeightFactor ? i.lineHeightFactor : Je, N = g.internal.scaleFactor;\n        function L(t) {\n            return t = t.split(\"\t\").join(Array(i.TabLen || 9).join(\" \")), ge(t, f);\n        }\n        function x(t) {\n            for(var e, n = t.concat(), r = [], i = n.length; i--;)\"string\" == typeof (e = n.shift()) ? r.push(e) : Array.isArray(t) && (1 === e.length || void 0 === e[1] && void 0 === e[2]) ? r.push(e[0]) : r.push([\n                e[0],\n                e[1],\n                e[2]\n            ]);\n            return r;\n        }\n        function A(t, e) {\n            var n;\n            if (\"string\" == typeof t) n = e(t)[0];\n            else if (Array.isArray(t)) {\n                for(var r, i, a = t.concat(), o = [], s = a.length; s--;)\"string\" == typeof (r = a.shift()) ? o.push(e(r)[0]) : Array.isArray(r) && \"string\" == typeof r[0] && (i = e(r[0], r[1], r[2]), o.push([\n                    i[0],\n                    i[1],\n                    i[2]\n                ]));\n                n = o;\n            }\n            return n;\n        }\n        var P = !1, k = !0;\n        if (\"string\" == typeof e) P = !0;\n        else if (Array.isArray(e)) {\n            var F = e.concat();\n            s = [];\n            for(var I, j = F.length; j--;)(\"string\" != typeof (I = F.shift()) || Array.isArray(I) && \"string\" != typeof I[0]) && (k = !1);\n            P = k;\n        }\n        if (!1 === P) throw new Error('Type of text must be string or Array. \"' + e + '\" is not recognized.');\n        \"string\" == typeof e && (e = e.match(/[\\r?\\n]/) ? e.split(/\\r\\n|\\r|\\n/g) : [\n            e\n        ]);\n        var C = pt / g.internal.scaleFactor, O = C * (w - 1);\n        switch(i.baseline){\n            case \"bottom\":\n                r -= O;\n                break;\n            case \"top\":\n                r += C - O;\n                break;\n            case \"hanging\":\n                r += C - 2 * O;\n                break;\n            case \"middle\":\n                r += C / 2 - O;\n        }\n        if ((h = i.maxWidth || 0) > 0 && (\"string\" == typeof e ? e = g.splitTextToSize(e, h) : \"[object Array]\" === Object.prototype.toString.call(e) && (e = e.reduce(function(t, e) {\n            return t.concat(g.splitTextToSize(e, h));\n        }, []))), o = {\n            text: e,\n            x: n,\n            y: r,\n            options: i,\n            mutex: {\n                pdfEscape: ge,\n                activeFontKey: At,\n                fonts: Ft,\n                activeFontSize: pt\n            }\n        }, Dt.publish(\"preProcessText\", o), e = o.text, u = (i = o.options).angle, p instanceof Wt == 0 && u && \"number\" == typeof u) {\n            u *= Math.PI / 180, 0 === i.rotationDirection && (u = -u), _ === S && (u = -u);\n            var M = Math.cos(u), q = Math.sin(u);\n            p = new Wt(M, q, -q, M, 0, 0);\n        } else u && u instanceof Wt && (p = u);\n        _ !== S || p || (p = Gt), void 0 !== (l = i.charSpace || ln) && (y += B(U(l)) + \" Tc\\n\", this.setCharSpace(this.getCharSpace() || 0)), void 0 !== (d = i.horizontalScale) && (y += B(100 * d) + \" Tz\\n\"), i.lang;\n        var E = -1, D = void 0 !== i.renderingMode ? i.renderingMode : i.stroke, T = g.internal.getCurrentPageInfo().pageContext;\n        switch(D){\n            case 0:\n            case !1:\n            case \"fill\":\n                E = 0;\n                break;\n            case 1:\n            case !0:\n            case \"stroke\":\n                E = 1;\n                break;\n            case 2:\n            case \"fillThenStroke\":\n                E = 2;\n                break;\n            case 3:\n            case \"invisible\":\n                E = 3;\n                break;\n            case 4:\n            case \"fillAndAddForClipping\":\n                E = 4;\n                break;\n            case 5:\n            case \"strokeAndAddPathForClipping\":\n                E = 5;\n                break;\n            case 6:\n            case \"fillThenStrokeAndAddToPathForClipping\":\n                E = 6;\n                break;\n            case 7:\n            case \"addToPathForClipping\":\n                E = 7;\n        }\n        var z = void 0 !== T.usedRenderingMode ? T.usedRenderingMode : -1;\n        -1 !== E ? y += E + \" Tr\\n\" : -1 !== z && (y += \"0 Tr\\n\"), -1 !== E && (T.usedRenderingMode = E), c = i.align || \"left\";\n        var H, W = pt * w, V = g.internal.pageSize.getWidth(), G = Ft[At];\n        l = i.charSpace || ln, h = i.maxWidth || 0, f = Object.assign({\n            autoencode: !0,\n            noBOM: !0\n        }, i.flags);\n        var Y = [], J = function(t) {\n            return g.getStringUnitWidth(t, {\n                font: G,\n                charSpace: l,\n                fontSize: pt,\n                doKerning: !1\n            }) * pt / N;\n        };\n        if (\"[object Array]\" === Object.prototype.toString.call(e)) {\n            var X;\n            s = x(e), \"left\" !== c && (H = s.map(J));\n            var K, Z = 0;\n            if (\"right\" === c) {\n                n -= H[0], e = [], j = s.length;\n                for(var $ = 0; $ < j; $++)0 === $ ? (K = en(n), X = nn(r)) : (K = U(Z - H[$]), X = -W), e.push([\n                    s[$],\n                    K,\n                    X\n                ]), Z = H[$];\n            } else if (\"center\" === c) {\n                n -= H[0] / 2, e = [], j = s.length;\n                for(var Q = 0; Q < j; Q++)0 === Q ? (K = en(n), X = nn(r)) : (K = U((Z - H[Q]) / 2), X = -W), e.push([\n                    s[Q],\n                    K,\n                    X\n                ]), Z = H[Q];\n            } else if (\"left\" === c) {\n                e = [], j = s.length;\n                for(var tt = 0; tt < j; tt++)e.push(s[tt]);\n            } else if (\"justify\" === c && \"Identity-H\" === G.encoding) {\n                e = [], j = s.length, h = 0 !== h ? h : V;\n                for(var et = 0, nt = 0; nt < j; nt++)if (X = 0 === nt ? nn(r) : -W, K = 0 === nt ? en(n) : et, nt < j - 1) {\n                    var rt = U((h - H[nt]) / (s[nt].split(\" \").length - 1)), it = s[nt].split(\" \");\n                    e.push([\n                        it[0] + \" \",\n                        K,\n                        X\n                    ]), et = 0;\n                    for(var at = 1; at < it.length; at++){\n                        var ot = (J(it[at - 1] + \" \" + it[at]) - J(it[at])) * N + rt;\n                        at == it.length - 1 ? e.push([\n                            it[at],\n                            ot,\n                            0\n                        ]) : e.push([\n                            it[at] + \" \",\n                            ot,\n                            0\n                        ]), et -= ot;\n                    }\n                } else e.push([\n                    s[nt],\n                    K,\n                    X\n                ]);\n                e.push([\n                    \"\",\n                    et,\n                    0\n                ]);\n            } else {\n                if (\"justify\" !== c) throw new Error('Unrecognized alignment option, use \"left\", \"center\", \"right\" or \"justify\".');\n                for(e = [], j = s.length, h = 0 !== h ? h : V, nt = 0; nt < j; nt++){\n                    X = 0 === nt ? nn(r) : -W, K = 0 === nt ? en(n) : 0;\n                    var st = s[nt].split(\" \").length - 1, ut = st > 0 ? (h - H[nt]) / st : 0;\n                    nt < j - 1 ? Y.push(B(U(ut))) : Y.push(0), e.push([\n                        s[nt],\n                        K,\n                        X\n                    ]);\n                }\n            }\n        }\n        !0 === (\"boolean\" == typeof i.R2L ? i.R2L : vt) && (e = A(e, function(t, e, n) {\n            return [\n                t.split(\"\").reverse().join(\"\"),\n                e,\n                n\n            ];\n        })), o = {\n            text: e,\n            x: n,\n            y: r,\n            options: i,\n            mutex: {\n                pdfEscape: ge,\n                activeFontKey: At,\n                fonts: Ft,\n                activeFontSize: pt\n            }\n        }, Dt.publish(\"postProcessText\", o), e = o.text, v = o.mutex.isHex || !1;\n        var ct = Ft[At].encoding;\n        \"WinAnsiEncoding\" !== ct && \"StandardEncoding\" !== ct || (e = A(e, function(t, e, n) {\n            return [\n                L(t),\n                e,\n                n\n            ];\n        })), s = x(e), e = [];\n        for(var ht, ft, dt, gt = Array.isArray(s[0]) ? 1 : 0, mt = \"\", bt = function(t, e, n) {\n            var r = \"\";\n            return n instanceof Wt ? (n = \"number\" == typeof i.angle ? Vt(n, new Wt(1, 0, 0, 1, t, e)) : Vt(new Wt(1, 0, 0, 1, t, e), n), _ === S && (n = Vt(new Wt(1, 0, 0, -1, 0, 0), n)), r = n.join(\" \") + \" Tm\\n\") : r = B(t) + \" \" + B(e) + \" Td\\n\", r;\n        }, yt = 0; yt < s.length; yt++){\n            switch(mt = \"\", gt){\n                case 1:\n                    dt = (v ? \"<\" : \"(\") + s[yt][0] + (v ? \">\" : \")\"), ht = parseFloat(s[yt][1]), ft = parseFloat(s[yt][2]);\n                    break;\n                case 0:\n                    dt = (v ? \"<\" : \"(\") + s[yt] + (v ? \">\" : \")\"), ht = en(n), ft = nn(r);\n            }\n            void 0 !== Y && void 0 !== Y[yt] && (mt = Y[yt] + \" Tw\\n\"), 0 === yt ? e.push(mt + bt(ht, ft, p) + dt) : 0 === gt ? e.push(mt + dt) : 1 === gt && e.push(mt + bt(ht, ft, p) + dt);\n        }\n        e = 0 === gt ? e.join(\" Tj\\nT* \") : e.join(\" Tj\\n\"), e += \" Tj\\n\";\n        var wt = \"BT\\n/\";\n        return wt += At + \" \" + pt + \" Tf\\n\", wt += B(pt * w) + \" TL\\n\", wt += un + \"\\n\", wt += y, wt += e, lt(wt += \"ET\"), b[At] = !0, g;\n    };\n    var Me = y.__private__.clip = y.clip = function(t) {\n        return lt(\"evenodd\" === t ? \"W*\" : \"W\"), this;\n    };\n    y.clipEvenOdd = function() {\n        return Me(\"evenodd\");\n    }, y.__private__.discardPath = y.discardPath = function() {\n        return lt(\"n\"), this;\n    };\n    var qe = y.__private__.isValidStyle = function(t) {\n        var e = !1;\n        return -1 !== [\n            void 0,\n            null,\n            \"S\",\n            \"D\",\n            \"F\",\n            \"DF\",\n            \"FD\",\n            \"f\",\n            \"f*\",\n            \"B\",\n            \"B*\",\n            \"n\"\n        ].indexOf(t) && (e = !0), e;\n    };\n    y.__private__.setDefaultPathOperation = y.setDefaultPathOperation = function(t) {\n        return qe(t) && (g = t), this;\n    };\n    var Ee = y.__private__.getStyle = y.getStyle = function(t) {\n        var e = g;\n        switch(t){\n            case \"D\":\n            case \"S\":\n                e = \"S\";\n                break;\n            case \"F\":\n                e = \"f\";\n                break;\n            case \"FD\":\n            case \"DF\":\n                e = \"B\";\n                break;\n            case \"f\":\n            case \"f*\":\n            case \"B\":\n            case \"B*\":\n                e = t;\n        }\n        return e;\n    }, Re = y.close = function() {\n        return lt(\"h\"), this;\n    };\n    y.stroke = function() {\n        return lt(\"S\"), this;\n    }, y.fill = function(t) {\n        return De(\"f\", t), this;\n    }, y.fillEvenOdd = function(t) {\n        return De(\"f*\", t), this;\n    }, y.fillStroke = function(t) {\n        return De(\"B\", t), this;\n    }, y.fillStrokeEvenOdd = function(t) {\n        return De(\"B*\", t), this;\n    };\n    var De = function(e, n) {\n        \"object\" === (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(n) ? Ue(n, e) : lt(e);\n    }, Te = function(t) {\n        null === t || _ === S && void 0 === t || (t = Ee(t), lt(t));\n    };\n    function ze(t, e, n, r, i) {\n        var a = new q(e || this.boundingBox, n || this.xStep, r || this.yStep, this.gState, i || this.matrix);\n        a.stream = this.stream;\n        var o = t + \"$$\" + this.cloneIndex++ + \"$$\";\n        return Yt(o, a), a;\n    }\n    var Ue = function(t, e) {\n        var n = Ot[t.key], r = Ct[n];\n        if (r instanceof M) lt(\"q\"), lt(He(e)), r.gState && y.setGState(r.gState), lt(t.matrix.toString() + \" cm\"), lt(\"/\" + n + \" sh\"), lt(\"Q\");\n        else if (r instanceof q) {\n            var i = new Wt(1, 0, 0, -1, 0, _n());\n            t.matrix && (i = i.multiply(t.matrix || Gt), n = ze.call(r, t.key, t.boundingBox, t.xStep, t.yStep, i).id), lt(\"q\"), lt(\"/Pattern cs\"), lt(\"/\" + n + \" scn\"), r.gState && y.setGState(r.gState), lt(e), lt(\"Q\");\n        }\n    }, He = function(t) {\n        switch(t){\n            case \"f\":\n            case \"F\":\n            case \"n\":\n                return \"W n\";\n            case \"f*\":\n                return \"W* n\";\n            case \"B\":\n            case \"S\":\n                return \"W S\";\n            case \"B*\":\n                return \"W* S\";\n        }\n    }, We = y.moveTo = function(t, e) {\n        return lt(B(U(t)) + \" \" + B(H(e)) + \" m\"), this;\n    }, Ve = y.lineTo = function(t, e) {\n        return lt(B(U(t)) + \" \" + B(H(e)) + \" l\"), this;\n    }, Ge = y.curveTo = function(t, e, n, r, i, a) {\n        return lt([\n            B(U(t)),\n            B(H(e)),\n            B(U(n)),\n            B(H(r)),\n            B(U(i)),\n            B(H(a)),\n            \"c\"\n        ].join(\" \")), this;\n    };\n    y.__private__.line = y.line = function(t, e, n, r, i) {\n        if (isNaN(t) || isNaN(e) || isNaN(n) || isNaN(r) || !qe(i)) throw new Error(\"Invalid arguments passed to jsPDF.line\");\n        return _ === A ? this.lines([\n            [\n                n - t,\n                r - e\n            ]\n        ], t, e, [\n            1,\n            1\n        ], i || \"S\") : this.lines([\n            [\n                n - t,\n                r - e\n            ]\n        ], t, e, [\n            1,\n            1\n        ]).stroke();\n    }, y.__private__.lines = y.lines = function(t, e, n, r, i, a) {\n        var o, s, u, c, l, h, f, d, p, g, m, v;\n        if (\"number\" == typeof t && (v = n, n = e, e = t, t = v), r = r || [\n            1,\n            1\n        ], a = a || !1, isNaN(e) || isNaN(n) || !Array.isArray(t) || !Array.isArray(r) || !qe(i) || \"boolean\" != typeof a) throw new Error(\"Invalid arguments passed to jsPDF.lines\");\n        for(We(e, n), o = r[0], s = r[1], c = t.length, g = e, m = n, u = 0; u < c; u++)2 === (l = t[u]).length ? (g = l[0] * o + g, m = l[1] * s + m, Ve(g, m)) : (h = l[0] * o + g, f = l[1] * s + m, d = l[2] * o + g, p = l[3] * s + m, g = l[4] * o + g, m = l[5] * s + m, Ge(h, f, d, p, g, m));\n        return a && Re(), Te(i), this;\n    }, y.path = function(t) {\n        for(var e = 0; e < t.length; e++){\n            var n = t[e], r = n.c;\n            switch(n.op){\n                case \"m\":\n                    We(r[0], r[1]);\n                    break;\n                case \"l\":\n                    Ve(r[0], r[1]);\n                    break;\n                case \"c\":\n                    Ge.apply(this, r);\n                    break;\n                case \"h\":\n                    Re();\n            }\n        }\n        return this;\n    }, y.__private__.rect = y.rect = function(t, e, n, r, i) {\n        if (isNaN(t) || isNaN(e) || isNaN(n) || isNaN(r) || !qe(i)) throw new Error(\"Invalid arguments passed to jsPDF.rect\");\n        return _ === A && (r = -r), lt([\n            B(U(t)),\n            B(H(e)),\n            B(U(n)),\n            B(U(r)),\n            \"re\"\n        ].join(\" \")), Te(i), this;\n    }, y.__private__.triangle = y.triangle = function(t, e, n, r, i, a, o) {\n        if (isNaN(t) || isNaN(e) || isNaN(n) || isNaN(r) || isNaN(i) || isNaN(a) || !qe(o)) throw new Error(\"Invalid arguments passed to jsPDF.triangle\");\n        return this.lines([\n            [\n                n - t,\n                r - e\n            ],\n            [\n                i - n,\n                a - r\n            ],\n            [\n                t - i,\n                e - a\n            ]\n        ], t, e, [\n            1,\n            1\n        ], o, !0), this;\n    }, y.__private__.roundedRect = y.roundedRect = function(t, e, n, r, i, a, o) {\n        if (isNaN(t) || isNaN(e) || isNaN(n) || isNaN(r) || isNaN(i) || isNaN(a) || !qe(o)) throw new Error(\"Invalid arguments passed to jsPDF.roundedRect\");\n        var s = 4 / 3 * (Math.SQRT2 - 1);\n        return i = Math.min(i, .5 * n), a = Math.min(a, .5 * r), this.lines([\n            [\n                n - 2 * i,\n                0\n            ],\n            [\n                i * s,\n                0,\n                i,\n                a - a * s,\n                i,\n                a\n            ],\n            [\n                0,\n                r - 2 * a\n            ],\n            [\n                0,\n                a * s,\n                -i * s,\n                a,\n                -i,\n                a\n            ],\n            [\n                2 * i - n,\n                0\n            ],\n            [\n                -i * s,\n                0,\n                -i,\n                -a * s,\n                -i,\n                -a\n            ],\n            [\n                0,\n                2 * a - r\n            ],\n            [\n                0,\n                -a * s,\n                i * s,\n                -a,\n                i,\n                -a\n            ]\n        ], t + i, e, [\n            1,\n            1\n        ], o, !0), this;\n    }, y.__private__.ellipse = y.ellipse = function(t, e, n, r, i) {\n        if (isNaN(t) || isNaN(e) || isNaN(n) || isNaN(r) || !qe(i)) throw new Error(\"Invalid arguments passed to jsPDF.ellipse\");\n        var a = 4 / 3 * (Math.SQRT2 - 1) * n, o = 4 / 3 * (Math.SQRT2 - 1) * r;\n        return We(t + n, e), Ge(t + n, e - o, t + a, e - r, t, e - r), Ge(t - a, e - r, t - n, e - o, t - n, e), Ge(t - n, e + o, t - a, e + r, t, e + r), Ge(t + a, e + r, t + n, e + o, t + n, e), Te(i), this;\n    }, y.__private__.circle = y.circle = function(t, e, n, r) {\n        if (isNaN(t) || isNaN(e) || isNaN(n) || !qe(r)) throw new Error(\"Invalid arguments passed to jsPDF.circle\");\n        return this.ellipse(t, e, n, n, r);\n    }, y.setFont = function(t, e, n) {\n        return n && (e = F(e, n)), At = Ne(t, e, {\n            disableWarning: !1\n        }), this;\n    };\n    var Ye = y.__private__.getFont = y.getFont = function() {\n        return Ft[Ne.apply(y, arguments)];\n    };\n    y.__private__.getFontList = y.getFontList = function() {\n        var t, e, n = {};\n        for(t in It)if (It.hasOwnProperty(t)) for(e in n[t] = [], It[t])It[t].hasOwnProperty(e) && n[t].push(e);\n        return n;\n    }, y.addFont = function(t, e, n, r, i) {\n        var a = [\n            \"StandardEncoding\",\n            \"MacRomanEncoding\",\n            \"Identity-H\",\n            \"WinAnsiEncoding\"\n        ];\n        return arguments[3] && -1 !== a.indexOf(arguments[3]) ? i = arguments[3] : arguments[3] && -1 == a.indexOf(arguments[3]) && (n = F(n, r)), pe.call(this, t, e, n, i = i || \"Identity-H\");\n    };\n    var Je, Xe = e.lineWidth || .200025, Ke = y.__private__.getLineWidth = y.getLineWidth = function() {\n        return Xe;\n    }, Ze = y.__private__.setLineWidth = y.setLineWidth = function(t) {\n        return Xe = t, lt(B(U(t)) + \" w\"), this;\n    };\n    y.__private__.setLineDash = E.API.setLineDash = E.API.setLineDashPattern = function(t, e) {\n        if (t = t || [], e = e || 0, isNaN(e) || !Array.isArray(t)) throw new Error(\"Invalid arguments passed to jsPDF.setLineDash\");\n        return t = t.map(function(t) {\n            return B(U(t));\n        }).join(\" \"), e = B(U(e)), lt(\"[\" + t + \"] \" + e + \" d\"), this;\n    };\n    var $e = y.__private__.getLineHeight = y.getLineHeight = function() {\n        return pt * Je;\n    };\n    y.__private__.getLineHeight = y.getLineHeight = function() {\n        return pt * Je;\n    };\n    var Qe = y.__private__.setLineHeightFactor = y.setLineHeightFactor = function(t) {\n        return \"number\" == typeof (t = t || 1.15) && (Je = t), this;\n    }, tn = y.__private__.getLineHeightFactor = y.getLineHeightFactor = function() {\n        return Je;\n    };\n    Qe(e.lineHeight);\n    var en = y.__private__.getHorizontalCoordinate = function(t) {\n        return U(t);\n    }, nn = y.__private__.getVerticalCoordinate = function(t) {\n        return _ === S ? t : Rt[$].mediaBox.topRightY - Rt[$].mediaBox.bottomLeftY - U(t);\n    }, rn = y.__private__.getHorizontalCoordinateString = y.getHorizontalCoordinateString = function(t) {\n        return B(en(t));\n    }, an = y.__private__.getVerticalCoordinateString = y.getVerticalCoordinateString = function(t) {\n        return B(nn(t));\n    }, on = e.strokeColor || \"0 G\";\n    y.__private__.getStrokeColor = y.getDrawColor = function() {\n        return ee(on);\n    }, y.__private__.setStrokeColor = y.setDrawColor = function(t, e, n, r) {\n        return on = ne({\n            ch1: t,\n            ch2: e,\n            ch3: n,\n            ch4: r,\n            pdfColorType: \"draw\",\n            precision: 2\n        }), lt(on), this;\n    };\n    var sn = e.fillColor || \"0 g\";\n    y.__private__.getFillColor = y.getFillColor = function() {\n        return ee(sn);\n    }, y.__private__.setFillColor = y.setFillColor = function(t, e, n, r) {\n        return sn = ne({\n            ch1: t,\n            ch2: e,\n            ch3: n,\n            ch4: r,\n            pdfColorType: \"fill\",\n            precision: 2\n        }), lt(sn), this;\n    };\n    var un = e.textColor || \"0 g\", cn = y.__private__.getTextColor = y.getTextColor = function() {\n        return ee(un);\n    };\n    y.__private__.setTextColor = y.setTextColor = function(t, e, n, r) {\n        return un = ne({\n            ch1: t,\n            ch2: e,\n            ch3: n,\n            ch4: r,\n            pdfColorType: \"text\",\n            precision: 3\n        }), this;\n    };\n    var ln = e.charSpace, hn = y.__private__.getCharSpace = y.getCharSpace = function() {\n        return parseFloat(ln || 0);\n    };\n    y.__private__.setCharSpace = y.setCharSpace = function(t) {\n        if (isNaN(t)) throw new Error(\"Invalid argument passed to jsPDF.setCharSpace\");\n        return ln = t, this;\n    };\n    var fn = 0;\n    y.CapJoinStyles = {\n        0: 0,\n        butt: 0,\n        but: 0,\n        miter: 0,\n        1: 1,\n        round: 1,\n        rounded: 1,\n        circle: 1,\n        2: 2,\n        projecting: 2,\n        project: 2,\n        square: 2,\n        bevel: 2\n    }, y.__private__.setLineCap = y.setLineCap = function(t) {\n        var e = y.CapJoinStyles[t];\n        if (void 0 === e) throw new Error(\"Line cap style of '\" + t + \"' is not recognized. See or extend .CapJoinStyles property for valid styles\");\n        return fn = e, lt(e + \" J\"), this;\n    };\n    var dn = 0;\n    y.__private__.setLineJoin = y.setLineJoin = function(t) {\n        var e = y.CapJoinStyles[t];\n        if (void 0 === e) throw new Error(\"Line join style of '\" + t + \"' is not recognized. See or extend .CapJoinStyles property for valid styles\");\n        return dn = e, lt(e + \" j\"), this;\n    }, y.__private__.setLineMiterLimit = y.__private__.setMiterLimit = y.setLineMiterLimit = y.setMiterLimit = function(t) {\n        if (t = t || 0, isNaN(t)) throw new Error(\"Invalid argument passed to jsPDF.setLineMiterLimit\");\n        return lt(B(U(t)) + \" M\"), this;\n    }, y.GState = O, y.setGState = function(t) {\n        (t = \"string\" == typeof t ? Bt[Mt[t]] : pn(null, t)).equals(qt) || (lt(\"/\" + t.id + \" gs\"), qt = t);\n    };\n    var pn = function(t, e) {\n        if (!t || !Mt[t]) {\n            var n = !1;\n            for(var r in Bt)if (Bt.hasOwnProperty(r) && Bt[r].equals(e)) {\n                n = !0;\n                break;\n            }\n            if (n) e = Bt[r];\n            else {\n                var i = \"GS\" + (Object.keys(Bt).length + 1).toString(10);\n                Bt[i] = e, e.id = i;\n            }\n            return t && (Mt[t] = e.id), Dt.publish(\"addGState\", e), e;\n        }\n    };\n    y.addGState = function(t, e) {\n        return pn(t, e), this;\n    }, y.saveGraphicsState = function() {\n        return lt(\"q\"), jt.push({\n            key: At,\n            size: pt,\n            color: un\n        }), this;\n    }, y.restoreGraphicsState = function() {\n        lt(\"Q\");\n        var t = jt.pop();\n        return At = t.key, pt = t.size, un = t.color, qt = null, this;\n    }, y.setCurrentTransformationMatrix = function(t) {\n        return lt(t.toString() + \" cm\"), this;\n    }, y.comment = function(t) {\n        return lt(\"#\" + t), this;\n    };\n    var gn = function(t, e) {\n        var n = t || 0;\n        Object.defineProperty(this, \"x\", {\n            enumerable: !0,\n            get: function() {\n                return n;\n            },\n            set: function(t) {\n                isNaN(t) || (n = parseFloat(t));\n            }\n        });\n        var r = e || 0;\n        Object.defineProperty(this, \"y\", {\n            enumerable: !0,\n            get: function() {\n                return r;\n            },\n            set: function(t) {\n                isNaN(t) || (r = parseFloat(t));\n            }\n        });\n        var i = \"pt\";\n        return Object.defineProperty(this, \"type\", {\n            enumerable: !0,\n            get: function() {\n                return i;\n            },\n            set: function(t) {\n                i = t.toString();\n            }\n        }), this;\n    }, mn = function(t, e, n, r) {\n        gn.call(this, t, e), this.type = \"rect\";\n        var i = n || 0;\n        Object.defineProperty(this, \"w\", {\n            enumerable: !0,\n            get: function() {\n                return i;\n            },\n            set: function(t) {\n                isNaN(t) || (i = parseFloat(t));\n            }\n        });\n        var a = r || 0;\n        return Object.defineProperty(this, \"h\", {\n            enumerable: !0,\n            get: function() {\n                return a;\n            },\n            set: function(t) {\n                isNaN(t) || (a = parseFloat(t));\n            }\n        }), this;\n    }, vn = function() {\n        this.page = Et, this.currentPage = $, this.pages = ot.slice(0), this.pagesContext = Rt.slice(0), this.x = _t, this.y = Pt, this.matrix = kt, this.width = wn($), this.height = Ln($), this.outputDestination = ut, this.id = \"\", this.objectNumber = -1;\n    };\n    vn.prototype.restore = function() {\n        Et = this.page, $ = this.currentPage, Rt = this.pagesContext, ot = this.pages, _t = this.x, Pt = this.y, kt = this.matrix, Nn($, this.width), xn($, this.height), ut = this.outputDestination;\n    };\n    var bn = function(t, e, n, r, i) {\n        Ht.push(new vn), Et = $ = 0, ot = [], _t = t, Pt = e, kt = i, me([\n            n,\n            r\n        ]);\n    };\n    for(var yn in y.beginFormObject = function(t, e, n, r, i) {\n        return bn(t, e, n, r, i), this;\n    }, y.endFormObject = function(t) {\n        return function(t) {\n            if (Ut[t]) Ht.pop().restore();\n            else {\n                var e = new vn, n = \"Xo\" + (Object.keys(zt).length + 1).toString(10);\n                e.id = n, Ut[t] = n, zt[n] = e, Dt.publish(\"addFormObject\", e), Ht.pop().restore();\n            }\n        }(t), this;\n    }, y.doFormObject = function(t, e) {\n        var n = zt[Ut[t]];\n        return lt(\"q\"), lt(e.toString() + \" cm\"), lt(\"/\" + n.id + \" Do\"), lt(\"Q\"), this;\n    }, y.getFormObject = function(t) {\n        var e = zt[Ut[t]];\n        return {\n            x: e.x,\n            y: e.y,\n            width: e.width,\n            height: e.height,\n            matrix: e.matrix\n        };\n    }, y.save = function(t, e) {\n        return t = t || \"generated.pdf\", (e = e || {}).returnPromise = e.returnPromise || !1, !1 === e.returnPromise ? (l(ke(Pe()), t), \"function\" == typeof l.unload && i.setTimeout && setTimeout(l.unload, 911), this) : new Promise(function(e, n) {\n            try {\n                var r = l(ke(Pe()), t);\n                \"function\" == typeof l.unload && i.setTimeout && setTimeout(l.unload, 911), e(r);\n            } catch (a) {\n                n(a.message);\n            }\n        });\n    }, E.API)E.API.hasOwnProperty(yn) && (\"events\" === yn && E.API.events.length ? function(t, e) {\n        var n, r, i;\n        for(i = e.length - 1; -1 !== i; i--)n = e[i][0], r = e[i][1], t.subscribe.apply(t, [\n            n\n        ].concat(\"function\" == typeof r ? [\n            r\n        ] : r));\n    }(Dt, E.API.events) : y[yn] = E.API[yn]);\n    function wn(t) {\n        return Rt[t].mediaBox.topRightX - Rt[t].mediaBox.bottomLeftX;\n    }\n    function Nn(t, e) {\n        Rt[t].mediaBox.topRightX = e + Rt[t].mediaBox.bottomLeftX;\n    }\n    function Ln(t) {\n        return Rt[t].mediaBox.topRightY - Rt[t].mediaBox.bottomLeftY;\n    }\n    function xn(t, e) {\n        Rt[t].mediaBox.topRightY = e + Rt[t].mediaBox.bottomLeftY;\n    }\n    var An = y.getPageWidth = function(t) {\n        return wn(t = t || $) / St;\n    }, Sn = y.setPageWidth = function(t, e) {\n        Nn(t, e * St);\n    }, _n = y.getPageHeight = function(t) {\n        return Ln(t = t || $) / St;\n    }, Pn = y.setPageHeight = function(t, e) {\n        xn(t, e * St);\n    };\n    return y.internal = {\n        pdfEscape: ge,\n        getStyle: Ee,\n        getFont: Ye,\n        getFontSize: mt,\n        getCharSpace: hn,\n        getTextColor: cn,\n        getLineHeight: $e,\n        getLineHeightFactor: tn,\n        getLineWidth: Ke,\n        write: ht,\n        getHorizontalCoordinate: en,\n        getVerticalCoordinate: nn,\n        getCoordinateString: rn,\n        getVerticalCoordinateString: an,\n        collections: {},\n        newObject: Xt,\n        newAdditionalObject: $t,\n        newObjectDeferred: Kt,\n        newObjectDeferredBegin: Zt,\n        getFilters: re,\n        putStream: ie,\n        events: Dt,\n        scaleFactor: St,\n        pageSize: {\n            getWidth: function() {\n                return An($);\n            },\n            setWidth: function(t) {\n                Sn($, t);\n            },\n            getHeight: function() {\n                return _n($);\n            },\n            setHeight: function(t) {\n                Pn($, t);\n            }\n        },\n        encryptionOptions: m,\n        encryption: je,\n        getEncryptor: function(t) {\n            return null !== m ? je.encryptor(t, 0) : function(t) {\n                return t;\n            };\n        },\n        output: Fe,\n        getNumberOfPages: we,\n        pages: ot,\n        out: lt,\n        f2: T,\n        f3: z,\n        getPageInfo: Ce,\n        getPageInfoByObjId: Oe,\n        getCurrentPageInfo: Be,\n        getPDFVersion: N,\n        Point: gn,\n        Rectangle: mn,\n        Matrix: Wt,\n        hasHotfix: Ie\n    }, Object.defineProperty(y.internal.pageSize, \"width\", {\n        get: function() {\n            return An($);\n        },\n        set: function(t) {\n            Sn($, t);\n        },\n        enumerable: !0,\n        configurable: !0\n    }), Object.defineProperty(y.internal.pageSize, \"height\", {\n        get: function() {\n            return _n($);\n        },\n        set: function(t) {\n            Pn($, t);\n        },\n        enumerable: !0,\n        configurable: !0\n    }), (function(t) {\n        for(var e = 0, n = dt.length; e < n; e++){\n            var r = pe.call(this, t[e][0], t[e][1], t[e][2], dt[e][3], !0);\n            !1 === v && (b[r] = !0);\n            var i = t[e][0].split(\"-\");\n            de({\n                id: r,\n                fontName: i[0],\n                fontStyle: i[1] || \"\"\n            });\n        }\n        Dt.publish(\"addFonts\", {\n            fonts: Ft,\n            dictionary: It\n        });\n    }).call(y, dt), At = \"F1\", ve(s, r), Dt.publish(\"initialized\"), y;\n}\n_c9 = E;\nI.prototype.lsbFirstWord = function(t) {\n    return String.fromCharCode(255 & t, t >> 8 & 255, t >> 16 & 255, t >> 24 & 255);\n}, I.prototype.toHexString = function(t) {\n    return t.split(\"\").map(function(t) {\n        return (\"0\" + (255 & t.charCodeAt(0)).toString(16)).slice(-2);\n    }).join(\"\");\n}, I.prototype.hexToBytes = function(t) {\n    for(var e = [], n = 0; n < t.length; n += 2)e.push(String.fromCharCode(parseInt(t.substr(n, 2), 16)));\n    return e.join(\"\");\n}, I.prototype.processOwnerPassword = function(t, e) {\n    return k(S(e).substr(0, 5), t);\n}, I.prototype.encryptor = function(t, e) {\n    var n = S(this.encryptionKey + String.fromCharCode(255 & t, t >> 8 & 255, t >> 16 & 255, 255 & e, e >> 8 & 255)).substr(0, 10);\n    return function(t) {\n        return k(n, t);\n    };\n}, O.prototype.equals = function(e) {\n    var n, r = \"id,objectNumber,equals\";\n    if (!e || (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(e) !== (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this)) return !1;\n    var i = 0;\n    for(n in this)if (!(r.indexOf(n) >= 0)) {\n        if (this.hasOwnProperty(n) && !e.hasOwnProperty(n)) return !1;\n        if (this[n] !== e[n]) return !1;\n        i++;\n    }\n    for(n in e)e.hasOwnProperty(n) && r.indexOf(n) < 0 && i--;\n    return 0 === i;\n}, E.API = {\n    events: []\n}, E.version = \"3.0.3\";\nvar R = E.API, D = 1, T = function(t) {\n    return t.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\(/g, \"\\\\(\").replace(/\\)/g, \"\\\\)\");\n}, z = function(t) {\n    return t.replace(/\\\\\\\\/g, \"\\\\\").replace(/\\\\\\(/g, \"(\").replace(/\\\\\\)/g, \")\");\n}, U = function(t) {\n    return t.toFixed(2);\n}, H = function(t) {\n    return t.toFixed(5);\n};\nR.__acroform__ = {};\nvar W = function(t, e) {\n    t.prototype = Object.create(e.prototype), t.prototype.constructor = t;\n}, V = function(t) {\n    return t * D;\n}, G = function(t) {\n    var e = new ct, n = xt.internal.getHeight(t) || 0, r = xt.internal.getWidth(t) || 0;\n    return e.BBox = [\n        0,\n        0,\n        Number(U(r)),\n        Number(U(n))\n    ], e;\n}, Y = R.__acroform__.setBit = function(t, e) {\n    if (t = t || 0, e = e || 0, isNaN(t) || isNaN(e)) throw new Error(\"Invalid arguments passed to jsPDF.API.__acroform__.setBit\");\n    return t | 1 << e;\n}, J = R.__acroform__.clearBit = function(t, e) {\n    if (t = t || 0, e = e || 0, isNaN(t) || isNaN(e)) throw new Error(\"Invalid arguments passed to jsPDF.API.__acroform__.clearBit\");\n    return t & ~(1 << e);\n}, X = R.__acroform__.getBit = function(t, e) {\n    if (isNaN(t) || isNaN(e)) throw new Error(\"Invalid arguments passed to jsPDF.API.__acroform__.getBit\");\n    return t & 1 << e ? 1 : 0;\n}, K = R.__acroform__.getBitForPdf = function(t, e) {\n    if (isNaN(t) || isNaN(e)) throw new Error(\"Invalid arguments passed to jsPDF.API.__acroform__.getBitForPdf\");\n    return X(t, e - 1);\n}, Z = R.__acroform__.setBitForPdf = function(t, e) {\n    if (isNaN(t) || isNaN(e)) throw new Error(\"Invalid arguments passed to jsPDF.API.__acroform__.setBitForPdf\");\n    return Y(t, e - 1);\n}, $ = R.__acroform__.clearBitForPdf = function(t, e) {\n    if (isNaN(t) || isNaN(e)) throw new Error(\"Invalid arguments passed to jsPDF.API.__acroform__.clearBitForPdf\");\n    return J(t, e - 1);\n}, Q = R.__acroform__.calculateCoordinates = function(t, e) {\n    var n = e.internal.getHorizontalCoordinate, r = e.internal.getVerticalCoordinate, i = t[0], a = t[1], o = t[2], s = t[3], u = {};\n    return u.lowerLeft_X = n(i) || 0, u.lowerLeft_Y = r(a + s) || 0, u.upperRight_X = n(i + o) || 0, u.upperRight_Y = r(a) || 0, [\n        Number(U(u.lowerLeft_X)),\n        Number(U(u.lowerLeft_Y)),\n        Number(U(u.upperRight_X)),\n        Number(U(u.upperRight_Y))\n    ];\n}, tt = function(t) {\n    if (t.appearanceStreamContent) return t.appearanceStreamContent;\n    if (t.V || t.DV) {\n        var e = [], n = t._V || t.DV, r = et(t, n), i = t.scope.internal.getFont(t.fontName, t.fontStyle).id;\n        e.push(\"/Tx BMC\"), e.push(\"q\"), e.push(\"BT\"), e.push(t.scope.__private__.encodeColorString(t.color)), e.push(\"/\" + i + \" \" + U(r.fontSize) + \" Tf\"), e.push(\"1 0 0 1 0 0 Tm\"), e.push(r.text), e.push(\"ET\"), e.push(\"Q\"), e.push(\"EMC\");\n        var a = G(t);\n        return a.scope = t.scope, a.stream = e.join(\"\\n\"), a;\n    }\n}, et = function(t, e) {\n    var n = 0 === t.fontSize ? t.maxFontSize : t.fontSize, r = {\n        text: \"\",\n        fontSize: \"\"\n    }, i = (e = \")\" == (e = \"(\" == e.substr(0, 1) ? e.substr(1) : e).substr(e.length - 1) ? e.substr(0, e.length - 1) : e).split(\" \");\n    i = t.multiline ? i.map(function(t) {\n        return t.split(\"\\n\");\n    }) : i.map(function(t) {\n        return [\n            t\n        ];\n    });\n    var a = n, o = xt.internal.getHeight(t) || 0;\n    o = o < 0 ? -o : o;\n    var s = xt.internal.getWidth(t) || 0;\n    s = s < 0 ? -s : s;\n    var u = function(e, n, r) {\n        if (e + 1 < i.length) {\n            var a = n + \" \" + i[e + 1][0];\n            return nt(a, t, r).width <= s - 4;\n        }\n        return !1;\n    };\n    a++;\n    t: for(; a > 0;){\n        e = \"\", a--;\n        var c, l, h = nt(\"3\", t, a).height, f = t.multiline ? o - a : (o - h) / 2, d = f += 2, p = 0, g = 0, m = 0;\n        if (a <= 0) {\n            e = \"(...) Tj\\n\", e += \"% Width of Text: \" + nt(e, t, a = 12).width + \", FieldWidth:\" + s + \"\\n\";\n            break;\n        }\n        for(var v = \"\", b = 0, y = 0; y < i.length; y++)if (i.hasOwnProperty(y)) {\n            var w = !1;\n            if (1 !== i[y].length && m !== i[y].length - 1) {\n                if ((h + 2) * (b + 2) + 2 > o) continue t;\n                v += i[y][m], w = !0, g = y, y--;\n            } else {\n                v = \" \" == (v += i[y][m] + \" \").substr(v.length - 1) ? v.substr(0, v.length - 1) : v;\n                var N = parseInt(y), L = u(N, v, a), x = y >= i.length - 1;\n                if (L && !x) {\n                    v += \" \", m = 0;\n                    continue;\n                }\n                if (L || x) {\n                    if (x) g = N;\n                    else if (t.multiline && (h + 2) * (b + 2) + 2 > o) continue t;\n                } else {\n                    if (!t.multiline) continue t;\n                    if ((h + 2) * (b + 2) + 2 > o) continue t;\n                    g = N;\n                }\n            }\n            for(var A = \"\", S = p; S <= g; S++){\n                var _ = i[S];\n                if (t.multiline) {\n                    if (S === g) {\n                        A += _[m] + \" \", m = (m + 1) % _.length;\n                        continue;\n                    }\n                    if (S === p) {\n                        A += _[_.length - 1] + \" \";\n                        continue;\n                    }\n                }\n                A += _[0] + \" \";\n            }\n            switch(A = \" \" == A.substr(A.length - 1) ? A.substr(0, A.length - 1) : A, l = nt(A, t, a).width, t.textAlign){\n                case \"right\":\n                    c = s - l - 2;\n                    break;\n                case \"center\":\n                    c = (s - l) / 2;\n                    break;\n                default:\n                    c = 2;\n            }\n            e += U(c) + \" \" + U(d) + \" Td\\n\", e += \"(\" + T(A) + \") Tj\\n\", e += -U(c) + \" 0 Td\\n\", d = -(a + 2), l = 0, p = w ? g : g + 1, b++, v = \"\";\n        }\n        break;\n    }\n    return r.text = e, r.fontSize = a, r;\n}, nt = function(t, e, n) {\n    var r = e.scope.internal.getFont(e.fontName, e.fontStyle), i = e.scope.getStringUnitWidth(t, {\n        font: r,\n        fontSize: parseFloat(n),\n        charSpace: 0\n    }) * parseFloat(n);\n    return {\n        height: e.scope.getStringUnitWidth(\"3\", {\n            font: r,\n            fontSize: parseFloat(n),\n            charSpace: 0\n        }) * parseFloat(n) * 1.5,\n        width: i\n    };\n}, rt = {\n    fields: [],\n    xForms: [],\n    acroFormDictionaryRoot: null,\n    printedOut: !1,\n    internal: null,\n    isInitialized: !1\n}, it = function(t, e) {\n    var n = {\n        type: \"reference\",\n        object: t\n    };\n    void 0 === e.internal.getPageInfo(t.page).pageContext.annotations.find(function(t) {\n        return t.type === n.type && t.object === n.object;\n    }) && e.internal.getPageInfo(t.page).pageContext.annotations.push(n);\n}, at = function(e, n) {\n    if (n.scope = e, void 0 !== e.internal && (void 0 === e.internal.acroformPlugin || !1 === e.internal.acroformPlugin.isInitialized)) {\n        if (ht.FieldNum = 0, e.internal.acroformPlugin = JSON.parse(JSON.stringify(rt)), e.internal.acroformPlugin.acroFormDictionaryRoot) throw new Error(\"Exception while creating AcroformDictionary\");\n        D = e.internal.scaleFactor, e.internal.acroformPlugin.acroFormDictionaryRoot = new lt, e.internal.acroformPlugin.acroFormDictionaryRoot.scope = e, e.internal.acroformPlugin.acroFormDictionaryRoot._eventID = e.internal.events.subscribe(\"postPutResources\", function() {\n            !function(t) {\n                t.internal.events.unsubscribe(t.internal.acroformPlugin.acroFormDictionaryRoot._eventID), delete t.internal.acroformPlugin.acroFormDictionaryRoot._eventID, t.internal.acroformPlugin.printedOut = !0;\n            }(e);\n        }), e.internal.events.subscribe(\"buildDocument\", function() {\n            !function(t) {\n                t.internal.acroformPlugin.acroFormDictionaryRoot.objId = void 0;\n                var e = t.internal.acroformPlugin.acroFormDictionaryRoot.Fields;\n                for(var n in e)if (e.hasOwnProperty(n)) {\n                    var r = e[n];\n                    r.objId = void 0, r.hasAnnotation && it(r, t);\n                }\n            }(e);\n        }), e.internal.events.subscribe(\"putCatalog\", function() {\n            !function(t) {\n                if (void 0 === t.internal.acroformPlugin.acroFormDictionaryRoot) throw new Error(\"putCatalogCallback: Root missing.\");\n                t.internal.write(\"/AcroForm \" + t.internal.acroformPlugin.acroFormDictionaryRoot.objId + \" 0 R\");\n            }(e);\n        }), e.internal.events.subscribe(\"postPutPages\", function(n) {\n            !function(e, n) {\n                var r = !e;\n                for(var i in e || (n.internal.newObjectDeferredBegin(n.internal.acroformPlugin.acroFormDictionaryRoot.objId, !0), n.internal.acroformPlugin.acroFormDictionaryRoot.putStream()), e = e || n.internal.acroformPlugin.acroFormDictionaryRoot.Kids)if (e.hasOwnProperty(i)) {\n                    var a = e[i], o = [], s = a.Rect;\n                    if (a.Rect && (a.Rect = Q(a.Rect, n)), n.internal.newObjectDeferredBegin(a.objId, !0), a.DA = xt.createDefaultAppearanceStream(a), \"object\" === (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(a) && \"function\" == typeof a.getKeyValueListForStream && (o = a.getKeyValueListForStream()), a.Rect = s, a.hasAppearanceStream && !a.appearanceStreamContent) {\n                        var u = tt(a);\n                        o.push({\n                            key: \"AP\",\n                            value: \"<</N \" + u + \">>\"\n                        }), n.internal.acroformPlugin.xForms.push(u);\n                    }\n                    if (a.appearanceStreamContent) {\n                        var c = \"\";\n                        for(var l in a.appearanceStreamContent)if (a.appearanceStreamContent.hasOwnProperty(l)) {\n                            var h = a.appearanceStreamContent[l];\n                            if (c += \"/\" + l + \" \", c += \"<<\", Object.keys(h).length >= 1 || Array.isArray(h)) {\n                                for(var i in h)if (h.hasOwnProperty(i)) {\n                                    var f = h[i];\n                                    \"function\" == typeof f && (f = f.call(n, a)), c += \"/\" + i + \" \" + f + \" \", n.internal.acroformPlugin.xForms.indexOf(f) >= 0 || n.internal.acroformPlugin.xForms.push(f);\n                                }\n                            } else \"function\" == typeof (f = h) && (f = f.call(n, a)), c += \"/\" + i + \" \" + f, n.internal.acroformPlugin.xForms.indexOf(f) >= 0 || n.internal.acroformPlugin.xForms.push(f);\n                            c += \">>\";\n                        }\n                        o.push({\n                            key: \"AP\",\n                            value: \"<<\\n\" + c + \">>\"\n                        });\n                    }\n                    n.internal.putStream({\n                        additionalKeyValues: o,\n                        objectId: a.objId\n                    }), n.internal.out(\"endobj\");\n                }\n                r && function(e, n) {\n                    for(var r in e)if (e.hasOwnProperty(r)) {\n                        var i = r, a = e[r];\n                        n.internal.newObjectDeferredBegin(a.objId, !0), \"object\" === (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(a) && \"function\" == typeof a.putStream && a.putStream(), delete e[i];\n                    }\n                }(n.internal.acroformPlugin.xForms, n);\n            }(n, e);\n        }), e.internal.acroformPlugin.isInitialized = !0;\n    }\n}, ot = R.__acroform__.arrayToPdfArray = function(e, n, r) {\n    var i = function(t) {\n        return t;\n    };\n    if (Array.isArray(e)) {\n        for(var a = \"[\", o = 0; o < e.length; o++)switch(0 !== o && (a += \" \"), (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(e[o])){\n            case \"boolean\":\n            case \"number\":\n            case \"object\":\n                a += e[o].toString();\n                break;\n            case \"string\":\n                \"/\" !== e[o].substr(0, 1) ? (void 0 !== n && r && (i = r.internal.getEncryptor(n)), a += \"(\" + T(i(e[o].toString())) + \")\") : a += e[o].toString();\n        }\n        return a + \"]\";\n    }\n    throw new Error(\"Invalid argument passed to jsPDF.__acroform__.arrayToPdfArray\");\n}, st = function(t, e, n) {\n    var r = function(t) {\n        return t;\n    };\n    return void 0 !== e && n && (r = n.internal.getEncryptor(e)), (t = t || \"\").toString(), \"(\" + T(r(t)) + \")\";\n}, ut = function() {\n    this._objId = void 0, this._scope = void 0, Object.defineProperty(this, \"objId\", {\n        get: function() {\n            if (void 0 === this._objId) {\n                if (void 0 === this.scope) return;\n                this._objId = this.scope.internal.newObjectDeferred();\n            }\n            return this._objId;\n        },\n        set: function(t) {\n            this._objId = t;\n        }\n    }), Object.defineProperty(this, \"scope\", {\n        value: this._scope,\n        writable: !0\n    });\n};\nut.prototype.toString = function() {\n    return this.objId + \" 0 R\";\n}, ut.prototype.putStream = function() {\n    var t = this.getKeyValueListForStream();\n    this.scope.internal.putStream({\n        data: this.stream,\n        additionalKeyValues: t,\n        objectId: this.objId\n    }), this.scope.internal.out(\"endobj\");\n}, ut.prototype.getKeyValueListForStream = function() {\n    var t = [], e = Object.getOwnPropertyNames(this).filter(function(t) {\n        return \"content\" != t && \"appearanceStreamContent\" != t && \"scope\" != t && \"objId\" != t && \"_\" != t.substring(0, 1);\n    });\n    for(var n in e)if (!1 === Object.getOwnPropertyDescriptor(this, e[n]).configurable) {\n        var r = e[n], i = this[r];\n        i && (Array.isArray(i) ? t.push({\n            key: r,\n            value: ot(i, this.objId, this.scope)\n        }) : i instanceof ut ? (i.scope = this.scope, t.push({\n            key: r,\n            value: i.objId + \" 0 R\"\n        })) : \"function\" != typeof i && t.push({\n            key: r,\n            value: i\n        }));\n    }\n    return t;\n};\nvar ct = function() {\n    ut.call(this), Object.defineProperty(this, \"Type\", {\n        value: \"/XObject\",\n        configurable: !1,\n        writable: !0\n    }), Object.defineProperty(this, \"Subtype\", {\n        value: \"/Form\",\n        configurable: !1,\n        writable: !0\n    }), Object.defineProperty(this, \"FormType\", {\n        value: 1,\n        configurable: !1,\n        writable: !0\n    });\n    var t, e = [];\n    Object.defineProperty(this, \"BBox\", {\n        configurable: !1,\n        get: function() {\n            return e;\n        },\n        set: function(t) {\n            e = t;\n        }\n    }), Object.defineProperty(this, \"Resources\", {\n        value: \"2 0 R\",\n        configurable: !1,\n        writable: !0\n    }), Object.defineProperty(this, \"stream\", {\n        enumerable: !1,\n        configurable: !0,\n        set: function(e) {\n            t = e.trim();\n        },\n        get: function() {\n            return t || null;\n        }\n    });\n};\nW(ct, ut);\nvar lt = function() {\n    ut.call(this);\n    var t, e = [];\n    Object.defineProperty(this, \"Kids\", {\n        enumerable: !1,\n        configurable: !0,\n        get: function() {\n            return e.length > 0 ? e : void 0;\n        }\n    }), Object.defineProperty(this, \"Fields\", {\n        enumerable: !1,\n        configurable: !1,\n        get: function() {\n            return e;\n        }\n    }), Object.defineProperty(this, \"DA\", {\n        enumerable: !1,\n        configurable: !1,\n        get: function() {\n            if (t) {\n                var e = function(t) {\n                    return t;\n                };\n                return this.scope && (e = this.scope.internal.getEncryptor(this.objId)), \"(\" + T(e(t)) + \")\";\n            }\n        },\n        set: function(e) {\n            t = e;\n        }\n    });\n};\nW(lt, ut);\nvar ht = function t() {\n    ut.call(this);\n    var e = 4;\n    Object.defineProperty(this, \"F\", {\n        enumerable: !1,\n        configurable: !1,\n        get: function() {\n            return e;\n        },\n        set: function(t) {\n            if (isNaN(t)) throw new Error('Invalid value \"' + t + '\" for attribute F supplied.');\n            e = t;\n        }\n    }), Object.defineProperty(this, \"showWhenPrinted\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return Boolean(K(e, 3));\n        },\n        set: function(t) {\n            !0 === Boolean(t) ? this.F = Z(e, 3) : this.F = $(e, 3);\n        }\n    });\n    var n = 0;\n    Object.defineProperty(this, \"Ff\", {\n        enumerable: !1,\n        configurable: !1,\n        get: function() {\n            return n;\n        },\n        set: function(t) {\n            if (isNaN(t)) throw new Error('Invalid value \"' + t + '\" for attribute Ff supplied.');\n            n = t;\n        }\n    });\n    var r = [];\n    Object.defineProperty(this, \"Rect\", {\n        enumerable: !1,\n        configurable: !1,\n        get: function() {\n            if (0 !== r.length) return r;\n        },\n        set: function(t) {\n            r = void 0 !== t ? t : [];\n        }\n    }), Object.defineProperty(this, \"x\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return !r || isNaN(r[0]) ? 0 : r[0];\n        },\n        set: function(t) {\n            r[0] = t;\n        }\n    }), Object.defineProperty(this, \"y\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return !r || isNaN(r[1]) ? 0 : r[1];\n        },\n        set: function(t) {\n            r[1] = t;\n        }\n    }), Object.defineProperty(this, \"width\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return !r || isNaN(r[2]) ? 0 : r[2];\n        },\n        set: function(t) {\n            r[2] = t;\n        }\n    }), Object.defineProperty(this, \"height\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return !r || isNaN(r[3]) ? 0 : r[3];\n        },\n        set: function(t) {\n            r[3] = t;\n        }\n    });\n    var i = \"\";\n    Object.defineProperty(this, \"FT\", {\n        enumerable: !0,\n        configurable: !1,\n        get: function() {\n            return i;\n        },\n        set: function(t) {\n            switch(t){\n                case \"/Btn\":\n                case \"/Tx\":\n                case \"/Ch\":\n                case \"/Sig\":\n                    i = t;\n                    break;\n                default:\n                    throw new Error('Invalid value \"' + t + '\" for attribute FT supplied.');\n            }\n        }\n    });\n    var a = null;\n    Object.defineProperty(this, \"T\", {\n        enumerable: !0,\n        configurable: !1,\n        get: function() {\n            if (!a || a.length < 1) {\n                if (this instanceof yt) return;\n                a = \"FieldObject\" + t.FieldNum++;\n            }\n            var e = function(t) {\n                return t;\n            };\n            return this.scope && (e = this.scope.internal.getEncryptor(this.objId)), \"(\" + T(e(a)) + \")\";\n        },\n        set: function(t) {\n            a = t.toString();\n        }\n    }), Object.defineProperty(this, \"fieldName\", {\n        configurable: !0,\n        enumerable: !0,\n        get: function() {\n            return a;\n        },\n        set: function(t) {\n            a = t;\n        }\n    });\n    var o = \"helvetica\";\n    Object.defineProperty(this, \"fontName\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return o;\n        },\n        set: function(t) {\n            o = t;\n        }\n    });\n    var s = \"normal\";\n    Object.defineProperty(this, \"fontStyle\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return s;\n        },\n        set: function(t) {\n            s = t;\n        }\n    });\n    var u = 0;\n    Object.defineProperty(this, \"fontSize\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return u;\n        },\n        set: function(t) {\n            u = t;\n        }\n    });\n    var c = void 0;\n    Object.defineProperty(this, \"maxFontSize\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return void 0 === c ? 50 / D : c;\n        },\n        set: function(t) {\n            c = t;\n        }\n    });\n    var l = \"black\";\n    Object.defineProperty(this, \"color\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return l;\n        },\n        set: function(t) {\n            l = t;\n        }\n    });\n    var h = \"/F1 0 Tf 0 g\";\n    Object.defineProperty(this, \"DA\", {\n        enumerable: !0,\n        configurable: !1,\n        get: function() {\n            if (!(!h || this instanceof yt || this instanceof Nt)) return st(h, this.objId, this.scope);\n        },\n        set: function(t) {\n            t = t.toString(), h = t;\n        }\n    });\n    var f = null;\n    Object.defineProperty(this, \"DV\", {\n        enumerable: !1,\n        configurable: !1,\n        get: function() {\n            if (f) return this instanceof mt == 0 ? st(f, this.objId, this.scope) : f;\n        },\n        set: function(t) {\n            t = t.toString(), f = this instanceof mt == 0 ? \"(\" === t.substr(0, 1) ? z(t.substr(1, t.length - 2)) : z(t) : t;\n        }\n    }), Object.defineProperty(this, \"defaultValue\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return this instanceof mt == 1 ? z(f.substr(1, f.length - 1)) : f;\n        },\n        set: function(t) {\n            t = t.toString(), f = this instanceof mt == 1 ? \"/\" + t : t;\n        }\n    });\n    var d = null;\n    Object.defineProperty(this, \"_V\", {\n        enumerable: !1,\n        configurable: !1,\n        get: function() {\n            if (d) return d;\n        },\n        set: function(t) {\n            this.V = t;\n        }\n    }), Object.defineProperty(this, \"V\", {\n        enumerable: !1,\n        configurable: !1,\n        get: function() {\n            if (d) return this instanceof mt == 0 ? st(d, this.objId, this.scope) : d;\n        },\n        set: function(t) {\n            t = t.toString(), d = this instanceof mt == 0 ? \"(\" === t.substr(0, 1) ? z(t.substr(1, t.length - 2)) : z(t) : t;\n        }\n    }), Object.defineProperty(this, \"value\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return this instanceof mt == 1 ? z(d.substr(1, d.length - 1)) : d;\n        },\n        set: function(t) {\n            t = t.toString(), d = this instanceof mt == 1 ? \"/\" + t : t;\n        }\n    }), Object.defineProperty(this, \"hasAnnotation\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return this.Rect;\n        }\n    }), Object.defineProperty(this, \"Type\", {\n        enumerable: !0,\n        configurable: !1,\n        get: function() {\n            return this.hasAnnotation ? \"/Annot\" : null;\n        }\n    }), Object.defineProperty(this, \"Subtype\", {\n        enumerable: !0,\n        configurable: !1,\n        get: function() {\n            return this.hasAnnotation ? \"/Widget\" : null;\n        }\n    });\n    var p, g = !1;\n    Object.defineProperty(this, \"hasAppearanceStream\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return g;\n        },\n        set: function(t) {\n            t = Boolean(t), g = t;\n        }\n    }), Object.defineProperty(this, \"page\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            if (p) return p;\n        },\n        set: function(t) {\n            p = t;\n        }\n    }), Object.defineProperty(this, \"readOnly\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return Boolean(K(this.Ff, 1));\n        },\n        set: function(t) {\n            !0 === Boolean(t) ? this.Ff = Z(this.Ff, 1) : this.Ff = $(this.Ff, 1);\n        }\n    }), Object.defineProperty(this, \"required\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return Boolean(K(this.Ff, 2));\n        },\n        set: function(t) {\n            !0 === Boolean(t) ? this.Ff = Z(this.Ff, 2) : this.Ff = $(this.Ff, 2);\n        }\n    }), Object.defineProperty(this, \"noExport\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return Boolean(K(this.Ff, 3));\n        },\n        set: function(t) {\n            !0 === Boolean(t) ? this.Ff = Z(this.Ff, 3) : this.Ff = $(this.Ff, 3);\n        }\n    });\n    var m = null;\n    Object.defineProperty(this, \"Q\", {\n        enumerable: !0,\n        configurable: !1,\n        get: function() {\n            if (null !== m) return m;\n        },\n        set: function(t) {\n            if (-1 === [\n                0,\n                1,\n                2\n            ].indexOf(t)) throw new Error('Invalid value \"' + t + '\" for attribute Q supplied.');\n            m = t;\n        }\n    }), Object.defineProperty(this, \"textAlign\", {\n        get: function() {\n            var t;\n            switch(m){\n                case 0:\n                default:\n                    t = \"left\";\n                    break;\n                case 1:\n                    t = \"center\";\n                    break;\n                case 2:\n                    t = \"right\";\n            }\n            return t;\n        },\n        configurable: !0,\n        enumerable: !0,\n        set: function(t) {\n            switch(t){\n                case \"right\":\n                case 2:\n                    m = 2;\n                    break;\n                case \"center\":\n                case 1:\n                    m = 1;\n                    break;\n                default:\n                    m = 0;\n            }\n        }\n    });\n};\nW(ht, ut);\nvar ft = function() {\n    ht.call(this), this.FT = \"/Ch\", this.V = \"()\", this.fontName = \"zapfdingbats\";\n    var t = 0;\n    Object.defineProperty(this, \"TI\", {\n        enumerable: !0,\n        configurable: !1,\n        get: function() {\n            return t;\n        },\n        set: function(e) {\n            t = e;\n        }\n    }), Object.defineProperty(this, \"topIndex\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return t;\n        },\n        set: function(e) {\n            t = e;\n        }\n    });\n    var e = [];\n    Object.defineProperty(this, \"Opt\", {\n        enumerable: !0,\n        configurable: !1,\n        get: function() {\n            return ot(e, this.objId, this.scope);\n        },\n        set: function(t) {\n            var n, r;\n            r = [], \"string\" == typeof (n = t) && (r = function(t, e, n) {\n                n || (n = 1);\n                for(var r, i = []; r = e.exec(t);)i.push(r[n]);\n                return i;\n            }(n, /\\((.*?)\\)/g)), e = r;\n        }\n    }), this.getOptions = function() {\n        return e;\n    }, this.setOptions = function(t) {\n        e = t, this.sort && e.sort();\n    }, this.addOption = function(t) {\n        t = (t = t || \"\").toString(), e.push(t), this.sort && e.sort();\n    }, this.removeOption = function(t, n) {\n        for(n = n || !1, t = (t = t || \"\").toString(); -1 !== e.indexOf(t) && (e.splice(e.indexOf(t), 1), !1 !== n););\n    }, Object.defineProperty(this, \"combo\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return Boolean(K(this.Ff, 18));\n        },\n        set: function(t) {\n            !0 === Boolean(t) ? this.Ff = Z(this.Ff, 18) : this.Ff = $(this.Ff, 18);\n        }\n    }), Object.defineProperty(this, \"edit\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return Boolean(K(this.Ff, 19));\n        },\n        set: function(t) {\n            !0 === this.combo && (!0 === Boolean(t) ? this.Ff = Z(this.Ff, 19) : this.Ff = $(this.Ff, 19));\n        }\n    }), Object.defineProperty(this, \"sort\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return Boolean(K(this.Ff, 20));\n        },\n        set: function(t) {\n            !0 === Boolean(t) ? (this.Ff = Z(this.Ff, 20), e.sort()) : this.Ff = $(this.Ff, 20);\n        }\n    }), Object.defineProperty(this, \"multiSelect\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return Boolean(K(this.Ff, 22));\n        },\n        set: function(t) {\n            !0 === Boolean(t) ? this.Ff = Z(this.Ff, 22) : this.Ff = $(this.Ff, 22);\n        }\n    }), Object.defineProperty(this, \"doNotSpellCheck\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return Boolean(K(this.Ff, 23));\n        },\n        set: function(t) {\n            !0 === Boolean(t) ? this.Ff = Z(this.Ff, 23) : this.Ff = $(this.Ff, 23);\n        }\n    }), Object.defineProperty(this, \"commitOnSelChange\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return Boolean(K(this.Ff, 27));\n        },\n        set: function(t) {\n            !0 === Boolean(t) ? this.Ff = Z(this.Ff, 27) : this.Ff = $(this.Ff, 27);\n        }\n    }), this.hasAppearanceStream = !1;\n};\nW(ft, ht);\nvar dt = function() {\n    ft.call(this), this.fontName = \"helvetica\", this.combo = !1;\n};\nW(dt, ft);\nvar pt = function() {\n    dt.call(this), this.combo = !0;\n};\nW(pt, dt);\nvar gt = function() {\n    pt.call(this), this.edit = !0;\n};\nW(gt, pt);\nvar mt = function() {\n    ht.call(this), this.FT = \"/Btn\", Object.defineProperty(this, \"noToggleToOff\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return Boolean(K(this.Ff, 15));\n        },\n        set: function(t) {\n            !0 === Boolean(t) ? this.Ff = Z(this.Ff, 15) : this.Ff = $(this.Ff, 15);\n        }\n    }), Object.defineProperty(this, \"radio\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return Boolean(K(this.Ff, 16));\n        },\n        set: function(t) {\n            !0 === Boolean(t) ? this.Ff = Z(this.Ff, 16) : this.Ff = $(this.Ff, 16);\n        }\n    }), Object.defineProperty(this, \"pushButton\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return Boolean(K(this.Ff, 17));\n        },\n        set: function(t) {\n            !0 === Boolean(t) ? this.Ff = Z(this.Ff, 17) : this.Ff = $(this.Ff, 17);\n        }\n    }), Object.defineProperty(this, \"radioIsUnison\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return Boolean(K(this.Ff, 26));\n        },\n        set: function(t) {\n            !0 === Boolean(t) ? this.Ff = Z(this.Ff, 26) : this.Ff = $(this.Ff, 26);\n        }\n    });\n    var e, n = {};\n    Object.defineProperty(this, \"MK\", {\n        enumerable: !1,\n        configurable: !1,\n        get: function() {\n            var t = function(t) {\n                return t;\n            };\n            if (this.scope && (t = this.scope.internal.getEncryptor(this.objId)), 0 !== Object.keys(n).length) {\n                var e, r = [];\n                for(e in r.push(\"<<\"), n)r.push(\"/\" + e + \" (\" + T(t(n[e])) + \")\");\n                return r.push(\">>\"), r.join(\"\\n\");\n            }\n        },\n        set: function(e) {\n            \"object\" === (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(e) && (n = e);\n        }\n    }), Object.defineProperty(this, \"caption\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return n.CA || \"\";\n        },\n        set: function(t) {\n            \"string\" == typeof t && (n.CA = t);\n        }\n    }), Object.defineProperty(this, \"AS\", {\n        enumerable: !1,\n        configurable: !1,\n        get: function() {\n            return e;\n        },\n        set: function(t) {\n            e = t;\n        }\n    }), Object.defineProperty(this, \"appearanceState\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return e.substr(1, e.length - 1);\n        },\n        set: function(t) {\n            e = \"/\" + t;\n        }\n    });\n};\nW(mt, ht);\nvar vt = function() {\n    mt.call(this), this.pushButton = !0;\n};\nW(vt, mt);\nvar bt = function() {\n    mt.call(this), this.radio = !0, this.pushButton = !1;\n    var t = [];\n    Object.defineProperty(this, \"Kids\", {\n        enumerable: !0,\n        configurable: !1,\n        get: function() {\n            return t;\n        },\n        set: function(e) {\n            t = void 0 !== e ? e : [];\n        }\n    });\n};\nW(bt, mt);\nvar yt = function() {\n    var e, n;\n    ht.call(this), Object.defineProperty(this, \"Parent\", {\n        enumerable: !1,\n        configurable: !1,\n        get: function() {\n            return e;\n        },\n        set: function(t) {\n            e = t;\n        }\n    }), Object.defineProperty(this, \"optionName\", {\n        enumerable: !1,\n        configurable: !0,\n        get: function() {\n            return n;\n        },\n        set: function(t) {\n            n = t;\n        }\n    });\n    var r, i = {};\n    Object.defineProperty(this, \"MK\", {\n        enumerable: !1,\n        configurable: !1,\n        get: function() {\n            var t = function(t) {\n                return t;\n            };\n            this.scope && (t = this.scope.internal.getEncryptor(this.objId));\n            var e, n = [];\n            for(e in n.push(\"<<\"), i)n.push(\"/\" + e + \" (\" + T(t(i[e])) + \")\");\n            return n.push(\">>\"), n.join(\"\\n\");\n        },\n        set: function(e) {\n            \"object\" === (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(e) && (i = e);\n        }\n    }), Object.defineProperty(this, \"caption\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return i.CA || \"\";\n        },\n        set: function(t) {\n            \"string\" == typeof t && (i.CA = t);\n        }\n    }), Object.defineProperty(this, \"AS\", {\n        enumerable: !1,\n        configurable: !1,\n        get: function() {\n            return r;\n        },\n        set: function(t) {\n            r = t;\n        }\n    }), Object.defineProperty(this, \"appearanceState\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return r.substr(1, r.length - 1);\n        },\n        set: function(t) {\n            r = \"/\" + t;\n        }\n    }), this.caption = \"l\", this.appearanceState = \"Off\", this._AppearanceType = xt.RadioButton.Circle, this.appearanceStreamContent = this._AppearanceType.createAppearanceStream(this.optionName);\n};\nW(yt, ht), bt.prototype.setAppearance = function(t) {\n    if (!(\"createAppearanceStream\" in t) || !(\"getCA\" in t)) throw new Error(\"Couldn't assign Appearance to RadioButton. Appearance was Invalid!\");\n    for(var e in this.Kids)if (this.Kids.hasOwnProperty(e)) {\n        var n = this.Kids[e];\n        n.appearanceStreamContent = t.createAppearanceStream(n.optionName), n.caption = t.getCA();\n    }\n}, bt.prototype.createOption = function(t) {\n    var e = new yt;\n    return e.Parent = this, e.optionName = t, this.Kids.push(e), At.call(this.scope, e), e;\n};\nvar wt = function() {\n    mt.call(this), this.fontName = \"zapfdingbats\", this.caption = \"3\", this.appearanceState = \"On\", this.value = \"On\", this.textAlign = \"center\", this.appearanceStreamContent = xt.CheckBox.createAppearanceStream();\n};\nW(wt, mt);\nvar Nt = function() {\n    ht.call(this), this.FT = \"/Tx\", Object.defineProperty(this, \"multiline\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return Boolean(K(this.Ff, 13));\n        },\n        set: function(t) {\n            !0 === Boolean(t) ? this.Ff = Z(this.Ff, 13) : this.Ff = $(this.Ff, 13);\n        }\n    }), Object.defineProperty(this, \"fileSelect\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return Boolean(K(this.Ff, 21));\n        },\n        set: function(t) {\n            !0 === Boolean(t) ? this.Ff = Z(this.Ff, 21) : this.Ff = $(this.Ff, 21);\n        }\n    }), Object.defineProperty(this, \"doNotSpellCheck\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return Boolean(K(this.Ff, 23));\n        },\n        set: function(t) {\n            !0 === Boolean(t) ? this.Ff = Z(this.Ff, 23) : this.Ff = $(this.Ff, 23);\n        }\n    }), Object.defineProperty(this, \"doNotScroll\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return Boolean(K(this.Ff, 24));\n        },\n        set: function(t) {\n            !0 === Boolean(t) ? this.Ff = Z(this.Ff, 24) : this.Ff = $(this.Ff, 24);\n        }\n    }), Object.defineProperty(this, \"comb\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return Boolean(K(this.Ff, 25));\n        },\n        set: function(t) {\n            !0 === Boolean(t) ? this.Ff = Z(this.Ff, 25) : this.Ff = $(this.Ff, 25);\n        }\n    }), Object.defineProperty(this, \"richText\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return Boolean(K(this.Ff, 26));\n        },\n        set: function(t) {\n            !0 === Boolean(t) ? this.Ff = Z(this.Ff, 26) : this.Ff = $(this.Ff, 26);\n        }\n    });\n    var t = null;\n    Object.defineProperty(this, \"MaxLen\", {\n        enumerable: !0,\n        configurable: !1,\n        get: function() {\n            return t;\n        },\n        set: function(e) {\n            t = e;\n        }\n    }), Object.defineProperty(this, \"maxLength\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return t;\n        },\n        set: function(e) {\n            Number.isInteger(e) && (t = e);\n        }\n    }), Object.defineProperty(this, \"hasAppearanceStream\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return this.V || this.DV;\n        }\n    });\n};\n_c10 = Nt;\nW(Nt, ht);\nvar Lt = function() {\n    Nt.call(this), Object.defineProperty(this, \"password\", {\n        enumerable: !0,\n        configurable: !0,\n        get: function() {\n            return Boolean(K(this.Ff, 14));\n        },\n        set: function(t) {\n            !0 === Boolean(t) ? this.Ff = Z(this.Ff, 14) : this.Ff = $(this.Ff, 14);\n        }\n    }), this.password = !0;\n};\n_c11 = Lt;\nW(Lt, Nt);\nvar xt = {\n    CheckBox: {\n        createAppearanceStream: function() {\n            return {\n                N: {\n                    On: xt.CheckBox.YesNormal\n                },\n                D: {\n                    On: xt.CheckBox.YesPushDown,\n                    Off: xt.CheckBox.OffPushDown\n                }\n            };\n        },\n        YesPushDown: function(t) {\n            var e = G(t);\n            e.scope = t.scope;\n            var n = [], r = t.scope.internal.getFont(t.fontName, t.fontStyle).id, i = t.scope.__private__.encodeColorString(t.color), a = et(t, t.caption);\n            return n.push(\"0.749023 g\"), n.push(\"0 0 \" + U(xt.internal.getWidth(t)) + \" \" + U(xt.internal.getHeight(t)) + \" re\"), n.push(\"f\"), n.push(\"BMC\"), n.push(\"q\"), n.push(\"0 0 1 rg\"), n.push(\"/\" + r + \" \" + U(a.fontSize) + \" Tf \" + i), n.push(\"BT\"), n.push(a.text), n.push(\"ET\"), n.push(\"Q\"), n.push(\"EMC\"), e.stream = n.join(\"\\n\"), e;\n        },\n        YesNormal: function(t) {\n            var e = G(t);\n            e.scope = t.scope;\n            var n = t.scope.internal.getFont(t.fontName, t.fontStyle).id, r = t.scope.__private__.encodeColorString(t.color), i = [], a = xt.internal.getHeight(t), o = xt.internal.getWidth(t), s = et(t, t.caption);\n            return i.push(\"1 g\"), i.push(\"0 0 \" + U(o) + \" \" + U(a) + \" re\"), i.push(\"f\"), i.push(\"q\"), i.push(\"0 0 1 rg\"), i.push(\"0 0 \" + U(o - 1) + \" \" + U(a - 1) + \" re\"), i.push(\"W\"), i.push(\"n\"), i.push(\"0 g\"), i.push(\"BT\"), i.push(\"/\" + n + \" \" + U(s.fontSize) + \" Tf \" + r), i.push(s.text), i.push(\"ET\"), i.push(\"Q\"), e.stream = i.join(\"\\n\"), e;\n        },\n        OffPushDown: function(t) {\n            var e = G(t);\n            e.scope = t.scope;\n            var n = [];\n            return n.push(\"0.749023 g\"), n.push(\"0 0 \" + U(xt.internal.getWidth(t)) + \" \" + U(xt.internal.getHeight(t)) + \" re\"), n.push(\"f\"), e.stream = n.join(\"\\n\"), e;\n        }\n    },\n    RadioButton: {\n        Circle: {\n            createAppearanceStream: function(t) {\n                var e = {\n                    D: {\n                        Off: xt.RadioButton.Circle.OffPushDown\n                    },\n                    N: {}\n                };\n                return e.N[t] = xt.RadioButton.Circle.YesNormal, e.D[t] = xt.RadioButton.Circle.YesPushDown, e;\n            },\n            getCA: function() {\n                return \"l\";\n            },\n            YesNormal: function(t) {\n                var e = G(t);\n                e.scope = t.scope;\n                var n = [], r = xt.internal.getWidth(t) <= xt.internal.getHeight(t) ? xt.internal.getWidth(t) / 4 : xt.internal.getHeight(t) / 4;\n                r = Number((.9 * r).toFixed(5));\n                var i = xt.internal.Bezier_C, a = Number((r * i).toFixed(5));\n                return n.push(\"q\"), n.push(\"1 0 0 1 \" + H(xt.internal.getWidth(t) / 2) + \" \" + H(xt.internal.getHeight(t) / 2) + \" cm\"), n.push(r + \" 0 m\"), n.push(r + \" \" + a + \" \" + a + \" \" + r + \" 0 \" + r + \" c\"), n.push(\"-\" + a + \" \" + r + \" -\" + r + \" \" + a + \" -\" + r + \" 0 c\"), n.push(\"-\" + r + \" -\" + a + \" -\" + a + \" -\" + r + \" 0 -\" + r + \" c\"), n.push(a + \" -\" + r + \" \" + r + \" -\" + a + \" \" + r + \" 0 c\"), n.push(\"f\"), n.push(\"Q\"), e.stream = n.join(\"\\n\"), e;\n            },\n            YesPushDown: function(t) {\n                var e = G(t);\n                e.scope = t.scope;\n                var n = [], r = xt.internal.getWidth(t) <= xt.internal.getHeight(t) ? xt.internal.getWidth(t) / 4 : xt.internal.getHeight(t) / 4;\n                r = Number((.9 * r).toFixed(5));\n                var i = Number((2 * r).toFixed(5)), a = Number((i * xt.internal.Bezier_C).toFixed(5)), o = Number((r * xt.internal.Bezier_C).toFixed(5));\n                return n.push(\"0.749023 g\"), n.push(\"q\"), n.push(\"1 0 0 1 \" + H(xt.internal.getWidth(t) / 2) + \" \" + H(xt.internal.getHeight(t) / 2) + \" cm\"), n.push(i + \" 0 m\"), n.push(i + \" \" + a + \" \" + a + \" \" + i + \" 0 \" + i + \" c\"), n.push(\"-\" + a + \" \" + i + \" -\" + i + \" \" + a + \" -\" + i + \" 0 c\"), n.push(\"-\" + i + \" -\" + a + \" -\" + a + \" -\" + i + \" 0 -\" + i + \" c\"), n.push(a + \" -\" + i + \" \" + i + \" -\" + a + \" \" + i + \" 0 c\"), n.push(\"f\"), n.push(\"Q\"), n.push(\"0 g\"), n.push(\"q\"), n.push(\"1 0 0 1 \" + H(xt.internal.getWidth(t) / 2) + \" \" + H(xt.internal.getHeight(t) / 2) + \" cm\"), n.push(r + \" 0 m\"), n.push(r + \" \" + o + \" \" + o + \" \" + r + \" 0 \" + r + \" c\"), n.push(\"-\" + o + \" \" + r + \" -\" + r + \" \" + o + \" -\" + r + \" 0 c\"), n.push(\"-\" + r + \" -\" + o + \" -\" + o + \" -\" + r + \" 0 -\" + r + \" c\"), n.push(o + \" -\" + r + \" \" + r + \" -\" + o + \" \" + r + \" 0 c\"), n.push(\"f\"), n.push(\"Q\"), e.stream = n.join(\"\\n\"), e;\n            },\n            OffPushDown: function(t) {\n                var e = G(t);\n                e.scope = t.scope;\n                var n = [], r = xt.internal.getWidth(t) <= xt.internal.getHeight(t) ? xt.internal.getWidth(t) / 4 : xt.internal.getHeight(t) / 4;\n                r = Number((.9 * r).toFixed(5));\n                var i = Number((2 * r).toFixed(5)), a = Number((i * xt.internal.Bezier_C).toFixed(5));\n                return n.push(\"0.749023 g\"), n.push(\"q\"), n.push(\"1 0 0 1 \" + H(xt.internal.getWidth(t) / 2) + \" \" + H(xt.internal.getHeight(t) / 2) + \" cm\"), n.push(i + \" 0 m\"), n.push(i + \" \" + a + \" \" + a + \" \" + i + \" 0 \" + i + \" c\"), n.push(\"-\" + a + \" \" + i + \" -\" + i + \" \" + a + \" -\" + i + \" 0 c\"), n.push(\"-\" + i + \" -\" + a + \" -\" + a + \" -\" + i + \" 0 -\" + i + \" c\"), n.push(a + \" -\" + i + \" \" + i + \" -\" + a + \" \" + i + \" 0 c\"), n.push(\"f\"), n.push(\"Q\"), e.stream = n.join(\"\\n\"), e;\n            }\n        },\n        Cross: {\n            createAppearanceStream: function(t) {\n                var e = {\n                    D: {\n                        Off: xt.RadioButton.Cross.OffPushDown\n                    },\n                    N: {}\n                };\n                return e.N[t] = xt.RadioButton.Cross.YesNormal, e.D[t] = xt.RadioButton.Cross.YesPushDown, e;\n            },\n            getCA: function() {\n                return \"8\";\n            },\n            YesNormal: function(t) {\n                var e = G(t);\n                e.scope = t.scope;\n                var n = [], r = xt.internal.calculateCross(t);\n                return n.push(\"q\"), n.push(\"1 1 \" + U(xt.internal.getWidth(t) - 2) + \" \" + U(xt.internal.getHeight(t) - 2) + \" re\"), n.push(\"W\"), n.push(\"n\"), n.push(U(r.x1.x) + \" \" + U(r.x1.y) + \" m\"), n.push(U(r.x2.x) + \" \" + U(r.x2.y) + \" l\"), n.push(U(r.x4.x) + \" \" + U(r.x4.y) + \" m\"), n.push(U(r.x3.x) + \" \" + U(r.x3.y) + \" l\"), n.push(\"s\"), n.push(\"Q\"), e.stream = n.join(\"\\n\"), e;\n            },\n            YesPushDown: function(t) {\n                var e = G(t);\n                e.scope = t.scope;\n                var n = xt.internal.calculateCross(t), r = [];\n                return r.push(\"0.749023 g\"), r.push(\"0 0 \" + U(xt.internal.getWidth(t)) + \" \" + U(xt.internal.getHeight(t)) + \" re\"), r.push(\"f\"), r.push(\"q\"), r.push(\"1 1 \" + U(xt.internal.getWidth(t) - 2) + \" \" + U(xt.internal.getHeight(t) - 2) + \" re\"), r.push(\"W\"), r.push(\"n\"), r.push(U(n.x1.x) + \" \" + U(n.x1.y) + \" m\"), r.push(U(n.x2.x) + \" \" + U(n.x2.y) + \" l\"), r.push(U(n.x4.x) + \" \" + U(n.x4.y) + \" m\"), r.push(U(n.x3.x) + \" \" + U(n.x3.y) + \" l\"), r.push(\"s\"), r.push(\"Q\"), e.stream = r.join(\"\\n\"), e;\n            },\n            OffPushDown: function(t) {\n                var e = G(t);\n                e.scope = t.scope;\n                var n = [];\n                return n.push(\"0.749023 g\"), n.push(\"0 0 \" + U(xt.internal.getWidth(t)) + \" \" + U(xt.internal.getHeight(t)) + \" re\"), n.push(\"f\"), e.stream = n.join(\"\\n\"), e;\n            }\n        }\n    },\n    createDefaultAppearanceStream: function(t) {\n        var e = t.scope.internal.getFont(t.fontName, t.fontStyle).id, n = t.scope.__private__.encodeColorString(t.color);\n        return \"/\" + e + \" \" + t.fontSize + \" Tf \" + n;\n    }\n};\nxt.internal = {\n    Bezier_C: .551915024494,\n    calculateCross: function(t) {\n        var e = xt.internal.getWidth(t), n = xt.internal.getHeight(t), r = Math.min(e, n);\n        return {\n            x1: {\n                x: (e - r) / 2,\n                y: (n - r) / 2 + r\n            },\n            x2: {\n                x: (e - r) / 2 + r,\n                y: (n - r) / 2\n            },\n            x3: {\n                x: (e - r) / 2,\n                y: (n - r) / 2\n            },\n            x4: {\n                x: (e - r) / 2 + r,\n                y: (n - r) / 2 + r\n            }\n        };\n    }\n}, xt.internal.getWidth = function(e) {\n    var n = 0;\n    return \"object\" === (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(e) && (n = V(e.Rect[2])), n;\n}, xt.internal.getHeight = function(e) {\n    var n = 0;\n    return \"object\" === (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(e) && (n = V(e.Rect[3])), n;\n};\nvar At = R.addField = function(t) {\n    if (at(this, t), !(t instanceof ht)) throw new Error(\"Invalid argument passed to jsPDF.addField.\");\n    var e;\n    return (e = t).scope.internal.acroformPlugin.printedOut && (e.scope.internal.acroformPlugin.printedOut = !1, e.scope.internal.acroformPlugin.acroFormDictionaryRoot = null), e.scope.internal.acroformPlugin.acroFormDictionaryRoot.Fields.push(e), t.page = t.scope.internal.getCurrentPageInfo().pageNumber, this;\n};\nR.AcroFormChoiceField = ft, R.AcroFormListBox = dt, R.AcroFormComboBox = pt, R.AcroFormEditBox = gt, R.AcroFormButton = mt, R.AcroFormPushButton = vt, R.AcroFormRadioButton = bt, R.AcroFormCheckBox = wt, R.AcroFormTextField = Nt, R.AcroFormPasswordField = Lt, R.AcroFormAppearance = xt, R.AcroForm = {\n    ChoiceField: ft,\n    ListBox: dt,\n    ComboBox: pt,\n    EditBox: gt,\n    Button: mt,\n    PushButton: vt,\n    RadioButton: bt,\n    CheckBox: wt,\n    TextField: Nt,\n    PasswordField: Lt,\n    Appearance: xt\n}, E.AcroForm = {\n    ChoiceField: ft,\n    ListBox: dt,\n    ComboBox: pt,\n    EditBox: gt,\n    Button: mt,\n    PushButton: vt,\n    RadioButton: bt,\n    CheckBox: wt,\n    TextField: Nt,\n    PasswordField: Lt,\n    Appearance: xt\n};\nvar St = E.AcroForm;\nfunction _t(t) {\n    return t.reduce(function(t, e, n) {\n        return t[e] = n, t;\n    }, {});\n}\n!function(e) {\n    var n = \"addImage_\";\n    e.__addimage__ = {};\n    var r = \"UNKNOWN\", i = {\n        PNG: [\n            [\n                137,\n                80,\n                78,\n                71\n            ]\n        ],\n        TIFF: [\n            [\n                77,\n                77,\n                0,\n                42\n            ],\n            [\n                73,\n                73,\n                42,\n                0\n            ]\n        ],\n        JPEG: [\n            [\n                255,\n                216,\n                255,\n                224,\n                void 0,\n                void 0,\n                74,\n                70,\n                73,\n                70,\n                0\n            ],\n            [\n                255,\n                216,\n                255,\n                225,\n                void 0,\n                void 0,\n                69,\n                120,\n                105,\n                102,\n                0,\n                0\n            ],\n            [\n                255,\n                216,\n                255,\n                219\n            ],\n            [\n                255,\n                216,\n                255,\n                238\n            ]\n        ],\n        JPEG2000: [\n            [\n                0,\n                0,\n                0,\n                12,\n                106,\n                80,\n                32,\n                32\n            ]\n        ],\n        GIF87a: [\n            [\n                71,\n                73,\n                70,\n                56,\n                55,\n                97\n            ]\n        ],\n        GIF89a: [\n            [\n                71,\n                73,\n                70,\n                56,\n                57,\n                97\n            ]\n        ],\n        WEBP: [\n            [\n                82,\n                73,\n                70,\n                70,\n                void 0,\n                void 0,\n                void 0,\n                void 0,\n                87,\n                69,\n                66,\n                80\n            ]\n        ],\n        BMP: [\n            [\n                66,\n                77\n            ],\n            [\n                66,\n                65\n            ],\n            [\n                67,\n                73\n            ],\n            [\n                67,\n                80\n            ],\n            [\n                73,\n                67\n            ],\n            [\n                80,\n                84\n            ]\n        ]\n    }, a = e.__addimage__.getImageFileTypeByImageData = function(t, e) {\n        var n, a, o, s, u, c = r;\n        if (\"RGBA\" === (e = e || r) || void 0 !== t.data && t.data instanceof Uint8ClampedArray && \"height\" in t && \"width\" in t) return \"RGBA\";\n        if (A(t)) for(u in i)for(o = i[u], n = 0; n < o.length; n += 1){\n            for(s = !0, a = 0; a < o[n].length; a += 1)if (void 0 !== o[n][a] && o[n][a] !== t[a]) {\n                s = !1;\n                break;\n            }\n            if (!0 === s) {\n                c = u;\n                break;\n            }\n        }\n        else for(u in i)for(o = i[u], n = 0; n < o.length; n += 1){\n            for(s = !0, a = 0; a < o[n].length; a += 1)if (void 0 !== o[n][a] && o[n][a] !== t.charCodeAt(a)) {\n                s = !1;\n                break;\n            }\n            if (!0 === s) {\n                c = u;\n                break;\n            }\n        }\n        return c === r && e !== r && (c = e), c;\n    }, o = function t(e) {\n        for(var n = this.internal.write, r = this.internal.putStream, i = (0, this.internal.getFilters)(); -1 !== i.indexOf(\"FlateEncode\");)i.splice(i.indexOf(\"FlateEncode\"), 1);\n        e.objectId = this.internal.newObject();\n        var a = [];\n        if (a.push({\n            key: \"Type\",\n            value: \"/XObject\"\n        }), a.push({\n            key: \"Subtype\",\n            value: \"/Image\"\n        }), a.push({\n            key: \"Width\",\n            value: e.width\n        }), a.push({\n            key: \"Height\",\n            value: e.height\n        }), e.colorSpace === y.INDEXED ? a.push({\n            key: \"ColorSpace\",\n            value: \"[/Indexed /DeviceRGB \" + (e.palette.length / 3 - 1) + \" \" + (\"sMask\" in e && void 0 !== e.sMask ? e.objectId + 2 : e.objectId + 1) + \" 0 R]\"\n        }) : (a.push({\n            key: \"ColorSpace\",\n            value: \"/\" + e.colorSpace\n        }), e.colorSpace === y.DEVICE_CMYK && a.push({\n            key: \"Decode\",\n            value: \"[1 0 1 0 1 0 1 0]\"\n        })), a.push({\n            key: \"BitsPerComponent\",\n            value: e.bitsPerComponent\n        }), \"decodeParameters\" in e && void 0 !== e.decodeParameters && a.push({\n            key: \"DecodeParms\",\n            value: \"<<\" + e.decodeParameters + \">>\"\n        }), \"transparency\" in e && Array.isArray(e.transparency) && e.transparency.length > 0) {\n            for(var o = \"\", s = 0, u = e.transparency.length; s < u; s++)o += e.transparency[s] + \" \" + e.transparency[s] + \" \";\n            a.push({\n                key: \"Mask\",\n                value: \"[\" + o + \"]\"\n            });\n        }\n        void 0 !== e.sMask && a.push({\n            key: \"SMask\",\n            value: e.objectId + 1 + \" 0 R\"\n        });\n        var c = void 0 !== e.filter ? [\n            \"/\" + e.filter\n        ] : void 0;\n        if (r({\n            data: e.data,\n            additionalKeyValues: a,\n            alreadyAppliedFilters: c,\n            objectId: e.objectId\n        }), n(\"endobj\"), \"sMask\" in e && void 0 !== e.sMask) {\n            var l, h = null !== (l = e.sMaskBitsPerComponent) && void 0 !== l ? l : e.bitsPerComponent, f = {\n                width: e.width,\n                height: e.height,\n                colorSpace: \"DeviceGray\",\n                bitsPerComponent: h,\n                data: e.sMask\n            };\n            \"filter\" in e && (f.decodeParameters = \"/Predictor \".concat(e.predictor, \" /Colors 1 /BitsPerComponent \").concat(h, \" /Columns \").concat(e.width), f.filter = e.filter), t.call(this, f);\n        }\n        if (e.colorSpace === y.INDEXED) {\n            var d = this.internal.newObject();\n            r({\n                data: _(new Uint8Array(e.palette)),\n                objectId: d\n            }), n(\"endobj\");\n        }\n    }, s = function() {\n        var t = this.internal.collections[n + \"images\"];\n        for(var e in t)o.call(this, t[e]);\n    }, u = function() {\n        var t, e = this.internal.collections[n + \"images\"], r = this.internal.write;\n        for(var i in e)r(\"/I\" + (t = e[i]).index, t.objectId, \"0\", \"R\");\n    }, c = function() {\n        this.internal.collections[n + \"images\"] || (this.internal.collections[n + \"images\"] = {}, this.internal.events.subscribe(\"putResources\", s), this.internal.events.subscribe(\"putXobjectDict\", u));\n    }, l = function() {\n        var t = this.internal.collections[n + \"images\"];\n        return c.call(this), t;\n    }, h = function() {\n        return Object.keys(this.internal.collections[n + \"images\"]).length;\n    }, d = function(t) {\n        return \"function\" == typeof e[\"process\" + t.toUpperCase()];\n    }, p = function(e) {\n        return \"object\" === (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(e) && 1 === e.nodeType;\n    }, g = function(t, n) {\n        if (\"IMG\" === t.nodeName && t.hasAttribute(\"src\")) {\n            var r = \"\" + t.getAttribute(\"src\");\n            if (0 === r.indexOf(\"data:image/\")) return f(unescape(r).split(\"base64,\").pop());\n            var i = e.loadFile(r, !0);\n            if (void 0 !== i) return i;\n        }\n        if (\"CANVAS\" === t.nodeName) {\n            if (0 === t.width || 0 === t.height) throw new Error(\"Given canvas must have data. Canvas width: \" + t.width + \", height: \" + t.height);\n            var a;\n            switch(n){\n                case \"PNG\":\n                    a = \"image/png\";\n                    break;\n                case \"WEBP\":\n                    a = \"image/webp\";\n                    break;\n                default:\n                    a = \"image/jpeg\";\n            }\n            return f(t.toDataURL(a, 1).split(\"base64,\").pop());\n        }\n    }, m = function(t) {\n        var e = this.internal.collections[n + \"images\"];\n        if (e) {\n            for(var r in e)if (t === e[r].alias) return e[r];\n        }\n    }, v = function(t, e, n) {\n        return t || e || (t = -96, e = -96), t < 0 && (t = -1 * n.width * 72 / t / this.internal.scaleFactor), e < 0 && (e = -1 * n.height * 72 / e / this.internal.scaleFactor), 0 === t && (t = e * n.width / n.height), 0 === e && (e = t * n.height / n.width), [\n            t,\n            e\n        ];\n    }, b = function(t, e, n, r, i, a) {\n        var o = v.call(this, n, r, i), s = this.internal.getCoordinateString, u = this.internal.getVerticalCoordinateString, c = l.call(this);\n        if (n = o[0], r = o[1], c[i.index] = i, a) {\n            a *= Math.PI / 180;\n            var h = Math.cos(a), f = Math.sin(a), d = function(t) {\n                return t.toFixed(4);\n            }, p = [\n                d(h),\n                d(f),\n                d(-1 * f),\n                d(h),\n                0,\n                0,\n                \"cm\"\n            ];\n        }\n        this.internal.write(\"q\"), a ? (this.internal.write([\n            1,\n            \"0\",\n            \"0\",\n            1,\n            s(t),\n            u(e + r),\n            \"cm\"\n        ].join(\" \")), this.internal.write(p.join(\" \")), this.internal.write([\n            s(n),\n            \"0\",\n            \"0\",\n            s(r),\n            \"0\",\n            \"0\",\n            \"cm\"\n        ].join(\" \"))) : this.internal.write([\n            s(n),\n            \"0\",\n            \"0\",\n            s(r),\n            s(t),\n            u(e + r),\n            \"cm\"\n        ].join(\" \")), this.isAdvancedAPI() && this.internal.write([\n            1,\n            0,\n            0,\n            -1,\n            0,\n            0,\n            \"cm\"\n        ].join(\" \")), this.internal.write(\"/I\" + i.index + \" Do\"), this.internal.write(\"Q\");\n    }, y = e.color_spaces = {\n        DEVICE_RGB: \"DeviceRGB\",\n        DEVICE_GRAY: \"DeviceGray\",\n        DEVICE_CMYK: \"DeviceCMYK\",\n        CAL_GREY: \"CalGray\",\n        CAL_RGB: \"CalRGB\",\n        LAB: \"Lab\",\n        ICC_BASED: \"ICCBased\",\n        INDEXED: \"Indexed\",\n        PATTERN: \"Pattern\",\n        SEPARATION: \"Separation\",\n        DEVICE_N: \"DeviceN\"\n    };\n    e.decode = {\n        DCT_DECODE: \"DCTDecode\",\n        FLATE_DECODE: \"FlateDecode\",\n        LZW_DECODE: \"LZWDecode\",\n        JPX_DECODE: \"JPXDecode\",\n        JBIG2_DECODE: \"JBIG2Decode\",\n        ASCII85_DECODE: \"ASCII85Decode\",\n        ASCII_HEX_DECODE: \"ASCIIHexDecode\",\n        RUN_LENGTH_DECODE: \"RunLengthDecode\",\n        CCITT_FAX_DECODE: \"CCITTFaxDecode\"\n    };\n    var w = e.image_compression = {\n        NONE: \"NONE\",\n        FAST: \"FAST\",\n        MEDIUM: \"MEDIUM\",\n        SLOW: \"SLOW\"\n    }, N = e.__addimage__.sHashCode = function(t) {\n        var e, n, r = 0;\n        if (\"string\" == typeof t) for(n = t.length, e = 0; e < n; e++)r = (r << 5) - r + t.charCodeAt(e), r |= 0;\n        else if (A(t)) for(n = t.byteLength / 2, e = 0; e < n; e++)r = (r << 5) - r + t[e], r |= 0;\n        return r;\n    }, L = e.__addimage__.validateStringAsBase64 = function(t) {\n        (t = t || \"\").toString().trim();\n        var e = !0;\n        return 0 === t.length && (e = !1), t.length % 4 != 0 && (e = !1), !1 === /^[A-Za-z0-9+/]+$/.test(t.substr(0, t.length - 2)) && (e = !1), !1 === /^[A-Za-z0-9/][A-Za-z0-9+/]|[A-Za-z0-9+/]=|==$/.test(t.substr(-2)) && (e = !1), e;\n    }, x = e.__addimage__.extractImageFromDataUrl = function(t) {\n        if (null == t) return null;\n        if (!(t = t.trim()).startsWith(\"data:\")) return null;\n        var e = t.indexOf(\",\");\n        return e < 0 ? null : t.substring(0, e).trim().endsWith(\"base64\") ? t.substring(e + 1) : null;\n    };\n    e.__addimage__.isArrayBuffer = function(t) {\n        return t instanceof ArrayBuffer;\n    };\n    var A = e.__addimage__.isArrayBufferView = function(t) {\n        return t instanceof Int8Array || t instanceof Uint8Array || t instanceof Uint8ClampedArray || t instanceof Int16Array || t instanceof Uint16Array || t instanceof Int32Array || t instanceof Uint32Array || t instanceof Float32Array || t instanceof Float64Array;\n    }, S = e.__addimage__.binaryStringToUint8Array = function(t) {\n        for(var e = t.length, n = new Uint8Array(e), r = 0; r < e; r++)n[r] = t.charCodeAt(r);\n        return n;\n    }, _ = e.__addimage__.arrayBufferToBinaryString = function(t) {\n        for(var e = \"\", n = A(t) ? t : new Uint8Array(t), r = 0; r < n.length; r += 8192)e += String.fromCharCode.apply(null, n.subarray(r, r + 8192));\n        return e;\n    };\n    e.addImage = function() {\n        var e, n, i, a, o, s, u, l, h;\n        if (\"number\" == typeof arguments[1] ? (n = r, i = arguments[1], a = arguments[2], o = arguments[3], s = arguments[4], u = arguments[5], l = arguments[6], h = arguments[7]) : (n = arguments[1], i = arguments[2], a = arguments[3], o = arguments[4], s = arguments[5], u = arguments[6], l = arguments[7], h = arguments[8]), \"object\" === (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(e = arguments[0]) && !p(e) && \"imageData\" in e) {\n            var f = e;\n            e = f.imageData, n = f.format || n || r, i = f.x || i || 0, a = f.y || a || 0, o = f.w || f.width || o, s = f.h || f.height || s, u = f.alias || u, l = f.compression || l, h = f.rotation || f.angle || h;\n        }\n        var d = this.internal.getFilters();\n        if (void 0 === l && -1 !== d.indexOf(\"FlateEncode\") && (l = \"SLOW\"), isNaN(i) || isNaN(a)) throw new Error(\"Invalid coordinates passed to jsPDF.addImage\");\n        c.call(this);\n        var g = P.call(this, e, n, u, l);\n        return b.call(this, i, a, o, s, g, h), this;\n    };\n    var P = function(t, n, i, o) {\n        var s, u, c;\n        if (\"string\" == typeof t && a(t) === r) {\n            t = unescape(t);\n            var l = k(t, !1);\n            (\"\" !== l || void 0 !== (l = e.loadFile(t, !0))) && (t = l);\n        }\n        if (p(t) && (t = g(t, n)), n = a(t, n), !d(n)) throw new Error(\"addImage does not support files of type '\" + n + \"', please ensure that a plugin for '\" + n + \"' support is added.\");\n        if ((null == (c = i) || 0 === c.length) && (i = function(t) {\n            return \"string\" == typeof t || A(t) ? N(t) : A(t.data) ? N(t.data) : null;\n        }(t)), (s = m.call(this, i)) || (t instanceof Uint8Array || \"RGBA\" === n || (u = t, t = S(t)), s = this[\"process\" + n.toUpperCase()](t, h.call(this), i, function(t) {\n            return t && \"string\" == typeof t && (t = t.toUpperCase()), t in e.image_compression ? t : w.NONE;\n        }(o), u)), !s) throw new Error(\"An unknown error occurred whilst processing the image.\");\n        return s;\n    }, k = e.__addimage__.convertBase64ToBinaryString = function(t, e) {\n        e = \"boolean\" != typeof e || e;\n        var n, r = \"\";\n        if (\"string\" == typeof t) {\n            var i;\n            n = null !== (i = x(t)) && void 0 !== i ? i : t;\n            try {\n                r = f(n);\n            } catch (a) {\n                if (e) throw L(n) ? new Error(\"atob-Error in jsPDF.convertBase64ToBinaryString \" + a.message) : new Error(\"Supplied Data is not a valid base64-String jsPDF.convertBase64ToBinaryString \");\n            }\n        }\n        return r;\n    };\n    e.getImageProperties = function(t) {\n        var n, i, o = \"\";\n        if (p(t) && (t = g(t)), \"string\" == typeof t && a(t) === r && (\"\" === (o = k(t, !1)) && (o = e.loadFile(t) || \"\"), t = o), i = a(t), !d(i)) throw new Error(\"addImage does not support files of type '\" + i + \"', please ensure that a plugin for '\" + i + \"' support is added.\");\n        if (t instanceof Uint8Array || (t = S(t)), !(n = this[\"process\" + i.toUpperCase()](t))) throw new Error(\"An unknown error occurred whilst processing the image\");\n        return n.fileType = i, n;\n    };\n}(E.API), /**\n * @license\n * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv\n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */ function(t) {\n    var e = function(t) {\n        if (void 0 !== t && \"\" != t) return !0;\n    };\n    E.API.events.push([\n        \"addPage\",\n        function(t) {\n            this.internal.getPageInfo(t.pageNumber).pageContext.annotations = [];\n        }\n    ]), t.events.push([\n        \"putPage\",\n        function(t) {\n            for(var n, r, i, a = this.internal.getCoordinateString, o = this.internal.getVerticalCoordinateString, s = this.internal.getPageInfoByObjId(t.objId), u = t.pageContext.annotations, c = !1, l = 0; l < u.length && !c; l++)switch((n = u[l]).type){\n                case \"link\":\n                    (e(n.options.url) || e(n.options.pageNumber)) && (c = !0);\n                    break;\n                case \"reference\":\n                case \"text\":\n                case \"freetext\":\n                    c = !0;\n            }\n            if (0 != c) {\n                this.internal.write(\"/Annots [\");\n                for(var h = 0; h < u.length; h++){\n                    n = u[h];\n                    var f = this.internal.pdfEscape, d = this.internal.getEncryptor(t.objId);\n                    switch(n.type){\n                        case \"reference\":\n                            this.internal.write(\" \" + n.object.objId + \" 0 R \");\n                            break;\n                        case \"text\":\n                            var p = this.internal.newAdditionalObject(), g = this.internal.newAdditionalObject(), m = this.internal.getEncryptor(p.objId), v = n.title || \"Note\";\n                            i = \"<</Type /Annot /Subtype /Text \" + (r = \"/Rect [\" + a(n.bounds.x) + \" \" + o(n.bounds.y + n.bounds.h) + \" \" + a(n.bounds.x + n.bounds.w) + \" \" + o(n.bounds.y) + \"] \") + \"/Contents (\" + f(m(n.contents)) + \")\", i += \" /Popup \" + g.objId + \" 0 R\", i += \" /P \" + s.objId + \" 0 R\", i += \" /T (\" + f(m(v)) + \") >>\", p.content = i;\n                            var b = p.objId + \" 0 R\";\n                            i = \"<</Type /Annot /Subtype /Popup \" + (r = \"/Rect [\" + a(n.bounds.x + 30) + \" \" + o(n.bounds.y + n.bounds.h) + \" \" + a(n.bounds.x + n.bounds.w + 30) + \" \" + o(n.bounds.y) + \"] \") + \" /Parent \" + b, n.open && (i += \" /Open true\"), i += \" >>\", g.content = i, this.internal.write(p.objId, \"0 R\", g.objId, \"0 R\");\n                            break;\n                        case \"freetext\":\n                            r = \"/Rect [\" + a(n.bounds.x) + \" \" + o(n.bounds.y) + \" \" + a(n.bounds.x + n.bounds.w) + \" \" + o(n.bounds.y + n.bounds.h) + \"] \";\n                            var y = n.color || \"#000000\";\n                            i = \"<</Type /Annot /Subtype /FreeText \" + r + \"/Contents (\" + f(d(n.contents)) + \")\", i += \" /DS(font: Helvetica,sans-serif 12.0pt; text-align:left; color:#\" + y + \")\", i += \" /Border [0 0 0]\", i += \" >>\", this.internal.write(i);\n                            break;\n                        case \"link\":\n                            if (n.options.name) {\n                                var w = this.annotations._nameMap[n.options.name];\n                                n.options.pageNumber = w.page, n.options.top = w.y;\n                            } else n.options.top || (n.options.top = 0);\n                            if (r = \"/Rect [\" + n.finalBounds.x + \" \" + n.finalBounds.y + \" \" + n.finalBounds.w + \" \" + n.finalBounds.h + \"] \", i = \"\", n.options.url) i = \"<</Type /Annot /Subtype /Link \" + r + \"/Border [0 0 0] /A <</S /URI /URI (\" + f(d(n.options.url)) + \") >>\";\n                            else if (n.options.pageNumber) switch(i = \"<</Type /Annot /Subtype /Link \" + r + \"/Border [0 0 0] /Dest [\" + this.internal.getPageInfo(n.options.pageNumber).objId + \" 0 R\", n.options.magFactor = n.options.magFactor || \"XYZ\", n.options.magFactor){\n                                case \"Fit\":\n                                    i += \" /Fit]\";\n                                    break;\n                                case \"FitH\":\n                                    i += \" /FitH \" + n.options.top + \"]\";\n                                    break;\n                                case \"FitV\":\n                                    n.options.left = n.options.left || 0, i += \" /FitV \" + n.options.left + \"]\";\n                                    break;\n                                default:\n                                    var N = o(n.options.top);\n                                    n.options.left = n.options.left || 0, void 0 === n.options.zoom && (n.options.zoom = 0), i += \" /XYZ \" + n.options.left + \" \" + N + \" \" + n.options.zoom + \"]\";\n                            }\n                            \"\" != i && (i += \" >>\", this.internal.write(i));\n                    }\n                }\n                this.internal.write(\"]\");\n            }\n        }\n    ]), t.createAnnotation = function(t) {\n        var e = this.internal.getCurrentPageInfo();\n        switch(t.type){\n            case \"link\":\n                this.link(t.bounds.x, t.bounds.y, t.bounds.w, t.bounds.h, t);\n                break;\n            case \"text\":\n            case \"freetext\":\n                e.pageContext.annotations.push(t);\n        }\n    }, t.link = function(t, e, n, r, i) {\n        var a = this.internal.getCurrentPageInfo(), o = this.internal.getCoordinateString, s = this.internal.getVerticalCoordinateString;\n        a.pageContext.annotations.push({\n            finalBounds: {\n                x: o(t),\n                y: s(e),\n                w: o(t + n),\n                h: s(e + r)\n            },\n            options: i,\n            type: \"link\"\n        });\n    }, t.textWithLink = function(t, e, n, r) {\n        var i, a, o = this.getTextWidth(t), s = this.internal.getLineHeight() / this.internal.scaleFactor;\n        if (void 0 !== r.maxWidth) {\n            a = r.maxWidth;\n            var u = this.splitTextToSize(t, a).length;\n            i = Math.ceil(s * u);\n        } else a = o, i = s;\n        return this.text(t, e, n, r), n += .2 * s, \"center\" === r.align && (e -= o / 2), \"right\" === r.align && (e -= o), this.link(e, n - s, a, i, r), o;\n    }, t.getTextWidth = function(t) {\n        var e = this.internal.getFontSize();\n        return this.getStringUnitWidth(t) * e / this.internal.scaleFactor;\n    };\n}(E.API), /**\n * @license\n * Copyright (c) 2017 Aras Abbasi\n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */ function(t) {\n    var e = {\n        1569: [\n            65152\n        ],\n        1570: [\n            65153,\n            65154\n        ],\n        1571: [\n            65155,\n            65156\n        ],\n        1572: [\n            65157,\n            65158\n        ],\n        1573: [\n            65159,\n            65160\n        ],\n        1574: [\n            65161,\n            65162,\n            65163,\n            65164\n        ],\n        1575: [\n            65165,\n            65166\n        ],\n        1576: [\n            65167,\n            65168,\n            65169,\n            65170\n        ],\n        1577: [\n            65171,\n            65172\n        ],\n        1578: [\n            65173,\n            65174,\n            65175,\n            65176\n        ],\n        1579: [\n            65177,\n            65178,\n            65179,\n            65180\n        ],\n        1580: [\n            65181,\n            65182,\n            65183,\n            65184\n        ],\n        1581: [\n            65185,\n            65186,\n            65187,\n            65188\n        ],\n        1582: [\n            65189,\n            65190,\n            65191,\n            65192\n        ],\n        1583: [\n            65193,\n            65194\n        ],\n        1584: [\n            65195,\n            65196\n        ],\n        1585: [\n            65197,\n            65198\n        ],\n        1586: [\n            65199,\n            65200\n        ],\n        1587: [\n            65201,\n            65202,\n            65203,\n            65204\n        ],\n        1588: [\n            65205,\n            65206,\n            65207,\n            65208\n        ],\n        1589: [\n            65209,\n            65210,\n            65211,\n            65212\n        ],\n        1590: [\n            65213,\n            65214,\n            65215,\n            65216\n        ],\n        1591: [\n            65217,\n            65218,\n            65219,\n            65220\n        ],\n        1592: [\n            65221,\n            65222,\n            65223,\n            65224\n        ],\n        1593: [\n            65225,\n            65226,\n            65227,\n            65228\n        ],\n        1594: [\n            65229,\n            65230,\n            65231,\n            65232\n        ],\n        1601: [\n            65233,\n            65234,\n            65235,\n            65236\n        ],\n        1602: [\n            65237,\n            65238,\n            65239,\n            65240\n        ],\n        1603: [\n            65241,\n            65242,\n            65243,\n            65244\n        ],\n        1604: [\n            65245,\n            65246,\n            65247,\n            65248\n        ],\n        1605: [\n            65249,\n            65250,\n            65251,\n            65252\n        ],\n        1606: [\n            65253,\n            65254,\n            65255,\n            65256\n        ],\n        1607: [\n            65257,\n            65258,\n            65259,\n            65260\n        ],\n        1608: [\n            65261,\n            65262\n        ],\n        1609: [\n            65263,\n            65264,\n            64488,\n            64489\n        ],\n        1610: [\n            65265,\n            65266,\n            65267,\n            65268\n        ],\n        1649: [\n            64336,\n            64337\n        ],\n        1655: [\n            64477\n        ],\n        1657: [\n            64358,\n            64359,\n            64360,\n            64361\n        ],\n        1658: [\n            64350,\n            64351,\n            64352,\n            64353\n        ],\n        1659: [\n            64338,\n            64339,\n            64340,\n            64341\n        ],\n        1662: [\n            64342,\n            64343,\n            64344,\n            64345\n        ],\n        1663: [\n            64354,\n            64355,\n            64356,\n            64357\n        ],\n        1664: [\n            64346,\n            64347,\n            64348,\n            64349\n        ],\n        1667: [\n            64374,\n            64375,\n            64376,\n            64377\n        ],\n        1668: [\n            64370,\n            64371,\n            64372,\n            64373\n        ],\n        1670: [\n            64378,\n            64379,\n            64380,\n            64381\n        ],\n        1671: [\n            64382,\n            64383,\n            64384,\n            64385\n        ],\n        1672: [\n            64392,\n            64393\n        ],\n        1676: [\n            64388,\n            64389\n        ],\n        1677: [\n            64386,\n            64387\n        ],\n        1678: [\n            64390,\n            64391\n        ],\n        1681: [\n            64396,\n            64397\n        ],\n        1688: [\n            64394,\n            64395\n        ],\n        1700: [\n            64362,\n            64363,\n            64364,\n            64365\n        ],\n        1702: [\n            64366,\n            64367,\n            64368,\n            64369\n        ],\n        1705: [\n            64398,\n            64399,\n            64400,\n            64401\n        ],\n        1709: [\n            64467,\n            64468,\n            64469,\n            64470\n        ],\n        1711: [\n            64402,\n            64403,\n            64404,\n            64405\n        ],\n        1713: [\n            64410,\n            64411,\n            64412,\n            64413\n        ],\n        1715: [\n            64406,\n            64407,\n            64408,\n            64409\n        ],\n        1722: [\n            64414,\n            64415\n        ],\n        1723: [\n            64416,\n            64417,\n            64418,\n            64419\n        ],\n        1726: [\n            64426,\n            64427,\n            64428,\n            64429\n        ],\n        1728: [\n            64420,\n            64421\n        ],\n        1729: [\n            64422,\n            64423,\n            64424,\n            64425\n        ],\n        1733: [\n            64480,\n            64481\n        ],\n        1734: [\n            64473,\n            64474\n        ],\n        1735: [\n            64471,\n            64472\n        ],\n        1736: [\n            64475,\n            64476\n        ],\n        1737: [\n            64482,\n            64483\n        ],\n        1739: [\n            64478,\n            64479\n        ],\n        1740: [\n            64508,\n            64509,\n            64510,\n            64511\n        ],\n        1744: [\n            64484,\n            64485,\n            64486,\n            64487\n        ],\n        1746: [\n            64430,\n            64431\n        ],\n        1747: [\n            64432,\n            64433\n        ]\n    }, n = {\n        65247: {\n            65154: 65269,\n            65156: 65271,\n            65160: 65273,\n            65166: 65275\n        },\n        65248: {\n            65154: 65270,\n            65156: 65272,\n            65160: 65274,\n            65166: 65276\n        },\n        65165: {\n            65247: {\n                65248: {\n                    65258: 65010\n                }\n            }\n        },\n        1617: {\n            1612: 64606,\n            1613: 64607,\n            1614: 64608,\n            1615: 64609,\n            1616: 64610\n        }\n    }, r = {\n        1612: 64606,\n        1613: 64607,\n        1614: 64608,\n        1615: 64609,\n        1616: 64610\n    }, i = [\n        1570,\n        1571,\n        1573,\n        1575\n    ];\n    t.__arabicParser__ = {};\n    var a = t.__arabicParser__.isInArabicSubstitutionA = function(t) {\n        return void 0 !== e[t.charCodeAt(0)];\n    }, o = t.__arabicParser__.isArabicLetter = function(t) {\n        return \"string\" == typeof t && /^[\\u0600-\\u06FF\\u0750-\\u077F\\u08A0-\\u08FF\\uFB50-\\uFDFF\\uFE70-\\uFEFF]+$/.test(t);\n    }, s = t.__arabicParser__.isArabicEndLetter = function(t) {\n        return o(t) && a(t) && e[t.charCodeAt(0)].length <= 2;\n    }, u = t.__arabicParser__.isArabicAlfLetter = function(t) {\n        return o(t) && i.indexOf(t.charCodeAt(0)) >= 0;\n    };\n    t.__arabicParser__.arabicLetterHasIsolatedForm = function(t) {\n        return o(t) && a(t) && e[t.charCodeAt(0)].length >= 1;\n    };\n    var c = t.__arabicParser__.arabicLetterHasFinalForm = function(t) {\n        return o(t) && a(t) && e[t.charCodeAt(0)].length >= 2;\n    };\n    t.__arabicParser__.arabicLetterHasInitialForm = function(t) {\n        return o(t) && a(t) && e[t.charCodeAt(0)].length >= 3;\n    };\n    var l = t.__arabicParser__.arabicLetterHasMedialForm = function(t) {\n        return o(t) && a(t) && 4 == e[t.charCodeAt(0)].length;\n    }, h = t.__arabicParser__.resolveLigatures = function(t) {\n        var e = 0, r = n, i = \"\", a = 0;\n        for(e = 0; e < t.length; e += 1)void 0 !== r[t.charCodeAt(e)] ? (a++, \"number\" == typeof (r = r[t.charCodeAt(e)]) && (i += String.fromCharCode(r), r = n, a = 0), e === t.length - 1 && (r = n, i += t.charAt(e - (a - 1)), e -= a - 1, a = 0)) : (r = n, i += t.charAt(e - a), e -= a, a = 0);\n        return i;\n    };\n    t.__arabicParser__.isArabicDiacritic = function(t) {\n        return void 0 !== t && void 0 !== r[t.charCodeAt(0)];\n    };\n    var f = t.__arabicParser__.getCorrectForm = function(t, e, n) {\n        return o(t) ? !1 === a(t) ? -1 : !c(t) || !o(e) && !o(n) || !o(n) && s(e) || s(t) && !o(e) || s(t) && u(e) || s(t) && s(e) ? 0 : l(t) && o(e) && !s(e) && o(n) && c(n) ? 3 : s(t) || !o(n) ? 1 : 2 : -1;\n    }, d = function(t) {\n        var n = 0, r = 0, i = 0, a = \"\", s = \"\", u = \"\", c = (t = t || \"\").split(\"\\\\s+\"), l = [];\n        for(n = 0; n < c.length; n += 1){\n            for(l.push(\"\"), r = 0; r < c[n].length; r += 1)a = c[n][r], s = c[n][r - 1], u = c[n][r + 1], o(a) ? (i = f(a, s, u), l[n] += -1 !== i ? String.fromCharCode(e[a.charCodeAt(0)][i]) : a) : l[n] += a;\n            l[n] = h(l[n]);\n        }\n        return l.join(\" \");\n    }, p = t.__arabicParser__.processArabic = t.processArabic = function() {\n        var t, e = \"string\" == typeof arguments[0] ? arguments[0] : arguments[0].text, n = [];\n        if (Array.isArray(e)) {\n            var r = 0;\n            for(n = [], r = 0; r < e.length; r += 1)Array.isArray(e[r]) ? n.push([\n                d(e[r][0]),\n                e[r][1],\n                e[r][2]\n            ]) : n.push([\n                d(e[r])\n            ]);\n            t = n;\n        } else t = d(e);\n        return \"string\" == typeof arguments[0] ? t : (arguments[0].text = t, arguments[0]);\n    };\n    t.events.push([\n        \"preProcessText\",\n        p\n    ]);\n}(E.API), E.API.autoPrint = function(t) {\n    var e;\n    return (t = t || {}).variant = t.variant || \"non-conform\", \"javascript\" === t.variant ? this.addJS(\"print({});\") : (this.internal.events.subscribe(\"postPutResources\", function() {\n        e = this.internal.newObject(), this.internal.out(\"<<\"), this.internal.out(\"/S /Named\"), this.internal.out(\"/Type /Action\"), this.internal.out(\"/N /Print\"), this.internal.out(\">>\"), this.internal.out(\"endobj\");\n    }), this.internal.events.subscribe(\"putCatalog\", function() {\n        this.internal.out(\"/OpenAction \" + e + \" 0 R\");\n    })), this;\n}, /**\n * @license\n * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv\n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */ function(t) {\n    var e = function() {\n        var t = void 0;\n        Object.defineProperty(this, \"pdf\", {\n            get: function() {\n                return t;\n            },\n            set: function(e) {\n                t = e;\n            }\n        });\n        var e = 150;\n        Object.defineProperty(this, \"width\", {\n            get: function() {\n                return e;\n            },\n            set: function(t) {\n                e = isNaN(t) || !1 === Number.isInteger(t) || t < 0 ? 150 : t, this.getContext(\"2d\").pageWrapXEnabled && (this.getContext(\"2d\").pageWrapX = e + 1);\n            }\n        });\n        var n = 300;\n        Object.defineProperty(this, \"height\", {\n            get: function() {\n                return n;\n            },\n            set: function(t) {\n                n = isNaN(t) || !1 === Number.isInteger(t) || t < 0 ? 300 : t, this.getContext(\"2d\").pageWrapYEnabled && (this.getContext(\"2d\").pageWrapY = n + 1);\n            }\n        });\n        var r = [];\n        Object.defineProperty(this, \"childNodes\", {\n            get: function() {\n                return r;\n            },\n            set: function(t) {\n                r = t;\n            }\n        });\n        var i = {};\n        Object.defineProperty(this, \"style\", {\n            get: function() {\n                return i;\n            },\n            set: function(t) {\n                i = t;\n            }\n        }), Object.defineProperty(this, \"parentNode\", {});\n    };\n    e.prototype.getContext = function(t, e) {\n        var n;\n        if (\"2d\" !== (t = t || \"2d\")) return null;\n        for(n in e)this.pdf.context2d.hasOwnProperty(n) && (this.pdf.context2d[n] = e[n]);\n        return this.pdf.context2d._canvas = this, this.pdf.context2d;\n    }, e.prototype.toDataURL = function() {\n        throw new Error(\"toDataURL is not implemented.\");\n    }, t.events.push([\n        \"initialized\",\n        function() {\n            this.canvas = new e, this.canvas.pdf = this;\n        }\n    ]);\n}(E.API), function(e) {\n    var n = {\n        left: 0,\n        top: 0,\n        bottom: 0,\n        right: 0\n    }, r = !1, i = function() {\n        void 0 === this.internal.__cell__ && (this.internal.__cell__ = {}, this.internal.__cell__.padding = 3, this.internal.__cell__.headerFunction = void 0, this.internal.__cell__.margins = Object.assign({}, n), this.internal.__cell__.margins.width = this.getPageWidth(), a.call(this));\n    }, a = function() {\n        this.internal.__cell__.lastCell = new o, this.internal.__cell__.pages = 1;\n    }, o = function() {\n        var t = arguments[0];\n        Object.defineProperty(this, \"x\", {\n            enumerable: !0,\n            get: function() {\n                return t;\n            },\n            set: function(e) {\n                t = e;\n            }\n        });\n        var e = arguments[1];\n        Object.defineProperty(this, \"y\", {\n            enumerable: !0,\n            get: function() {\n                return e;\n            },\n            set: function(t) {\n                e = t;\n            }\n        });\n        var n = arguments[2];\n        Object.defineProperty(this, \"width\", {\n            enumerable: !0,\n            get: function() {\n                return n;\n            },\n            set: function(t) {\n                n = t;\n            }\n        });\n        var r = arguments[3];\n        Object.defineProperty(this, \"height\", {\n            enumerable: !0,\n            get: function() {\n                return r;\n            },\n            set: function(t) {\n                r = t;\n            }\n        });\n        var i = arguments[4];\n        Object.defineProperty(this, \"text\", {\n            enumerable: !0,\n            get: function() {\n                return i;\n            },\n            set: function(t) {\n                i = t;\n            }\n        });\n        var a = arguments[5];\n        Object.defineProperty(this, \"lineNumber\", {\n            enumerable: !0,\n            get: function() {\n                return a;\n            },\n            set: function(t) {\n                a = t;\n            }\n        });\n        var o = arguments[6];\n        return Object.defineProperty(this, \"align\", {\n            enumerable: !0,\n            get: function() {\n                return o;\n            },\n            set: function(t) {\n                o = t;\n            }\n        }), this;\n    };\n    o.prototype.clone = function() {\n        return new o(this.x, this.y, this.width, this.height, this.text, this.lineNumber, this.align);\n    }, o.prototype.toArray = function() {\n        return [\n            this.x,\n            this.y,\n            this.width,\n            this.height,\n            this.text,\n            this.lineNumber,\n            this.align\n        ];\n    }, e.setHeaderFunction = function(t) {\n        return i.call(this), this.internal.__cell__.headerFunction = \"function\" == typeof t ? t : void 0, this;\n    }, e.getTextDimensions = function(t, e) {\n        i.call(this);\n        var n = (e = e || {}).fontSize || this.getFontSize(), r = e.font || this.getFont(), a = e.scaleFactor || this.internal.scaleFactor, o = 0, s = 0, u = 0, c = this;\n        if (!Array.isArray(t) && \"string\" != typeof t) {\n            if (\"number\" != typeof t) throw new Error(\"getTextDimensions expects text-parameter to be of type String or type Number or an Array of Strings.\");\n            t = String(t);\n        }\n        var l = e.maxWidth;\n        l > 0 ? \"string\" == typeof t ? t = this.splitTextToSize(t, l) : \"[object Array]\" === Object.prototype.toString.call(t) && (t = t.reduce(function(t, e) {\n            return t.concat(c.splitTextToSize(e, l));\n        }, [])) : t = Array.isArray(t) ? t : [\n            t\n        ];\n        for(var h = 0; h < t.length; h++)o < (u = this.getStringUnitWidth(t[h], {\n            font: r\n        }) * n) && (o = u);\n        return 0 !== o && (s = t.length), {\n            w: o /= a,\n            h: Math.max((s * n * this.getLineHeightFactor() - n * (this.getLineHeightFactor() - 1)) / a, 0)\n        };\n    }, e.cellAddPage = function() {\n        i.call(this), this.addPage();\n        var t = this.internal.__cell__.margins || n;\n        return this.internal.__cell__.lastCell = new o(t.left, t.top, void 0, void 0), this.internal.__cell__.pages += 1, this;\n    };\n    var s = e.cell = function() {\n        var t;\n        t = arguments[0] instanceof o ? arguments[0] : new o(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]), i.call(this);\n        var e = this.internal.__cell__.lastCell, a = this.internal.__cell__.padding, s = this.internal.__cell__.margins || n, u = this.internal.__cell__.tableHeaderRow, c = this.internal.__cell__.printHeaders;\n        return void 0 !== e.lineNumber && (e.lineNumber === t.lineNumber ? (t.x = (e.x || 0) + (e.width || 0), t.y = e.y || 0) : e.y + e.height + t.height + s.bottom > this.getPageHeight() ? (this.cellAddPage(), t.y = s.top, c && u && (this.printHeaderRow(t.lineNumber, !0), t.y += u[0].height)) : t.y = e.y + e.height || t.y), void 0 !== t.text[0] && (this.rect(t.x, t.y, t.width, t.height, !0 === r ? \"FD\" : void 0), \"right\" === t.align ? this.text(t.text, t.x + t.width - a, t.y + a, {\n            align: \"right\",\n            baseline: \"top\"\n        }) : \"center\" === t.align ? this.text(t.text, t.x + t.width / 2, t.y + a, {\n            align: \"center\",\n            baseline: \"top\",\n            maxWidth: t.width - a - a\n        }) : this.text(t.text, t.x + a, t.y + a, {\n            align: \"left\",\n            baseline: \"top\",\n            maxWidth: t.width - a - a\n        })), this.internal.__cell__.lastCell = t, this;\n    };\n    e.table = function(e, r, c, l, h) {\n        if (i.call(this), !c) throw new Error(\"No data for PDF table.\");\n        var f, d, p, g, m = [], v = [], b = [], y = {}, w = {}, N = [], L = [], x = (h = h || {}).autoSize || !1, A = !1 !== h.printHeaders, S = h.css && void 0 !== h.css[\"font-size\"] ? 16 * h.css[\"font-size\"] : h.fontSize || 12, _ = h.margins || Object.assign({\n            width: this.getPageWidth()\n        }, n), P = \"number\" == typeof h.padding ? h.padding : 3, k = h.headerBackgroundColor || \"#c8c8c8\", F = h.headerTextColor || \"#000\";\n        if (a.call(this), this.internal.__cell__.printHeaders = A, this.internal.__cell__.margins = _, this.internal.__cell__.table_font_size = S, this.internal.__cell__.padding = P, this.internal.__cell__.headerBackgroundColor = k, this.internal.__cell__.headerTextColor = F, this.setFontSize(S), null == l) v = m = Object.keys(c[0]), b = m.map(function() {\n            return \"left\";\n        });\n        else if (Array.isArray(l) && \"object\" === (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(l[0])) for(m = l.map(function(t) {\n            return t.name;\n        }), v = l.map(function(t) {\n            return t.prompt || t.name || \"\";\n        }), b = l.map(function(t) {\n            return t.align || \"left\";\n        }), f = 0; f < l.length; f += 1)w[l[f].name] = .7499990551181103 * l[f].width;\n        else Array.isArray(l) && \"string\" == typeof l[0] && (v = m = l, b = m.map(function() {\n            return \"left\";\n        }));\n        if (x || Array.isArray(l) && \"string\" == typeof l[0]) for(f = 0; f < m.length; f += 1){\n            for(y[g = m[f]] = c.map(function(t) {\n                return t[g];\n            }), this.setFont(void 0, \"bold\"), N.push(this.getTextDimensions(v[f], {\n                fontSize: this.internal.__cell__.table_font_size,\n                scaleFactor: this.internal.scaleFactor\n            }).w), d = y[g], this.setFont(void 0, \"normal\"), p = 0; p < d.length; p += 1)N.push(this.getTextDimensions(d[p], {\n                fontSize: this.internal.__cell__.table_font_size,\n                scaleFactor: this.internal.scaleFactor\n            }).w);\n            w[g] = Math.max.apply(null, N) + P + P, N = [];\n        }\n        if (A) {\n            var I = {};\n            for(f = 0; f < m.length; f += 1)I[m[f]] = {}, I[m[f]].text = v[f], I[m[f]].align = b[f];\n            var j = u.call(this, I, w);\n            L = m.map(function(t) {\n                return new o(e, r, w[t], j, I[t].text, void 0, I[t].align);\n            }), this.setTableHeaderRow(L), this.printHeaderRow(1, !1);\n        }\n        var C = l.reduce(function(t, e) {\n            return t[e.name] = e.align, t;\n        }, {});\n        for(f = 0; f < c.length; f += 1){\n            \"rowStart\" in h && h.rowStart instanceof Function && h.rowStart({\n                row: f,\n                data: c[f]\n            }, this);\n            var O = u.call(this, c[f], w);\n            for(p = 0; p < m.length; p += 1){\n                var B = c[f][m[p]];\n                \"cellStart\" in h && h.cellStart instanceof Function && h.cellStart({\n                    row: f,\n                    col: p,\n                    data: B\n                }, this), s.call(this, new o(e, r, w[m[p]], O, B, f + 2, C[m[p]]));\n            }\n        }\n        return this.internal.__cell__.table_x = e, this.internal.__cell__.table_y = r, this;\n    };\n    var u = function(t, e) {\n        var n = this.internal.__cell__.padding, r = this.internal.__cell__.table_font_size, i = this.internal.scaleFactor;\n        return Object.keys(t).map(function(r) {\n            var i = t[r];\n            return this.splitTextToSize(i.hasOwnProperty(\"text\") ? i.text : i, e[r] - n - n);\n        }, this).map(function(t) {\n            return this.getLineHeightFactor() * t.length * r / i + n + n;\n        }, this).reduce(function(t, e) {\n            return Math.max(t, e);\n        }, 0);\n    };\n    e.setTableHeaderRow = function(t) {\n        i.call(this), this.internal.__cell__.tableHeaderRow = t;\n    }, e.printHeaderRow = function(t, e) {\n        if (i.call(this), !this.internal.__cell__.tableHeaderRow) throw new Error(\"Property tableHeaderRow does not exist.\");\n        var n;\n        if (r = !0, \"function\" == typeof this.internal.__cell__.headerFunction) {\n            var a = this.internal.__cell__.headerFunction(this, this.internal.__cell__.pages);\n            this.internal.__cell__.lastCell = new o(a[0], a[1], a[2], a[3], void 0, -1);\n        }\n        this.setFont(void 0, \"bold\");\n        for(var u = [], c = 0; c < this.internal.__cell__.tableHeaderRow.length; c += 1){\n            n = this.internal.__cell__.tableHeaderRow[c].clone(), e && (n.y = this.internal.__cell__.margins.top || 0, u.push(n)), n.lineNumber = t;\n            var l = this.getTextColor();\n            this.setTextColor(this.internal.__cell__.headerTextColor), this.setFillColor(this.internal.__cell__.headerBackgroundColor), s.call(this, n), this.setTextColor(l);\n        }\n        u.length > 0 && this.setTableHeaderRow(u), this.setFont(void 0, \"normal\"), r = !1;\n    };\n}(E.API);\nvar Pt = {\n    italic: [\n        \"italic\",\n        \"oblique\",\n        \"normal\"\n    ],\n    oblique: [\n        \"oblique\",\n        \"italic\",\n        \"normal\"\n    ],\n    normal: [\n        \"normal\",\n        \"oblique\",\n        \"italic\"\n    ]\n}, kt = [\n    \"ultra-condensed\",\n    \"extra-condensed\",\n    \"condensed\",\n    \"semi-condensed\",\n    \"normal\",\n    \"semi-expanded\",\n    \"expanded\",\n    \"extra-expanded\",\n    \"ultra-expanded\"\n], Ft = _t(kt), It = [\n    100,\n    200,\n    300,\n    400,\n    500,\n    600,\n    700,\n    800,\n    900\n], jt = _t(It);\nfunction Ct(t) {\n    var e = t.family.replace(/\"|'/g, \"\").toLowerCase(), n = function(t) {\n        return Pt[t = t || \"normal\"] ? t : \"normal\";\n    }(t.style), r = function(t) {\n        return t ? \"number\" == typeof t ? t >= 100 && t <= 900 && t % 100 == 0 ? t : 400 : /^\\d00$/.test(t) ? parseInt(t) : \"bold\" === t ? 700 : 400 : 400;\n    }(t.weight), i = function(t) {\n        return \"number\" == typeof Ft[t = t || \"normal\"] ? t : \"normal\";\n    }(t.stretch);\n    return {\n        family: e,\n        style: n,\n        weight: r,\n        stretch: i,\n        src: t.src || [],\n        ref: t.ref || {\n            name: e,\n            style: [\n                i,\n                n,\n                r\n            ].join(\" \")\n        }\n    };\n}\n_c12 = Ct;\nfunction Ot(t, e, n, r) {\n    var i;\n    for(i = n; i >= 0 && i < e.length; i += r)if (t[e[i]]) return t[e[i]];\n    for(i = n; i >= 0 && i < e.length; i -= r)if (t[e[i]]) return t[e[i]];\n}\n_c13 = Ot;\nvar Bt = {\n    \"sans-serif\": \"helvetica\",\n    fixed: \"courier\",\n    monospace: \"courier\",\n    terminal: \"courier\",\n    cursive: \"times\",\n    fantasy: \"times\",\n    serif: \"times\"\n}, Mt = {\n    caption: \"times\",\n    icon: \"times\",\n    menu: \"times\",\n    \"message-box\": \"times\",\n    \"small-caption\": \"times\",\n    \"status-bar\": \"times\"\n};\nfunction qt(t) {\n    return [\n        t.stretch,\n        t.style,\n        t.weight,\n        t.family\n    ].join(\" \");\n}\nfunction Et(t) {\n    return t.trimLeft();\n}\n_c14 = Et;\nfunction Rt(t, e) {\n    for(var n = 0; n < t.length;){\n        if (t.charAt(n) === e) return [\n            t.substring(0, n),\n            t.substring(n + 1)\n        ];\n        n += 1;\n    }\n    return null;\n}\n_c15 = Rt;\nfunction Dt(t) {\n    var e = t.match(/^(-[a-z_]|[a-z_])[a-z0-9_-]*/i);\n    return null === e ? null : [\n        e[0],\n        t.substring(e[0].length)\n    ];\n}\n_c16 = Dt;\nvar Tt, zt, Ut, Ht, Wt, Vt, Gt, Yt, Jt = [\n    \"times\"\n];\nfunction Xt(t, n, r, i, a) {\n    var o = 4, s = $t;\n    switch(a){\n        case E.API.image_compression.FAST:\n            o = 1, s = Zt;\n            break;\n        case E.API.image_compression.MEDIUM:\n            o = 6, s = Qt;\n            break;\n        case E.API.image_compression.SLOW:\n            o = 9, s = te;\n    }\n    t = function(t, e, n, r) {\n        for(var i, a = t.length / e, o = new Uint8Array(t.length + a), s = [\n            Kt,\n            Zt,\n            $t,\n            Qt,\n            te\n        ], u = 0; u < a; u += 1){\n            var c = u * e, l = t.subarray(c, c + e);\n            if (r) o.set(r(l, n, i), c + u);\n            else {\n                for(var h = s.length, f = [], d = 0; d < h; d += 1)f[d] = s[d](l, n, i);\n                var p = ne(f.concat());\n                o.set(f[p], c + u);\n            }\n            i = l;\n        }\n        return o;\n    }(t, n, Math.ceil(r * i / 8), s);\n    var u = (0,fflate__WEBPACK_IMPORTED_MODULE_3__.zlibSync)(t, {\n        level: o\n    });\n    return E.API.__addimage__.arrayBufferToBinaryString(u);\n}\n_c17 = Xt;\nfunction Kt(t) {\n    var e = Array.apply([], t);\n    return e.unshift(0), e;\n}\n_c18 = Kt;\nfunction Zt(t, e) {\n    var n = t.length, r = [];\n    r[0] = 1;\n    for(var i = 0; i < n; i += 1){\n        var a = t[i - e] || 0;\n        r[i + 1] = t[i] - a + 256 & 255;\n    }\n    return r;\n}\n_c19 = Zt;\nfunction $t(t, e, n) {\n    var r = t.length, i = [];\n    i[0] = 2;\n    for(var a = 0; a < r; a += 1){\n        var o = n && n[a] || 0;\n        i[a + 1] = t[a] - o + 256 & 255;\n    }\n    return i;\n}\nfunction Qt(t, e, n) {\n    var r = t.length, i = [];\n    i[0] = 3;\n    for(var a = 0; a < r; a += 1){\n        var o = t[a - e] || 0, s = n && n[a] || 0;\n        i[a + 1] = t[a] + 256 - (o + s >>> 1) & 255;\n    }\n    return i;\n}\n_c20 = Qt;\nfunction te(t, e, n) {\n    var r = t.length, i = [];\n    i[0] = 4;\n    for(var a = 0; a < r; a += 1){\n        var o = ee(t[a - e] || 0, n && n[a] || 0, n && n[a - e] || 0);\n        i[a + 1] = t[a] - o + 256 & 255;\n    }\n    return i;\n}\nfunction ee(t, e, n) {\n    if (t === e && e === n) return t;\n    var r = Math.abs(e - n), i = Math.abs(t - n), a = Math.abs(t + e - n - n);\n    return r <= i && r <= a ? t : i <= a ? e : n;\n}\nfunction ne(t) {\n    var e = t.map(function(t) {\n        return t.reduce(function(t, e) {\n            return t + Math.abs(e);\n        }, 0);\n    });\n    return e.indexOf(Math.min.apply(null, e));\n}\nfunction re(t, e, n) {\n    var r = e * n, i = Math.floor(r / 8), a = 16 - (r - 8 * i + n), o = (1 << n) - 1;\n    return ae(t, i) >> a & o;\n}\nfunction ie(t, e, n, r) {\n    var i = n * r, a = Math.floor(i / 8), o = 16 - (i - 8 * a + r), s = (1 << r) - 1, u = (e & s) << o;\n    !function(t, e, n) {\n        if (e + 1 < t.byteLength) t.setUint16(e, n, !1);\n        else {\n            var r = n >> 8 & 255;\n            t.setUint8(e, r);\n        }\n    }(t, a, ae(t, a) & ~(s << o) & 65535 | u);\n}\nfunction ae(t, e) {\n    return e + 1 < t.byteLength ? t.getUint16(e, !1) : t.getUint8(e) << 8;\n}\nfunction oe(t) {\n    var e = 0;\n    if (71 !== t[e++] || 73 !== t[e++] || 70 !== t[e++] || 56 !== t[e++] || 56 != (t[e++] + 1 & 253) || 97 !== t[e++]) throw new Error(\"Invalid GIF 87a/89a header.\");\n    var n = t[e++] | t[e++] << 8, r = t[e++] | t[e++] << 8, i = t[e++], a = i >> 7, o = 1 << 1 + (7 & i);\n    t[e++], t[e++];\n    var s = null, u = null;\n    a && (s = e, u = o, e += 3 * o);\n    var c = !0, l = [], h = 0, f = null, d = 0, p = null;\n    for(this.width = n, this.height = r; c && e < t.length;)switch(t[e++]){\n        case 33:\n            switch(t[e++]){\n                case 255:\n                    if (11 !== t[e] || 78 == t[e + 1] && 69 == t[e + 2] && 84 == t[e + 3] && 83 == t[e + 4] && 67 == t[e + 5] && 65 == t[e + 6] && 80 == t[e + 7] && 69 == t[e + 8] && 50 == t[e + 9] && 46 == t[e + 10] && 48 == t[e + 11] && 3 == t[e + 12] && 1 == t[e + 13] && 0 == t[e + 16]) e += 14, p = t[e++] | t[e++] << 8, e++;\n                    else for(e += 12;;){\n                        if (!((P = t[e++]) >= 0)) throw Error(\"Invalid block size\");\n                        if (0 === P) break;\n                        e += P;\n                    }\n                    break;\n                case 249:\n                    if (4 !== t[e++] || 0 !== t[e + 4]) throw new Error(\"Invalid graphics extension block.\");\n                    var g = t[e++];\n                    h = t[e++] | t[e++] << 8, f = t[e++], 1 & g || (f = null), d = g >> 2 & 7, e++;\n                    break;\n                case 254:\n                    for(;;){\n                        if (!((P = t[e++]) >= 0)) throw Error(\"Invalid block size\");\n                        if (0 === P) break;\n                        e += P;\n                    }\n                    break;\n                default:\n                    throw new Error(\"Unknown graphic control label: 0x\" + t[e - 1].toString(16));\n            }\n            break;\n        case 44:\n            var m = t[e++] | t[e++] << 8, v = t[e++] | t[e++] << 8, b = t[e++] | t[e++] << 8, y = t[e++] | t[e++] << 8, w = t[e++], N = w >> 6 & 1, L = 1 << 1 + (7 & w), x = s, A = u, S = !1;\n            w >> 7 && (S = !0, x = e, A = L, e += 3 * L);\n            var _ = e;\n            for(e++;;){\n                var P;\n                if (!((P = t[e++]) >= 0)) throw Error(\"Invalid block size\");\n                if (0 === P) break;\n                e += P;\n            }\n            l.push({\n                x: m,\n                y: v,\n                width: b,\n                height: y,\n                has_local_palette: S,\n                palette_offset: x,\n                palette_size: A,\n                data_offset: _,\n                data_length: e - _,\n                transparent_index: f,\n                interlaced: !!N,\n                delay: h,\n                disposal: d\n            });\n            break;\n        case 59:\n            c = !1;\n            break;\n        default:\n            throw new Error(\"Unknown gif block: 0x\" + t[e - 1].toString(16));\n    }\n    this.numFrames = function() {\n        return l.length;\n    }, this.loopCount = function() {\n        return p;\n    }, this.frameInfo = function(t) {\n        if (t < 0 || t >= l.length) throw new Error(\"Frame index out of range.\");\n        return l[t];\n    }, this.decodeAndBlitFrameBGRA = function(e, r) {\n        var i = this.frameInfo(e), a = i.width * i.height, o = new Uint8Array(a);\n        se(t, i.data_offset, o, a);\n        var s = i.palette_offset, u = i.transparent_index;\n        null === u && (u = 256);\n        var c = i.width, l = n - c, h = c, f = 4 * (i.y * n + i.x), d = 4 * ((i.y + i.height) * n + i.x), p = f, g = 4 * l;\n        !0 === i.interlaced && (g += 4 * n * 7);\n        for(var m = 8, v = 0, b = o.length; v < b; ++v){\n            var y = o[v];\n            if (0 === h && (h = c, (p += g) >= d && (g = 4 * l + 4 * n * (m - 1), p = f + (c + l) * (m << 1), m >>= 1)), y === u) p += 4;\n            else {\n                var w = t[s + 3 * y], N = t[s + 3 * y + 1], L = t[s + 3 * y + 2];\n                r[p++] = L, r[p++] = N, r[p++] = w, r[p++] = 255;\n            }\n            --h;\n        }\n    }, this.decodeAndBlitFrameRGBA = function(e, r) {\n        var i = this.frameInfo(e), a = i.width * i.height, o = new Uint8Array(a);\n        se(t, i.data_offset, o, a);\n        var s = i.palette_offset, u = i.transparent_index;\n        null === u && (u = 256);\n        var c = i.width, l = n - c, h = c, f = 4 * (i.y * n + i.x), d = 4 * ((i.y + i.height) * n + i.x), p = f, g = 4 * l;\n        !0 === i.interlaced && (g += 4 * n * 7);\n        for(var m = 8, v = 0, b = o.length; v < b; ++v){\n            var y = o[v];\n            if (0 === h && (h = c, (p += g) >= d && (g = 4 * l + 4 * n * (m - 1), p = f + (c + l) * (m << 1), m >>= 1)), y === u) p += 4;\n            else {\n                var w = t[s + 3 * y], N = t[s + 3 * y + 1], L = t[s + 3 * y + 2];\n                r[p++] = w, r[p++] = N, r[p++] = L, r[p++] = 255;\n            }\n            --h;\n        }\n    };\n}\nfunction se(t, e, n, r) {\n    for(var i = t[e++], a = 1 << i, s = a + 1, u = s + 1, c = i + 1, l = (1 << c) - 1, h = 0, f = 0, d = 0, p = t[e++], g = new Int32Array(4096), m = null;;){\n        for(; h < 16 && 0 !== p;)f |= t[e++] << h, h += 8, 1 === p ? p = t[e++] : --p;\n        if (h < c) break;\n        var v = f & l;\n        if (f >>= c, h -= c, v !== a) {\n            if (v === s) break;\n            for(var b = v < u ? v : m, y = 0, w = b; w > a;)w = g[w] >> 8, ++y;\n            var N = w;\n            if (d + y + (b !== v ? 1 : 0) > r) return void o.log(\"Warning, gif stream longer than expected.\");\n            n[d++] = N;\n            var L = d += y;\n            for(b !== v && (n[d++] = N), w = b; y--;)w = g[w], n[--L] = 255 & w, w >>= 8;\n            null !== m && u < 4096 && (g[u++] = m << 8 | N, u >= l + 1 && c < 12 && (++c, l = l << 1 | 1)), m = v;\n        } else u = s + 1, l = (1 << (c = i + 1)) - 1, m = null;\n    }\n    return d !== r && o.log(\"Warning, gif stream shorter than expected.\"), n;\n}\n/**\n * @license\n  Copyright (c) 2008, Adobe Systems Incorporated\n  All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without \n  modification, are permitted provided that the following conditions are\n  met:\n\n  * Redistributions of source code must retain the above copyright notice, \n    this list of conditions and the following disclaimer.\n  \n  * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the \n    documentation and/or other materials provided with the distribution.\n  \n  * Neither the name of Adobe Systems Incorporated nor the names of its \n    contributors may be used to endorse or promote products derived from \n    this software without specific prior written permission.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n  IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR \n  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/ function ue(t) {\n    var e, n, r, i, a, o = Math.floor, s = new Array(64), u = new Array(64), c = new Array(64), l = new Array(64), h = new Array(65535), f = new Array(65535), d = new Array(64), p = new Array(64), g = [], m = 0, v = 7, b = new Array(64), y = new Array(64), w = new Array(64), N = new Array(256), L = new Array(2048), x = [\n        0,\n        1,\n        5,\n        6,\n        14,\n        15,\n        27,\n        28,\n        2,\n        4,\n        7,\n        13,\n        16,\n        26,\n        29,\n        42,\n        3,\n        8,\n        12,\n        17,\n        25,\n        30,\n        41,\n        43,\n        9,\n        11,\n        18,\n        24,\n        31,\n        40,\n        44,\n        53,\n        10,\n        19,\n        23,\n        32,\n        39,\n        45,\n        52,\n        54,\n        20,\n        22,\n        33,\n        38,\n        46,\n        51,\n        55,\n        60,\n        21,\n        34,\n        37,\n        47,\n        50,\n        56,\n        59,\n        61,\n        35,\n        36,\n        48,\n        49,\n        57,\n        58,\n        62,\n        63\n    ], A = [\n        0,\n        0,\n        1,\n        5,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n    ], S = [\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11\n    ], _ = [\n        0,\n        0,\n        2,\n        1,\n        3,\n        3,\n        2,\n        4,\n        3,\n        5,\n        5,\n        4,\n        4,\n        0,\n        0,\n        1,\n        125\n    ], P = [\n        1,\n        2,\n        3,\n        0,\n        4,\n        17,\n        5,\n        18,\n        33,\n        49,\n        65,\n        6,\n        19,\n        81,\n        97,\n        7,\n        34,\n        113,\n        20,\n        50,\n        129,\n        145,\n        161,\n        8,\n        35,\n        66,\n        177,\n        193,\n        21,\n        82,\n        209,\n        240,\n        36,\n        51,\n        98,\n        114,\n        130,\n        9,\n        10,\n        22,\n        23,\n        24,\n        25,\n        26,\n        37,\n        38,\n        39,\n        40,\n        41,\n        42,\n        52,\n        53,\n        54,\n        55,\n        56,\n        57,\n        58,\n        67,\n        68,\n        69,\n        70,\n        71,\n        72,\n        73,\n        74,\n        83,\n        84,\n        85,\n        86,\n        87,\n        88,\n        89,\n        90,\n        99,\n        100,\n        101,\n        102,\n        103,\n        104,\n        105,\n        106,\n        115,\n        116,\n        117,\n        118,\n        119,\n        120,\n        121,\n        122,\n        131,\n        132,\n        133,\n        134,\n        135,\n        136,\n        137,\n        138,\n        146,\n        147,\n        148,\n        149,\n        150,\n        151,\n        152,\n        153,\n        154,\n        162,\n        163,\n        164,\n        165,\n        166,\n        167,\n        168,\n        169,\n        170,\n        178,\n        179,\n        180,\n        181,\n        182,\n        183,\n        184,\n        185,\n        186,\n        194,\n        195,\n        196,\n        197,\n        198,\n        199,\n        200,\n        201,\n        202,\n        210,\n        211,\n        212,\n        213,\n        214,\n        215,\n        216,\n        217,\n        218,\n        225,\n        226,\n        227,\n        228,\n        229,\n        230,\n        231,\n        232,\n        233,\n        234,\n        241,\n        242,\n        243,\n        244,\n        245,\n        246,\n        247,\n        248,\n        249,\n        250\n    ], k = [\n        0,\n        0,\n        3,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        0\n    ], F = [\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11\n    ], I = [\n        0,\n        0,\n        2,\n        1,\n        2,\n        4,\n        4,\n        3,\n        4,\n        7,\n        5,\n        4,\n        4,\n        0,\n        1,\n        2,\n        119\n    ], j = [\n        0,\n        1,\n        2,\n        3,\n        17,\n        4,\n        5,\n        33,\n        49,\n        6,\n        18,\n        65,\n        81,\n        7,\n        97,\n        113,\n        19,\n        34,\n        50,\n        129,\n        8,\n        20,\n        66,\n        145,\n        161,\n        177,\n        193,\n        9,\n        35,\n        51,\n        82,\n        240,\n        21,\n        98,\n        114,\n        209,\n        10,\n        22,\n        36,\n        52,\n        225,\n        37,\n        241,\n        23,\n        24,\n        25,\n        26,\n        38,\n        39,\n        40,\n        41,\n        42,\n        53,\n        54,\n        55,\n        56,\n        57,\n        58,\n        67,\n        68,\n        69,\n        70,\n        71,\n        72,\n        73,\n        74,\n        83,\n        84,\n        85,\n        86,\n        87,\n        88,\n        89,\n        90,\n        99,\n        100,\n        101,\n        102,\n        103,\n        104,\n        105,\n        106,\n        115,\n        116,\n        117,\n        118,\n        119,\n        120,\n        121,\n        122,\n        130,\n        131,\n        132,\n        133,\n        134,\n        135,\n        136,\n        137,\n        138,\n        146,\n        147,\n        148,\n        149,\n        150,\n        151,\n        152,\n        153,\n        154,\n        162,\n        163,\n        164,\n        165,\n        166,\n        167,\n        168,\n        169,\n        170,\n        178,\n        179,\n        180,\n        181,\n        182,\n        183,\n        184,\n        185,\n        186,\n        194,\n        195,\n        196,\n        197,\n        198,\n        199,\n        200,\n        201,\n        202,\n        210,\n        211,\n        212,\n        213,\n        214,\n        215,\n        216,\n        217,\n        218,\n        226,\n        227,\n        228,\n        229,\n        230,\n        231,\n        232,\n        233,\n        234,\n        242,\n        243,\n        244,\n        245,\n        246,\n        247,\n        248,\n        249,\n        250\n    ];\n    function C(t, e) {\n        for(var n = 0, r = 0, i = new Array, a = 1; a <= 16; a++){\n            for(var o = 1; o <= t[a]; o++)i[e[r]] = [], i[e[r]][0] = n, i[e[r]][1] = a, r++, n++;\n            n *= 2;\n        }\n        return i;\n    }\n    function O(t) {\n        for(var e = t[0], n = t[1] - 1; n >= 0;)e & 1 << n && (m |= 1 << v), n--, --v < 0 && (255 == m ? (B(255), B(0)) : B(m), v = 7, m = 0);\n    }\n    function B(t) {\n        g.push(t);\n    }\n    function M(t) {\n        B(t >> 8 & 255), B(255 & t);\n    }\n    function q(t, e, n, r, i) {\n        for(var a, o = i[0], s = i[240], u = function(t, e) {\n            var n, r, i, a, o, s, u, c, l, h, f = 0;\n            for(l = 0; l < 8; ++l){\n                n = t[f], r = t[f + 1], i = t[f + 2], a = t[f + 3], o = t[f + 4], s = t[f + 5], u = t[f + 6];\n                var p = n + (c = t[f + 7]), g = n - c, m = r + u, v = r - u, b = i + s, y = i - s, w = a + o, N = a - o, L = p + w, x = p - w, A = m + b, S = m - b;\n                t[f] = L + A, t[f + 4] = L - A;\n                var _ = .707106781 * (S + x);\n                t[f + 2] = x + _, t[f + 6] = x - _;\n                var P = .382683433 * ((L = N + y) - (S = v + g)), k = .5411961 * L + P, F = 1.306562965 * S + P, I = .707106781 * (A = y + v), j = g + I, C = g - I;\n                t[f + 5] = C + k, t[f + 3] = C - k, t[f + 1] = j + F, t[f + 7] = j - F, f += 8;\n            }\n            for(f = 0, l = 0; l < 8; ++l){\n                n = t[f], r = t[f + 8], i = t[f + 16], a = t[f + 24], o = t[f + 32], s = t[f + 40], u = t[f + 48];\n                var O = n + (c = t[f + 56]), B = n - c, M = r + u, q = r - u, E = i + s, R = i - s, D = a + o, T = a - o, z = O + D, U = O - D, H = M + E, W = M - E;\n                t[f] = z + H, t[f + 32] = z - H;\n                var V = .707106781 * (W + U);\n                t[f + 16] = U + V, t[f + 48] = U - V;\n                var G = .382683433 * ((z = T + R) - (W = q + B)), Y = .5411961 * z + G, J = 1.306562965 * W + G, X = .707106781 * (H = R + q), K = B + X, Z = B - X;\n                t[f + 40] = Z + Y, t[f + 24] = Z - Y, t[f + 8] = K + J, t[f + 56] = K - J, f++;\n            }\n            for(l = 0; l < 64; ++l)h = t[l] * e[l], d[l] = h > 0 ? h + .5 | 0 : h - .5 | 0;\n            return d;\n        }(t, e), c = 0; c < 64; ++c)p[x[c]] = u[c];\n        var l = p[0] - n;\n        n = p[0], 0 == l ? O(r[0]) : (O(r[f[a = 32767 + l]]), O(h[a]));\n        for(var g = 63; g > 0 && 0 == p[g];)g--;\n        if (0 == g) return O(o), n;\n        for(var m, v = 1; v <= g;){\n            for(var b = v; 0 == p[v] && v <= g;)++v;\n            var y = v - b;\n            if (y >= 16) {\n                m = y >> 4;\n                for(var w = 1; w <= m; ++w)O(s);\n                y &= 15;\n            }\n            a = 32767 + p[v], O(i[(y << 4) + f[a]]), O(h[a]), v++;\n        }\n        return 63 != g && O(o), n;\n    }\n    function E(t) {\n        t = Math.min(Math.max(t, 1), 100), a != t && (function(t) {\n            for(var e = [\n                16,\n                11,\n                10,\n                16,\n                24,\n                40,\n                51,\n                61,\n                12,\n                12,\n                14,\n                19,\n                26,\n                58,\n                60,\n                55,\n                14,\n                13,\n                16,\n                24,\n                40,\n                57,\n                69,\n                56,\n                14,\n                17,\n                22,\n                29,\n                51,\n                87,\n                80,\n                62,\n                18,\n                22,\n                37,\n                56,\n                68,\n                109,\n                103,\n                77,\n                24,\n                35,\n                55,\n                64,\n                81,\n                104,\n                113,\n                92,\n                49,\n                64,\n                78,\n                87,\n                103,\n                121,\n                120,\n                101,\n                72,\n                92,\n                95,\n                98,\n                112,\n                100,\n                103,\n                99\n            ], n = 0; n < 64; n++){\n                var r = o((e[n] * t + 50) / 100);\n                r = Math.min(Math.max(r, 1), 255), s[x[n]] = r;\n            }\n            for(var i = [\n                17,\n                18,\n                24,\n                47,\n                99,\n                99,\n                99,\n                99,\n                18,\n                21,\n                26,\n                66,\n                99,\n                99,\n                99,\n                99,\n                24,\n                26,\n                56,\n                99,\n                99,\n                99,\n                99,\n                99,\n                47,\n                66,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99,\n                99\n            ], a = 0; a < 64; a++){\n                var h = o((i[a] * t + 50) / 100);\n                h = Math.min(Math.max(h, 1), 255), u[x[a]] = h;\n            }\n            for(var f = [\n                1,\n                1.387039845,\n                1.306562965,\n                1.175875602,\n                1,\n                .785694958,\n                .5411961,\n                .275899379\n            ], d = 0, p = 0; p < 8; p++)for(var g = 0; g < 8; g++)c[d] = 1 / (s[x[d]] * f[p] * f[g] * 8), l[d] = 1 / (u[x[d]] * f[p] * f[g] * 8), d++;\n        }(t < 50 ? Math.floor(5e3 / t) : Math.floor(200 - 2 * t)), a = t);\n    }\n    this.encode = function(t, a) {\n        a && E(a), g = new Array, m = 0, v = 7, M(65496), M(65504), M(16), B(74), B(70), B(73), B(70), B(0), B(1), B(1), B(0), M(1), M(1), B(0), B(0), function() {\n            M(65499), M(132), B(0);\n            for(var t = 0; t < 64; t++)B(s[t]);\n            B(1);\n            for(var e = 0; e < 64; e++)B(u[e]);\n        }(), function(t, e) {\n            M(65472), M(17), B(8), M(e), M(t), B(3), B(1), B(17), B(0), B(2), B(17), B(1), B(3), B(17), B(1);\n        }(t.width, t.height), function() {\n            M(65476), M(418), B(0);\n            for(var t = 0; t < 16; t++)B(A[t + 1]);\n            for(var e = 0; e <= 11; e++)B(S[e]);\n            B(16);\n            for(var n = 0; n < 16; n++)B(_[n + 1]);\n            for(var r = 0; r <= 161; r++)B(P[r]);\n            B(1);\n            for(var i = 0; i < 16; i++)B(k[i + 1]);\n            for(var a = 0; a <= 11; a++)B(F[a]);\n            B(17);\n            for(var o = 0; o < 16; o++)B(I[o + 1]);\n            for(var s = 0; s <= 161; s++)B(j[s]);\n        }(), M(65498), M(12), B(3), B(1), B(0), B(2), B(17), B(3), B(17), B(0), B(63), B(0);\n        var o = 0, h = 0, f = 0;\n        m = 0, v = 7, this.encode.displayName = \"_encode_\";\n        for(var d, p, N, x, C, R, D, T, z, U = t.data, H = t.width, W = t.height, V = 4 * H, G = 0; G < W;){\n            for(d = 0; d < V;){\n                for(C = V * G + d, D = -1, T = 0, z = 0; z < 64; z++)R = C + (T = z >> 3) * V + (D = 4 * (7 & z)), G + T >= W && (R -= V * (G + 1 + T - W)), d + D >= V && (R -= d + D - V + 4), p = U[R++], N = U[R++], x = U[R++], b[z] = (L[p] + L[N + 256 | 0] + L[x + 512 | 0] >> 16) - 128, y[z] = (L[p + 768 | 0] + L[N + 1024 | 0] + L[x + 1280 | 0] >> 16) - 128, w[z] = (L[p + 1280 | 0] + L[N + 1536 | 0] + L[x + 1792 | 0] >> 16) - 128;\n                o = q(b, c, o, e, r), h = q(y, l, h, n, i), f = q(w, l, f, n, i), d += 32;\n            }\n            G += 8;\n        }\n        if (v >= 0) {\n            var Y = [];\n            Y[1] = v + 1, Y[0] = (1 << v + 1) - 1, O(Y);\n        }\n        return M(65497), new Uint8Array(g);\n    }, t = t || 50, function() {\n        for(var t = String.fromCharCode, e = 0; e < 256; e++)N[e] = t(e);\n    }(), e = C(A, S), n = C(k, F), r = C(_, P), i = C(I, j), function() {\n        for(var t = 1, e = 2, n = 1; n <= 15; n++){\n            for(var r = t; r < e; r++)f[32767 + r] = n, h[32767 + r] = [], h[32767 + r][1] = n, h[32767 + r][0] = r;\n            for(var i = -(e - 1); i <= -t; i++)f[32767 + i] = n, h[32767 + i] = [], h[32767 + i][1] = n, h[32767 + i][0] = e - 1 + i;\n            t <<= 1, e <<= 1;\n        }\n    }(), function() {\n        for(var t = 0; t < 256; t++)L[t] = 19595 * t, L[t + 256 | 0] = 38470 * t, L[t + 512 | 0] = 7471 * t + 32768, L[t + 768 | 0] = -11059 * t, L[t + 1024 | 0] = -21709 * t, L[t + 1280 | 0] = 32768 * t + 8421375, L[t + 1536 | 0] = -27439 * t, L[t + 1792 | 0] = -5329 * t;\n    }(), E(t);\n}\n/**\n * @license\n * Copyright (c) 2017 Aras Abbasi\n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */ function ce(t, e) {\n    if (this.pos = 0, this.buffer = t, this.datav = new DataView(t.buffer), this.is_with_alpha = !!e, this.bottom_up = !0, this.flag = String.fromCharCode(this.buffer[0]) + String.fromCharCode(this.buffer[1]), this.pos += 2, -1 === [\n        \"BM\",\n        \"BA\",\n        \"CI\",\n        \"CP\",\n        \"IC\",\n        \"PT\"\n    ].indexOf(this.flag)) throw new Error(\"Invalid BMP File\");\n    this.parseHeader(), this.parseBGR();\n}\nfunction le(t) {\n    function e(t) {\n        if (!t) throw Error(\"assert :P\");\n    }\n    function n(t, e, n) {\n        for(var r = 0; 4 > r; r++)if (t[e + r] != n.charCodeAt(r)) return !0;\n        return !1;\n    }\n    function r(t, e, n, r, i) {\n        for(var a = 0; a < i; a++)t[e + a] = n[r + a];\n    }\n    function i(t, e, n, r) {\n        for(var i = 0; i < r; i++)t[e + i] = n;\n    }\n    function a(t) {\n        return new Int32Array(t);\n    }\n    function o(t, e) {\n        for(var n = [], r = 0; r < t; r++)n.push(new e);\n        return n;\n    }\n    function s(t, e) {\n        var n = [];\n        return function t(n, r, i) {\n            for(var a = i[r], o = 0; o < a && (n.push(i.length > r + 1 ? [] : new e), !(i.length < r + 1)); o++)t(n[o], r + 1, i);\n        }(n, 0, t), n;\n    }\n    var u = function() {\n        var t = this;\n        function u(t, e) {\n            for(var n = 1 << e - 1 >>> 0; t & n;)n >>>= 1;\n            return n ? (t & n - 1) + n : t;\n        }\n        function c(t, n, r, i, a) {\n            e(!(i % r));\n            do {\n                t[n + (i -= r)] = a;\n            }while (0 < i);\n        }\n        function l(t, n, r, i, o) {\n            if (e(2328 >= o), 512 >= o) var s = a(512);\n            else if (null == (s = a(o))) return 0;\n            return function(t, n, r, i, o, s) {\n                var l, f, d = n, p = 1 << r, g = a(16), m = a(16);\n                for(e(0 != o), e(null != i), e(null != t), e(0 < r), f = 0; f < o; ++f){\n                    if (15 < i[f]) return 0;\n                    ++g[i[f]];\n                }\n                if (g[0] == o) return 0;\n                for(m[1] = 0, l = 1; 15 > l; ++l){\n                    if (g[l] > 1 << l) return 0;\n                    m[l + 1] = m[l] + g[l];\n                }\n                for(f = 0; f < o; ++f)l = i[f], 0 < i[f] && (s[m[l]++] = f);\n                if (1 == m[15]) return (i = new h).g = 0, i.value = s[0], c(t, d, 1, p, i), p;\n                var v, b = -1, y = p - 1, w = 0, N = 1, L = 1, x = 1 << r;\n                for(f = 0, l = 1, o = 2; l <= r; ++l, o <<= 1){\n                    if (N += L <<= 1, 0 > (L -= g[l])) return 0;\n                    for(; 0 < g[l]; --g[l])(i = new h).g = l, i.value = s[f++], c(t, d + w, o, x, i), w = u(w, l);\n                }\n                for(l = r + 1, o = 2; 15 >= l; ++l, o <<= 1){\n                    if (N += L <<= 1, 0 > (L -= g[l])) return 0;\n                    for(; 0 < g[l]; --g[l]){\n                        if (i = new h, (w & y) != b) {\n                            for(d += x, v = 1 << (b = l) - r; 15 > b && !(0 >= (v -= g[b]));)++b, v <<= 1;\n                            p += x = 1 << (v = b - r), t[n + (b = w & y)].g = v + r, t[n + b].value = d - n - b;\n                        }\n                        i.g = l - r, i.value = s[f++], c(t, d + (w >> r), o, x, i), w = u(w, l);\n                    }\n                }\n                return N != 2 * m[15] - 1 ? 0 : p;\n            }(t, n, r, i, o, s);\n        }\n        function h() {\n            this.value = this.g = 0;\n        }\n        function f() {\n            this.value = this.g = 0;\n        }\n        function d() {\n            this.G = o(5, h), this.H = a(5), this.jc = this.Qb = this.qb = this.nd = 0, this.pd = o(Rn, f);\n        }\n        function p(t, n, r, i) {\n            e(null != t), e(null != n), e(2147483648 > i), t.Ca = 254, t.I = 0, t.b = -8, t.Ka = 0, t.oa = n, t.pa = r, t.Jd = n, t.Yc = r + i, t.Zc = 4 <= i ? r + i - 4 + 1 : r, _(t);\n        }\n        function g(t, e) {\n            for(var n = 0; 0 < e--;)n |= k(t, 128) << e;\n            return n;\n        }\n        function m(t, e) {\n            var n = g(t, e);\n            return P(t) ? -n : n;\n        }\n        function v(t, n, r, i) {\n            var a, o = 0;\n            for(e(null != t), e(null != n), e(4294967288 > i), t.Sb = i, t.Ra = 0, t.u = 0, t.h = 0, 4 < i && (i = 4), a = 0; a < i; ++a)o += n[r + a] << 8 * a;\n            t.Ra = o, t.bb = i, t.oa = n, t.pa = r;\n        }\n        function b(t) {\n            for(; 8 <= t.u && t.bb < t.Sb;)t.Ra >>>= 8, t.Ra += t.oa[t.pa + t.bb] << zn - 8 >>> 0, ++t.bb, t.u -= 8;\n            x(t) && (t.h = 1, t.u = 0);\n        }\n        function y(t, n) {\n            if (e(0 <= n), !t.h && n <= Tn) {\n                var r = L(t) & Dn[n];\n                return t.u += n, b(t), r;\n            }\n            return t.h = 1, t.u = 0;\n        }\n        function w() {\n            this.b = this.Ca = this.I = 0, this.oa = [], this.pa = 0, this.Jd = [], this.Yc = 0, this.Zc = [], this.Ka = 0;\n        }\n        function N() {\n            this.Ra = 0, this.oa = [], this.h = this.u = this.bb = this.Sb = this.pa = 0;\n        }\n        function L(t) {\n            return t.Ra >>> (t.u & zn - 1) >>> 0;\n        }\n        function x(t) {\n            return e(t.bb <= t.Sb), t.h || t.bb == t.Sb && t.u > zn;\n        }\n        function A(t, e) {\n            t.u = e, t.h = x(t);\n        }\n        function S(t) {\n            t.u >= Un && (e(t.u >= Un), b(t));\n        }\n        function _(t) {\n            e(null != t && null != t.oa), t.pa < t.Zc ? (t.I = (t.oa[t.pa++] | t.I << 8) >>> 0, t.b += 8) : (e(null != t && null != t.oa), t.pa < t.Yc ? (t.b += 8, t.I = t.oa[t.pa++] | t.I << 8) : t.Ka ? t.b = 0 : (t.I <<= 8, t.b += 8, t.Ka = 1));\n        }\n        function P(t) {\n            return g(t, 1);\n        }\n        function k(t, e) {\n            var n = t.Ca;\n            0 > t.b && _(t);\n            var r = t.b, i = n * e >>> 8, a = (t.I >>> r > i) + 0;\n            for(a ? (n -= i, t.I -= i + 1 << r >>> 0) : n = i + 1, r = n, i = 0; 256 <= r;)i += 8, r >>= 8;\n            return r = 7 ^ i + Hn[r], t.b -= r, t.Ca = (n << r) - 1, a;\n        }\n        function F(t, e, n) {\n            t[e + 0] = n >> 24 & 255, t[e + 1] = n >> 16 & 255, t[e + 2] = n >> 8 & 255, t[e + 3] = 255 & n;\n        }\n        function I(t, e) {\n            return t[e + 0] | t[e + 1] << 8;\n        }\n        function j(t, e) {\n            return I(t, e) | t[e + 2] << 16;\n        }\n        function C(t, e) {\n            return I(t, e) | I(t, e + 2) << 16;\n        }\n        function O(t, n) {\n            var r = 1 << n;\n            return e(null != t), e(0 < n), t.X = a(r), null == t.X ? 0 : (t.Mb = 32 - n, t.Xa = n, 1);\n        }\n        function B(t, n) {\n            e(null != t), e(null != n), e(t.Xa == n.Xa), r(n.X, 0, t.X, 0, 1 << n.Xa);\n        }\n        function M() {\n            this.X = [], this.Xa = this.Mb = 0;\n        }\n        function q(t, n, r, i) {\n            e(null != r), e(null != i);\n            var a = r[0], o = i[0];\n            return 0 == a && (a = (t * o + n / 2) / n), 0 == o && (o = (n * a + t / 2) / t), 0 >= a || 0 >= o ? 0 : (r[0] = a, i[0] = o, 1);\n        }\n        function E(t, e) {\n            return t + (1 << e) - 1 >>> e;\n        }\n        function R(t, e) {\n            return ((4278255360 & t) + (4278255360 & e) >>> 0 & 4278255360) + ((16711935 & t) + (16711935 & e) >>> 0 & 16711935) >>> 0;\n        }\n        function D(e, n) {\n            t[n] = function(n, r, i, a, o, s, u) {\n                var c;\n                for(c = 0; c < o; ++c){\n                    var l = t[e](s[u + c - 1], i, a + c);\n                    s[u + c] = R(n[r + c], l);\n                }\n            };\n        }\n        function T() {\n            this.ud = this.hd = this.jd = 0;\n        }\n        function z(t, e) {\n            return ((4278124286 & (t ^ e)) >>> 1) + (t & e) >>> 0;\n        }\n        function U(t) {\n            return 0 <= t && 256 > t ? t : 0 > t ? 0 : 255 < t ? 255 : void 0;\n        }\n        function H(t, e) {\n            return U(t + (t - e + .5 >> 1));\n        }\n        function W(t, e, n) {\n            return Math.abs(e - n) - Math.abs(t - n);\n        }\n        function V(t, e, n, r, i, a, o) {\n            for(r = a[o - 1], n = 0; n < i; ++n)a[o + n] = r = R(t[e + n], r);\n        }\n        function G(t, e, n, r, i) {\n            var a;\n            for(a = 0; a < n; ++a){\n                var o = t[e + a], s = o >> 8 & 255, u = 16711935 & (u = (u = 16711935 & o) + ((s << 16) + s));\n                r[i + a] = (4278255360 & o) + u >>> 0;\n            }\n        }\n        function Y(t, e) {\n            e.jd = 255 & t, e.hd = t >> 8 & 255, e.ud = t >> 16 & 255;\n        }\n        function J(t, e, n, r, i, a) {\n            var o;\n            for(o = 0; o < r; ++o){\n                var s = e[n + o], u = s >>> 8, c = s, l = 255 & (l = (l = s >>> 16) + ((t.jd << 24 >> 24) * (u << 24 >> 24) >>> 5));\n                c = 255 & (c = (c += (t.hd << 24 >> 24) * (u << 24 >> 24) >>> 5) + ((t.ud << 24 >> 24) * (l << 24 >> 24) >>> 5)), i[a + o] = (4278255360 & s) + (l << 16) + c;\n            }\n        }\n        function X(e, n, r, i, a) {\n            t[n] = function(t, e, n, r, o, s, u, c, l) {\n                for(r = u; r < c; ++r)for(u = 0; u < l; ++u)o[s++] = a(n[i(t[e++])]);\n            }, t[e] = function(e, n, o, s, u, c, l) {\n                var h = 8 >> e.b, f = e.Ea, d = e.K[0], p = e.w;\n                if (8 > h) for(e = (1 << e.b) - 1, p = (1 << h) - 1; n < o; ++n){\n                    var g, m = 0;\n                    for(g = 0; g < f; ++g)g & e || (m = i(s[u++])), c[l++] = a(d[m & p]), m >>= h;\n                }\n                else t[\"VP8LMapColor\" + r](s, u, d, p, c, l, n, o, f);\n            };\n        }\n        function K(t, e, n, r, i) {\n            for(n = e + n; e < n;){\n                var a = t[e++];\n                r[i++] = a >> 16 & 255, r[i++] = a >> 8 & 255, r[i++] = 255 & a;\n            }\n        }\n        function Z(t, e, n, r, i) {\n            for(n = e + n; e < n;){\n                var a = t[e++];\n                r[i++] = a >> 16 & 255, r[i++] = a >> 8 & 255, r[i++] = 255 & a, r[i++] = a >> 24 & 255;\n            }\n        }\n        function $(t, e, n, r, i) {\n            for(n = e + n; e < n;){\n                var a = (o = t[e++]) >> 16 & 240 | o >> 12 & 15, o = 240 & o | o >> 28 & 15;\n                r[i++] = a, r[i++] = o;\n            }\n        }\n        function Q(t, e, n, r, i) {\n            for(n = e + n; e < n;){\n                var a = (o = t[e++]) >> 16 & 248 | o >> 13 & 7, o = o >> 5 & 224 | o >> 3 & 31;\n                r[i++] = a, r[i++] = o;\n            }\n        }\n        function tt(t, e, n, r, i) {\n            for(n = e + n; e < n;){\n                var a = t[e++];\n                r[i++] = 255 & a, r[i++] = a >> 8 & 255, r[i++] = a >> 16 & 255;\n            }\n        }\n        function et(t, e, n, i, a, o) {\n            if (0 == o) for(n = e + n; e < n;)F(i, ((o = t[e++])[0] >> 24 | o[1] >> 8 & 65280 | o[2] << 8 & 16711680 | o[3] << 24) >>> 0), a += 32;\n            else r(i, a, t, e, n);\n        }\n        function nt(e, n) {\n            t[n][0] = t[e + \"0\"], t[n][1] = t[e + \"1\"], t[n][2] = t[e + \"2\"], t[n][3] = t[e + \"3\"], t[n][4] = t[e + \"4\"], t[n][5] = t[e + \"5\"], t[n][6] = t[e + \"6\"], t[n][7] = t[e + \"7\"], t[n][8] = t[e + \"8\"], t[n][9] = t[e + \"9\"], t[n][10] = t[e + \"10\"], t[n][11] = t[e + \"11\"], t[n][12] = t[e + \"12\"], t[n][13] = t[e + \"13\"], t[n][14] = t[e + \"0\"], t[n][15] = t[e + \"0\"];\n        }\n        function rt(t) {\n            return t == Ur || t == Hr || t == Wr || t == Vr;\n        }\n        function it() {\n            this.eb = [], this.size = this.A = this.fb = 0;\n        }\n        function at() {\n            this.y = [], this.f = [], this.ea = [], this.F = [], this.Tc = this.Ed = this.Cd = this.Fd = this.lb = this.Db = this.Ab = this.fa = this.J = this.W = this.N = this.O = 0;\n        }\n        function ot() {\n            this.Rd = this.height = this.width = this.S = 0, this.f = {}, this.f.RGBA = new it, this.f.kb = new at, this.sd = null;\n        }\n        function st() {\n            this.width = [\n                0\n            ], this.height = [\n                0\n            ], this.Pd = [\n                0\n            ], this.Qd = [\n                0\n            ], this.format = [\n                0\n            ];\n        }\n        function ut() {\n            this.Id = this.fd = this.Md = this.hb = this.ib = this.da = this.bd = this.cd = this.j = this.v = this.Da = this.Sd = this.ob = 0;\n        }\n        function ct(t) {\n            return alert(\"todo:WebPSamplerProcessPlane\"), t.T;\n        }\n        function lt(t, e) {\n            var n = t.T, i = e.ba.f.RGBA, a = i.eb, o = i.fb + t.ka * i.A, s = mi[e.ba.S], u = t.y, c = t.O, l = t.f, h = t.N, f = t.ea, d = t.W, p = e.cc, g = e.dc, m = e.Mc, v = e.Nc, b = t.ka, y = t.ka + t.T, w = t.U, N = w + 1 >> 1;\n            for(0 == b ? s(u, c, null, null, l, h, f, d, l, h, f, d, a, o, null, null, w) : (s(e.ec, e.fc, u, c, p, g, m, v, l, h, f, d, a, o - i.A, a, o, w), ++n); b + 2 < y; b += 2)p = l, g = h, m = f, v = d, h += t.Rc, d += t.Rc, o += 2 * i.A, s(u, (c += 2 * t.fa) - t.fa, u, c, p, g, m, v, l, h, f, d, a, o - i.A, a, o, w);\n            return c += t.fa, t.j + y < t.o ? (r(e.ec, e.fc, u, c, w), r(e.cc, e.dc, l, h, N), r(e.Mc, e.Nc, f, d, N), n--) : 1 & y || s(u, c, null, null, l, h, f, d, l, h, f, d, a, o + i.A, null, null, w), n;\n        }\n        function ht(t, n, r) {\n            var i = t.F, a = [\n                t.J\n            ];\n            if (null != i) {\n                var o = t.U, s = n.ba.S, u = s == Dr || s == Wr;\n                n = n.ba.f.RGBA;\n                var c = [\n                    0\n                ], l = t.ka;\n                c[0] = t.T, t.Kb && (0 == l ? --c[0] : (--l, a[0] -= t.width), t.j + t.ka + t.T == t.o && (c[0] = t.o - t.j - l));\n                var h = n.eb;\n                l = n.fb + l * n.A, t = Ar(i, a[0], t.width, o, c, h, l + (u ? 0 : 3), n.A), e(r == c), t && rt(s) && Lr(h, l, u, o, c, n.A);\n            }\n            return 0;\n        }\n        function ft(t) {\n            var e = t.ma, n = e.ba.S, r = 11 > n, i = n == qr || n == Rr || n == Dr || n == Tr || 12 == n || rt(n);\n            if (e.memory = null, e.Ib = null, e.Jb = null, e.Nd = null, !Mn(e.Oa, t, i ? 11 : 12)) return 0;\n            if (i && rt(n) && bn(), t.da) alert(\"todo:use_scaling\");\n            else {\n                if (r) {\n                    if (e.Ib = ct, t.Kb) {\n                        if (n = t.U + 1 >> 1, e.memory = a(t.U + 2 * n), null == e.memory) return 0;\n                        e.ec = e.memory, e.fc = 0, e.cc = e.ec, e.dc = e.fc + t.U, e.Mc = e.cc, e.Nc = e.dc + n, e.Ib = lt, bn();\n                    }\n                } else alert(\"todo:EmitYUV\");\n                i && (e.Jb = ht, r && mn());\n            }\n            if (r && !Ii) {\n                for(t = 0; 256 > t; ++t)ji[t] = 89858 * (t - 128) + Si >> Ai, Bi[t] = -22014 * (t - 128) + Si, Oi[t] = -45773 * (t - 128), Ci[t] = 113618 * (t - 128) + Si >> Ai;\n                for(t = _i; t < Pi; ++t)e = 76283 * (t - 16) + Si >> Ai, Mi[t - _i] = Vt(e, 255), qi[t - _i] = Vt(e + 8 >> 4, 15);\n                Ii = 1;\n            }\n            return 1;\n        }\n        function dt(t) {\n            var n = t.ma, r = t.U, i = t.T;\n            return e(!(1 & t.ka)), 0 >= r || 0 >= i ? 0 : (r = n.Ib(t, n), null != n.Jb && n.Jb(t, n, r), n.Dc += r, 1);\n        }\n        function pt(t) {\n            t.ma.memory = null;\n        }\n        function gt(t, e, n, r) {\n            return 47 != y(t, 8) ? 0 : (e[0] = y(t, 14) + 1, n[0] = y(t, 14) + 1, r[0] = y(t, 1), 0 != y(t, 3) ? 0 : !t.h);\n        }\n        function mt(t, e) {\n            if (4 > t) return t + 1;\n            var n = t - 2 >> 1;\n            return (2 + (1 & t) << n) + y(e, n) + 1;\n        }\n        function vt(t, e) {\n            return 120 < e ? e - 120 : 1 <= (n = ((n = Zr[e - 1]) >> 4) * t + (8 - (15 & n))) ? n : 1;\n            var n;\n        }\n        function bt(t, e, n) {\n            var r = L(n), i = t[e += 255 & r].g - 8;\n            return 0 < i && (A(n, n.u + 8), r = L(n), e += t[e].value, e += r & (1 << i) - 1), A(n, n.u + t[e].g), t[e].value;\n        }\n        function yt(t, n, r) {\n            return r.g += t.g, r.value += t.value << n >>> 0, e(8 >= r.g), t.g;\n        }\n        function wt(t, n, r) {\n            var i = t.xc;\n            return e((n = 0 == i ? 0 : t.vc[t.md * (r >> i) + (n >> i)]) < t.Wb), t.Ya[n];\n        }\n        function Nt(t, n, i, a) {\n            var o = t.ab, s = t.c * n, u = t.C;\n            n = u + n;\n            var c = i, l = a;\n            for(a = t.Ta, i = t.Ua; 0 < o--;){\n                var h = t.gc[o], f = u, d = n, p = c, g = l, m = (l = a, c = i, h.Ea);\n                switch(e(f < d), e(d <= h.nc), h.hc){\n                    case 2:\n                        Gn(p, g, (d - f) * m, l, c);\n                        break;\n                    case 0:\n                        var v = f, b = d, y = l, w = c, N = (_ = h).Ea;\n                        0 == v && (Wn(p, g, null, null, 1, y, w), V(p, g + 1, 0, 0, N - 1, y, w + 1), g += N, w += N, ++v);\n                        for(var L = 1 << _.b, x = L - 1, A = E(N, _.b), S = _.K, _ = _.w + (v >> _.b) * A; v < b;){\n                            var P = S, k = _, F = 1;\n                            for(Vn(p, g, y, w - N, 1, y, w); F < N;){\n                                var I = (F & ~x) + L;\n                                I > N && (I = N), (0, Zn[P[k++] >> 8 & 15])(p, g + +F, y, w + F - N, I - F, y, w + F), F = I;\n                            }\n                            g += N, w += N, ++v & x || (_ += A);\n                        }\n                        d != h.nc && r(l, c - m, l, c + (d - f - 1) * m, m);\n                        break;\n                    case 1:\n                        for(m = p, b = g, N = (p = h.Ea) - (w = p & ~(y = (g = 1 << h.b) - 1)), v = E(p, h.b), L = h.K, h = h.w + (f >> h.b) * v; f < d;){\n                            for(x = L, A = h, S = new T, _ = b + w, P = b + p; b < _;)Y(x[A++], S), $n(S, m, b, g, l, c), b += g, c += g;\n                            b < P && (Y(x[A++], S), $n(S, m, b, N, l, c), b += N, c += N), ++f & y || (h += v);\n                        }\n                        break;\n                    case 3:\n                        if (p == l && g == c && 0 < h.b) {\n                            for(b = l, p = m = c + (d - f) * m - (w = (d - f) * E(h.Ea, h.b)), g = l, y = c, v = [], w = (N = w) - 1; 0 <= w; --w)v[w] = g[y + w];\n                            for(w = N - 1; 0 <= w; --w)b[p + w] = v[w];\n                            Yn(h, f, d, l, m, l, c);\n                        } else Yn(h, f, d, p, g, l, c);\n                }\n                c = a, l = i;\n            }\n            l != i && r(a, i, c, l, s);\n        }\n        function Lt(t, n) {\n            var r = t.V, i = t.Ba + t.c * t.C, a = n - t.C;\n            if (e(n <= t.l.o), e(16 >= a), 0 < a) {\n                var o = t.l, s = t.Ta, u = t.Ua, c = o.width;\n                if (Nt(t, a, r, i), a = u = [\n                    u\n                ], e((r = t.C) < (i = n)), e(o.v < o.va), i > o.o && (i = o.o), r < o.j) {\n                    var l = o.j - r;\n                    r = o.j, a[0] += l * c;\n                }\n                if (r >= i ? r = 0 : (a[0] += 4 * o.v, o.ka = r - o.j, o.U = o.va - o.v, o.T = i - r, r = 1), r) {\n                    if (u = u[0], 11 > (r = t.ca).S) {\n                        var h = r.f.RGBA, f = (i = r.S, a = o.U, o = o.T, l = h.eb, h.A), d = o;\n                        for(h = h.fb + t.Ma * h.A; 0 < d--;){\n                            var p = s, g = u, m = a, v = l, b = h;\n                            switch(i){\n                                case Mr:\n                                    Qn(p, g, m, v, b);\n                                    break;\n                                case qr:\n                                    tr(p, g, m, v, b);\n                                    break;\n                                case Ur:\n                                    tr(p, g, m, v, b), Lr(v, b, 0, m, 1, 0);\n                                    break;\n                                case Er:\n                                    rr(p, g, m, v, b);\n                                    break;\n                                case Rr:\n                                    et(p, g, m, v, b, 1);\n                                    break;\n                                case Hr:\n                                    et(p, g, m, v, b, 1), Lr(v, b, 0, m, 1, 0);\n                                    break;\n                                case Dr:\n                                    et(p, g, m, v, b, 0);\n                                    break;\n                                case Wr:\n                                    et(p, g, m, v, b, 0), Lr(v, b, 1, m, 1, 0);\n                                    break;\n                                case Tr:\n                                    er(p, g, m, v, b);\n                                    break;\n                                case Vr:\n                                    er(p, g, m, v, b), xr(v, b, m, 1, 0);\n                                    break;\n                                case zr:\n                                    nr(p, g, m, v, b);\n                                    break;\n                                default:\n                                    e(0);\n                            }\n                            u += c, h += f;\n                        }\n                        t.Ma += o;\n                    } else alert(\"todo:EmitRescaledRowsYUVA\");\n                    e(t.Ma <= r.height);\n                }\n            }\n            t.C = n, e(t.C <= t.i);\n        }\n        function xt(t) {\n            var e;\n            if (0 < t.ua) return 0;\n            for(e = 0; e < t.Wb; ++e){\n                var n = t.Ya[e].G, r = t.Ya[e].H;\n                if (0 < n[1][r[1] + 0].g || 0 < n[2][r[2] + 0].g || 0 < n[3][r[3] + 0].g) return 0;\n            }\n            return 1;\n        }\n        function At(t, n, r, i, a, o) {\n            if (0 != t.Z) {\n                var s = t.qd, u = t.rd;\n                for(e(null != gi[t.Z]); n < r; ++n)gi[t.Z](s, u, i, a, i, a, o), s = i, u = a, a += o;\n                t.qd = s, t.rd = u;\n            }\n        }\n        function St(t, n) {\n            var r = t.l.ma, i = 0 == r.Z || 1 == r.Z ? t.l.j : t.C;\n            if (i = t.C < i ? i : t.C, e(n <= t.l.o), n > i) {\n                var a = t.l.width, o = r.ca, s = r.tb + a * i, u = t.V, c = t.Ba + t.c * i, l = t.gc;\n                e(1 == t.ab), e(3 == l[0].hc), Xn(l[0], i, n, u, c, o, s), At(r, i, n, o, s, a);\n            }\n            t.C = t.Ma = n;\n        }\n        function _t(t, n, r, i, a, o, s) {\n            var u = t.$ / i, c = t.$ % i, l = t.m, h = t.s, f = r + t.$, d = f;\n            a = r + i * a;\n            var p = r + i * o, g = 280 + h.ua, m = t.Pb ? u : 16777216, v = 0 < h.ua ? h.Wa : null, b = h.wc, y = f < p ? wt(h, c, u) : null;\n            e(t.C < o), e(p <= a);\n            var w = !1;\n            t: for(;;){\n                for(; w || f < p;){\n                    var N = 0;\n                    if (u >= m) {\n                        var _ = f - r;\n                        e((m = t).Pb), m.wd = m.m, m.xd = _, 0 < m.s.ua && B(m.s.Wa, m.s.vb), m = u + Qr;\n                    }\n                    if (c & b || (y = wt(h, c, u)), e(null != y), y.Qb && (n[f] = y.qb, w = !0), !w) if (S(l), y.jc) {\n                        N = l, _ = n;\n                        var P = f, k = y.pd[L(N) & Rn - 1];\n                        e(y.jc), 256 > k.g ? (A(N, N.u + k.g), _[P] = k.value, N = 0) : (A(N, N.u + k.g - 256), e(256 <= k.value), N = k.value), 0 == N && (w = !0);\n                    } else N = bt(y.G[0], y.H[0], l);\n                    if (l.h) break;\n                    if (w || 256 > N) {\n                        if (!w) if (y.nd) n[f] = (y.qb | N << 8) >>> 0;\n                        else {\n                            if (S(l), w = bt(y.G[1], y.H[1], l), S(l), _ = bt(y.G[2], y.H[2], l), P = bt(y.G[3], y.H[3], l), l.h) break;\n                            n[f] = (P << 24 | w << 16 | N << 8 | _) >>> 0;\n                        }\n                        if (w = !1, ++f, ++c >= i && (c = 0, ++u, null != s && u <= o && !(u % 16) && s(t, u), null != v)) for(; d < f;)N = n[d++], v.X[(506832829 * N & 4294967295) >>> v.Mb] = N;\n                    } else if (280 > N) {\n                        if (N = mt(N - 256, l), _ = bt(y.G[4], y.H[4], l), S(l), _ = vt(i, _ = mt(_, l)), l.h) break;\n                        if (f - r < _ || a - f < N) break t;\n                        for(P = 0; P < N; ++P)n[f + P] = n[f + P - _];\n                        for(f += N, c += N; c >= i;)c -= i, ++u, null != s && u <= o && !(u % 16) && s(t, u);\n                        if (e(f <= a), c & b && (y = wt(h, c, u)), null != v) for(; d < f;)N = n[d++], v.X[(506832829 * N & 4294967295) >>> v.Mb] = N;\n                    } else {\n                        if (!(N < g)) break t;\n                        for(w = N - 280, e(null != v); d < f;)N = n[d++], v.X[(506832829 * N & 4294967295) >>> v.Mb] = N;\n                        N = f, e(!(w >>> (_ = v).Xa)), n[N] = _.X[w], w = !0;\n                    }\n                    w || e(l.h == x(l));\n                }\n                if (t.Pb && l.h && f < a) e(t.m.h), t.a = 5, t.m = t.wd, t.$ = t.xd, 0 < t.s.ua && B(t.s.vb, t.s.Wa);\n                else {\n                    if (l.h) break t;\n                    null != s && s(t, u > o ? o : u), t.a = 0, t.$ = f - r;\n                }\n                return 1;\n            }\n            return t.a = 3, 0;\n        }\n        function Pt(t) {\n            e(null != t), t.vc = null, t.yc = null, t.Ya = null;\n            var n = t.Wa;\n            null != n && (n.X = null), t.vb = null, e(null != t);\n        }\n        function kt() {\n            var e = new on;\n            return null == e ? null : (e.a = 0, e.xb = pi, nt(\"Predictor\", \"VP8LPredictors\"), nt(\"Predictor\", \"VP8LPredictors_C\"), nt(\"PredictorAdd\", \"VP8LPredictorsAdd\"), nt(\"PredictorAdd\", \"VP8LPredictorsAdd_C\"), Gn = G, $n = J, Qn = K, tr = Z, er = $, nr = Q, rr = tt, t.VP8LMapColor32b = Jn, t.VP8LMapColor8b = Kn, e);\n        }\n        function Ft(t, n, r, s, u) {\n            var c = 1, f = [\n                t\n            ], p = [\n                n\n            ], g = s.m, m = s.s, v = null, b = 0;\n            t: for(;;){\n                if (r) for(; c && y(g, 1);){\n                    var w = f, N = p, x = s, _ = 1, P = x.m, k = x.gc[x.ab], F = y(P, 2);\n                    if (x.Oc & 1 << F) c = 0;\n                    else {\n                        switch(x.Oc |= 1 << F, k.hc = F, k.Ea = w[0], k.nc = N[0], k.K = [\n                            null\n                        ], ++x.ab, e(4 >= x.ab), F){\n                            case 0:\n                            case 1:\n                                k.b = y(P, 3) + 2, _ = Ft(E(k.Ea, k.b), E(k.nc, k.b), 0, x, k.K), k.K = k.K[0];\n                                break;\n                            case 3:\n                                var I, j = y(P, 8) + 1, C = 16 < j ? 0 : 4 < j ? 1 : 2 < j ? 2 : 3;\n                                if (w[0] = E(k.Ea, C), k.b = C, I = _ = Ft(j, 1, 0, x, k.K)) {\n                                    var B, M = j, q = k, D = 1 << (8 >> q.b), T = a(D);\n                                    if (null == T) I = 0;\n                                    else {\n                                        var z = q.K[0], U = q.w;\n                                        for(T[0] = q.K[0][0], B = 1; B < 1 * M; ++B)T[B] = R(z[U + B], T[B - 1]);\n                                        for(; B < 4 * D; ++B)T[B] = 0;\n                                        q.K[0] = null, q.K[0] = T, I = 1;\n                                    }\n                                }\n                                _ = I;\n                                break;\n                            case 2:\n                                break;\n                            default:\n                                e(0);\n                        }\n                        c = _;\n                    }\n                }\n                if (f = f[0], p = p[0], c && y(g, 1) && !(c = 1 <= (b = y(g, 4)) && 11 >= b)) {\n                    s.a = 3;\n                    break t;\n                }\n                var H;\n                if (H = c) e: {\n                    var W, V, G, Y = s, J = f, X = p, K = b, Z = r, $ = Y.m, Q = Y.s, tt = [\n                        null\n                    ], et = 1, nt = 0, rt = $r[K];\n                    n: for(;;){\n                        if (Z && y($, 1)) {\n                            var it = y($, 3) + 2, at = E(J, it), ot = E(X, it), st = at * ot;\n                            if (!Ft(at, ot, 0, Y, tt)) break n;\n                            for(tt = tt[0], Q.xc = it, W = 0; W < st; ++W){\n                                var ut = tt[W] >> 8 & 65535;\n                                tt[W] = ut, ut >= et && (et = ut + 1);\n                            }\n                        }\n                        if ($.h) break n;\n                        for(V = 0; 5 > V; ++V){\n                            var ct = Jr[V];\n                            !V && 0 < K && (ct += 1 << K), nt < ct && (nt = ct);\n                        }\n                        var lt = o(et * rt, h), ht = et, ft = o(ht, d);\n                        if (null == ft) var dt = null;\n                        else e(65536 >= ht), dt = ft;\n                        var pt = a(nt);\n                        if (null == dt || null == pt || null == lt) {\n                            Y.a = 1;\n                            break n;\n                        }\n                        var gt = lt;\n                        for(W = G = 0; W < et; ++W){\n                            var mt = dt[W], vt = mt.G, bt = mt.H, wt = 0, Nt = 1, Lt = 0;\n                            for(V = 0; 5 > V; ++V){\n                                ct = Jr[V], vt[V] = gt, bt[V] = G, !V && 0 < K && (ct += 1 << K);\n                                r: {\n                                    var xt, At = ct, St = Y, kt = pt, It = gt, jt = G, Ct = 0, Ot = St.m, Bt = y(Ot, 1);\n                                    if (i(kt, 0, 0, At), Bt) {\n                                        var Mt = y(Ot, 1) + 1, qt = y(Ot, 1), Et = y(Ot, 0 == qt ? 1 : 8);\n                                        kt[Et] = 1, 2 == Mt && (kt[Et = y(Ot, 8)] = 1);\n                                        var Rt = 1;\n                                    } else {\n                                        var Dt = a(19), Tt = y(Ot, 4) + 4;\n                                        if (19 < Tt) {\n                                            St.a = 3;\n                                            var zt = 0;\n                                            break r;\n                                        }\n                                        for(xt = 0; xt < Tt; ++xt)Dt[Kr[xt]] = y(Ot, 3);\n                                        var Ut = void 0, Ht = void 0, Wt = St, Vt = Dt, Gt = At, Yt = kt, Jt = 0, Xt = Wt.m, Kt = 8, Zt = o(128, h);\n                                        i: for(; l(Zt, 0, 7, Vt, 19);){\n                                            if (y(Xt, 1)) {\n                                                var $t = 2 + 2 * y(Xt, 3);\n                                                if ((Ut = 2 + y(Xt, $t)) > Gt) break i;\n                                            } else Ut = Gt;\n                                            for(Ht = 0; Ht < Gt && Ut--;){\n                                                S(Xt);\n                                                var Qt = Zt[0 + (127 & L(Xt))];\n                                                A(Xt, Xt.u + Qt.g);\n                                                var te = Qt.value;\n                                                if (16 > te) Yt[Ht++] = te, 0 != te && (Kt = te);\n                                                else {\n                                                    var ee = 16 == te, ne = te - 16, re = Yr[ne], ie = y(Xt, Gr[ne]) + re;\n                                                    if (Ht + ie > Gt) break i;\n                                                    for(var ae = ee ? Kt : 0; 0 < ie--;)Yt[Ht++] = ae;\n                                                }\n                                            }\n                                            Jt = 1;\n                                            break i;\n                                        }\n                                        Jt || (Wt.a = 3), Rt = Jt;\n                                    }\n                                    (Rt = Rt && !Ot.h) && (Ct = l(It, jt, 8, kt, At)), Rt && 0 != Ct ? zt = Ct : (St.a = 3, zt = 0);\n                                }\n                                if (0 == zt) break n;\n                                if (Nt && 1 == Xr[V] && (Nt = 0 == gt[G].g), wt += gt[G].g, G += zt, 3 >= V) {\n                                    var oe, se = pt[0];\n                                    for(oe = 1; oe < ct; ++oe)pt[oe] > se && (se = pt[oe]);\n                                    Lt += se;\n                                }\n                            }\n                            if (mt.nd = Nt, mt.Qb = 0, Nt && (mt.qb = (vt[3][bt[3] + 0].value << 24 | vt[1][bt[1] + 0].value << 16 | vt[2][bt[2] + 0].value) >>> 0, 0 == wt && 256 > vt[0][bt[0] + 0].value && (mt.Qb = 1, mt.qb += vt[0][bt[0] + 0].value << 8)), mt.jc = !mt.Qb && 6 > Lt, mt.jc) {\n                                var ue, ce = mt;\n                                for(ue = 0; ue < Rn; ++ue){\n                                    var le = ue, he = ce.pd[le], fe = ce.G[0][ce.H[0] + le];\n                                    256 <= fe.value ? (he.g = fe.g + 256, he.value = fe.value) : (he.g = 0, he.value = 0, le >>= yt(fe, 8, he), le >>= yt(ce.G[1][ce.H[1] + le], 16, he), le >>= yt(ce.G[2][ce.H[2] + le], 0, he), yt(ce.G[3][ce.H[3] + le], 24, he));\n                                }\n                            }\n                        }\n                        Q.vc = tt, Q.Wb = et, Q.Ya = dt, Q.yc = lt, H = 1;\n                        break e;\n                    }\n                    H = 0;\n                }\n                if (!(c = H)) {\n                    s.a = 3;\n                    break t;\n                }\n                if (0 < b) {\n                    if (m.ua = 1 << b, !O(m.Wa, b)) {\n                        s.a = 1, c = 0;\n                        break t;\n                    }\n                } else m.ua = 0;\n                var de = s, pe = f, ge = p, me = de.s, ve = me.xc;\n                if (de.c = pe, de.i = ge, me.md = E(pe, ve), me.wc = 0 == ve ? -1 : (1 << ve) - 1, r) {\n                    s.xb = di;\n                    break t;\n                }\n                if (null == (v = a(f * p))) {\n                    s.a = 1, c = 0;\n                    break t;\n                }\n                c = (c = _t(s, v, 0, f, p, p, null)) && !g.h;\n                break t;\n            }\n            return c ? (null != u ? u[0] = v : (e(null == v), e(r)), s.$ = 0, r || Pt(m)) : Pt(m), c;\n        }\n        function It(t, n) {\n            var r = t.c * t.i, i = r + n + 16 * n;\n            return e(t.c <= n), t.V = a(i), null == t.V ? (t.Ta = null, t.Ua = 0, t.a = 1, 0) : (t.Ta = t.V, t.Ua = t.Ba + r + n, 1);\n        }\n        function jt(t, n) {\n            var r = t.C, i = n - r, a = t.V, o = t.Ba + t.c * r;\n            for(e(n <= t.l.o); 0 < i;){\n                var s = 16 < i ? 16 : i, u = t.l.ma, c = t.l.width, l = c * s, h = u.ca, f = u.tb + c * r, d = t.Ta, p = t.Ua;\n                Nt(t, s, a, o), Sr(d, p, h, f, l), At(u, r, r + s, h, f, c), i -= s, a += s * t.c, r += s;\n            }\n            e(r == n), t.C = t.Ma = n;\n        }\n        function Ct() {\n            this.ub = this.yd = this.td = this.Rb = 0;\n        }\n        function Ot() {\n            this.Kd = this.Ld = this.Ud = this.Td = this.i = this.c = 0;\n        }\n        function Bt() {\n            this.Fb = this.Bb = this.Cb = 0, this.Zb = a(4), this.Lb = a(4);\n        }\n        function Mt() {\n            this.Yb = function() {\n                var t = [];\n                return function t(e, n, r) {\n                    for(var i = r[n], a = 0; a < i && (e.push(r.length > n + 1 ? [] : 0), !(r.length < n + 1)); a++)t(e[a], n + 1, r);\n                }(t, 0, [\n                    3,\n                    11\n                ]), t;\n            }();\n        }\n        function qt() {\n            this.jb = a(3), this.Wc = s([\n                4,\n                8\n            ], Mt), this.Xc = s([\n                4,\n                17\n            ], Mt);\n        }\n        function Et() {\n            this.Pc = this.wb = this.Tb = this.zd = 0, this.vd = new a(4), this.od = new a(4);\n        }\n        function Rt() {\n            this.ld = this.La = this.dd = this.tc = 0;\n        }\n        function Dt() {\n            this.Na = this.la = 0;\n        }\n        function Tt() {\n            this.Sc = [\n                0,\n                0\n            ], this.Eb = [\n                0,\n                0\n            ], this.Qc = [\n                0,\n                0\n            ], this.ia = this.lc = 0;\n        }\n        function zt() {\n            this.ad = a(384), this.Za = 0, this.Ob = a(16), this.$b = this.Ad = this.ia = this.Gc = this.Hc = this.Dd = 0;\n        }\n        function Ut() {\n            this.uc = this.M = this.Nb = 0, this.wa = Array(new Rt), this.Y = 0, this.ya = Array(new zt), this.aa = 0, this.l = new Gt;\n        }\n        function Ht() {\n            this.y = a(16), this.f = a(8), this.ea = a(8);\n        }\n        function Wt() {\n            this.cb = this.a = 0, this.sc = \"\", this.m = new w, this.Od = new Ct, this.Kc = new Ot, this.ed = new Et, this.Qa = new Bt, this.Ic = this.$c = this.Aa = 0, this.D = new Ut, this.Xb = this.Va = this.Hb = this.zb = this.yb = this.Ub = this.za = 0, this.Jc = o(8, w), this.ia = 0, this.pb = o(4, Tt), this.Pa = new qt, this.Bd = this.kc = 0, this.Ac = [], this.Bc = 0, this.zc = [\n                0,\n                0,\n                0,\n                0\n            ], this.Gd = Array(new Ht), this.Hd = 0, this.rb = Array(new Dt), this.sb = 0, this.wa = Array(new Rt), this.Y = 0, this.oc = [], this.pc = 0, this.sa = [], this.ta = 0, this.qa = [], this.ra = 0, this.Ha = [], this.B = this.R = this.Ia = 0, this.Ec = [], this.M = this.ja = this.Vb = this.Fc = 0, this.ya = Array(new zt), this.L = this.aa = 0, this.gd = s([\n                4,\n                2\n            ], Rt), this.ga = null, this.Fa = [], this.Cc = this.qc = this.P = 0, this.Gb = [], this.Uc = 0, this.mb = [], this.nb = 0, this.rc = [], this.Ga = this.Vc = 0;\n        }\n        function Vt(t, e) {\n            return 0 > t ? 0 : t > e ? e : t;\n        }\n        function Gt() {\n            this.T = this.U = this.ka = this.height = this.width = 0, this.y = [], this.f = [], this.ea = [], this.Rc = this.fa = this.W = this.N = this.O = 0, this.ma = \"void\", this.put = \"VP8IoPutHook\", this.ac = \"VP8IoSetupHook\", this.bc = \"VP8IoTeardownHook\", this.ha = this.Kb = 0, this.data = [], this.hb = this.ib = this.da = this.o = this.j = this.va = this.v = this.Da = this.ob = this.w = 0, this.F = [], this.J = 0;\n        }\n        function Yt() {\n            var t = new Wt;\n            return null != t && (t.a = 0, t.sc = \"OK\", t.cb = 0, t.Xb = 0, ni || (ni = Zt)), t;\n        }\n        function Jt(t, e, n) {\n            return 0 == t.a && (t.a = e, t.sc = n, t.cb = 0), 0;\n        }\n        function Xt(t, e, n) {\n            return 3 <= n && 157 == t[e + 0] && 1 == t[e + 1] && 42 == t[e + 2];\n        }\n        function Kt(t, n) {\n            if (null == t) return 0;\n            if (t.a = 0, t.sc = \"OK\", null == n) return Jt(t, 2, \"null VP8Io passed to VP8GetHeaders()\");\n            var r = n.data, a = n.w, o = n.ha;\n            if (4 > o) return Jt(t, 7, \"Truncated header.\");\n            var s = r[a + 0] | r[a + 1] << 8 | r[a + 2] << 16, u = t.Od;\n            if (u.Rb = !(1 & s), u.td = s >> 1 & 7, u.yd = s >> 4 & 1, u.ub = s >> 5, 3 < u.td) return Jt(t, 3, \"Incorrect keyframe parameters.\");\n            if (!u.yd) return Jt(t, 4, \"Frame not displayable.\");\n            a += 3, o -= 3;\n            var c = t.Kc;\n            if (u.Rb) {\n                if (7 > o) return Jt(t, 7, \"cannot parse picture header\");\n                if (!Xt(r, a, o)) return Jt(t, 3, \"Bad code word\");\n                c.c = 16383 & (r[a + 4] << 8 | r[a + 3]), c.Td = r[a + 4] >> 6, c.i = 16383 & (r[a + 6] << 8 | r[a + 5]), c.Ud = r[a + 6] >> 6, a += 7, o -= 7, t.za = c.c + 15 >> 4, t.Ub = c.i + 15 >> 4, n.width = c.c, n.height = c.i, n.Da = 0, n.j = 0, n.v = 0, n.va = n.width, n.o = n.height, n.da = 0, n.ib = n.width, n.hb = n.height, n.U = n.width, n.T = n.height, i((s = t.Pa).jb, 0, 255, s.jb.length), e(null != (s = t.Qa)), s.Cb = 0, s.Bb = 0, s.Fb = 1, i(s.Zb, 0, 0, s.Zb.length), i(s.Lb, 0, 0, s.Lb);\n            }\n            if (u.ub > o) return Jt(t, 7, \"bad partition length\");\n            p(s = t.m, r, a, u.ub), a += u.ub, o -= u.ub, u.Rb && (c.Ld = P(s), c.Kd = P(s)), c = t.Qa;\n            var l, h = t.Pa;\n            if (e(null != s), e(null != c), c.Cb = P(s), c.Cb) {\n                if (c.Bb = P(s), P(s)) {\n                    for(c.Fb = P(s), l = 0; 4 > l; ++l)c.Zb[l] = P(s) ? m(s, 7) : 0;\n                    for(l = 0; 4 > l; ++l)c.Lb[l] = P(s) ? m(s, 6) : 0;\n                }\n                if (c.Bb) for(l = 0; 3 > l; ++l)h.jb[l] = P(s) ? g(s, 8) : 255;\n            } else c.Bb = 0;\n            if (s.Ka) return Jt(t, 3, \"cannot parse segment header\");\n            if ((c = t.ed).zd = P(s), c.Tb = g(s, 6), c.wb = g(s, 3), c.Pc = P(s), c.Pc && P(s)) {\n                for(h = 0; 4 > h; ++h)P(s) && (c.vd[h] = m(s, 6));\n                for(h = 0; 4 > h; ++h)P(s) && (c.od[h] = m(s, 6));\n            }\n            if (t.L = 0 == c.Tb ? 0 : c.zd ? 1 : 2, s.Ka) return Jt(t, 3, \"cannot parse filter header\");\n            var f = o;\n            if (o = l = a, a = l + f, c = f, t.Xb = (1 << g(t.m, 2)) - 1, f < 3 * (h = t.Xb)) r = 7;\n            else {\n                for(l += 3 * h, c -= 3 * h, f = 0; f < h; ++f){\n                    var d = r[o + 0] | r[o + 1] << 8 | r[o + 2] << 16;\n                    d > c && (d = c), p(t.Jc[+f], r, l, d), l += d, c -= d, o += 3;\n                }\n                p(t.Jc[+h], r, l, c), r = l < a ? 0 : 5;\n            }\n            if (0 != r) return Jt(t, r, \"cannot parse partitions\");\n            for(r = g(l = t.m, 7), o = P(l) ? m(l, 4) : 0, a = P(l) ? m(l, 4) : 0, c = P(l) ? m(l, 4) : 0, h = P(l) ? m(l, 4) : 0, l = P(l) ? m(l, 4) : 0, f = t.Qa, d = 0; 4 > d; ++d){\n                if (f.Cb) {\n                    var v = f.Zb[d];\n                    f.Fb || (v += r);\n                } else {\n                    if (0 < d) {\n                        t.pb[d] = t.pb[0];\n                        continue;\n                    }\n                    v = r;\n                }\n                var b = t.pb[d];\n                b.Sc[0] = ti[Vt(v + o, 127)], b.Sc[1] = ei[Vt(v + 0, 127)], b.Eb[0] = 2 * ti[Vt(v + a, 127)], b.Eb[1] = 101581 * ei[Vt(v + c, 127)] >> 16, 8 > b.Eb[1] && (b.Eb[1] = 8), b.Qc[0] = ti[Vt(v + h, 117)], b.Qc[1] = ei[Vt(v + l, 127)], b.lc = v + l;\n            }\n            if (!u.Rb) return Jt(t, 4, \"Not a key frame.\");\n            for(P(s), u = t.Pa, r = 0; 4 > r; ++r){\n                for(o = 0; 8 > o; ++o)for(a = 0; 3 > a; ++a)for(c = 0; 11 > c; ++c)h = k(s, ui[r][o][a][c]) ? g(s, 8) : oi[r][o][a][c], u.Wc[r][o].Yb[a][c] = h;\n                for(o = 0; 17 > o; ++o)u.Xc[r][o] = u.Wc[r][ci[o]];\n            }\n            return t.kc = P(s), t.kc && (t.Bd = g(s, 8)), t.cb = 1;\n        }\n        function Zt(t, e, n, r, i, a, o) {\n            var s = e[i].Yb[n];\n            for(n = 0; 16 > i; ++i){\n                if (!k(t, s[n + 0])) return i;\n                for(; !k(t, s[n + 1]);)if (s = e[++i].Yb[0], n = 0, 16 == i) return 16;\n                var u = e[i + 1].Yb;\n                if (k(t, s[n + 2])) {\n                    var c = t, l = 0;\n                    if (k(c, (f = s)[(h = n) + 3])) if (k(c, f[h + 6])) {\n                        for(s = 0, h = 2 * (l = k(c, f[h + 8])) + (f = k(c, f[h + 9 + l])), l = 0, f = ri[h]; f[s]; ++s)l += l + k(c, f[s]);\n                        l += 3 + (8 << h);\n                    } else k(c, f[h + 7]) ? (l = 7 + 2 * k(c, 165), l += k(c, 145)) : l = 5 + k(c, 159);\n                    else l = k(c, f[h + 4]) ? 3 + k(c, f[h + 5]) : 2;\n                    s = u[2];\n                } else l = 1, s = u[1];\n                u = o + ii[i], 0 > (c = t).b && _(c);\n                var h, f = c.b, d = (h = c.Ca >> 1) - (c.I >> f) >> 31;\n                --c.b, c.Ca += d, c.Ca |= 1, c.I -= (h + 1 & d) << f, a[u] = ((l ^ d) - d) * r[(0 < i) + 0];\n            }\n            return 16;\n        }\n        function $t(t) {\n            var e = t.rb[t.sb - 1];\n            e.la = 0, e.Na = 0, i(t.zc, 0, 0, t.zc.length), t.ja = 0;\n        }\n        function Qt(t, e, n, r, i) {\n            i = t[e + n + 32 * r] + (i >> 3), t[e + n + 32 * r] = -256 & i ? 0 > i ? 0 : 255 : i;\n        }\n        function te(t, e, n, r, i, a) {\n            Qt(t, e, 0, n, r + i), Qt(t, e, 1, n, r + a), Qt(t, e, 2, n, r - a), Qt(t, e, 3, n, r - i);\n        }\n        function ee(t) {\n            return (20091 * t >> 16) + t;\n        }\n        function ne(t, e, n, r) {\n            var i, o = 0, s = a(16);\n            for(i = 0; 4 > i; ++i){\n                var u = t[e + 0] + t[e + 8], c = t[e + 0] - t[e + 8], l = (35468 * t[e + 4] >> 16) - ee(t[e + 12]), h = ee(t[e + 4]) + (35468 * t[e + 12] >> 16);\n                s[o + 0] = u + h, s[o + 1] = c + l, s[o + 2] = c - l, s[o + 3] = u - h, o += 4, e++;\n            }\n            for(i = o = 0; 4 > i; ++i)u = (t = s[o + 0] + 4) + s[o + 8], c = t - s[o + 8], l = (35468 * s[o + 4] >> 16) - ee(s[o + 12]), Qt(n, r, 0, 0, u + (h = ee(s[o + 4]) + (35468 * s[o + 12] >> 16))), Qt(n, r, 1, 0, c + l), Qt(n, r, 2, 0, c - l), Qt(n, r, 3, 0, u - h), o++, r += 32;\n        }\n        function re(t, e, n, r) {\n            var i = t[e + 0] + 4, a = 35468 * t[e + 4] >> 16, o = ee(t[e + 4]), s = 35468 * t[e + 1] >> 16;\n            te(n, r, 0, i + o, t = ee(t[e + 1]), s), te(n, r, 1, i + a, t, s), te(n, r, 2, i - a, t, s), te(n, r, 3, i - o, t, s);\n        }\n        function ie(t, e, n, r, i) {\n            ne(t, e, n, r), i && ne(t, e + 16, n, r + 4);\n        }\n        function ae(t, e, n, r) {\n            ar(t, e + 0, n, r, 1), ar(t, e + 32, n, r + 128, 1);\n        }\n        function oe(t, e, n, r) {\n            var i;\n            for(t = t[e + 0] + 4, i = 0; 4 > i; ++i)for(e = 0; 4 > e; ++e)Qt(n, r, e, i, t);\n        }\n        function se(t, e, n, r) {\n            t[e + 0] && ur(t, e + 0, n, r), t[e + 16] && ur(t, e + 16, n, r + 4), t[e + 32] && ur(t, e + 32, n, r + 128), t[e + 48] && ur(t, e + 48, n, r + 128 + 4);\n        }\n        function ue(t, e, n, r) {\n            var i, o = a(16);\n            for(i = 0; 4 > i; ++i){\n                var s = t[e + 0 + i] + t[e + 12 + i], u = t[e + 4 + i] + t[e + 8 + i], c = t[e + 4 + i] - t[e + 8 + i], l = t[e + 0 + i] - t[e + 12 + i];\n                o[0 + i] = s + u, o[8 + i] = s - u, o[4 + i] = l + c, o[12 + i] = l - c;\n            }\n            for(i = 0; 4 > i; ++i)s = (t = o[0 + 4 * i] + 3) + o[3 + 4 * i], u = o[1 + 4 * i] + o[2 + 4 * i], c = o[1 + 4 * i] - o[2 + 4 * i], l = t - o[3 + 4 * i], n[r + 0] = s + u >> 3, n[r + 16] = l + c >> 3, n[r + 32] = s - u >> 3, n[r + 48] = l - c >> 3, r += 64;\n        }\n        function ce(t, e, n) {\n            var r, i = e - 32, a = Or, o = 255 - t[i - 1];\n            for(r = 0; r < n; ++r){\n                var s, u = a, c = o + t[e - 1];\n                for(s = 0; s < n; ++s)t[e + s] = u[c + t[i + s]];\n                e += 32;\n            }\n        }\n        function le(t, e) {\n            ce(t, e, 4);\n        }\n        function he(t, e) {\n            ce(t, e, 8);\n        }\n        function fe(t, e) {\n            ce(t, e, 16);\n        }\n        function de(t, e) {\n            var n;\n            for(n = 0; 16 > n; ++n)r(t, e + 32 * n, t, e - 32, 16);\n        }\n        function pe(t, e) {\n            var n;\n            for(n = 16; 0 < n; --n)i(t, e, t[e - 1], 16), e += 32;\n        }\n        function ge(t, e, n) {\n            var r;\n            for(r = 0; 16 > r; ++r)i(e, n + 32 * r, t, 16);\n        }\n        function me(t, e) {\n            var n, r = 16;\n            for(n = 0; 16 > n; ++n)r += t[e - 1 + 32 * n] + t[e + n - 32];\n            ge(r >> 5, t, e);\n        }\n        function ve(t, e) {\n            var n, r = 8;\n            for(n = 0; 16 > n; ++n)r += t[e - 1 + 32 * n];\n            ge(r >> 4, t, e);\n        }\n        function be(t, e) {\n            var n, r = 8;\n            for(n = 0; 16 > n; ++n)r += t[e + n - 32];\n            ge(r >> 4, t, e);\n        }\n        function ye(t, e) {\n            ge(128, t, e);\n        }\n        function we(t, e, n) {\n            return t + 2 * e + n + 2 >> 2;\n        }\n        function Ne(t, e) {\n            var n, i = e - 32;\n            for(i = new Uint8Array([\n                we(t[i - 1], t[i + 0], t[i + 1]),\n                we(t[i + 0], t[i + 1], t[i + 2]),\n                we(t[i + 1], t[i + 2], t[i + 3]),\n                we(t[i + 2], t[i + 3], t[i + 4])\n            ]), n = 0; 4 > n; ++n)r(t, e + 32 * n, i, 0, i.length);\n        }\n        function Le(t, e) {\n            var n = t[e - 1], r = t[e - 1 + 32], i = t[e - 1 + 64], a = t[e - 1 + 96];\n            F(t, e + 0, 16843009 * we(t[e - 1 - 32], n, r)), F(t, e + 32, 16843009 * we(n, r, i)), F(t, e + 64, 16843009 * we(r, i, a)), F(t, e + 96, 16843009 * we(i, a, a));\n        }\n        function xe(t, e) {\n            var n, r = 4;\n            for(n = 0; 4 > n; ++n)r += t[e + n - 32] + t[e - 1 + 32 * n];\n            for(r >>= 3, n = 0; 4 > n; ++n)i(t, e + 32 * n, r, 4);\n        }\n        function Ae(t, e) {\n            var n = t[e - 1 + 0], r = t[e - 1 + 32], i = t[e - 1 + 64], a = t[e - 1 - 32], o = t[e + 0 - 32], s = t[e + 1 - 32], u = t[e + 2 - 32], c = t[e + 3 - 32];\n            t[e + 0 + 96] = we(r, i, t[e - 1 + 96]), t[e + 1 + 96] = t[e + 0 + 64] = we(n, r, i), t[e + 2 + 96] = t[e + 1 + 64] = t[e + 0 + 32] = we(a, n, r), t[e + 3 + 96] = t[e + 2 + 64] = t[e + 1 + 32] = t[e + 0 + 0] = we(o, a, n), t[e + 3 + 64] = t[e + 2 + 32] = t[e + 1 + 0] = we(s, o, a), t[e + 3 + 32] = t[e + 2 + 0] = we(u, s, o), t[e + 3 + 0] = we(c, u, s);\n        }\n        function Se(t, e) {\n            var n = t[e + 1 - 32], r = t[e + 2 - 32], i = t[e + 3 - 32], a = t[e + 4 - 32], o = t[e + 5 - 32], s = t[e + 6 - 32], u = t[e + 7 - 32];\n            t[e + 0 + 0] = we(t[e + 0 - 32], n, r), t[e + 1 + 0] = t[e + 0 + 32] = we(n, r, i), t[e + 2 + 0] = t[e + 1 + 32] = t[e + 0 + 64] = we(r, i, a), t[e + 3 + 0] = t[e + 2 + 32] = t[e + 1 + 64] = t[e + 0 + 96] = we(i, a, o), t[e + 3 + 32] = t[e + 2 + 64] = t[e + 1 + 96] = we(a, o, s), t[e + 3 + 64] = t[e + 2 + 96] = we(o, s, u), t[e + 3 + 96] = we(s, u, u);\n        }\n        function _e(t, e) {\n            var n = t[e - 1 + 0], r = t[e - 1 + 32], i = t[e - 1 + 64], a = t[e - 1 - 32], o = t[e + 0 - 32], s = t[e + 1 - 32], u = t[e + 2 - 32], c = t[e + 3 - 32];\n            t[e + 0 + 0] = t[e + 1 + 64] = a + o + 1 >> 1, t[e + 1 + 0] = t[e + 2 + 64] = o + s + 1 >> 1, t[e + 2 + 0] = t[e + 3 + 64] = s + u + 1 >> 1, t[e + 3 + 0] = u + c + 1 >> 1, t[e + 0 + 96] = we(i, r, n), t[e + 0 + 64] = we(r, n, a), t[e + 0 + 32] = t[e + 1 + 96] = we(n, a, o), t[e + 1 + 32] = t[e + 2 + 96] = we(a, o, s), t[e + 2 + 32] = t[e + 3 + 96] = we(o, s, u), t[e + 3 + 32] = we(s, u, c);\n        }\n        function Pe(t, e) {\n            var n = t[e + 0 - 32], r = t[e + 1 - 32], i = t[e + 2 - 32], a = t[e + 3 - 32], o = t[e + 4 - 32], s = t[e + 5 - 32], u = t[e + 6 - 32], c = t[e + 7 - 32];\n            t[e + 0 + 0] = n + r + 1 >> 1, t[e + 1 + 0] = t[e + 0 + 64] = r + i + 1 >> 1, t[e + 2 + 0] = t[e + 1 + 64] = i + a + 1 >> 1, t[e + 3 + 0] = t[e + 2 + 64] = a + o + 1 >> 1, t[e + 0 + 32] = we(n, r, i), t[e + 1 + 32] = t[e + 0 + 96] = we(r, i, a), t[e + 2 + 32] = t[e + 1 + 96] = we(i, a, o), t[e + 3 + 32] = t[e + 2 + 96] = we(a, o, s), t[e + 3 + 64] = we(o, s, u), t[e + 3 + 96] = we(s, u, c);\n        }\n        function ke(t, e) {\n            var n = t[e - 1 + 0], r = t[e - 1 + 32], i = t[e - 1 + 64], a = t[e - 1 + 96];\n            t[e + 0 + 0] = n + r + 1 >> 1, t[e + 2 + 0] = t[e + 0 + 32] = r + i + 1 >> 1, t[e + 2 + 32] = t[e + 0 + 64] = i + a + 1 >> 1, t[e + 1 + 0] = we(n, r, i), t[e + 3 + 0] = t[e + 1 + 32] = we(r, i, a), t[e + 3 + 32] = t[e + 1 + 64] = we(i, a, a), t[e + 3 + 64] = t[e + 2 + 64] = t[e + 0 + 96] = t[e + 1 + 96] = t[e + 2 + 96] = t[e + 3 + 96] = a;\n        }\n        function Fe(t, e) {\n            var n = t[e - 1 + 0], r = t[e - 1 + 32], i = t[e - 1 + 64], a = t[e - 1 + 96], o = t[e - 1 - 32], s = t[e + 0 - 32], u = t[e + 1 - 32], c = t[e + 2 - 32];\n            t[e + 0 + 0] = t[e + 2 + 32] = n + o + 1 >> 1, t[e + 0 + 32] = t[e + 2 + 64] = r + n + 1 >> 1, t[e + 0 + 64] = t[e + 2 + 96] = i + r + 1 >> 1, t[e + 0 + 96] = a + i + 1 >> 1, t[e + 3 + 0] = we(s, u, c), t[e + 2 + 0] = we(o, s, u), t[e + 1 + 0] = t[e + 3 + 32] = we(n, o, s), t[e + 1 + 32] = t[e + 3 + 64] = we(r, n, o), t[e + 1 + 64] = t[e + 3 + 96] = we(i, r, n), t[e + 1 + 96] = we(a, i, r);\n        }\n        function Ie(t, e) {\n            var n;\n            for(n = 0; 8 > n; ++n)r(t, e + 32 * n, t, e - 32, 8);\n        }\n        function je(t, e) {\n            var n;\n            for(n = 0; 8 > n; ++n)i(t, e, t[e - 1], 8), e += 32;\n        }\n        function Ce(t, e, n) {\n            var r;\n            for(r = 0; 8 > r; ++r)i(e, n + 32 * r, t, 8);\n        }\n        function Oe(t, e) {\n            var n, r = 8;\n            for(n = 0; 8 > n; ++n)r += t[e + n - 32] + t[e - 1 + 32 * n];\n            Ce(r >> 4, t, e);\n        }\n        function Be(t, e) {\n            var n, r = 4;\n            for(n = 0; 8 > n; ++n)r += t[e + n - 32];\n            Ce(r >> 3, t, e);\n        }\n        function Me(t, e) {\n            var n, r = 4;\n            for(n = 0; 8 > n; ++n)r += t[e - 1 + 32 * n];\n            Ce(r >> 3, t, e);\n        }\n        function qe(t, e) {\n            Ce(128, t, e);\n        }\n        function Ee(t, e, n) {\n            var r = t[e - n], i = t[e + 0], a = 3 * (i - r) + jr[1020 + t[e - 2 * n] - t[e + n]], o = Cr[112 + (a + 4 >> 3)];\n            t[e - n] = Or[255 + r + Cr[112 + (a + 3 >> 3)]], t[e + 0] = Or[255 + i - o];\n        }\n        function Re(t, e, n, r) {\n            var i = t[e + 0], a = t[e + n];\n            return Br[255 + t[e - 2 * n] - t[e - n]] > r || Br[255 + a - i] > r;\n        }\n        function De(t, e, n, r) {\n            return 4 * Br[255 + t[e - n] - t[e + 0]] + Br[255 + t[e - 2 * n] - t[e + n]] <= r;\n        }\n        function Te(t, e, n, r, i) {\n            var a = t[e - 3 * n], o = t[e - 2 * n], s = t[e - n], u = t[e + 0], c = t[e + n], l = t[e + 2 * n], h = t[e + 3 * n];\n            return 4 * Br[255 + s - u] + Br[255 + o - c] > r ? 0 : Br[255 + t[e - 4 * n] - a] <= i && Br[255 + a - o] <= i && Br[255 + o - s] <= i && Br[255 + h - l] <= i && Br[255 + l - c] <= i && Br[255 + c - u] <= i;\n        }\n        function ze(t, e, n, r) {\n            var i = 2 * r + 1;\n            for(r = 0; 16 > r; ++r)De(t, e + r, n, i) && Ee(t, e + r, n);\n        }\n        function Ue(t, e, n, r) {\n            var i = 2 * r + 1;\n            for(r = 0; 16 > r; ++r)De(t, e + r * n, 1, i) && Ee(t, e + r * n, 1);\n        }\n        function He(t, e, n, r) {\n            var i;\n            for(i = 3; 0 < i; --i)ze(t, e += 4 * n, n, r);\n        }\n        function We(t, e, n, r) {\n            var i;\n            for(i = 3; 0 < i; --i)Ue(t, e += 4, n, r);\n        }\n        function Ve(t, e, n, r, i, a, o, s) {\n            for(a = 2 * a + 1; 0 < i--;){\n                if (Te(t, e, n, a, o)) if (Re(t, e, n, s)) Ee(t, e, n);\n                else {\n                    var u = t, c = e, l = n, h = u[c - 2 * l], f = u[c - l], d = u[c + 0], p = u[c + l], g = u[c + 2 * l], m = 27 * (b = jr[1020 + 3 * (d - f) + jr[1020 + h - p]]) + 63 >> 7, v = 18 * b + 63 >> 7, b = 9 * b + 63 >> 7;\n                    u[c - 3 * l] = Or[255 + u[c - 3 * l] + b], u[c - 2 * l] = Or[255 + h + v], u[c - l] = Or[255 + f + m], u[c + 0] = Or[255 + d - m], u[c + l] = Or[255 + p - v], u[c + 2 * l] = Or[255 + g - b];\n                }\n                e += r;\n            }\n        }\n        function Ge(t, e, n, r, i, a, o, s) {\n            for(a = 2 * a + 1; 0 < i--;){\n                if (Te(t, e, n, a, o)) if (Re(t, e, n, s)) Ee(t, e, n);\n                else {\n                    var u = t, c = e, l = n, h = u[c - l], f = u[c + 0], d = u[c + l], p = Cr[112 + (4 + (g = 3 * (f - h)) >> 3)], g = Cr[112 + (g + 3 >> 3)], m = p + 1 >> 1;\n                    u[c - 2 * l] = Or[255 + u[c - 2 * l] + m], u[c - l] = Or[255 + h + g], u[c + 0] = Or[255 + f - p], u[c + l] = Or[255 + d - m];\n                }\n                e += r;\n            }\n        }\n        function Ye(t, e, n, r, i, a) {\n            Ve(t, e, n, 1, 16, r, i, a);\n        }\n        function Je(t, e, n, r, i, a) {\n            Ve(t, e, 1, n, 16, r, i, a);\n        }\n        function Xe(t, e, n, r, i, a) {\n            var o;\n            for(o = 3; 0 < o; --o)Ge(t, e += 4 * n, n, 1, 16, r, i, a);\n        }\n        function Ke(t, e, n, r, i, a) {\n            var o;\n            for(o = 3; 0 < o; --o)Ge(t, e += 4, 1, n, 16, r, i, a);\n        }\n        function Ze(t, e, n, r, i, a, o, s) {\n            Ve(t, e, i, 1, 8, a, o, s), Ve(n, r, i, 1, 8, a, o, s);\n        }\n        function $e(t, e, n, r, i, a, o, s) {\n            Ve(t, e, 1, i, 8, a, o, s), Ve(n, r, 1, i, 8, a, o, s);\n        }\n        function Qe(t, e, n, r, i, a, o, s) {\n            Ge(t, e + 4 * i, i, 1, 8, a, o, s), Ge(n, r + 4 * i, i, 1, 8, a, o, s);\n        }\n        function tn(t, e, n, r, i, a, o, s) {\n            Ge(t, e + 4, 1, i, 8, a, o, s), Ge(n, r + 4, 1, i, 8, a, o, s);\n        }\n        function en() {\n            this.ba = new ot, this.ec = [], this.cc = [], this.Mc = [], this.Dc = this.Nc = this.dc = this.fc = 0, this.Oa = new ut, this.memory = 0, this.Ib = \"OutputFunc\", this.Jb = \"OutputAlphaFunc\", this.Nd = \"OutputRowFunc\";\n        }\n        function nn() {\n            this.data = [], this.offset = this.kd = this.ha = this.w = 0, this.na = [], this.xa = this.gb = this.Ja = this.Sa = this.P = 0;\n        }\n        function rn() {\n            this.nc = this.Ea = this.b = this.hc = 0, this.K = [], this.w = 0;\n        }\n        function an() {\n            this.ua = 0, this.Wa = new M, this.vb = new M, this.md = this.xc = this.wc = 0, this.vc = [], this.Wb = 0, this.Ya = new d, this.yc = new h;\n        }\n        function on() {\n            this.xb = this.a = 0, this.l = new Gt, this.ca = new ot, this.V = [], this.Ba = 0, this.Ta = [], this.Ua = 0, this.m = new N, this.Pb = 0, this.wd = new N, this.Ma = this.$ = this.C = this.i = this.c = this.xd = 0, this.s = new an, this.ab = 0, this.gc = o(4, rn), this.Oc = 0;\n        }\n        function sn() {\n            this.Lc = this.Z = this.$a = this.i = this.c = 0, this.l = new Gt, this.ic = 0, this.ca = [], this.tb = 0, this.qd = null, this.rd = 0;\n        }\n        function un(t, e, n, r, i, a, o) {\n            for(t = null == t ? 0 : t[e + 0], e = 0; e < o; ++e)i[a + e] = t + n[r + e] & 255, t = i[a + e];\n        }\n        function cn(t, e, n, r, i, a, o) {\n            var s;\n            if (null == t) un(null, null, n, r, i, a, o);\n            else for(s = 0; s < o; ++s)i[a + s] = t[e + s] + n[r + s] & 255;\n        }\n        function ln(t, e, n, r, i, a, o) {\n            if (null == t) un(null, null, n, r, i, a, o);\n            else {\n                var s, u = t[e + 0], c = u, l = u;\n                for(s = 0; s < o; ++s)c = l + (u = t[e + s]) - c, l = n[r + s] + (-256 & c ? 0 > c ? 0 : 255 : c) & 255, c = u, i[a + s] = l;\n            }\n        }\n        function hn(t, n, i, o) {\n            var s = n.width, u = n.o;\n            if (e(null != t && null != n), 0 > i || 0 >= o || i + o > u) return null;\n            if (!t.Cc) {\n                if (null == t.ga) {\n                    var c;\n                    if (t.ga = new sn, (c = null == t.ga) || (c = n.width * n.o, e(0 == t.Gb.length), t.Gb = a(c), t.Uc = 0, null == t.Gb ? c = 0 : (t.mb = t.Gb, t.nb = t.Uc, t.rc = null, c = 1), c = !c), !c) {\n                        c = t.ga;\n                        var l = t.Fa, h = t.P, f = t.qc, d = t.mb, p = t.nb, g = h + 1, m = f - 1, b = c.l;\n                        if (e(null != l && null != d && null != n), gi[0] = null, gi[1] = un, gi[2] = cn, gi[3] = ln, c.ca = d, c.tb = p, c.c = n.width, c.i = n.height, e(0 < c.c && 0 < c.i), 1 >= f) n = 0;\n                        else if (c.$a = 3 & l[h + 0], c.Z = l[h + 0] >> 2 & 3, c.Lc = l[h + 0] >> 4 & 3, h = l[h + 0] >> 6 & 3, 0 > c.$a || 1 < c.$a || 4 <= c.Z || 1 < c.Lc || h) n = 0;\n                        else if (b.put = dt, b.ac = ft, b.bc = pt, b.ma = c, b.width = n.width, b.height = n.height, b.Da = n.Da, b.v = n.v, b.va = n.va, b.j = n.j, b.o = n.o, c.$a) t: {\n                            e(1 == c.$a), n = kt();\n                            e: for(;;){\n                                if (null == n) {\n                                    n = 0;\n                                    break t;\n                                }\n                                if (e(null != c), c.mc = n, n.c = c.c, n.i = c.i, n.l = c.l, n.l.ma = c, n.l.width = c.c, n.l.height = c.i, n.a = 0, v(n.m, l, g, m), !Ft(c.c, c.i, 1, n, null)) break e;\n                                if (1 == n.ab && 3 == n.gc[0].hc && xt(n.s) ? (c.ic = 1, l = n.c * n.i, n.Ta = null, n.Ua = 0, n.V = a(l), n.Ba = 0, null == n.V ? (n.a = 1, n = 0) : n = 1) : (c.ic = 0, n = It(n, c.c)), !n) break e;\n                                n = 1;\n                                break t;\n                            }\n                            c.mc = null, n = 0;\n                        }\n                        else n = m >= c.c * c.i;\n                        c = !n;\n                    }\n                    if (c) return null;\n                    1 != t.ga.Lc ? t.Ga = 0 : o = u - i;\n                }\n                e(null != t.ga), e(i + o <= u);\n                t: {\n                    if (n = (l = t.ga).c, u = l.l.o, 0 == l.$a) {\n                        if (g = t.rc, m = t.Vc, b = t.Fa, h = t.P + 1 + i * n, f = t.mb, d = t.nb + i * n, e(h <= t.P + t.qc), 0 != l.Z) for(e(null != gi[l.Z]), c = 0; c < o; ++c)gi[l.Z](g, m, b, h, f, d, n), g = f, m = d, d += n, h += n;\n                        else for(c = 0; c < o; ++c)r(f, d, b, h, n), g = f, m = d, d += n, h += n;\n                        t.rc = g, t.Vc = m;\n                    } else {\n                        if (e(null != l.mc), n = i + o, e(null != (c = l.mc)), e(n <= c.i), c.C >= n) n = 1;\n                        else if (l.ic || mn(), l.ic) {\n                            l = c.V, g = c.Ba, m = c.c;\n                            var y = c.i, w = (b = 1, h = c.$ / m, f = c.$ % m, d = c.m, p = c.s, c.$), N = m * y, L = m * n, A = p.wc, _ = w < L ? wt(p, f, h) : null;\n                            e(w <= N), e(n <= y), e(xt(p));\n                            e: for(;;){\n                                for(; !d.h && w < L;){\n                                    if (f & A || (_ = wt(p, f, h)), e(null != _), S(d), 256 > (y = bt(_.G[0], _.H[0], d))) l[g + w] = y, ++w, ++f >= m && (f = 0, ++h <= n && !(h % 16) && St(c, h));\n                                    else {\n                                        if (!(280 > y)) {\n                                            b = 0;\n                                            break e;\n                                        }\n                                        y = mt(y - 256, d);\n                                        var P, k = bt(_.G[4], _.H[4], d);\n                                        if (S(d), !(w >= (k = vt(m, k = mt(k, d))) && N - w >= y)) {\n                                            b = 0;\n                                            break e;\n                                        }\n                                        for(P = 0; P < y; ++P)l[g + w + P] = l[g + w + P - k];\n                                        for(w += y, f += y; f >= m;)f -= m, ++h <= n && !(h % 16) && St(c, h);\n                                        w < L && f & A && (_ = wt(p, f, h));\n                                    }\n                                    e(d.h == x(d));\n                                }\n                                St(c, h > n ? n : h);\n                                break e;\n                            }\n                            !b || d.h && w < N ? (b = 0, c.a = d.h ? 5 : 3) : c.$ = w, n = b;\n                        } else n = _t(c, c.V, c.Ba, c.c, c.i, n, jt);\n                        if (!n) {\n                            o = 0;\n                            break t;\n                        }\n                    }\n                    i + o >= u && (t.Cc = 1), o = 1;\n                }\n                if (!o) return null;\n                if (t.Cc && (null != (o = t.ga) && (o.mc = null), t.ga = null, 0 < t.Ga)) return alert(\"todo:WebPDequantizeLevels\"), null;\n            }\n            return t.nb + i * s;\n        }\n        function fn(t, e, n, r, i, a) {\n            for(; 0 < i--;){\n                var o, s = t, u = e + (n ? 1 : 0), c = t, l = e + (n ? 0 : 3);\n                for(o = 0; o < r; ++o){\n                    var h = c[l + 4 * o];\n                    255 != h && (h *= 32897, s[u + 4 * o + 0] = s[u + 4 * o + 0] * h >> 23, s[u + 4 * o + 1] = s[u + 4 * o + 1] * h >> 23, s[u + 4 * o + 2] = s[u + 4 * o + 2] * h >> 23);\n                }\n                e += a;\n            }\n        }\n        function dn(t, e, n, r, i) {\n            for(; 0 < r--;){\n                var a;\n                for(a = 0; a < n; ++a){\n                    var o = t[e + 2 * a + 0], s = 15 & (c = t[e + 2 * a + 1]), u = 4369 * s, c = (240 & c | c >> 4) * u >> 16;\n                    t[e + 2 * a + 0] = (240 & o | o >> 4) * u >> 16 & 240 | (15 & o | o << 4) * u >> 16 >> 4 & 15, t[e + 2 * a + 1] = 240 & c | s;\n                }\n                e += i;\n            }\n        }\n        function pn(t, e, n, r, i, a, o, s) {\n            var u, c, l = 255;\n            for(c = 0; c < i; ++c){\n                for(u = 0; u < r; ++u){\n                    var h = t[e + u];\n                    a[o + 4 * u] = h, l &= h;\n                }\n                e += n, o += s;\n            }\n            return 255 != l;\n        }\n        function gn(t, e, n, r, i) {\n            var a;\n            for(a = 0; a < i; ++a)n[r + a] = t[e + a] >> 8;\n        }\n        function mn() {\n            Lr = fn, xr = dn, Ar = pn, Sr = gn;\n        }\n        function vn(n, r, i) {\n            t[n] = function(t, n, a, o, s, u, c, l, h, f, d, p, g, m, v, b, y) {\n                var w, N = y - 1 >> 1, L = s[u + 0] | c[l + 0] << 16, x = h[f + 0] | d[p + 0] << 16;\n                e(null != t);\n                var A = 3 * L + x + 131074 >> 2;\n                for(r(t[n + 0], 255 & A, A >> 16, g, m), null != a && (A = 3 * x + L + 131074 >> 2, r(a[o + 0], 255 & A, A >> 16, v, b)), w = 1; w <= N; ++w){\n                    var S = s[u + w] | c[l + w] << 16, _ = h[f + w] | d[p + w] << 16, P = L + S + x + _ + 524296, k = P + 2 * (S + x) >> 3;\n                    A = k + L >> 1, L = (P = P + 2 * (L + _) >> 3) + S >> 1, r(t[n + 2 * w - 1], 255 & A, A >> 16, g, m + (2 * w - 1) * i), r(t[n + 2 * w - 0], 255 & L, L >> 16, g, m + (2 * w - 0) * i), null != a && (A = P + x >> 1, L = k + _ >> 1, r(a[o + 2 * w - 1], 255 & A, A >> 16, v, b + (2 * w - 1) * i), r(a[o + 2 * w + 0], 255 & L, L >> 16, v, b + (2 * w + 0) * i)), L = S, x = _;\n                }\n                1 & y || (A = 3 * L + x + 131074 >> 2, r(t[n + y - 1], 255 & A, A >> 16, g, m + (y - 1) * i), null != a && (A = 3 * x + L + 131074 >> 2, r(a[o + y - 1], 255 & A, A >> 16, v, b + (y - 1) * i)));\n            };\n        }\n        function bn() {\n            mi[Mr] = vi, mi[qr] = yi, mi[Er] = bi, mi[Rr] = wi, mi[Dr] = Ni, mi[Tr] = Li, mi[zr] = xi, mi[Ur] = yi, mi[Hr] = wi, mi[Wr] = Ni, mi[Vr] = Li;\n        }\n        function yn(t) {\n            return t & ~Fi ? 0 > t ? 0 : 255 : t >> ki;\n        }\n        function wn(t, e) {\n            return yn((19077 * t >> 8) + (26149 * e >> 8) - 14234);\n        }\n        function Nn(t, e, n) {\n            return yn((19077 * t >> 8) - (6419 * e >> 8) - (13320 * n >> 8) + 8708);\n        }\n        function Ln(t, e) {\n            return yn((19077 * t >> 8) + (33050 * e >> 8) - 17685);\n        }\n        function xn(t, e, n, r, i) {\n            r[i + 0] = wn(t, n), r[i + 1] = Nn(t, e, n), r[i + 2] = Ln(t, e);\n        }\n        function An(t, e, n, r, i) {\n            r[i + 0] = Ln(t, e), r[i + 1] = Nn(t, e, n), r[i + 2] = wn(t, n);\n        }\n        function Sn(t, e, n, r, i) {\n            var a = Nn(t, e, n);\n            e = a << 3 & 224 | Ln(t, e) >> 3, r[i + 0] = 248 & wn(t, n) | a >> 5, r[i + 1] = e;\n        }\n        function _n(t, e, n, r, i) {\n            var a = 240 & Ln(t, e) | 15;\n            r[i + 0] = 240 & wn(t, n) | Nn(t, e, n) >> 4, r[i + 1] = a;\n        }\n        function Pn(t, e, n, r, i) {\n            r[i + 0] = 255, xn(t, e, n, r, i + 1);\n        }\n        function kn(t, e, n, r, i) {\n            An(t, e, n, r, i), r[i + 3] = 255;\n        }\n        function Fn(t, e, n, r, i) {\n            xn(t, e, n, r, i), r[i + 3] = 255;\n        }\n        function Vt(t, e) {\n            return 0 > t ? 0 : t > e ? e : t;\n        }\n        function In(e, n, r) {\n            t[e] = function(t, e, i, a, o, s, u, c, l) {\n                for(var h = c + (-2 & l) * r; c != h;)n(t[e + 0], i[a + 0], o[s + 0], u, c), n(t[e + 1], i[a + 0], o[s + 0], u, c + r), e += 2, ++a, ++s, c += 2 * r;\n                1 & l && n(t[e + 0], i[a + 0], o[s + 0], u, c);\n            };\n        }\n        function jn(t, e, n) {\n            return 0 == n ? 0 == t ? 0 == e ? 6 : 5 : 0 == e ? 4 : 0 : n;\n        }\n        function Cn(t, e, n, r, i) {\n            switch(t >>> 30){\n                case 3:\n                    ar(e, n, r, i, 0);\n                    break;\n                case 2:\n                    or(e, n, r, i);\n                    break;\n                case 1:\n                    ur(e, n, r, i);\n            }\n        }\n        function On(t, e) {\n            var n, a, o = e.M, s = e.Nb, u = t.oc, c = t.pc + 40, l = t.oc, h = t.pc + 584, f = t.oc, d = t.pc + 600;\n            for(n = 0; 16 > n; ++n)u[c + 32 * n - 1] = 129;\n            for(n = 0; 8 > n; ++n)l[h + 32 * n - 1] = 129, f[d + 32 * n - 1] = 129;\n            for(0 < o ? u[c - 1 - 32] = l[h - 1 - 32] = f[d - 1 - 32] = 129 : (i(u, c - 32 - 1, 127, 21), i(l, h - 32 - 1, 127, 9), i(f, d - 32 - 1, 127, 9)), a = 0; a < t.za; ++a){\n                var p = e.ya[e.aa + a];\n                if (0 < a) {\n                    for(n = -1; 16 > n; ++n)r(u, c + 32 * n - 4, u, c + 32 * n + 12, 4);\n                    for(n = -1; 8 > n; ++n)r(l, h + 32 * n - 4, l, h + 32 * n + 4, 4), r(f, d + 32 * n - 4, f, d + 32 * n + 4, 4);\n                }\n                var g = t.Gd, m = t.Hd + a, v = p.ad, b = p.Hc;\n                if (0 < o && (r(u, c - 32, g[m].y, 0, 16), r(l, h - 32, g[m].f, 0, 8), r(f, d - 32, g[m].ea, 0, 8)), p.Za) {\n                    var y = u, w = c - 32 + 16;\n                    for(0 < o && (a >= t.za - 1 ? i(y, w, g[m].y[15], 4) : r(y, w, g[m + 1].y, 0, 4)), n = 0; 4 > n; n++)y[w + 128 + n] = y[w + 256 + n] = y[w + 384 + n] = y[w + 0 + n];\n                    for(n = 0; 16 > n; ++n, b <<= 2)y = u, w = c + Ei[n], hi[p.Ob[n]](y, w), Cn(b, v, 16 * +n, y, w);\n                } else if (y = jn(a, o, p.Ob[0]), li[y](u, c), 0 != b) for(n = 0; 16 > n; ++n, b <<= 2)Cn(b, v, 16 * +n, u, c + Ei[n]);\n                for(n = p.Gc, y = jn(a, o, p.Dd), fi[y](l, h), fi[y](f, d), b = v, y = l, w = h, 255 & (p = 0 | n) && (170 & p ? sr(b, 256, y, w) : cr(b, 256, y, w)), p = f, b = d, 255 & (n >>= 8) && (170 & n ? sr(v, 320, p, b) : cr(v, 320, p, b)), o < t.Ub - 1 && (r(g[m].y, 0, u, c + 480, 16), r(g[m].f, 0, l, h + 224, 8), r(g[m].ea, 0, f, d + 224, 8)), n = 8 * s * t.B, g = t.sa, m = t.ta + 16 * a + 16 * s * t.R, v = t.qa, p = t.ra + 8 * a + n, b = t.Ha, y = t.Ia + 8 * a + n, n = 0; 16 > n; ++n)r(g, m + n * t.R, u, c + 32 * n, 16);\n                for(n = 0; 8 > n; ++n)r(v, p + n * t.B, l, h + 32 * n, 8), r(b, y + n * t.B, f, d + 32 * n, 8);\n            }\n        }\n        function Bn(t, r, i, a, o, s, u, c, l) {\n            var h = [\n                0\n            ], f = [\n                0\n            ], d = 0, p = null != l ? l.kd : 0, g = null != l ? l : new nn;\n            if (null == t || 12 > i) return 7;\n            g.data = t, g.w = r, g.ha = i, r = [\n                r\n            ], i = [\n                i\n            ], g.gb = [\n                g.gb\n            ];\n            t: {\n                var m = r, b = i, y = g.gb;\n                if (e(null != t), e(null != b), e(null != y), y[0] = 0, 12 <= b[0] && !n(t, m[0], \"RIFF\")) {\n                    if (n(t, m[0] + 8, \"WEBP\")) {\n                        y = 3;\n                        break t;\n                    }\n                    var w = C(t, m[0] + 4);\n                    if (12 > w || 4294967286 < w) {\n                        y = 3;\n                        break t;\n                    }\n                    if (p && w > b[0] - 8) {\n                        y = 7;\n                        break t;\n                    }\n                    y[0] = w, m[0] += 12, b[0] -= 12;\n                }\n                y = 0;\n            }\n            if (0 != y) return y;\n            for(w = 0 < g.gb[0], i = i[0];;){\n                t: {\n                    var L = t;\n                    b = r, y = i;\n                    var x = h, A = f, S = m = [\n                        0\n                    ];\n                    if ((k = d = [\n                        d\n                    ])[0] = 0, 8 > y[0]) y = 7;\n                    else {\n                        if (!n(L, b[0], \"VP8X\")) {\n                            if (10 != C(L, b[0] + 4)) {\n                                y = 3;\n                                break t;\n                            }\n                            if (18 > y[0]) {\n                                y = 7;\n                                break t;\n                            }\n                            var _ = C(L, b[0] + 8), P = 1 + j(L, b[0] + 12);\n                            if (2147483648 <= P * (L = 1 + j(L, b[0] + 15))) {\n                                y = 3;\n                                break t;\n                            }\n                            null != S && (S[0] = _), null != x && (x[0] = P), null != A && (A[0] = L), b[0] += 18, y[0] -= 18, k[0] = 1;\n                        }\n                        y = 0;\n                    }\n                }\n                if (d = d[0], m = m[0], 0 != y) return y;\n                if (b = !!(2 & m), !w && d) return 3;\n                if (null != s && (s[0] = !!(16 & m)), null != u && (u[0] = b), null != c && (c[0] = 0), u = h[0], m = f[0], d && b && null == l) {\n                    y = 0;\n                    break;\n                }\n                if (4 > i) {\n                    y = 7;\n                    break;\n                }\n                if (w && d || !w && !d && !n(t, r[0], \"ALPH\")) {\n                    i = [\n                        i\n                    ], g.na = [\n                        g.na\n                    ], g.P = [\n                        g.P\n                    ], g.Sa = [\n                        g.Sa\n                    ];\n                    t: {\n                        _ = t, y = r, w = i;\n                        var k = g.gb;\n                        x = g.na, A = g.P, S = g.Sa, P = 22, e(null != _), e(null != w), L = y[0];\n                        var F = w[0];\n                        for(e(null != x), e(null != S), x[0] = null, A[0] = null, S[0] = 0;;){\n                            if (y[0] = L, w[0] = F, 8 > F) {\n                                y = 7;\n                                break t;\n                            }\n                            var I = C(_, L + 4);\n                            if (4294967286 < I) {\n                                y = 3;\n                                break t;\n                            }\n                            var O = 8 + I + 1 & -2;\n                            if (P += O, 0 < k && P > k) {\n                                y = 3;\n                                break t;\n                            }\n                            if (!n(_, L, \"VP8 \") || !n(_, L, \"VP8L\")) {\n                                y = 0;\n                                break t;\n                            }\n                            if (F[0] < O) {\n                                y = 7;\n                                break t;\n                            }\n                            n(_, L, \"ALPH\") || (x[0] = _, A[0] = L + 8, S[0] = I), L += O, F -= O;\n                        }\n                    }\n                    if (i = i[0], g.na = g.na[0], g.P = g.P[0], g.Sa = g.Sa[0], 0 != y) break;\n                }\n                i = [\n                    i\n                ], g.Ja = [\n                    g.Ja\n                ], g.xa = [\n                    g.xa\n                ];\n                t: if (k = t, y = r, w = i, x = g.gb[0], A = g.Ja, S = g.xa, _ = y[0], L = !n(k, _, \"VP8 \"), P = !n(k, _, \"VP8L\"), e(null != k), e(null != w), e(null != A), e(null != S), 8 > w[0]) y = 7;\n                else {\n                    if (L || P) {\n                        if (k = C(k, _ + 4), 12 <= x && k > x - 12) {\n                            y = 3;\n                            break t;\n                        }\n                        if (p && k > w[0] - 8) {\n                            y = 7;\n                            break t;\n                        }\n                        A[0] = k, y[0] += 8, w[0] -= 8, S[0] = P;\n                    } else S[0] = 5 <= w[0] && 47 == k[_ + 0] && !(k[_ + 4] >> 5), A[0] = w[0];\n                    y = 0;\n                }\n                if (i = i[0], g.Ja = g.Ja[0], g.xa = g.xa[0], r = r[0], 0 != y) break;\n                if (4294967286 < g.Ja) return 3;\n                if (null == c || b || (c[0] = g.xa ? 2 : 1), u = [\n                    u\n                ], m = [\n                    m\n                ], g.xa) {\n                    if (5 > i) {\n                        y = 7;\n                        break;\n                    }\n                    c = u, p = m, b = s, null == t || 5 > i ? t = 0 : 5 <= i && 47 == t[r + 0] && !(t[r + 4] >> 5) ? (w = [\n                        0\n                    ], k = [\n                        0\n                    ], x = [\n                        0\n                    ], v(A = new N, t, r, i), gt(A, w, k, x) ? (null != c && (c[0] = w[0]), null != p && (p[0] = k[0]), null != b && (b[0] = x[0]), t = 1) : t = 0) : t = 0;\n                } else {\n                    if (10 > i) {\n                        y = 7;\n                        break;\n                    }\n                    c = m, null == t || 10 > i || !Xt(t, r + 3, i - 3) ? t = 0 : (p = t[r + 0] | t[r + 1] << 8 | t[r + 2] << 16, b = 16383 & (t[r + 7] << 8 | t[r + 6]), t = 16383 & (t[r + 9] << 8 | t[r + 8]), 1 & p || 3 < (p >> 1 & 7) || !(p >> 4 & 1) || p >> 5 >= g.Ja || !b || !t ? t = 0 : (u && (u[0] = b), c && (c[0] = t), t = 1));\n                }\n                if (!t) return 3;\n                if (u = u[0], m = m[0], d && (h[0] != u || f[0] != m)) return 3;\n                null != l && (l[0] = g, l.offset = r - l.w, e(4294967286 > r - l.w), e(l.offset == l.ha - i));\n                break;\n            }\n            return 0 == y || 7 == y && d && null == l ? (null != s && (s[0] |= null != g.na && 0 < g.na.length), null != a && (a[0] = u), null != o && (o[0] = m), 0) : y;\n        }\n        function Mn(t, e, n) {\n            var r = e.width, i = e.height, a = 0, o = 0, s = r, u = i;\n            if (e.Da = null != t && 0 < t.Da, e.Da && (s = t.cd, u = t.bd, a = t.v, o = t.j, 11 > n || (a &= -2, o &= -2), 0 > a || 0 > o || 0 >= s || 0 >= u || a + s > r || o + u > i)) return 0;\n            if (e.v = a, e.j = o, e.va = a + s, e.o = o + u, e.U = s, e.T = u, e.da = null != t && 0 < t.da, e.da) {\n                if (!q(s, u, n = [\n                    t.ib\n                ], a = [\n                    t.hb\n                ])) return 0;\n                e.ib = n[0], e.hb = a[0];\n            }\n            return e.ob = null != t && t.ob, e.Kb = null == t || !t.Sd, e.da && (e.ob = e.ib < 3 * r / 4 && e.hb < 3 * i / 4, e.Kb = 0), 1;\n        }\n        function qn(t) {\n            if (null == t) return 2;\n            if (11 > t.S) {\n                var e = t.f.RGBA;\n                e.fb += (t.height - 1) * e.A, e.A = -e.A;\n            } else e = t.f.kb, t = t.height, e.O += (t - 1) * e.fa, e.fa = -e.fa, e.N += (t - 1 >> 1) * e.Ab, e.Ab = -e.Ab, e.W += (t - 1 >> 1) * e.Db, e.Db = -e.Db, null != e.F && (e.J += (t - 1) * e.lb, e.lb = -e.lb);\n            return 0;\n        }\n        function En(t, e, n, r) {\n            if (null == r || 0 >= t || 0 >= e) return 2;\n            if (null != n) {\n                if (n.Da) {\n                    var i = n.cd, o = n.bd, s = -2 & n.v, u = -2 & n.j;\n                    if (0 > s || 0 > u || 0 >= i || 0 >= o || s + i > t || u + o > e) return 2;\n                    t = i, e = o;\n                }\n                if (n.da) {\n                    if (!q(t, e, i = [\n                        n.ib\n                    ], o = [\n                        n.hb\n                    ])) return 2;\n                    t = i[0], e = o[0];\n                }\n            }\n            r.width = t, r.height = e;\n            t: {\n                var c = r.width, l = r.height;\n                if (t = r.S, 0 >= c || 0 >= l || !(t >= Mr && 13 > t)) t = 2;\n                else {\n                    if (0 >= r.Rd && null == r.sd) {\n                        s = o = i = e = 0;\n                        var h = (u = c * zi[t]) * l;\n                        if (11 > t || (o = (l + 1) / 2 * (e = (c + 1) / 2), 12 == t && (s = (i = c) * l)), null == (l = a(h + 2 * o + s))) {\n                            t = 1;\n                            break t;\n                        }\n                        r.sd = l, 11 > t ? ((c = r.f.RGBA).eb = l, c.fb = 0, c.A = u, c.size = h) : ((c = r.f.kb).y = l, c.O = 0, c.fa = u, c.Fd = h, c.f = l, c.N = 0 + h, c.Ab = e, c.Cd = o, c.ea = l, c.W = 0 + h + o, c.Db = e, c.Ed = o, 12 == t && (c.F = l, c.J = 0 + h + 2 * o), c.Tc = s, c.lb = i);\n                    }\n                    if (e = 1, i = r.S, o = r.width, s = r.height, i >= Mr && 13 > i) if (11 > i) t = r.f.RGBA, e &= (u = Math.abs(t.A)) * (s - 1) + o <= t.size, e &= u >= o * zi[i], e &= null != t.eb;\n                    else {\n                        t = r.f.kb, u = (o + 1) / 2, h = (s + 1) / 2, c = Math.abs(t.fa), l = Math.abs(t.Ab);\n                        var f = Math.abs(t.Db), d = Math.abs(t.lb), p = d * (s - 1) + o;\n                        e &= c * (s - 1) + o <= t.Fd, e &= l * (h - 1) + u <= t.Cd, e = (e &= f * (h - 1) + u <= t.Ed) & c >= o & l >= u & f >= u, e &= null != t.y, e &= null != t.f, e &= null != t.ea, 12 == i && (e &= d >= o, e &= p <= t.Tc, e &= null != t.F);\n                    }\n                    else e = 0;\n                    t = e ? 0 : 2;\n                }\n            }\n            return 0 != t || null != n && n.fd && (t = qn(r)), t;\n        }\n        var Rn = 64, Dn = [\n            0,\n            1,\n            3,\n            7,\n            15,\n            31,\n            63,\n            127,\n            255,\n            511,\n            1023,\n            2047,\n            4095,\n            8191,\n            16383,\n            32767,\n            65535,\n            131071,\n            262143,\n            524287,\n            1048575,\n            2097151,\n            4194303,\n            8388607,\n            16777215\n        ], Tn = 24, zn = 32, Un = 8, Hn = [\n            0,\n            0,\n            1,\n            1,\n            2,\n            2,\n            2,\n            2,\n            3,\n            3,\n            3,\n            3,\n            3,\n            3,\n            3,\n            3,\n            4,\n            4,\n            4,\n            4,\n            4,\n            4,\n            4,\n            4,\n            4,\n            4,\n            4,\n            4,\n            4,\n            4,\n            4,\n            4,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7\n        ];\n        D(\"Predictor0\", \"PredictorAdd0\"), t.Predictor0 = function() {\n            return 4278190080;\n        }, t.Predictor1 = function(t) {\n            return t;\n        }, t.Predictor2 = function(t, e, n) {\n            return e[n + 0];\n        }, t.Predictor3 = function(t, e, n) {\n            return e[n + 1];\n        }, t.Predictor4 = function(t, e, n) {\n            return e[n - 1];\n        }, t.Predictor5 = function(t, e, n) {\n            return z(z(t, e[n + 1]), e[n + 0]);\n        }, t.Predictor6 = function(t, e, n) {\n            return z(t, e[n - 1]);\n        }, t.Predictor7 = function(t, e, n) {\n            return z(t, e[n + 0]);\n        }, t.Predictor8 = function(t, e, n) {\n            return z(e[n - 1], e[n + 0]);\n        }, t.Predictor9 = function(t, e, n) {\n            return z(e[n + 0], e[n + 1]);\n        }, t.Predictor10 = function(t, e, n) {\n            return z(z(t, e[n - 1]), z(e[n + 0], e[n + 1]));\n        }, t.Predictor11 = function(t, e, n) {\n            var r = e[n + 0];\n            return 0 >= W(r >> 24 & 255, t >> 24 & 255, (e = e[n - 1]) >> 24 & 255) + W(r >> 16 & 255, t >> 16 & 255, e >> 16 & 255) + W(r >> 8 & 255, t >> 8 & 255, e >> 8 & 255) + W(255 & r, 255 & t, 255 & e) ? r : t;\n        }, t.Predictor12 = function(t, e, n) {\n            var r = e[n + 0];\n            return (U((t >> 24 & 255) + (r >> 24 & 255) - ((e = e[n - 1]) >> 24 & 255)) << 24 | U((t >> 16 & 255) + (r >> 16 & 255) - (e >> 16 & 255)) << 16 | U((t >> 8 & 255) + (r >> 8 & 255) - (e >> 8 & 255)) << 8 | U((255 & t) + (255 & r) - (255 & e))) >>> 0;\n        }, t.Predictor13 = function(t, e, n) {\n            var r = e[n - 1];\n            return (H((t = z(t, e[n + 0])) >> 24 & 255, r >> 24 & 255) << 24 | H(t >> 16 & 255, r >> 16 & 255) << 16 | H(t >> 8 & 255, r >> 8 & 255) << 8 | H(255 & t, 255 & r)) >>> 0;\n        };\n        var Wn = t.PredictorAdd0;\n        t.PredictorAdd1 = V, D(\"Predictor2\", \"PredictorAdd2\"), D(\"Predictor3\", \"PredictorAdd3\"), D(\"Predictor4\", \"PredictorAdd4\"), D(\"Predictor5\", \"PredictorAdd5\"), D(\"Predictor6\", \"PredictorAdd6\"), D(\"Predictor7\", \"PredictorAdd7\"), D(\"Predictor8\", \"PredictorAdd8\"), D(\"Predictor9\", \"PredictorAdd9\"), D(\"Predictor10\", \"PredictorAdd10\"), D(\"Predictor11\", \"PredictorAdd11\"), D(\"Predictor12\", \"PredictorAdd12\"), D(\"Predictor13\", \"PredictorAdd13\");\n        var Vn = t.PredictorAdd2;\n        X(\"ColorIndexInverseTransform\", \"MapARGB\", \"32b\", function(t) {\n            return t >> 8 & 255;\n        }, function(t) {\n            return t;\n        }), X(\"VP8LColorIndexInverseTransformAlpha\", \"MapAlpha\", \"8b\", function(t) {\n            return t;\n        }, function(t) {\n            return t >> 8 & 255;\n        });\n        var Gn, Yn = t.ColorIndexInverseTransform, Jn = t.MapARGB, Xn = t.VP8LColorIndexInverseTransformAlpha, Kn = t.MapAlpha, Zn = t.VP8LPredictorsAdd = [];\n        Zn.length = 16, (t.VP8LPredictors = []).length = 16, (t.VP8LPredictorsAdd_C = []).length = 16, (t.VP8LPredictors_C = []).length = 16;\n        var $n, Qn, tr, er, nr, rr, ir, ar, or, sr, ur, cr, lr, hr, fr, dr, pr, gr, mr, vr, br, yr, wr, Nr, Lr, xr, Ar, Sr, _r = a(511), Pr = a(2041), kr = a(225), Fr = a(767), Ir = 0, jr = Pr, Cr = kr, Or = Fr, Br = _r, Mr = 0, qr = 1, Er = 2, Rr = 3, Dr = 4, Tr = 5, zr = 6, Ur = 7, Hr = 8, Wr = 9, Vr = 10, Gr = [\n            2,\n            3,\n            7\n        ], Yr = [\n            3,\n            3,\n            11\n        ], Jr = [\n            280,\n            256,\n            256,\n            256,\n            40\n        ], Xr = [\n            0,\n            1,\n            1,\n            1,\n            0\n        ], Kr = [\n            17,\n            18,\n            0,\n            1,\n            2,\n            3,\n            4,\n            5,\n            16,\n            6,\n            7,\n            8,\n            9,\n            10,\n            11,\n            12,\n            13,\n            14,\n            15\n        ], Zr = [\n            24,\n            7,\n            23,\n            25,\n            40,\n            6,\n            39,\n            41,\n            22,\n            26,\n            38,\n            42,\n            56,\n            5,\n            55,\n            57,\n            21,\n            27,\n            54,\n            58,\n            37,\n            43,\n            72,\n            4,\n            71,\n            73,\n            20,\n            28,\n            53,\n            59,\n            70,\n            74,\n            36,\n            44,\n            88,\n            69,\n            75,\n            52,\n            60,\n            3,\n            87,\n            89,\n            19,\n            29,\n            86,\n            90,\n            35,\n            45,\n            68,\n            76,\n            85,\n            91,\n            51,\n            61,\n            104,\n            2,\n            103,\n            105,\n            18,\n            30,\n            102,\n            106,\n            34,\n            46,\n            84,\n            92,\n            67,\n            77,\n            101,\n            107,\n            50,\n            62,\n            120,\n            1,\n            119,\n            121,\n            83,\n            93,\n            17,\n            31,\n            100,\n            108,\n            66,\n            78,\n            118,\n            122,\n            33,\n            47,\n            117,\n            123,\n            49,\n            63,\n            99,\n            109,\n            82,\n            94,\n            0,\n            116,\n            124,\n            65,\n            79,\n            16,\n            32,\n            98,\n            110,\n            48,\n            115,\n            125,\n            81,\n            95,\n            64,\n            114,\n            126,\n            97,\n            111,\n            80,\n            113,\n            127,\n            96,\n            112\n        ], $r = [\n            2954,\n            2956,\n            2958,\n            2962,\n            2970,\n            2986,\n            3018,\n            3082,\n            3212,\n            3468,\n            3980,\n            5004\n        ], Qr = 8, ti = [\n            4,\n            5,\n            6,\n            7,\n            8,\n            9,\n            10,\n            10,\n            11,\n            12,\n            13,\n            14,\n            15,\n            16,\n            17,\n            17,\n            18,\n            19,\n            20,\n            20,\n            21,\n            21,\n            22,\n            22,\n            23,\n            23,\n            24,\n            25,\n            25,\n            26,\n            27,\n            28,\n            29,\n            30,\n            31,\n            32,\n            33,\n            34,\n            35,\n            36,\n            37,\n            37,\n            38,\n            39,\n            40,\n            41,\n            42,\n            43,\n            44,\n            45,\n            46,\n            46,\n            47,\n            48,\n            49,\n            50,\n            51,\n            52,\n            53,\n            54,\n            55,\n            56,\n            57,\n            58,\n            59,\n            60,\n            61,\n            62,\n            63,\n            64,\n            65,\n            66,\n            67,\n            68,\n            69,\n            70,\n            71,\n            72,\n            73,\n            74,\n            75,\n            76,\n            76,\n            77,\n            78,\n            79,\n            80,\n            81,\n            82,\n            83,\n            84,\n            85,\n            86,\n            87,\n            88,\n            89,\n            91,\n            93,\n            95,\n            96,\n            98,\n            100,\n            101,\n            102,\n            104,\n            106,\n            108,\n            110,\n            112,\n            114,\n            116,\n            118,\n            122,\n            124,\n            126,\n            128,\n            130,\n            132,\n            134,\n            136,\n            138,\n            140,\n            143,\n            145,\n            148,\n            151,\n            154,\n            157\n        ], ei = [\n            4,\n            5,\n            6,\n            7,\n            8,\n            9,\n            10,\n            11,\n            12,\n            13,\n            14,\n            15,\n            16,\n            17,\n            18,\n            19,\n            20,\n            21,\n            22,\n            23,\n            24,\n            25,\n            26,\n            27,\n            28,\n            29,\n            30,\n            31,\n            32,\n            33,\n            34,\n            35,\n            36,\n            37,\n            38,\n            39,\n            40,\n            41,\n            42,\n            43,\n            44,\n            45,\n            46,\n            47,\n            48,\n            49,\n            50,\n            51,\n            52,\n            53,\n            54,\n            55,\n            56,\n            57,\n            58,\n            60,\n            62,\n            64,\n            66,\n            68,\n            70,\n            72,\n            74,\n            76,\n            78,\n            80,\n            82,\n            84,\n            86,\n            88,\n            90,\n            92,\n            94,\n            96,\n            98,\n            100,\n            102,\n            104,\n            106,\n            108,\n            110,\n            112,\n            114,\n            116,\n            119,\n            122,\n            125,\n            128,\n            131,\n            134,\n            137,\n            140,\n            143,\n            146,\n            149,\n            152,\n            155,\n            158,\n            161,\n            164,\n            167,\n            170,\n            173,\n            177,\n            181,\n            185,\n            189,\n            193,\n            197,\n            201,\n            205,\n            209,\n            213,\n            217,\n            221,\n            225,\n            229,\n            234,\n            239,\n            245,\n            249,\n            254,\n            259,\n            264,\n            269,\n            274,\n            279,\n            284\n        ], ni = null, ri = [\n            [\n                173,\n                148,\n                140,\n                0\n            ],\n            [\n                176,\n                155,\n                140,\n                135,\n                0\n            ],\n            [\n                180,\n                157,\n                141,\n                134,\n                130,\n                0\n            ],\n            [\n                254,\n                254,\n                243,\n                230,\n                196,\n                177,\n                153,\n                140,\n                133,\n                130,\n                129,\n                0\n            ]\n        ], ii = [\n            0,\n            1,\n            4,\n            8,\n            5,\n            2,\n            3,\n            6,\n            9,\n            12,\n            13,\n            10,\n            7,\n            11,\n            14,\n            15\n        ], ai = [\n            -0,\n            1,\n            -1,\n            2,\n            -2,\n            3,\n            4,\n            6,\n            -3,\n            5,\n            -4,\n            -5,\n            -6,\n            7,\n            -7,\n            8,\n            -8,\n            -9\n        ], oi = [\n            [\n                [\n                    [\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ]\n                ],\n                [\n                    [\n                        253,\n                        136,\n                        254,\n                        255,\n                        228,\n                        219,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        189,\n                        129,\n                        242,\n                        255,\n                        227,\n                        213,\n                        255,\n                        219,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        106,\n                        126,\n                        227,\n                        252,\n                        214,\n                        209,\n                        255,\n                        255,\n                        128,\n                        128,\n                        128\n                    ]\n                ],\n                [\n                    [\n                        1,\n                        98,\n                        248,\n                        255,\n                        236,\n                        226,\n                        255,\n                        255,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        181,\n                        133,\n                        238,\n                        254,\n                        221,\n                        234,\n                        255,\n                        154,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        78,\n                        134,\n                        202,\n                        247,\n                        198,\n                        180,\n                        255,\n                        219,\n                        128,\n                        128,\n                        128\n                    ]\n                ],\n                [\n                    [\n                        1,\n                        185,\n                        249,\n                        255,\n                        243,\n                        255,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        184,\n                        150,\n                        247,\n                        255,\n                        236,\n                        224,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        77,\n                        110,\n                        216,\n                        255,\n                        236,\n                        230,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ]\n                ],\n                [\n                    [\n                        1,\n                        101,\n                        251,\n                        255,\n                        241,\n                        255,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        170,\n                        139,\n                        241,\n                        252,\n                        236,\n                        209,\n                        255,\n                        255,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        37,\n                        116,\n                        196,\n                        243,\n                        228,\n                        255,\n                        255,\n                        255,\n                        128,\n                        128,\n                        128\n                    ]\n                ],\n                [\n                    [\n                        1,\n                        204,\n                        254,\n                        255,\n                        245,\n                        255,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        207,\n                        160,\n                        250,\n                        255,\n                        238,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        102,\n                        103,\n                        231,\n                        255,\n                        211,\n                        171,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ]\n                ],\n                [\n                    [\n                        1,\n                        152,\n                        252,\n                        255,\n                        240,\n                        255,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        177,\n                        135,\n                        243,\n                        255,\n                        234,\n                        225,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        80,\n                        129,\n                        211,\n                        255,\n                        194,\n                        224,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ]\n                ],\n                [\n                    [\n                        1,\n                        1,\n                        255,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        246,\n                        1,\n                        255,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        255,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ]\n                ]\n            ],\n            [\n                [\n                    [\n                        198,\n                        35,\n                        237,\n                        223,\n                        193,\n                        187,\n                        162,\n                        160,\n                        145,\n                        155,\n                        62\n                    ],\n                    [\n                        131,\n                        45,\n                        198,\n                        221,\n                        172,\n                        176,\n                        220,\n                        157,\n                        252,\n                        221,\n                        1\n                    ],\n                    [\n                        68,\n                        47,\n                        146,\n                        208,\n                        149,\n                        167,\n                        221,\n                        162,\n                        255,\n                        223,\n                        128\n                    ]\n                ],\n                [\n                    [\n                        1,\n                        149,\n                        241,\n                        255,\n                        221,\n                        224,\n                        255,\n                        255,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        184,\n                        141,\n                        234,\n                        253,\n                        222,\n                        220,\n                        255,\n                        199,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        81,\n                        99,\n                        181,\n                        242,\n                        176,\n                        190,\n                        249,\n                        202,\n                        255,\n                        255,\n                        128\n                    ]\n                ],\n                [\n                    [\n                        1,\n                        129,\n                        232,\n                        253,\n                        214,\n                        197,\n                        242,\n                        196,\n                        255,\n                        255,\n                        128\n                    ],\n                    [\n                        99,\n                        121,\n                        210,\n                        250,\n                        201,\n                        198,\n                        255,\n                        202,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        23,\n                        91,\n                        163,\n                        242,\n                        170,\n                        187,\n                        247,\n                        210,\n                        255,\n                        255,\n                        128\n                    ]\n                ],\n                [\n                    [\n                        1,\n                        200,\n                        246,\n                        255,\n                        234,\n                        255,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        109,\n                        178,\n                        241,\n                        255,\n                        231,\n                        245,\n                        255,\n                        255,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        44,\n                        130,\n                        201,\n                        253,\n                        205,\n                        192,\n                        255,\n                        255,\n                        128,\n                        128,\n                        128\n                    ]\n                ],\n                [\n                    [\n                        1,\n                        132,\n                        239,\n                        251,\n                        219,\n                        209,\n                        255,\n                        165,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        94,\n                        136,\n                        225,\n                        251,\n                        218,\n                        190,\n                        255,\n                        255,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        22,\n                        100,\n                        174,\n                        245,\n                        186,\n                        161,\n                        255,\n                        199,\n                        128,\n                        128,\n                        128\n                    ]\n                ],\n                [\n                    [\n                        1,\n                        182,\n                        249,\n                        255,\n                        232,\n                        235,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        124,\n                        143,\n                        241,\n                        255,\n                        227,\n                        234,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        35,\n                        77,\n                        181,\n                        251,\n                        193,\n                        211,\n                        255,\n                        205,\n                        128,\n                        128,\n                        128\n                    ]\n                ],\n                [\n                    [\n                        1,\n                        157,\n                        247,\n                        255,\n                        236,\n                        231,\n                        255,\n                        255,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        121,\n                        141,\n                        235,\n                        255,\n                        225,\n                        227,\n                        255,\n                        255,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        45,\n                        99,\n                        188,\n                        251,\n                        195,\n                        217,\n                        255,\n                        224,\n                        128,\n                        128,\n                        128\n                    ]\n                ],\n                [\n                    [\n                        1,\n                        1,\n                        251,\n                        255,\n                        213,\n                        255,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        203,\n                        1,\n                        248,\n                        255,\n                        255,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        137,\n                        1,\n                        177,\n                        255,\n                        224,\n                        255,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ]\n                ]\n            ],\n            [\n                [\n                    [\n                        253,\n                        9,\n                        248,\n                        251,\n                        207,\n                        208,\n                        255,\n                        192,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        175,\n                        13,\n                        224,\n                        243,\n                        193,\n                        185,\n                        249,\n                        198,\n                        255,\n                        255,\n                        128\n                    ],\n                    [\n                        73,\n                        17,\n                        171,\n                        221,\n                        161,\n                        179,\n                        236,\n                        167,\n                        255,\n                        234,\n                        128\n                    ]\n                ],\n                [\n                    [\n                        1,\n                        95,\n                        247,\n                        253,\n                        212,\n                        183,\n                        255,\n                        255,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        239,\n                        90,\n                        244,\n                        250,\n                        211,\n                        209,\n                        255,\n                        255,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        155,\n                        77,\n                        195,\n                        248,\n                        188,\n                        195,\n                        255,\n                        255,\n                        128,\n                        128,\n                        128\n                    ]\n                ],\n                [\n                    [\n                        1,\n                        24,\n                        239,\n                        251,\n                        218,\n                        219,\n                        255,\n                        205,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        201,\n                        51,\n                        219,\n                        255,\n                        196,\n                        186,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        69,\n                        46,\n                        190,\n                        239,\n                        201,\n                        218,\n                        255,\n                        228,\n                        128,\n                        128,\n                        128\n                    ]\n                ],\n                [\n                    [\n                        1,\n                        191,\n                        251,\n                        255,\n                        255,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        223,\n                        165,\n                        249,\n                        255,\n                        213,\n                        255,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        141,\n                        124,\n                        248,\n                        255,\n                        255,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ]\n                ],\n                [\n                    [\n                        1,\n                        16,\n                        248,\n                        255,\n                        255,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        190,\n                        36,\n                        230,\n                        255,\n                        236,\n                        255,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        149,\n                        1,\n                        255,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ]\n                ],\n                [\n                    [\n                        1,\n                        226,\n                        255,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        247,\n                        192,\n                        255,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        240,\n                        128,\n                        255,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ]\n                ],\n                [\n                    [\n                        1,\n                        134,\n                        252,\n                        255,\n                        255,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        213,\n                        62,\n                        250,\n                        255,\n                        255,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        55,\n                        93,\n                        255,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ]\n                ],\n                [\n                    [\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ]\n                ]\n            ],\n            [\n                [\n                    [\n                        202,\n                        24,\n                        213,\n                        235,\n                        186,\n                        191,\n                        220,\n                        160,\n                        240,\n                        175,\n                        255\n                    ],\n                    [\n                        126,\n                        38,\n                        182,\n                        232,\n                        169,\n                        184,\n                        228,\n                        174,\n                        255,\n                        187,\n                        128\n                    ],\n                    [\n                        61,\n                        46,\n                        138,\n                        219,\n                        151,\n                        178,\n                        240,\n                        170,\n                        255,\n                        216,\n                        128\n                    ]\n                ],\n                [\n                    [\n                        1,\n                        112,\n                        230,\n                        250,\n                        199,\n                        191,\n                        247,\n                        159,\n                        255,\n                        255,\n                        128\n                    ],\n                    [\n                        166,\n                        109,\n                        228,\n                        252,\n                        211,\n                        215,\n                        255,\n                        174,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        39,\n                        77,\n                        162,\n                        232,\n                        172,\n                        180,\n                        245,\n                        178,\n                        255,\n                        255,\n                        128\n                    ]\n                ],\n                [\n                    [\n                        1,\n                        52,\n                        220,\n                        246,\n                        198,\n                        199,\n                        249,\n                        220,\n                        255,\n                        255,\n                        128\n                    ],\n                    [\n                        124,\n                        74,\n                        191,\n                        243,\n                        183,\n                        193,\n                        250,\n                        221,\n                        255,\n                        255,\n                        128\n                    ],\n                    [\n                        24,\n                        71,\n                        130,\n                        219,\n                        154,\n                        170,\n                        243,\n                        182,\n                        255,\n                        255,\n                        128\n                    ]\n                ],\n                [\n                    [\n                        1,\n                        182,\n                        225,\n                        249,\n                        219,\n                        240,\n                        255,\n                        224,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        149,\n                        150,\n                        226,\n                        252,\n                        216,\n                        205,\n                        255,\n                        171,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        28,\n                        108,\n                        170,\n                        242,\n                        183,\n                        194,\n                        254,\n                        223,\n                        255,\n                        255,\n                        128\n                    ]\n                ],\n                [\n                    [\n                        1,\n                        81,\n                        230,\n                        252,\n                        204,\n                        203,\n                        255,\n                        192,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        123,\n                        102,\n                        209,\n                        247,\n                        188,\n                        196,\n                        255,\n                        233,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        20,\n                        95,\n                        153,\n                        243,\n                        164,\n                        173,\n                        255,\n                        203,\n                        128,\n                        128,\n                        128\n                    ]\n                ],\n                [\n                    [\n                        1,\n                        222,\n                        248,\n                        255,\n                        216,\n                        213,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        168,\n                        175,\n                        246,\n                        252,\n                        235,\n                        205,\n                        255,\n                        255,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        47,\n                        116,\n                        215,\n                        255,\n                        211,\n                        212,\n                        255,\n                        255,\n                        128,\n                        128,\n                        128\n                    ]\n                ],\n                [\n                    [\n                        1,\n                        121,\n                        236,\n                        253,\n                        212,\n                        214,\n                        255,\n                        255,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        141,\n                        84,\n                        213,\n                        252,\n                        201,\n                        202,\n                        255,\n                        219,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        42,\n                        80,\n                        160,\n                        240,\n                        162,\n                        185,\n                        255,\n                        205,\n                        128,\n                        128,\n                        128\n                    ]\n                ],\n                [\n                    [\n                        1,\n                        1,\n                        255,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        244,\n                        1,\n                        255,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ],\n                    [\n                        238,\n                        1,\n                        255,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128,\n                        128\n                    ]\n                ]\n            ]\n        ], si = [\n            [\n                [\n                    231,\n                    120,\n                    48,\n                    89,\n                    115,\n                    113,\n                    120,\n                    152,\n                    112\n                ],\n                [\n                    152,\n                    179,\n                    64,\n                    126,\n                    170,\n                    118,\n                    46,\n                    70,\n                    95\n                ],\n                [\n                    175,\n                    69,\n                    143,\n                    80,\n                    85,\n                    82,\n                    72,\n                    155,\n                    103\n                ],\n                [\n                    56,\n                    58,\n                    10,\n                    171,\n                    218,\n                    189,\n                    17,\n                    13,\n                    152\n                ],\n                [\n                    114,\n                    26,\n                    17,\n                    163,\n                    44,\n                    195,\n                    21,\n                    10,\n                    173\n                ],\n                [\n                    121,\n                    24,\n                    80,\n                    195,\n                    26,\n                    62,\n                    44,\n                    64,\n                    85\n                ],\n                [\n                    144,\n                    71,\n                    10,\n                    38,\n                    171,\n                    213,\n                    144,\n                    34,\n                    26\n                ],\n                [\n                    170,\n                    46,\n                    55,\n                    19,\n                    136,\n                    160,\n                    33,\n                    206,\n                    71\n                ],\n                [\n                    63,\n                    20,\n                    8,\n                    114,\n                    114,\n                    208,\n                    12,\n                    9,\n                    226\n                ],\n                [\n                    81,\n                    40,\n                    11,\n                    96,\n                    182,\n                    84,\n                    29,\n                    16,\n                    36\n                ]\n            ],\n            [\n                [\n                    134,\n                    183,\n                    89,\n                    137,\n                    98,\n                    101,\n                    106,\n                    165,\n                    148\n                ],\n                [\n                    72,\n                    187,\n                    100,\n                    130,\n                    157,\n                    111,\n                    32,\n                    75,\n                    80\n                ],\n                [\n                    66,\n                    102,\n                    167,\n                    99,\n                    74,\n                    62,\n                    40,\n                    234,\n                    128\n                ],\n                [\n                    41,\n                    53,\n                    9,\n                    178,\n                    241,\n                    141,\n                    26,\n                    8,\n                    107\n                ],\n                [\n                    74,\n                    43,\n                    26,\n                    146,\n                    73,\n                    166,\n                    49,\n                    23,\n                    157\n                ],\n                [\n                    65,\n                    38,\n                    105,\n                    160,\n                    51,\n                    52,\n                    31,\n                    115,\n                    128\n                ],\n                [\n                    104,\n                    79,\n                    12,\n                    27,\n                    217,\n                    255,\n                    87,\n                    17,\n                    7\n                ],\n                [\n                    87,\n                    68,\n                    71,\n                    44,\n                    114,\n                    51,\n                    15,\n                    186,\n                    23\n                ],\n                [\n                    47,\n                    41,\n                    14,\n                    110,\n                    182,\n                    183,\n                    21,\n                    17,\n                    194\n                ],\n                [\n                    66,\n                    45,\n                    25,\n                    102,\n                    197,\n                    189,\n                    23,\n                    18,\n                    22\n                ]\n            ],\n            [\n                [\n                    88,\n                    88,\n                    147,\n                    150,\n                    42,\n                    46,\n                    45,\n                    196,\n                    205\n                ],\n                [\n                    43,\n                    97,\n                    183,\n                    117,\n                    85,\n                    38,\n                    35,\n                    179,\n                    61\n                ],\n                [\n                    39,\n                    53,\n                    200,\n                    87,\n                    26,\n                    21,\n                    43,\n                    232,\n                    171\n                ],\n                [\n                    56,\n                    34,\n                    51,\n                    104,\n                    114,\n                    102,\n                    29,\n                    93,\n                    77\n                ],\n                [\n                    39,\n                    28,\n                    85,\n                    171,\n                    58,\n                    165,\n                    90,\n                    98,\n                    64\n                ],\n                [\n                    34,\n                    22,\n                    116,\n                    206,\n                    23,\n                    34,\n                    43,\n                    166,\n                    73\n                ],\n                [\n                    107,\n                    54,\n                    32,\n                    26,\n                    51,\n                    1,\n                    81,\n                    43,\n                    31\n                ],\n                [\n                    68,\n                    25,\n                    106,\n                    22,\n                    64,\n                    171,\n                    36,\n                    225,\n                    114\n                ],\n                [\n                    34,\n                    19,\n                    21,\n                    102,\n                    132,\n                    188,\n                    16,\n                    76,\n                    124\n                ],\n                [\n                    62,\n                    18,\n                    78,\n                    95,\n                    85,\n                    57,\n                    50,\n                    48,\n                    51\n                ]\n            ],\n            [\n                [\n                    193,\n                    101,\n                    35,\n                    159,\n                    215,\n                    111,\n                    89,\n                    46,\n                    111\n                ],\n                [\n                    60,\n                    148,\n                    31,\n                    172,\n                    219,\n                    228,\n                    21,\n                    18,\n                    111\n                ],\n                [\n                    112,\n                    113,\n                    77,\n                    85,\n                    179,\n                    255,\n                    38,\n                    120,\n                    114\n                ],\n                [\n                    40,\n                    42,\n                    1,\n                    196,\n                    245,\n                    209,\n                    10,\n                    25,\n                    109\n                ],\n                [\n                    88,\n                    43,\n                    29,\n                    140,\n                    166,\n                    213,\n                    37,\n                    43,\n                    154\n                ],\n                [\n                    61,\n                    63,\n                    30,\n                    155,\n                    67,\n                    45,\n                    68,\n                    1,\n                    209\n                ],\n                [\n                    100,\n                    80,\n                    8,\n                    43,\n                    154,\n                    1,\n                    51,\n                    26,\n                    71\n                ],\n                [\n                    142,\n                    78,\n                    78,\n                    16,\n                    255,\n                    128,\n                    34,\n                    197,\n                    171\n                ],\n                [\n                    41,\n                    40,\n                    5,\n                    102,\n                    211,\n                    183,\n                    4,\n                    1,\n                    221\n                ],\n                [\n                    51,\n                    50,\n                    17,\n                    168,\n                    209,\n                    192,\n                    23,\n                    25,\n                    82\n                ]\n            ],\n            [\n                [\n                    138,\n                    31,\n                    36,\n                    171,\n                    27,\n                    166,\n                    38,\n                    44,\n                    229\n                ],\n                [\n                    67,\n                    87,\n                    58,\n                    169,\n                    82,\n                    115,\n                    26,\n                    59,\n                    179\n                ],\n                [\n                    63,\n                    59,\n                    90,\n                    180,\n                    59,\n                    166,\n                    93,\n                    73,\n                    154\n                ],\n                [\n                    40,\n                    40,\n                    21,\n                    116,\n                    143,\n                    209,\n                    34,\n                    39,\n                    175\n                ],\n                [\n                    47,\n                    15,\n                    16,\n                    183,\n                    34,\n                    223,\n                    49,\n                    45,\n                    183\n                ],\n                [\n                    46,\n                    17,\n                    33,\n                    183,\n                    6,\n                    98,\n                    15,\n                    32,\n                    183\n                ],\n                [\n                    57,\n                    46,\n                    22,\n                    24,\n                    128,\n                    1,\n                    54,\n                    17,\n                    37\n                ],\n                [\n                    65,\n                    32,\n                    73,\n                    115,\n                    28,\n                    128,\n                    23,\n                    128,\n                    205\n                ],\n                [\n                    40,\n                    3,\n                    9,\n                    115,\n                    51,\n                    192,\n                    18,\n                    6,\n                    223\n                ],\n                [\n                    87,\n                    37,\n                    9,\n                    115,\n                    59,\n                    77,\n                    64,\n                    21,\n                    47\n                ]\n            ],\n            [\n                [\n                    104,\n                    55,\n                    44,\n                    218,\n                    9,\n                    54,\n                    53,\n                    130,\n                    226\n                ],\n                [\n                    64,\n                    90,\n                    70,\n                    205,\n                    40,\n                    41,\n                    23,\n                    26,\n                    57\n                ],\n                [\n                    54,\n                    57,\n                    112,\n                    184,\n                    5,\n                    41,\n                    38,\n                    166,\n                    213\n                ],\n                [\n                    30,\n                    34,\n                    26,\n                    133,\n                    152,\n                    116,\n                    10,\n                    32,\n                    134\n                ],\n                [\n                    39,\n                    19,\n                    53,\n                    221,\n                    26,\n                    114,\n                    32,\n                    73,\n                    255\n                ],\n                [\n                    31,\n                    9,\n                    65,\n                    234,\n                    2,\n                    15,\n                    1,\n                    118,\n                    73\n                ],\n                [\n                    75,\n                    32,\n                    12,\n                    51,\n                    192,\n                    255,\n                    160,\n                    43,\n                    51\n                ],\n                [\n                    88,\n                    31,\n                    35,\n                    67,\n                    102,\n                    85,\n                    55,\n                    186,\n                    85\n                ],\n                [\n                    56,\n                    21,\n                    23,\n                    111,\n                    59,\n                    205,\n                    45,\n                    37,\n                    192\n                ],\n                [\n                    55,\n                    38,\n                    70,\n                    124,\n                    73,\n                    102,\n                    1,\n                    34,\n                    98\n                ]\n            ],\n            [\n                [\n                    125,\n                    98,\n                    42,\n                    88,\n                    104,\n                    85,\n                    117,\n                    175,\n                    82\n                ],\n                [\n                    95,\n                    84,\n                    53,\n                    89,\n                    128,\n                    100,\n                    113,\n                    101,\n                    45\n                ],\n                [\n                    75,\n                    79,\n                    123,\n                    47,\n                    51,\n                    128,\n                    81,\n                    171,\n                    1\n                ],\n                [\n                    57,\n                    17,\n                    5,\n                    71,\n                    102,\n                    57,\n                    53,\n                    41,\n                    49\n                ],\n                [\n                    38,\n                    33,\n                    13,\n                    121,\n                    57,\n                    73,\n                    26,\n                    1,\n                    85\n                ],\n                [\n                    41,\n                    10,\n                    67,\n                    138,\n                    77,\n                    110,\n                    90,\n                    47,\n                    114\n                ],\n                [\n                    115,\n                    21,\n                    2,\n                    10,\n                    102,\n                    255,\n                    166,\n                    23,\n                    6\n                ],\n                [\n                    101,\n                    29,\n                    16,\n                    10,\n                    85,\n                    128,\n                    101,\n                    196,\n                    26\n                ],\n                [\n                    57,\n                    18,\n                    10,\n                    102,\n                    102,\n                    213,\n                    34,\n                    20,\n                    43\n                ],\n                [\n                    117,\n                    20,\n                    15,\n                    36,\n                    163,\n                    128,\n                    68,\n                    1,\n                    26\n                ]\n            ],\n            [\n                [\n                    102,\n                    61,\n                    71,\n                    37,\n                    34,\n                    53,\n                    31,\n                    243,\n                    192\n                ],\n                [\n                    69,\n                    60,\n                    71,\n                    38,\n                    73,\n                    119,\n                    28,\n                    222,\n                    37\n                ],\n                [\n                    68,\n                    45,\n                    128,\n                    34,\n                    1,\n                    47,\n                    11,\n                    245,\n                    171\n                ],\n                [\n                    62,\n                    17,\n                    19,\n                    70,\n                    146,\n                    85,\n                    55,\n                    62,\n                    70\n                ],\n                [\n                    37,\n                    43,\n                    37,\n                    154,\n                    100,\n                    163,\n                    85,\n                    160,\n                    1\n                ],\n                [\n                    63,\n                    9,\n                    92,\n                    136,\n                    28,\n                    64,\n                    32,\n                    201,\n                    85\n                ],\n                [\n                    75,\n                    15,\n                    9,\n                    9,\n                    64,\n                    255,\n                    184,\n                    119,\n                    16\n                ],\n                [\n                    86,\n                    6,\n                    28,\n                    5,\n                    64,\n                    255,\n                    25,\n                    248,\n                    1\n                ],\n                [\n                    56,\n                    8,\n                    17,\n                    132,\n                    137,\n                    255,\n                    55,\n                    116,\n                    128\n                ],\n                [\n                    58,\n                    15,\n                    20,\n                    82,\n                    135,\n                    57,\n                    26,\n                    121,\n                    40\n                ]\n            ],\n            [\n                [\n                    164,\n                    50,\n                    31,\n                    137,\n                    154,\n                    133,\n                    25,\n                    35,\n                    218\n                ],\n                [\n                    51,\n                    103,\n                    44,\n                    131,\n                    131,\n                    123,\n                    31,\n                    6,\n                    158\n                ],\n                [\n                    86,\n                    40,\n                    64,\n                    135,\n                    148,\n                    224,\n                    45,\n                    183,\n                    128\n                ],\n                [\n                    22,\n                    26,\n                    17,\n                    131,\n                    240,\n                    154,\n                    14,\n                    1,\n                    209\n                ],\n                [\n                    45,\n                    16,\n                    21,\n                    91,\n                    64,\n                    222,\n                    7,\n                    1,\n                    197\n                ],\n                [\n                    56,\n                    21,\n                    39,\n                    155,\n                    60,\n                    138,\n                    23,\n                    102,\n                    213\n                ],\n                [\n                    83,\n                    12,\n                    13,\n                    54,\n                    192,\n                    255,\n                    68,\n                    47,\n                    28\n                ],\n                [\n                    85,\n                    26,\n                    85,\n                    85,\n                    128,\n                    128,\n                    32,\n                    146,\n                    171\n                ],\n                [\n                    18,\n                    11,\n                    7,\n                    63,\n                    144,\n                    171,\n                    4,\n                    4,\n                    246\n                ],\n                [\n                    35,\n                    27,\n                    10,\n                    146,\n                    174,\n                    171,\n                    12,\n                    26,\n                    128\n                ]\n            ],\n            [\n                [\n                    190,\n                    80,\n                    35,\n                    99,\n                    180,\n                    80,\n                    126,\n                    54,\n                    45\n                ],\n                [\n                    85,\n                    126,\n                    47,\n                    87,\n                    176,\n                    51,\n                    41,\n                    20,\n                    32\n                ],\n                [\n                    101,\n                    75,\n                    128,\n                    139,\n                    118,\n                    146,\n                    116,\n                    128,\n                    85\n                ],\n                [\n                    56,\n                    41,\n                    15,\n                    176,\n                    236,\n                    85,\n                    37,\n                    9,\n                    62\n                ],\n                [\n                    71,\n                    30,\n                    17,\n                    119,\n                    118,\n                    255,\n                    17,\n                    18,\n                    138\n                ],\n                [\n                    101,\n                    38,\n                    60,\n                    138,\n                    55,\n                    70,\n                    43,\n                    26,\n                    142\n                ],\n                [\n                    146,\n                    36,\n                    19,\n                    30,\n                    171,\n                    255,\n                    97,\n                    27,\n                    20\n                ],\n                [\n                    138,\n                    45,\n                    61,\n                    62,\n                    219,\n                    1,\n                    81,\n                    188,\n                    64\n                ],\n                [\n                    32,\n                    41,\n                    20,\n                    117,\n                    151,\n                    142,\n                    20,\n                    21,\n                    163\n                ],\n                [\n                    112,\n                    19,\n                    12,\n                    61,\n                    195,\n                    128,\n                    48,\n                    4,\n                    24\n                ]\n            ]\n        ], ui = [\n            [\n                [\n                    [\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ],\n                [\n                    [\n                        176,\n                        246,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        223,\n                        241,\n                        252,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        249,\n                        253,\n                        253,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ],\n                [\n                    [\n                        255,\n                        244,\n                        252,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        234,\n                        254,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        253,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ],\n                [\n                    [\n                        255,\n                        246,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        239,\n                        253,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        254,\n                        255,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ],\n                [\n                    [\n                        255,\n                        248,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        251,\n                        255,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ],\n                [\n                    [\n                        255,\n                        253,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        251,\n                        254,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        254,\n                        255,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ],\n                [\n                    [\n                        255,\n                        254,\n                        253,\n                        255,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        250,\n                        255,\n                        254,\n                        255,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ],\n                [\n                    [\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ]\n            ],\n            [\n                [\n                    [\n                        217,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        225,\n                        252,\n                        241,\n                        253,\n                        255,\n                        255,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        234,\n                        250,\n                        241,\n                        250,\n                        253,\n                        255,\n                        253,\n                        254,\n                        255,\n                        255,\n                        255\n                    ]\n                ],\n                [\n                    [\n                        255,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        223,\n                        254,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        238,\n                        253,\n                        254,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ],\n                [\n                    [\n                        255,\n                        248,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        249,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ],\n                [\n                    [\n                        255,\n                        253,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        247,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ],\n                [\n                    [\n                        255,\n                        253,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        252,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ],\n                [\n                    [\n                        255,\n                        254,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        253,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ],\n                [\n                    [\n                        255,\n                        254,\n                        253,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        250,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ],\n                [\n                    [\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ]\n            ],\n            [\n                [\n                    [\n                        186,\n                        251,\n                        250,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        234,\n                        251,\n                        244,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        251,\n                        251,\n                        243,\n                        253,\n                        254,\n                        255,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ],\n                [\n                    [\n                        255,\n                        253,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        236,\n                        253,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        251,\n                        253,\n                        253,\n                        254,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ],\n                [\n                    [\n                        255,\n                        254,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        254,\n                        254,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ],\n                [\n                    [\n                        255,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        254,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ],\n                [\n                    [\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ],\n                [\n                    [\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ],\n                [\n                    [\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ],\n                [\n                    [\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ]\n            ],\n            [\n                [\n                    [\n                        248,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        250,\n                        254,\n                        252,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        248,\n                        254,\n                        249,\n                        253,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ],\n                [\n                    [\n                        255,\n                        253,\n                        253,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        246,\n                        253,\n                        253,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        252,\n                        254,\n                        251,\n                        254,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ],\n                [\n                    [\n                        255,\n                        254,\n                        252,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        248,\n                        254,\n                        253,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        253,\n                        255,\n                        254,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ],\n                [\n                    [\n                        255,\n                        251,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        245,\n                        251,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        253,\n                        253,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ],\n                [\n                    [\n                        255,\n                        251,\n                        253,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        252,\n                        253,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        255,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ],\n                [\n                    [\n                        255,\n                        252,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        249,\n                        255,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        255,\n                        255,\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ],\n                [\n                    [\n                        255,\n                        255,\n                        253,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        250,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ],\n                [\n                    [\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        254,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ],\n                    [\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255,\n                        255\n                    ]\n                ]\n            ]\n        ], ci = [\n            0,\n            1,\n            2,\n            3,\n            6,\n            4,\n            5,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            7,\n            0\n        ], li = [], hi = [], fi = [], di = 1, pi = 2, gi = [], mi = [];\n        vn(\"UpsampleRgbLinePair\", xn, 3), vn(\"UpsampleBgrLinePair\", An, 3), vn(\"UpsampleRgbaLinePair\", Fn, 4), vn(\"UpsampleBgraLinePair\", kn, 4), vn(\"UpsampleArgbLinePair\", Pn, 4), vn(\"UpsampleRgba4444LinePair\", _n, 2), vn(\"UpsampleRgb565LinePair\", Sn, 2);\n        var vi = t.UpsampleRgbLinePair, bi = t.UpsampleBgrLinePair, yi = t.UpsampleRgbaLinePair, wi = t.UpsampleBgraLinePair, Ni = t.UpsampleArgbLinePair, Li = t.UpsampleRgba4444LinePair, xi = t.UpsampleRgb565LinePair, Ai = 16, Si = 1 << Ai - 1, _i = -227, Pi = 482, ki = 6, Fi = (256 << ki) - 1, Ii = 0, ji = a(256), Ci = a(256), Oi = a(256), Bi = a(256), Mi = a(Pi - _i), qi = a(Pi - _i);\n        In(\"YuvToRgbRow\", xn, 3), In(\"YuvToBgrRow\", An, 3), In(\"YuvToRgbaRow\", Fn, 4), In(\"YuvToBgraRow\", kn, 4), In(\"YuvToArgbRow\", Pn, 4), In(\"YuvToRgba4444Row\", _n, 2), In(\"YuvToRgb565Row\", Sn, 2);\n        var Ei = [\n            0,\n            4,\n            8,\n            12,\n            128,\n            132,\n            136,\n            140,\n            256,\n            260,\n            264,\n            268,\n            384,\n            388,\n            392,\n            396\n        ], Ri = [\n            0,\n            2,\n            8\n        ], Di = [\n            8,\n            7,\n            6,\n            4,\n            4,\n            2,\n            2,\n            2,\n            1,\n            1,\n            1,\n            1\n        ], Ti = 1;\n        this.WebPDecodeRGBA = function(t, n, s, u, c) {\n            var l = qr, h = new en, f = new ot;\n            h.ba = f, f.S = l, f.width = [\n                f.width\n            ], f.height = [\n                f.height\n            ];\n            var d = f.width, p = f.height, g = new st;\n            if (null == g || null == t) var m = 2;\n            else e(null != g), m = Bn(t, n, s, g.width, g.height, g.Pd, g.Qd, g.format, null);\n            if (0 != m ? d = 0 : (null != d && (d[0] = g.width[0]), null != p && (p[0] = g.height[0]), d = 1), d) {\n                f.width = f.width[0], f.height = f.height[0], null != u && (u[0] = f.width), null != c && (c[0] = f.height);\n                t: {\n                    if (u = new Gt, (c = new nn).data = t, c.w = n, c.ha = s, c.kd = 1, n = [\n                        0\n                    ], e(null != c), (0 == (t = Bn(c.data, c.w, c.ha, null, null, null, n, null, c)) || 7 == t) && n[0] && (t = 4), 0 == (n = t)) {\n                        if (e(null != h), u.data = c.data, u.w = c.w + c.offset, u.ha = c.ha - c.offset, u.put = dt, u.ac = ft, u.bc = pt, u.ma = h, c.xa) {\n                            if (null == (t = kt())) {\n                                h = 1;\n                                break t;\n                            }\n                            if (function(t, n) {\n                                var r = [\n                                    0\n                                ], i = [\n                                    0\n                                ], a = [\n                                    0\n                                ];\n                                e: for(;;){\n                                    if (null == t) return 0;\n                                    if (null == n) return t.a = 2, 0;\n                                    if (t.l = n, t.a = 0, v(t.m, n.data, n.w, n.ha), !gt(t.m, r, i, a)) {\n                                        t.a = 3;\n                                        break e;\n                                    }\n                                    if (t.xb = pi, n.width = r[0], n.height = i[0], !Ft(r[0], i[0], 1, t, null)) break e;\n                                    return 1;\n                                }\n                                return e(0 != t.a), 0;\n                            }(t, u)) {\n                                if (u = 0 == (n = En(u.width, u.height, h.Oa, h.ba))) {\n                                    e: {\n                                        u = t;\n                                        n: for(;;){\n                                            if (null == u) {\n                                                u = 0;\n                                                break e;\n                                            }\n                                            if (e(null != u.s.yc), e(null != u.s.Ya), e(0 < u.s.Wb), e(null != (s = u.l)), e(null != (c = s.ma)), 0 != u.xb) {\n                                                if (u.ca = c.ba, u.tb = c.tb, e(null != u.ca), !Mn(c.Oa, s, Rr)) {\n                                                    u.a = 2;\n                                                    break n;\n                                                }\n                                                if (!It(u, s.width)) break n;\n                                                if (s.da) break n;\n                                                if ((s.da || rt(u.ca.S)) && mn(), 11 > u.ca.S || (alert(\"todo:WebPInitConvertARGBToYUV\"), null != u.ca.f.kb.F && mn()), u.Pb && 0 < u.s.ua && null == u.s.vb.X && !O(u.s.vb, u.s.Wa.Xa)) {\n                                                    u.a = 1;\n                                                    break n;\n                                                }\n                                                u.xb = 0;\n                                            }\n                                            if (!_t(u, u.V, u.Ba, u.c, u.i, s.o, Lt)) break n;\n                                            c.Dc = u.Ma, u = 1;\n                                            break e;\n                                        }\n                                        e(0 != u.a), u = 0;\n                                    }\n                                    u = !u;\n                                }\n                                u && (n = t.a);\n                            } else n = t.a;\n                        } else {\n                            if (null == (t = new Yt)) {\n                                h = 1;\n                                break t;\n                            }\n                            if (t.Fa = c.na, t.P = c.P, t.qc = c.Sa, Kt(t, u)) {\n                                if (0 == (n = En(u.width, u.height, h.Oa, h.ba))) {\n                                    if (t.Aa = 0, s = h.Oa, e(null != (c = t)), null != s) {\n                                        if (0 < (d = 0 > (d = s.Md) ? 0 : 100 < d ? 255 : 255 * d / 100)) {\n                                            for(p = g = 0; 4 > p; ++p)12 > (m = c.pb[p]).lc && (m.ia = d * Di[0 > m.lc ? 0 : m.lc] >> 3), g |= m.ia;\n                                            g && (alert(\"todo:VP8InitRandom\"), c.ia = 1);\n                                        }\n                                        c.Ga = s.Id, 100 < c.Ga ? c.Ga = 100 : 0 > c.Ga && (c.Ga = 0);\n                                    }\n                                    (function(t, n) {\n                                        if (null == t) return 0;\n                                        if (null == n) return Jt(t, 2, \"NULL VP8Io parameter in VP8Decode().\");\n                                        if (!t.cb && !Kt(t, n)) return 0;\n                                        if (e(t.cb), null == n.ac || n.ac(n)) {\n                                            n.ob && (t.L = 0);\n                                            var s = Ri[t.L];\n                                            if (2 == t.L ? (t.yb = 0, t.zb = 0) : (t.yb = n.v - s >> 4, t.zb = n.j - s >> 4, 0 > t.yb && (t.yb = 0), 0 > t.zb && (t.zb = 0)), t.Va = n.o + 15 + s >> 4, t.Hb = n.va + 15 + s >> 4, t.Hb > t.za && (t.Hb = t.za), t.Va > t.Ub && (t.Va = t.Ub), 0 < t.L) {\n                                                var u = t.ed;\n                                                for(s = 0; 4 > s; ++s){\n                                                    var c;\n                                                    if (t.Qa.Cb) {\n                                                        var l = t.Qa.Lb[s];\n                                                        t.Qa.Fb || (l += u.Tb);\n                                                    } else l = u.Tb;\n                                                    for(c = 0; 1 >= c; ++c){\n                                                        var h = t.gd[s][c], f = l;\n                                                        if (u.Pc && (f += u.vd[0], c && (f += u.od[0])), 0 < (f = 0 > f ? 0 : 63 < f ? 63 : f)) {\n                                                            var d = f;\n                                                            0 < u.wb && (d = 4 < u.wb ? d >> 2 : d >> 1) > 9 - u.wb && (d = 9 - u.wb), 1 > d && (d = 1), h.dd = d, h.tc = 2 * f + d, h.ld = 40 <= f ? 2 : 15 <= f ? 1 : 0;\n                                                        } else h.tc = 0;\n                                                        h.La = c;\n                                                    }\n                                                }\n                                            }\n                                            s = 0;\n                                        } else Jt(t, 6, \"Frame setup failed\"), s = t.a;\n                                        if (s = 0 == s) {\n                                            if (s) {\n                                                t.$c = 0, 0 < t.Aa || (t.Ic = Ti);\n                                                e: {\n                                                    s = t.Ic, u = 4 * (d = t.za);\n                                                    var p = 32 * d, g = d + 1, m = 0 < t.L ? d * (0 < t.Aa ? 2 : 1) : 0, v = (2 == t.Aa ? 2 : 1) * d;\n                                                    if ((h = u + 832 + (c = 3 * (16 * s + Ri[t.L]) / 2 * p) + (l = null != t.Fa && 0 < t.Fa.length ? t.Kc.c * t.Kc.i : 0)) != h) s = 0;\n                                                    else {\n                                                        if (h > t.Vb) {\n                                                            if (t.Vb = 0, t.Ec = a(h), t.Fc = 0, null == t.Ec) {\n                                                                s = Jt(t, 1, \"no memory during frame initialization.\");\n                                                                break e;\n                                                            }\n                                                            t.Vb = h;\n                                                        }\n                                                        h = t.Ec, f = t.Fc, t.Ac = h, t.Bc = f, f += u, t.Gd = o(p, Ht), t.Hd = 0, t.rb = o(g + 1, Dt), t.sb = 1, t.wa = m ? o(m, Rt) : null, t.Y = 0, t.D.Nb = 0, t.D.wa = t.wa, t.D.Y = t.Y, 0 < t.Aa && (t.D.Y += d), e(!0), t.oc = h, t.pc = f, f += 832, t.ya = o(v, zt), t.aa = 0, t.D.ya = t.ya, t.D.aa = t.aa, 2 == t.Aa && (t.D.aa += d), t.R = 16 * d, t.B = 8 * d, d = (p = Ri[t.L]) * t.R, p = p / 2 * t.B, t.sa = h, t.ta = f + d, t.qa = t.sa, t.ra = t.ta + 16 * s * t.R + p, t.Ha = t.qa, t.Ia = t.ra + 8 * s * t.B + p, t.$c = 0, f += c, t.mb = l ? h : null, t.nb = l ? f : null, e(f + l <= t.Fc + t.Vb), $t(t), i(t.Ac, t.Bc, 0, u), s = 1;\n                                                    }\n                                                }\n                                                if (s) {\n                                                    if (n.ka = 0, n.y = t.sa, n.O = t.ta, n.f = t.qa, n.N = t.ra, n.ea = t.Ha, n.Vd = t.Ia, n.fa = t.R, n.Rc = t.B, n.F = null, n.J = 0, !Ir) {\n                                                        for(s = -255; 255 >= s; ++s)_r[255 + s] = 0 > s ? -s : s;\n                                                        for(s = -1020; 1020 >= s; ++s)Pr[1020 + s] = -128 > s ? -128 : 127 < s ? 127 : s;\n                                                        for(s = -112; 112 >= s; ++s)kr[112 + s] = -16 > s ? -16 : 15 < s ? 15 : s;\n                                                        for(s = -255; 510 >= s; ++s)Fr[255 + s] = 0 > s ? 0 : 255 < s ? 255 : s;\n                                                        Ir = 1;\n                                                    }\n                                                    ir = ue, ar = ie, sr = ae, ur = oe, cr = se, or = re, lr = Ye, hr = Je, fr = Ze, dr = $e, pr = Xe, gr = Ke, mr = Qe, vr = tn, br = ze, yr = Ue, wr = He, Nr = We, hi[0] = xe, hi[1] = le, hi[2] = Ne, hi[3] = Le, hi[4] = Ae, hi[5] = _e, hi[6] = Se, hi[7] = Pe, hi[8] = Fe, hi[9] = ke, li[0] = me, li[1] = fe, li[2] = de, li[3] = pe, li[4] = ve, li[5] = be, li[6] = ye, fi[0] = Oe, fi[1] = he, fi[2] = Ie, fi[3] = je, fi[4] = Me, fi[5] = Be, fi[6] = qe, s = 1;\n                                                } else s = 0;\n                                            }\n                                            s && (s = function(t, n) {\n                                                for(t.M = 0; t.M < t.Va; ++t.M){\n                                                    var o, s = t.Jc[t.M & t.Xb], u = t.m, c = t;\n                                                    for(o = 0; o < c.za; ++o){\n                                                        var l = u, h = c, f = h.Ac, d = h.Bc + 4 * o, p = h.zc, g = h.ya[h.aa + o];\n                                                        if (h.Qa.Bb ? g.$b = k(l, h.Pa.jb[0]) ? 2 + k(l, h.Pa.jb[2]) : k(l, h.Pa.jb[1]) : g.$b = 0, h.kc && (g.Ad = k(l, h.Bd)), g.Za = !k(l, 145) + 0, g.Za) {\n                                                            var m = g.Ob, v = 0;\n                                                            for(h = 0; 4 > h; ++h){\n                                                                var b, y = p[0 + h];\n                                                                for(b = 0; 4 > b; ++b){\n                                                                    y = si[f[d + b]][y];\n                                                                    for(var w = ai[k(l, y[0])]; 0 < w;)w = ai[2 * w + k(l, y[w])];\n                                                                    y = -w, f[d + b] = y;\n                                                                }\n                                                                r(m, v, f, d, 4), v += 4, p[0 + h] = y;\n                                                            }\n                                                        } else y = k(l, 156) ? k(l, 128) ? 1 : 3 : k(l, 163) ? 2 : 0, g.Ob[0] = y, i(f, d, y, 4), i(p, 0, y, 4);\n                                                        g.Dd = k(l, 142) ? k(l, 114) ? k(l, 183) ? 1 : 3 : 2 : 0;\n                                                    }\n                                                    if (c.m.Ka) return Jt(t, 7, \"Premature end-of-partition0 encountered.\");\n                                                    for(; t.ja < t.za; ++t.ja){\n                                                        if (c = s, l = (u = t).rb[u.sb - 1], f = u.rb[u.sb + u.ja], o = u.ya[u.aa + u.ja], d = u.kc ? o.Ad : 0) l.la = f.la = 0, o.Za || (l.Na = f.Na = 0), o.Hc = 0, o.Gc = 0, o.ia = 0;\n                                                        else {\n                                                            var N, L;\n                                                            if (l = f, f = c, d = u.Pa.Xc, p = u.ya[u.aa + u.ja], g = u.pb[p.$b], h = p.ad, m = 0, v = u.rb[u.sb - 1], y = b = 0, i(h, m, 0, 384), p.Za) var x = 0, A = d[3];\n                                                            else {\n                                                                w = a(16);\n                                                                var S = l.Na + v.Na;\n                                                                if (S = ni(f, d[1], S, g.Eb, 0, w, 0), l.Na = v.Na = (0 < S) + 0, 1 < S) ir(w, 0, h, m);\n                                                                else {\n                                                                    var _ = w[0] + 3 >> 3;\n                                                                    for(w = 0; 256 > w; w += 16)h[m + w] = _;\n                                                                }\n                                                                x = 1, A = d[0];\n                                                            }\n                                                            var P = 15 & l.la, F = 15 & v.la;\n                                                            for(w = 0; 4 > w; ++w){\n                                                                var I = 1 & F;\n                                                                for(_ = L = 0; 4 > _; ++_)P = P >> 1 | (I = (S = ni(f, A, S = I + (1 & P), g.Sc, x, h, m)) > x) << 7, L = L << 2 | (3 < S ? 3 : 1 < S ? 2 : 0 != h[m + 0]), m += 16;\n                                                                P >>= 4, F = F >> 1 | I << 7, b = (b << 8 | L) >>> 0;\n                                                            }\n                                                            for(A = P, x = F >> 4, N = 0; 4 > N; N += 2){\n                                                                for(L = 0, P = l.la >> 4 + N, F = v.la >> 4 + N, w = 0; 2 > w; ++w){\n                                                                    for(I = 1 & F, _ = 0; 2 > _; ++_)S = I + (1 & P), P = P >> 1 | (I = 0 < (S = ni(f, d[2], S, g.Qc, 0, h, m))) << 3, L = L << 2 | (3 < S ? 3 : 1 < S ? 2 : 0 != h[m + 0]), m += 16;\n                                                                    P >>= 2, F = F >> 1 | I << 5;\n                                                                }\n                                                                y |= L << 4 * N, A |= P << 4 << N, x |= (240 & F) << N;\n                                                            }\n                                                            l.la = A, v.la = x, p.Hc = b, p.Gc = y, p.ia = 43690 & y ? 0 : g.ia, d = !(b | y);\n                                                        }\n                                                        if (0 < u.L && (u.wa[u.Y + u.ja] = u.gd[o.$b][o.Za], u.wa[u.Y + u.ja].La |= !d), c.Ka) return Jt(t, 7, \"Premature end-of-file encountered.\");\n                                                    }\n                                                    if ($t(t), u = n, c = 1, o = (s = t).D, l = 0 < s.L && s.M >= s.zb && s.M <= s.Va, 0 == s.Aa) e: {\n                                                        if (o.M = s.M, o.uc = l, On(s, o), c = 1, o = (L = s.D).Nb, l = (y = Ri[s.L]) * s.R, f = y / 2 * s.B, w = 16 * o * s.R, _ = 8 * o * s.B, d = s.sa, p = s.ta - l + w, g = s.qa, h = s.ra - f + _, m = s.Ha, v = s.Ia - f + _, F = 0 == (P = L.M), b = P >= s.Va - 1, 2 == s.Aa && On(s, L), L.uc) for(I = (S = s).D.M, e(S.D.uc), L = S.yb; L < S.Hb; ++L){\n                                                            x = L, A = I;\n                                                            var j = (C = (z = S).D).Nb;\n                                                            N = z.R;\n                                                            var C = C.wa[C.Y + x], O = z.sa, B = z.ta + 16 * j * N + 16 * x, M = C.dd, q = C.tc;\n                                                            if (0 != q) if (e(3 <= q), 1 == z.L) 0 < x && yr(O, B, N, q + 4), C.La && Nr(O, B, N, q), 0 < A && br(O, B, N, q + 4), C.La && wr(O, B, N, q);\n                                                            else {\n                                                                var E = z.B, R = z.qa, D = z.ra + 8 * j * E + 8 * x, T = z.Ha, z = z.Ia + 8 * j * E + 8 * x;\n                                                                j = C.ld, 0 < x && (hr(O, B, N, q + 4, M, j), dr(R, D, T, z, E, q + 4, M, j)), C.La && (gr(O, B, N, q, M, j), vr(R, D, T, z, E, q, M, j)), 0 < A && (lr(O, B, N, q + 4, M, j), fr(R, D, T, z, E, q + 4, M, j)), C.La && (pr(O, B, N, q, M, j), mr(R, D, T, z, E, q, M, j));\n                                                            }\n                                                        }\n                                                        if (s.ia && alert(\"todo:DitherRow\"), null != u.put) {\n                                                            if (L = 16 * P, P = 16 * (P + 1), F ? (u.y = s.sa, u.O = s.ta + w, u.f = s.qa, u.N = s.ra + _, u.ea = s.Ha, u.W = s.Ia + _) : (L -= y, u.y = d, u.O = p, u.f = g, u.N = h, u.ea = m, u.W = v), b || (P -= y), P > u.o && (P = u.o), u.F = null, u.J = null, null != s.Fa && 0 < s.Fa.length && L < P && (u.J = hn(s, u, L, P - L), u.F = s.mb, null == u.F && 0 == u.F.length)) {\n                                                                c = Jt(s, 3, \"Could not decode alpha data.\");\n                                                                break e;\n                                                            }\n                                                            L < u.j && (y = u.j - L, L = u.j, e(!(1 & y)), u.O += s.R * y, u.N += s.B * (y >> 1), u.W += s.B * (y >> 1), null != u.F && (u.J += u.width * y)), L < P && (u.O += u.v, u.N += u.v >> 1, u.W += u.v >> 1, null != u.F && (u.J += u.v), u.ka = L - u.j, u.U = u.va - u.v, u.T = P - L, c = u.put(u));\n                                                        }\n                                                        o + 1 != s.Ic || b || (r(s.sa, s.ta - l, d, p + 16 * s.R, l), r(s.qa, s.ra - f, g, h + 8 * s.B, f), r(s.Ha, s.Ia - f, m, v + 8 * s.B, f));\n                                                    }\n                                                    if (!c) return Jt(t, 6, \"Output aborted.\");\n                                                }\n                                                return 1;\n                                            }(t, n)), null != n.bc && n.bc(n), s &= 1;\n                                        }\n                                        return s ? (t.cb = 0, s) : 0;\n                                    })(t, u) || (n = t.a);\n                                }\n                            } else n = t.a;\n                        }\n                        0 == n && null != h.Oa && h.Oa.fd && (n = qn(h.ba));\n                    }\n                    h = n;\n                }\n                l = 0 != h ? null : 11 > l ? f.f.RGBA.eb : f.f.kb.y;\n            } else l = null;\n            return l;\n        };\n        var zi = [\n            3,\n            4,\n            3,\n            4,\n            4,\n            2,\n            2,\n            4,\n            4,\n            4,\n            2,\n            1,\n            1\n        ];\n    };\n    function c(t, e) {\n        for(var n = \"\", r = 0; r < 4; r++)n += String.fromCharCode(t[e++]);\n        return n;\n    }\n    function l(t, e) {\n        return t[e + 0] | t[e + 1] << 8;\n    }\n    function h(t, e) {\n        return (t[e + 0] | t[e + 1] << 8 | t[e + 2] << 16) >>> 0;\n    }\n    function f(t, e) {\n        return (t[e + 0] | t[e + 1] << 8 | t[e + 2] << 16 | t[e + 3] << 24) >>> 0;\n    }\n    new u;\n    var d = [\n        0\n    ], p = [\n        0\n    ], g = [], m = new u, v = t, b = function(t, e) {\n        var n = {}, r = 0, i = !1, a = 0, o = 0;\n        if (n.frames = [], !/** @license\n   * Copyright (c) 2017 Dominik Homberger\n  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n  https://webpjs.appspot.com\n  WebPRiffParser dominikhlbg@gmail.com\n  */ function(t, e) {\n            for(var n = 0; n < 4; n++)if (t[e + n] != \"RIFF\".charCodeAt(n)) return !0;\n            return !1;\n        }(t, e)) {\n            for(f(t, e += 4), e += 8; e < t.length;){\n                var s = c(t, e), u = f(t, e += 4);\n                e += 4;\n                var d = u + (1 & u);\n                switch(s){\n                    case \"VP8 \":\n                    case \"VP8L\":\n                        void 0 === n.frames[r] && (n.frames[r] = {}), (m = n.frames[r]).src_off = i ? o : e - 8, m.src_size = a + u + 8, r++, i && (i = !1, a = 0, o = 0);\n                        break;\n                    case \"VP8X\":\n                        (m = n.header = {}).feature_flags = t[e];\n                        var p = e + 4;\n                        m.canvas_width = 1 + h(t, p), p += 3, m.canvas_height = 1 + h(t, p), p += 3;\n                        break;\n                    case \"ALPH\":\n                        i = !0, a = d + 8, o = e - 8;\n                        break;\n                    case \"ANIM\":\n                        (m = n.header).bgcolor = f(t, e), p = e + 4, m.loop_count = l(t, p), p += 2;\n                        break;\n                    case \"ANMF\":\n                        var g, m;\n                        (m = n.frames[r] = {}).offset_x = 2 * h(t, e), e += 3, m.offset_y = 2 * h(t, e), e += 3, m.width = 1 + h(t, e), e += 3, m.height = 1 + h(t, e), e += 3, m.duration = h(t, e), e += 3, g = t[e++], m.dispose = 1 & g, m.blend = g >> 1 & 1;\n                }\n                \"ANMF\" != s && (e += d);\n            }\n            return n;\n        }\n    }(v, 0);\n    b.response = v, b.rgbaoutput = !0, b.dataurl = !1;\n    var y = b.header ? b.header : null, w = b.frames ? b.frames : null;\n    if (y) {\n        y.loop_counter = y.loop_count, d = [\n            y.canvas_height\n        ], p = [\n            y.canvas_width\n        ];\n        for(var N = 0; N < w.length && 0 != w[N].blend; N++);\n    }\n    var L = w[0], x = m.WebPDecodeRGBA(v, L.src_off, L.src_size, p, d);\n    L.rgba = x, L.imgwidth = p[0], L.imgheight = d[0];\n    for(var A = 0; A < p[0] * d[0] * 4; A++)g[A] = x[A];\n    return this.width = p, this.height = d, this.data = g, this;\n}\n!function(e) {\n    var n, r, i, a, s, u, c, l, f, d = function(t) {\n        return t = t || {}, this.isStrokeTransparent = t.isStrokeTransparent || !1, this.strokeOpacity = t.strokeOpacity || 1, this.strokeStyle = t.strokeStyle || \"#000000\", this.fillStyle = t.fillStyle || \"#000000\", this.isFillTransparent = t.isFillTransparent || !1, this.fillOpacity = t.fillOpacity || 1, this.font = t.font || \"10px sans-serif\", this.textBaseline = t.textBaseline || \"alphabetic\", this.textAlign = t.textAlign || \"left\", this.lineWidth = t.lineWidth || 1, this.lineJoin = t.lineJoin || \"miter\", this.lineCap = t.lineCap || \"butt\", this.path = t.path || [], this.transform = void 0 !== t.transform ? t.transform.clone() : new l, this.globalCompositeOperation = t.globalCompositeOperation || \"normal\", this.globalAlpha = t.globalAlpha || 1, this.clip_path = t.clip_path || [], this.currentPoint = t.currentPoint || new u, this.miterLimit = t.miterLimit || 10, this.lastPoint = t.lastPoint || new u, this.lineDashOffset = t.lineDashOffset || 0, this.lineDash = t.lineDash || [], this.margin = t.margin || [\n            0,\n            0,\n            0,\n            0\n        ], this.prevPageLastElemOffset = t.prevPageLastElemOffset || 0, this.ignoreClearRect = \"boolean\" != typeof t.ignoreClearRect || t.ignoreClearRect, this;\n    };\n    e.events.push([\n        \"initialized\",\n        function() {\n            this.context2d = new p(this), n = this.internal.f2, r = this.internal.getCoordinateString, i = this.internal.getVerticalCoordinateString, a = this.internal.getHorizontalCoordinate, s = this.internal.getVerticalCoordinate, u = this.internal.Point, c = this.internal.Rectangle, l = this.internal.Matrix, f = new d;\n        }\n    ]);\n    var p = function(t) {\n        Object.defineProperty(this, \"canvas\", {\n            get: function() {\n                return {\n                    parentNode: !1,\n                    style: !1\n                };\n            }\n        });\n        var e = t;\n        Object.defineProperty(this, \"pdf\", {\n            get: function() {\n                return e;\n            }\n        });\n        var n = !1;\n        Object.defineProperty(this, \"pageWrapXEnabled\", {\n            get: function() {\n                return n;\n            },\n            set: function(t) {\n                n = Boolean(t);\n            }\n        });\n        var r = !1;\n        Object.defineProperty(this, \"pageWrapYEnabled\", {\n            get: function() {\n                return r;\n            },\n            set: function(t) {\n                r = Boolean(t);\n            }\n        });\n        var i = 0;\n        Object.defineProperty(this, \"posX\", {\n            get: function() {\n                return i;\n            },\n            set: function(t) {\n                isNaN(t) || (i = t);\n            }\n        });\n        var a = 0;\n        Object.defineProperty(this, \"posY\", {\n            get: function() {\n                return a;\n            },\n            set: function(t) {\n                isNaN(t) || (a = t);\n            }\n        }), Object.defineProperty(this, \"margin\", {\n            get: function() {\n                return f.margin;\n            },\n            set: function(t) {\n                var e;\n                \"number\" == typeof t ? e = [\n                    t,\n                    t,\n                    t,\n                    t\n                ] : ((e = new Array(4))[0] = t[0], e[1] = t.length >= 2 ? t[1] : e[0], e[2] = t.length >= 3 ? t[2] : e[0], e[3] = t.length >= 4 ? t[3] : e[1]), f.margin = e;\n            }\n        });\n        var o = !1;\n        Object.defineProperty(this, \"autoPaging\", {\n            get: function() {\n                return o;\n            },\n            set: function(t) {\n                o = t;\n            }\n        });\n        var s = 0;\n        Object.defineProperty(this, \"lastBreak\", {\n            get: function() {\n                return s;\n            },\n            set: function(t) {\n                s = t;\n            }\n        });\n        var u = [];\n        Object.defineProperty(this, \"pageBreaks\", {\n            get: function() {\n                return u;\n            },\n            set: function(t) {\n                u = t;\n            }\n        }), Object.defineProperty(this, \"ctx\", {\n            get: function() {\n                return f;\n            },\n            set: function(t) {\n                t instanceof d && (f = t);\n            }\n        }), Object.defineProperty(this, \"path\", {\n            get: function() {\n                return f.path;\n            },\n            set: function(t) {\n                f.path = t;\n            }\n        });\n        var c = [];\n        Object.defineProperty(this, \"ctxStack\", {\n            get: function() {\n                return c;\n            },\n            set: function(t) {\n                c = t;\n            }\n        }), Object.defineProperty(this, \"fillStyle\", {\n            get: function() {\n                return this.ctx.fillStyle;\n            },\n            set: function(t) {\n                var e;\n                e = g(t), this.ctx.fillStyle = e.style, this.ctx.isFillTransparent = 0 === e.a, this.ctx.fillOpacity = e.a, this.pdf.setFillColor(e.r, e.g, e.b, {\n                    a: e.a\n                }), this.pdf.setTextColor(e.r, e.g, e.b, {\n                    a: e.a\n                });\n            }\n        }), Object.defineProperty(this, \"strokeStyle\", {\n            get: function() {\n                return this.ctx.strokeStyle;\n            },\n            set: function(t) {\n                var e = g(t);\n                this.ctx.strokeStyle = e.style, this.ctx.isStrokeTransparent = 0 === e.a, this.ctx.strokeOpacity = e.a, 0 === e.a ? this.pdf.setDrawColor(255, 255, 255) : (e.a, this.pdf.setDrawColor(e.r, e.g, e.b));\n            }\n        }), Object.defineProperty(this, \"lineCap\", {\n            get: function() {\n                return this.ctx.lineCap;\n            },\n            set: function(t) {\n                -1 !== [\n                    \"butt\",\n                    \"round\",\n                    \"square\"\n                ].indexOf(t) && (this.ctx.lineCap = t, this.pdf.setLineCap(t));\n            }\n        }), Object.defineProperty(this, \"lineWidth\", {\n            get: function() {\n                return this.ctx.lineWidth;\n            },\n            set: function(t) {\n                isNaN(t) || (this.ctx.lineWidth = t, this.pdf.setLineWidth(t));\n            }\n        }), Object.defineProperty(this, \"lineJoin\", {\n            get: function() {\n                return this.ctx.lineJoin;\n            },\n            set: function(t) {\n                -1 !== [\n                    \"bevel\",\n                    \"round\",\n                    \"miter\"\n                ].indexOf(t) && (this.ctx.lineJoin = t, this.pdf.setLineJoin(t));\n            }\n        }), Object.defineProperty(this, \"miterLimit\", {\n            get: function() {\n                return this.ctx.miterLimit;\n            },\n            set: function(t) {\n                isNaN(t) || (this.ctx.miterLimit = t, this.pdf.setMiterLimit(t));\n            }\n        }), Object.defineProperty(this, \"textBaseline\", {\n            get: function() {\n                return this.ctx.textBaseline;\n            },\n            set: function(t) {\n                this.ctx.textBaseline = t;\n            }\n        }), Object.defineProperty(this, \"textAlign\", {\n            get: function() {\n                return this.ctx.textAlign;\n            },\n            set: function(t) {\n                -1 !== [\n                    \"right\",\n                    \"end\",\n                    \"center\",\n                    \"left\",\n                    \"start\"\n                ].indexOf(t) && (this.ctx.textAlign = t);\n            }\n        });\n        var l = null;\n        var h = null;\n        Object.defineProperty(this, \"fontFaces\", {\n            get: function() {\n                return h;\n            },\n            set: function(t) {\n                l = null, h = t;\n            }\n        }), Object.defineProperty(this, \"font\", {\n            get: function() {\n                return this.ctx.font;\n            },\n            set: function(t) {\n                var e;\n                if (this.ctx.font = t, null !== (e = /^\\s*(?=(?:(?:[-a-z]+\\s*){0,2}(italic|oblique))?)(?=(?:(?:[-a-z]+\\s*){0,2}(small-caps))?)(?=(?:(?:[-a-z]+\\s*){0,2}(bold(?:er)?|lighter|[1-9]00))?)(?:(?:normal|\\1|\\2|\\3)\\s*){0,3}((?:xx?-)?(?:small|large)|medium|smaller|larger|[.\\d]+(?:\\%|in|[cem]m|ex|p[ctx]))(?:\\s*\\/\\s*(normal|[.\\d]+(?:\\%|in|[cem]m|ex|p[ctx])))?\\s*([-_,\\\"\\'\\sa-z]+?)\\s*$/i.exec(t))) {\n                    var n = e[1];\n                    e[2];\n                    var r = e[3], i = e[4];\n                    e[5];\n                    var a = e[6], o = /^([.\\d]+)((?:%|in|[cem]m|ex|p[ctx]))$/i.exec(i)[2];\n                    i = \"px\" === o ? Math.floor(parseFloat(i) * this.pdf.internal.scaleFactor) : \"em\" === o ? Math.floor(parseFloat(i) * this.pdf.getFontSize()) : Math.floor(parseFloat(i) * this.pdf.internal.scaleFactor), this.pdf.setFontSize(i);\n                    var s = function(t) {\n                        var e, n, r = [], i = t.trim();\n                        if (\"\" === i) return Jt;\n                        if (i in Mt) return [\n                            Mt[i]\n                        ];\n                        for(; \"\" !== i;){\n                            switch(n = null, e = (i = Et(i)).charAt(0)){\n                                case '\"':\n                                case \"'\":\n                                    n = Rt(i.substring(1), e);\n                                    break;\n                                default:\n                                    n = Dt(i);\n                            }\n                            if (null === n) return Jt;\n                            if (r.push(n[0]), \"\" !== (i = Et(n[1])) && \",\" !== i.charAt(0)) return Jt;\n                            i = i.replace(/^,/, \"\");\n                        }\n                        return r;\n                    }(a);\n                    if (this.fontFaces) {\n                        var u = function(t, e) {\n                            if (null === l) {\n                                var n = function(t) {\n                                    var e = [];\n                                    return Object.keys(t).forEach(function(n) {\n                                        t[n].forEach(function(t) {\n                                            var r = null;\n                                            switch(t){\n                                                case \"bold\":\n                                                    r = {\n                                                        family: n,\n                                                        weight: \"bold\"\n                                                    };\n                                                    break;\n                                                case \"italic\":\n                                                    r = {\n                                                        family: n,\n                                                        style: \"italic\"\n                                                    };\n                                                    break;\n                                                case \"bolditalic\":\n                                                    r = {\n                                                        family: n,\n                                                        weight: \"bold\",\n                                                        style: \"italic\"\n                                                    };\n                                                    break;\n                                                case \"\":\n                                                case \"normal\":\n                                                    r = {\n                                                        family: n\n                                                    };\n                                            }\n                                            null !== r && (r.ref = {\n                                                name: n,\n                                                style: t\n                                            }, e.push(r));\n                                        });\n                                    }), e;\n                                }(t.getFontList());\n                                l = function(t) {\n                                    for(var e = {}, n = 0; n < t.length; ++n){\n                                        var r = Ct(t[n]), i = r.family, a = r.stretch, o = r.style, s = r.weight;\n                                        e[i] = e[i] || {}, e[i][a] = e[i][a] || {}, e[i][a][o] = e[i][a][o] || {}, e[i][a][o][s] = r;\n                                    }\n                                    return e;\n                                }(n.concat(e));\n                            }\n                            return l;\n                        }(this.pdf, this.fontFaces), c = s.map(function(t) {\n                            return {\n                                family: t,\n                                stretch: \"normal\",\n                                weight: r,\n                                style: n\n                            };\n                        }), h = function(t, e, n) {\n                            for(var r = (n = n || {}).defaultFontFamily || \"times\", i = Object.assign({}, Bt, n.genericFontFamilies || {}), a = null, o = null, s = 0; s < e.length; ++s)if (i[(a = Ct(e[s])).family] && (a.family = i[a.family]), t.hasOwnProperty(a.family)) {\n                                o = t[a.family];\n                                break;\n                            }\n                            if (!(o = o || t[r])) throw new Error(\"Could not find a font-family for the rule '\" + qt(a) + \"' and default family '\" + r + \"'.\");\n                            if (o = function(t, e) {\n                                if (e[t]) return e[t];\n                                var n = Ft[t], r = n <= Ft.normal ? -1 : 1, i = Ot(e, kt, n, r);\n                                if (!i) throw new Error(\"Could not find a matching font-stretch value for \" + t);\n                                return i;\n                            }(a.stretch, o), o = function(t, e) {\n                                if (e[t]) return e[t];\n                                for(var n = Pt[t], r = 0; r < n.length; ++r)if (e[n[r]]) return e[n[r]];\n                                throw new Error(\"Could not find a matching font-style for \" + t);\n                            }(a.style, o), !(o = function(t, e) {\n                                if (e[t]) return e[t];\n                                if (400 === t && e[500]) return e[500];\n                                if (500 === t && e[400]) return e[400];\n                                var n = jt[t], r = Ot(e, It, n, t < 400 ? -1 : 1);\n                                if (!r) throw new Error(\"Could not find a matching font-weight for value \" + t);\n                                return r;\n                            }(a.weight, o))) throw new Error(\"Failed to resolve a font for the rule '\" + qt(a) + \"'.\");\n                            return o;\n                        }(u, c);\n                        this.pdf.setFont(h.ref.name, h.ref.style);\n                    } else {\n                        var f = \"\";\n                        (\"bold\" === r || parseInt(r, 10) >= 700 || \"bold\" === n) && (f = \"bold\"), \"italic\" === n && (f += \"italic\"), 0 === f.length && (f = \"normal\");\n                        for(var d = \"\", p = {\n                            arial: \"Helvetica\",\n                            Arial: \"Helvetica\",\n                            verdana: \"Helvetica\",\n                            Verdana: \"Helvetica\",\n                            helvetica: \"Helvetica\",\n                            Helvetica: \"Helvetica\",\n                            \"sans-serif\": \"Helvetica\",\n                            fixed: \"Courier\",\n                            monospace: \"Courier\",\n                            terminal: \"Courier\",\n                            cursive: \"Times\",\n                            fantasy: \"Times\",\n                            serif: \"Times\"\n                        }, g = 0; g < s.length; g++){\n                            if (void 0 !== this.pdf.internal.getFont(s[g], f, {\n                                noFallback: !0,\n                                disableWarning: !0\n                            })) {\n                                d = s[g];\n                                break;\n                            }\n                            if (\"bolditalic\" === f && void 0 !== this.pdf.internal.getFont(s[g], \"bold\", {\n                                noFallback: !0,\n                                disableWarning: !0\n                            })) d = s[g], f = \"bold\";\n                            else if (void 0 !== this.pdf.internal.getFont(s[g], \"normal\", {\n                                noFallback: !0,\n                                disableWarning: !0\n                            })) {\n                                d = s[g], f = \"normal\";\n                                break;\n                            }\n                        }\n                        if (\"\" === d) {\n                            for(var m = 0; m < s.length; m++)if (p[s[m]]) {\n                                d = p[s[m]];\n                                break;\n                            }\n                        }\n                        d = \"\" === d ? \"Times\" : d, this.pdf.setFont(d, f);\n                    }\n                }\n            }\n        }), Object.defineProperty(this, \"globalCompositeOperation\", {\n            get: function() {\n                return this.ctx.globalCompositeOperation;\n            },\n            set: function(t) {\n                this.ctx.globalCompositeOperation = t;\n            }\n        }), Object.defineProperty(this, \"globalAlpha\", {\n            get: function() {\n                return this.ctx.globalAlpha;\n            },\n            set: function(t) {\n                this.ctx.globalAlpha = t;\n            }\n        }), Object.defineProperty(this, \"lineDashOffset\", {\n            get: function() {\n                return this.ctx.lineDashOffset;\n            },\n            set: function(t) {\n                this.ctx.lineDashOffset = t, T.call(this);\n            }\n        }), Object.defineProperty(this, \"lineDash\", {\n            get: function() {\n                return this.ctx.lineDash;\n            },\n            set: function(t) {\n                this.ctx.lineDash = t, T.call(this);\n            }\n        }), Object.defineProperty(this, \"ignoreClearRect\", {\n            get: function() {\n                return this.ctx.ignoreClearRect;\n            },\n            set: function(t) {\n                this.ctx.ignoreClearRect = Boolean(t);\n            }\n        });\n    };\n    p.prototype.setLineDash = function(t) {\n        this.lineDash = t;\n    }, p.prototype.getLineDash = function() {\n        return this.lineDash.length % 2 ? this.lineDash.concat(this.lineDash) : this.lineDash.slice();\n    }, p.prototype.fill = function() {\n        x.call(this, \"fill\", !1);\n    }, p.prototype.stroke = function() {\n        x.call(this, \"stroke\", !1);\n    }, p.prototype.beginPath = function() {\n        this.path = [\n            {\n                type: \"begin\"\n            }\n        ];\n    }, p.prototype.moveTo = function(t, e) {\n        if (isNaN(t) || isNaN(e)) throw o.error(\"jsPDF.context2d.moveTo: Invalid arguments\", arguments), new Error(\"Invalid arguments passed to jsPDF.context2d.moveTo\");\n        var n = this.ctx.transform.applyToPoint(new u(t, e));\n        this.path.push({\n            type: \"mt\",\n            x: n.x,\n            y: n.y\n        }), this.ctx.lastPoint = new u(t, e);\n    }, p.prototype.closePath = function() {\n        var e = new u(0, 0), n = 0;\n        for(n = this.path.length - 1; -1 !== n; n--)if (\"begin\" === this.path[n].type && \"object\" === (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this.path[n + 1]) && \"number\" == typeof this.path[n + 1].x) {\n            e = new u(this.path[n + 1].x, this.path[n + 1].y);\n            break;\n        }\n        this.path.push({\n            type: \"close\"\n        }), this.ctx.lastPoint = new u(e.x, e.y);\n    }, p.prototype.lineTo = function(t, e) {\n        if (isNaN(t) || isNaN(e)) throw o.error(\"jsPDF.context2d.lineTo: Invalid arguments\", arguments), new Error(\"Invalid arguments passed to jsPDF.context2d.lineTo\");\n        var n = this.ctx.transform.applyToPoint(new u(t, e));\n        this.path.push({\n            type: \"lt\",\n            x: n.x,\n            y: n.y\n        }), this.ctx.lastPoint = new u(n.x, n.y);\n    }, p.prototype.clip = function() {\n        this.ctx.clip_path = JSON.parse(JSON.stringify(this.path)), x.call(this, null, !0);\n    }, p.prototype.quadraticCurveTo = function(t, e, n, r) {\n        if (isNaN(n) || isNaN(r) || isNaN(t) || isNaN(e)) throw o.error(\"jsPDF.context2d.quadraticCurveTo: Invalid arguments\", arguments), new Error(\"Invalid arguments passed to jsPDF.context2d.quadraticCurveTo\");\n        var i = this.ctx.transform.applyToPoint(new u(n, r)), a = this.ctx.transform.applyToPoint(new u(t, e));\n        this.path.push({\n            type: \"qct\",\n            x1: a.x,\n            y1: a.y,\n            x: i.x,\n            y: i.y\n        }), this.ctx.lastPoint = new u(i.x, i.y);\n    }, p.prototype.bezierCurveTo = function(t, e, n, r, i, a) {\n        if (isNaN(i) || isNaN(a) || isNaN(t) || isNaN(e) || isNaN(n) || isNaN(r)) throw o.error(\"jsPDF.context2d.bezierCurveTo: Invalid arguments\", arguments), new Error(\"Invalid arguments passed to jsPDF.context2d.bezierCurveTo\");\n        var s = this.ctx.transform.applyToPoint(new u(i, a)), c = this.ctx.transform.applyToPoint(new u(t, e)), l = this.ctx.transform.applyToPoint(new u(n, r));\n        this.path.push({\n            type: \"bct\",\n            x1: c.x,\n            y1: c.y,\n            x2: l.x,\n            y2: l.y,\n            x: s.x,\n            y: s.y\n        }), this.ctx.lastPoint = new u(s.x, s.y);\n    }, p.prototype.arc = function(t, e, n, r, i, a) {\n        if (isNaN(t) || isNaN(e) || isNaN(n) || isNaN(r) || isNaN(i)) throw o.error(\"jsPDF.context2d.arc: Invalid arguments\", arguments), new Error(\"Invalid arguments passed to jsPDF.context2d.arc\");\n        if (a = Boolean(a), !this.ctx.transform.isIdentity) {\n            var s = this.ctx.transform.applyToPoint(new u(t, e));\n            t = s.x, e = s.y;\n            var c = this.ctx.transform.applyToPoint(new u(0, n)), l = this.ctx.transform.applyToPoint(new u(0, 0));\n            n = Math.sqrt(Math.pow(c.x - l.x, 2) + Math.pow(c.y - l.y, 2));\n        }\n        Math.abs(i - r) >= 2 * Math.PI && (r = 0, i = 2 * Math.PI), this.path.push({\n            type: \"arc\",\n            x: t,\n            y: e,\n            radius: n,\n            startAngle: r,\n            endAngle: i,\n            counterclockwise: a\n        });\n    }, p.prototype.arcTo = function(t, e, n, r, i) {\n        throw new Error(\"arcTo not implemented.\");\n    }, p.prototype.rect = function(t, e, n, r) {\n        if (isNaN(t) || isNaN(e) || isNaN(n) || isNaN(r)) throw o.error(\"jsPDF.context2d.rect: Invalid arguments\", arguments), new Error(\"Invalid arguments passed to jsPDF.context2d.rect\");\n        this.moveTo(t, e), this.lineTo(t + n, e), this.lineTo(t + n, e + r), this.lineTo(t, e + r), this.lineTo(t, e), this.lineTo(t + n, e), this.lineTo(t, e);\n    }, p.prototype.fillRect = function(t, e, n, r) {\n        if (isNaN(t) || isNaN(e) || isNaN(n) || isNaN(r)) throw o.error(\"jsPDF.context2d.fillRect: Invalid arguments\", arguments), new Error(\"Invalid arguments passed to jsPDF.context2d.fillRect\");\n        if (!m.call(this)) {\n            var i = {};\n            \"butt\" !== this.lineCap && (i.lineCap = this.lineCap, this.lineCap = \"butt\"), \"miter\" !== this.lineJoin && (i.lineJoin = this.lineJoin, this.lineJoin = \"miter\"), this.beginPath(), this.rect(t, e, n, r), this.fill(), i.hasOwnProperty(\"lineCap\") && (this.lineCap = i.lineCap), i.hasOwnProperty(\"lineJoin\") && (this.lineJoin = i.lineJoin);\n        }\n    }, p.prototype.strokeRect = function(t, e, n, r) {\n        if (isNaN(t) || isNaN(e) || isNaN(n) || isNaN(r)) throw o.error(\"jsPDF.context2d.strokeRect: Invalid arguments\", arguments), new Error(\"Invalid arguments passed to jsPDF.context2d.strokeRect\");\n        v.call(this) || (this.beginPath(), this.rect(t, e, n, r), this.stroke());\n    }, p.prototype.clearRect = function(t, e, n, r) {\n        if (isNaN(t) || isNaN(e) || isNaN(n) || isNaN(r)) throw o.error(\"jsPDF.context2d.clearRect: Invalid arguments\", arguments), new Error(\"Invalid arguments passed to jsPDF.context2d.clearRect\");\n        this.ignoreClearRect || (this.fillStyle = \"#ffffff\", this.fillRect(t, e, n, r));\n    }, p.prototype.save = function(t) {\n        t = \"boolean\" != typeof t || t;\n        for(var e = this.pdf.internal.getCurrentPageInfo().pageNumber, n = 0; n < this.pdf.internal.getNumberOfPages(); n++)this.pdf.setPage(n + 1), this.pdf.internal.out(\"q\");\n        if (this.pdf.setPage(e), t) {\n            this.ctx.fontSize = this.pdf.internal.getFontSize();\n            var r = new d(this.ctx);\n            this.ctxStack.push(this.ctx), this.ctx = r;\n        }\n    }, p.prototype.restore = function(t) {\n        t = \"boolean\" != typeof t || t;\n        for(var e = this.pdf.internal.getCurrentPageInfo().pageNumber, n = 0; n < this.pdf.internal.getNumberOfPages(); n++)this.pdf.setPage(n + 1), this.pdf.internal.out(\"Q\");\n        this.pdf.setPage(e), t && 0 !== this.ctxStack.length && (this.ctx = this.ctxStack.pop(), this.fillStyle = this.ctx.fillStyle, this.strokeStyle = this.ctx.strokeStyle, this.font = this.ctx.font, this.lineCap = this.ctx.lineCap, this.lineWidth = this.ctx.lineWidth, this.lineJoin = this.ctx.lineJoin, this.lineDash = this.ctx.lineDash, this.lineDashOffset = this.ctx.lineDashOffset);\n    }, p.prototype.toDataURL = function() {\n        throw new Error(\"toDataUrl not implemented.\");\n    };\n    var g = function(t) {\n        var e, n, r, i;\n        if (!0 === t.isCanvasGradient && (t = t.getColor()), !t) return {\n            r: 0,\n            g: 0,\n            b: 0,\n            a: 0,\n            style: t\n        };\n        if (/transparent|rgba\\s*\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*0+\\s*\\)/.test(t)) e = 0, n = 0, r = 0, i = 0;\n        else {\n            var a = /rgb\\s*\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)/.exec(t);\n            if (null !== a) e = parseInt(a[1]), n = parseInt(a[2]), r = parseInt(a[3]), i = 1;\n            else if (null !== (a = /rgba\\s*\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*([\\d.]+)\\s*\\)/.exec(t))) e = parseInt(a[1]), n = parseInt(a[2]), r = parseInt(a[3]), i = parseFloat(a[4]);\n            else {\n                if (i = 1, \"string\" == typeof t && \"#\" !== t.charAt(0)) {\n                    var o = new h(t);\n                    t = o.ok ? o.toHex() : \"#000000\";\n                }\n                4 === t.length ? (e = t.substring(1, 2), e += e, n = t.substring(2, 3), n += n, r = t.substring(3, 4), r += r) : (e = t.substring(1, 3), n = t.substring(3, 5), r = t.substring(5, 7)), e = parseInt(e, 16), n = parseInt(n, 16), r = parseInt(r, 16);\n            }\n        }\n        return {\n            r: e,\n            g: n,\n            b: r,\n            a: i,\n            style: t\n        };\n    }, m = function() {\n        return this.ctx.isFillTransparent || 0 == this.globalAlpha;\n    }, v = function() {\n        return Boolean(this.ctx.isStrokeTransparent || 0 == this.globalAlpha);\n    };\n    p.prototype.fillText = function(t, e, n, r) {\n        if (isNaN(e) || isNaN(n) || \"string\" != typeof t) throw o.error(\"jsPDF.context2d.fillText: Invalid arguments\", arguments), new Error(\"Invalid arguments passed to jsPDF.context2d.fillText\");\n        if (r = isNaN(r) ? void 0 : r, !m.call(this)) {\n            var i = E(this.ctx.transform.rotation), a = this.ctx.transform.scaleX;\n            j.call(this, {\n                text: t,\n                x: e,\n                y: n,\n                scale: a,\n                angle: i,\n                align: this.textAlign,\n                maxWidth: r\n            });\n        }\n    }, p.prototype.strokeText = function(t, e, n, r) {\n        if (isNaN(e) || isNaN(n) || \"string\" != typeof t) throw o.error(\"jsPDF.context2d.strokeText: Invalid arguments\", arguments), new Error(\"Invalid arguments passed to jsPDF.context2d.strokeText\");\n        if (!v.call(this)) {\n            r = isNaN(r) ? void 0 : r;\n            var i = E(this.ctx.transform.rotation), a = this.ctx.transform.scaleX;\n            j.call(this, {\n                text: t,\n                x: e,\n                y: n,\n                scale: a,\n                renderingMode: \"stroke\",\n                angle: i,\n                align: this.textAlign,\n                maxWidth: r\n            });\n        }\n    }, p.prototype.measureText = function(t) {\n        if (\"string\" != typeof t) throw o.error(\"jsPDF.context2d.measureText: Invalid arguments\", arguments), new Error(\"Invalid arguments passed to jsPDF.context2d.measureText\");\n        var e = this.pdf, n = this.pdf.internal.scaleFactor, r = e.internal.getFontSize(), i = e.getStringUnitWidth(t) * r / e.internal.scaleFactor;\n        return new function(t) {\n            var e = (t = t || {}).width || 0;\n            return Object.defineProperty(this, \"width\", {\n                get: function() {\n                    return e;\n                }\n            }), this;\n        }({\n            width: i *= Math.round(96 * n / 72 * 1e4) / 1e4\n        });\n    }, p.prototype.scale = function(t, e) {\n        if (isNaN(t) || isNaN(e)) throw o.error(\"jsPDF.context2d.scale: Invalid arguments\", arguments), new Error(\"Invalid arguments passed to jsPDF.context2d.scale\");\n        var n = new l(t, 0, 0, e, 0, 0);\n        this.ctx.transform = this.ctx.transform.multiply(n);\n    }, p.prototype.rotate = function(t) {\n        if (isNaN(t)) throw o.error(\"jsPDF.context2d.rotate: Invalid arguments\", arguments), new Error(\"Invalid arguments passed to jsPDF.context2d.rotate\");\n        var e = new l(Math.cos(t), Math.sin(t), -Math.sin(t), Math.cos(t), 0, 0);\n        this.ctx.transform = this.ctx.transform.multiply(e);\n    }, p.prototype.translate = function(t, e) {\n        if (isNaN(t) || isNaN(e)) throw o.error(\"jsPDF.context2d.translate: Invalid arguments\", arguments), new Error(\"Invalid arguments passed to jsPDF.context2d.translate\");\n        var n = new l(1, 0, 0, 1, t, e);\n        this.ctx.transform = this.ctx.transform.multiply(n);\n    }, p.prototype.transform = function(t, e, n, r, i, a) {\n        if (isNaN(t) || isNaN(e) || isNaN(n) || isNaN(r) || isNaN(i) || isNaN(a)) throw o.error(\"jsPDF.context2d.transform: Invalid arguments\", arguments), new Error(\"Invalid arguments passed to jsPDF.context2d.transform\");\n        var s = new l(t, e, n, r, i, a);\n        this.ctx.transform = this.ctx.transform.multiply(s);\n    }, p.prototype.setTransform = function(t, e, n, r, i, a) {\n        t = isNaN(t) ? 1 : t, e = isNaN(e) ? 0 : e, n = isNaN(n) ? 0 : n, r = isNaN(r) ? 1 : r, i = isNaN(i) ? 0 : i, a = isNaN(a) ? 0 : a, this.ctx.transform = new l(t, e, n, r, i, a);\n    };\n    var b = function() {\n        return this.margin[0] > 0 || this.margin[1] > 0 || this.margin[2] > 0 || this.margin[3] > 0;\n    };\n    p.prototype.drawImage = function(t, e, n, r, i, a, o, s, u) {\n        var h = this.pdf.getImageProperties(t), f = 1, d = 1, p = 1, g = 1;\n        void 0 !== r && void 0 !== s && (p = s / r, g = u / i, f = h.width / r * s / r, d = h.height / i * u / i), void 0 === a && (a = e, o = n, e = 0, n = 0), void 0 !== r && void 0 === s && (s = r, u = i), void 0 === r && void 0 === s && (s = h.width, u = h.height);\n        for(var m, v = this.ctx.transform.decompose(), w = E(v.rotate.shx), x = new l, S = (x = (x = (x = x.multiply(v.translate)).multiply(v.skew)).multiply(v.scale)).applyToRectangle(new c(a - e * p, o - n * g, r * f, i * d)), _ = y.call(this, S), P = [], k = 0; k < _.length; k += 1)-1 === P.indexOf(_[k]) && P.push(_[k]);\n        if (L(P), this.autoPaging) for(var F = P[0], I = P[P.length - 1], j = F; j < I + 1; j++){\n            this.pdf.setPage(j);\n            var C = this.pdf.internal.pageSize.width - this.margin[3] - this.margin[1], O = 1 === j ? this.posY + this.margin[0] : this.margin[0], B = this.pdf.internal.pageSize.height - this.posY - this.margin[0] - this.margin[2], M = this.pdf.internal.pageSize.height - this.margin[0] - this.margin[2], q = 1 === j ? 0 : B + (j - 2) * M;\n            if (0 !== this.ctx.clip_path.length) {\n                var R = this.path;\n                m = JSON.parse(JSON.stringify(this.ctx.clip_path)), this.path = N(m, this.posX + this.margin[3], -q + O + this.ctx.prevPageLastElemOffset), A.call(this, \"fill\", !0), this.path = R;\n            }\n            var D = JSON.parse(JSON.stringify(S));\n            D = N([\n                D\n            ], this.posX + this.margin[3], -q + O + this.ctx.prevPageLastElemOffset)[0];\n            var T = (j > F || j < I) && b.call(this);\n            T && (this.pdf.saveGraphicsState(), this.pdf.rect(this.margin[3], this.margin[0], C, M, null).clip().discardPath()), this.pdf.addImage(t, \"JPEG\", D.x, D.y, D.w, D.h, null, null, w), T && this.pdf.restoreGraphicsState();\n        }\n        else this.pdf.addImage(t, \"JPEG\", S.x, S.y, S.w, S.h, null, null, w);\n    };\n    var y = function(t, e, n) {\n        var r = [];\n        e = e || this.pdf.internal.pageSize.width, n = n || this.pdf.internal.pageSize.height - this.margin[0] - this.margin[2];\n        var i = this.posY + this.ctx.prevPageLastElemOffset;\n        switch(t.type){\n            default:\n            case \"mt\":\n            case \"lt\":\n                r.push(Math.floor((t.y + i) / n) + 1);\n                break;\n            case \"arc\":\n                r.push(Math.floor((t.y + i - t.radius) / n) + 1), r.push(Math.floor((t.y + i + t.radius) / n) + 1);\n                break;\n            case \"qct\":\n                var a = R(this.ctx.lastPoint.x, this.ctx.lastPoint.y, t.x1, t.y1, t.x, t.y);\n                r.push(Math.floor((a.y + i) / n) + 1), r.push(Math.floor((a.y + a.h + i) / n) + 1);\n                break;\n            case \"bct\":\n                var o = D(this.ctx.lastPoint.x, this.ctx.lastPoint.y, t.x1, t.y1, t.x2, t.y2, t.x, t.y);\n                r.push(Math.floor((o.y + i) / n) + 1), r.push(Math.floor((o.y + o.h + i) / n) + 1);\n                break;\n            case \"rect\":\n                r.push(Math.floor((t.y + i) / n) + 1), r.push(Math.floor((t.y + t.h + i) / n) + 1);\n        }\n        for(var s = 0; s < r.length; s += 1)for(; this.pdf.internal.getNumberOfPages() < r[s];)w.call(this);\n        return r;\n    }, w = function() {\n        var t = this.fillStyle, e = this.strokeStyle, n = this.font, r = this.lineCap, i = this.lineWidth, a = this.lineJoin;\n        this.pdf.addPage(), this.fillStyle = t, this.strokeStyle = e, this.font = n, this.lineCap = r, this.lineWidth = i, this.lineJoin = a;\n    }, N = function(t, e, n) {\n        for(var r = 0; r < t.length; r++)switch(t[r].type){\n            case \"bct\":\n                t[r].x2 += e, t[r].y2 += n;\n            case \"qct\":\n                t[r].x1 += e, t[r].y1 += n;\n            default:\n                t[r].x += e, t[r].y += n;\n        }\n        return t;\n    }, L = function(t) {\n        return t.sort(function(t, e) {\n            return t - e;\n        });\n    }, x = function(t, e) {\n        for(var n, r, i = this.fillStyle, a = this.strokeStyle, o = this.lineCap, s = this.lineWidth, u = Math.abs(s * this.ctx.transform.scaleX), c = this.lineJoin, l = JSON.parse(JSON.stringify(this.path)), h = JSON.parse(JSON.stringify(this.path)), f = [], d = 0; d < h.length; d++)if (void 0 !== h[d].x) for(var p = y.call(this, h[d]), g = 0; g < p.length; g += 1)-1 === f.indexOf(p[g]) && f.push(p[g]);\n        for(var m = 0; m < f.length; m++)for(; this.pdf.internal.getNumberOfPages() < f[m];)w.call(this);\n        if (L(f), this.autoPaging) for(var v = f[0], x = f[f.length - 1], S = v; S < x + 1; S++){\n            this.pdf.setPage(S), this.fillStyle = i, this.strokeStyle = a, this.lineCap = o, this.lineWidth = u, this.lineJoin = c;\n            var _ = this.pdf.internal.pageSize.width - this.margin[3] - this.margin[1], P = 1 === S ? this.posY + this.margin[0] : this.margin[0], k = this.pdf.internal.pageSize.height - this.posY - this.margin[0] - this.margin[2], F = this.pdf.internal.pageSize.height - this.margin[0] - this.margin[2], I = 1 === S ? 0 : k + (S - 2) * F;\n            if (0 !== this.ctx.clip_path.length) {\n                var j = this.path;\n                n = JSON.parse(JSON.stringify(this.ctx.clip_path)), this.path = N(n, this.posX + this.margin[3], -I + P + this.ctx.prevPageLastElemOffset), A.call(this, t, !0), this.path = j;\n            }\n            if (r = JSON.parse(JSON.stringify(l)), this.path = N(r, this.posX + this.margin[3], -I + P + this.ctx.prevPageLastElemOffset), !1 === e || 0 === S) {\n                var C = (S > v || S < x) && b.call(this);\n                C && (this.pdf.saveGraphicsState(), this.pdf.rect(this.margin[3], this.margin[0], _, F, null).clip().discardPath()), A.call(this, t, e), C && this.pdf.restoreGraphicsState();\n            }\n            this.lineWidth = s;\n        }\n        else this.lineWidth = u, A.call(this, t, e), this.lineWidth = s;\n        this.path = l;\n    }, A = function(t, e) {\n        if ((\"stroke\" !== t || e || !v.call(this)) && (\"stroke\" === t || e || !m.call(this))) {\n            for(var n, r, i = [], a = this.path, o = 0; o < a.length; o++){\n                var s = a[o];\n                switch(s.type){\n                    case \"begin\":\n                        i.push({\n                            begin: !0\n                        });\n                        break;\n                    case \"close\":\n                        i.push({\n                            close: !0\n                        });\n                        break;\n                    case \"mt\":\n                        i.push({\n                            start: s,\n                            deltas: [],\n                            abs: []\n                        });\n                        break;\n                    case \"lt\":\n                        var u = i.length;\n                        if (a[o - 1] && !isNaN(a[o - 1].x) && (n = [\n                            s.x - a[o - 1].x,\n                            s.y - a[o - 1].y\n                        ], u > 0)) {\n                            for(; u >= 0; u--)if (!0 !== i[u - 1].close && !0 !== i[u - 1].begin) {\n                                i[u - 1].deltas.push(n), i[u - 1].abs.push(s);\n                                break;\n                            }\n                        }\n                        break;\n                    case \"bct\":\n                        n = [\n                            s.x1 - a[o - 1].x,\n                            s.y1 - a[o - 1].y,\n                            s.x2 - a[o - 1].x,\n                            s.y2 - a[o - 1].y,\n                            s.x - a[o - 1].x,\n                            s.y - a[o - 1].y\n                        ], i[i.length - 1].deltas.push(n);\n                        break;\n                    case \"qct\":\n                        var c = a[o - 1].x + 2 / 3 * (s.x1 - a[o - 1].x), l = a[o - 1].y + 2 / 3 * (s.y1 - a[o - 1].y), h = s.x + 2 / 3 * (s.x1 - s.x), f = s.y + 2 / 3 * (s.y1 - s.y), d = s.x, p = s.y;\n                        n = [\n                            c - a[o - 1].x,\n                            l - a[o - 1].y,\n                            h - a[o - 1].x,\n                            f - a[o - 1].y,\n                            d - a[o - 1].x,\n                            p - a[o - 1].y\n                        ], i[i.length - 1].deltas.push(n);\n                        break;\n                    case \"arc\":\n                        i.push({\n                            deltas: [],\n                            abs: [],\n                            arc: !0\n                        }), Array.isArray(i[i.length - 1].abs) && i[i.length - 1].abs.push(s);\n                }\n            }\n            r = e ? null : \"stroke\" === t ? \"stroke\" : \"fill\";\n            for(var g = !1, b = 0; b < i.length; b++)if (i[b].arc) for(var y = i[b].abs, w = 0; w < y.length; w++){\n                var N = y[w];\n                \"arc\" === N.type ? P.call(this, N.x, N.y, N.radius, N.startAngle, N.endAngle, N.counterclockwise, void 0, e, !g) : C.call(this, N.x, N.y), g = !0;\n            }\n            else if (!0 === i[b].close) this.pdf.internal.out(\"h\"), g = !1;\n            else if (!0 !== i[b].begin) {\n                var L = i[b].start.x, x = i[b].start.y;\n                O.call(this, i[b].deltas, L, x), g = !0;\n            }\n            r && k.call(this, r), e && F.call(this);\n        }\n    }, S = function(t) {\n        var e = this.pdf.internal.getFontSize() / this.pdf.internal.scaleFactor, n = e * (this.pdf.internal.getLineHeightFactor() - 1);\n        switch(this.ctx.textBaseline){\n            case \"bottom\":\n                return t - n;\n            case \"top\":\n                return t + e - n;\n            case \"hanging\":\n                return t + e - 2 * n;\n            case \"middle\":\n                return t + e / 2 - n;\n            default:\n                return t;\n        }\n    }, _ = function(t) {\n        return t + this.pdf.internal.getFontSize() / this.pdf.internal.scaleFactor * (this.pdf.internal.getLineHeightFactor() - 1);\n    };\n    p.prototype.createLinearGradient = function() {\n        var t = function() {};\n        return t.colorStops = [], t.addColorStop = function(t, e) {\n            this.colorStops.push([\n                t,\n                e\n            ]);\n        }, t.getColor = function() {\n            return 0 === this.colorStops.length ? \"#000000\" : this.colorStops[0][1];\n        }, t.isCanvasGradient = !0, t;\n    }, p.prototype.createPattern = function() {\n        return this.createLinearGradient();\n    }, p.prototype.createRadialGradient = function() {\n        return this.createLinearGradient();\n    };\n    var P = function(t, e, n, r, i, a, o, s, u) {\n        for(var c = M.call(this, n, r, i, a), l = 0; l < c.length; l++){\n            var h = c[l];\n            0 === l && (u ? I.call(this, h.x1 + t, h.y1 + e) : C.call(this, h.x1 + t, h.y1 + e)), B.call(this, t, e, h.x2, h.y2, h.x3, h.y3, h.x4, h.y4);\n        }\n        s ? F.call(this) : k.call(this, o);\n    }, k = function(t) {\n        switch(t){\n            case \"stroke\":\n                this.pdf.internal.out(\"S\");\n                break;\n            case \"fill\":\n                this.pdf.internal.out(\"f\");\n        }\n    }, F = function() {\n        this.pdf.clip(), this.pdf.discardPath();\n    }, I = function(t, e) {\n        this.pdf.internal.out(r(t) + \" \" + i(e) + \" m\");\n    }, j = function(t) {\n        var e;\n        switch(t.align){\n            case \"right\":\n            case \"end\":\n                e = \"right\";\n                break;\n            case \"center\":\n                e = \"center\";\n                break;\n            default:\n                e = \"left\";\n        }\n        var n = this.pdf.getTextDimensions(t.text), r = S.call(this, t.y), i = _.call(this, r) - n.h, a = this.ctx.transform.applyToPoint(new u(t.x, r)), o = this.ctx.transform.decompose(), s = new l;\n        s = (s = (s = s.multiply(o.translate)).multiply(o.skew)).multiply(o.scale);\n        for(var h, f, d, p = this.ctx.transform.applyToRectangle(new c(t.x, r, n.w, n.h)), g = s.applyToRectangle(new c(t.x, i, n.w, n.h)), m = y.call(this, g), v = [], w = 0; w < m.length; w += 1)-1 === v.indexOf(m[w]) && v.push(m[w]);\n        if (L(v), this.autoPaging) for(var x = v[0], P = v[v.length - 1], k = x; k < P + 1; k++){\n            this.pdf.setPage(k);\n            var F = 1 === k ? this.posY + this.margin[0] : this.margin[0], I = this.pdf.internal.pageSize.height - this.posY - this.margin[0] - this.margin[2], j = this.pdf.internal.pageSize.height - this.margin[2], C = j - this.margin[0], O = this.pdf.internal.pageSize.width - this.margin[1], B = O - this.margin[3], M = 1 === k ? 0 : I + (k - 2) * C;\n            if (0 !== this.ctx.clip_path.length) {\n                var q = this.path;\n                h = JSON.parse(JSON.stringify(this.ctx.clip_path)), this.path = N(h, this.posX + this.margin[3], -1 * M + F), A.call(this, \"fill\", !0), this.path = q;\n            }\n            var E = N([\n                JSON.parse(JSON.stringify(g))\n            ], this.posX + this.margin[3], -M + F + this.ctx.prevPageLastElemOffset)[0];\n            t.scale >= .01 && (f = this.pdf.internal.getFontSize(), this.pdf.setFontSize(f * t.scale), d = this.lineWidth, this.lineWidth = d * t.scale);\n            var R = \"text\" !== this.autoPaging;\n            if (R || E.y + E.h <= j) {\n                if (R || E.y >= F && E.x <= O) {\n                    var D = R ? t.text : this.pdf.splitTextToSize(t.text, t.maxWidth || O - E.x)[0], T = N([\n                        JSON.parse(JSON.stringify(p))\n                    ], this.posX + this.margin[3], -M + F + this.ctx.prevPageLastElemOffset)[0], z = R && (k > x || k < P) && b.call(this);\n                    z && (this.pdf.saveGraphicsState(), this.pdf.rect(this.margin[3], this.margin[0], B, C, null).clip().discardPath()), this.pdf.text(D, T.x, T.y, {\n                        angle: t.angle,\n                        align: e,\n                        renderingMode: t.renderingMode\n                    }), z && this.pdf.restoreGraphicsState();\n                }\n            } else E.y < j && (this.ctx.prevPageLastElemOffset += j - E.y);\n            t.scale >= .01 && (this.pdf.setFontSize(f), this.lineWidth = d);\n        }\n        else t.scale >= .01 && (f = this.pdf.internal.getFontSize(), this.pdf.setFontSize(f * t.scale), d = this.lineWidth, this.lineWidth = d * t.scale), this.pdf.text(t.text, a.x + this.posX, a.y + this.posY, {\n            angle: t.angle,\n            align: e,\n            renderingMode: t.renderingMode,\n            maxWidth: t.maxWidth\n        }), t.scale >= .01 && (this.pdf.setFontSize(f), this.lineWidth = d);\n    }, C = function(t, e, n, a) {\n        n = n || 0, a = a || 0, this.pdf.internal.out(r(t + n) + \" \" + i(e + a) + \" l\");\n    }, O = function(t, e, n) {\n        return this.pdf.lines(t, e, n, null, null);\n    }, B = function(t, e, r, i, o, u, c, l) {\n        this.pdf.internal.out([\n            n(a(r + t)),\n            n(s(i + e)),\n            n(a(o + t)),\n            n(s(u + e)),\n            n(a(c + t)),\n            n(s(l + e)),\n            \"c\"\n        ].join(\" \"));\n    }, M = function(t, e, n, r) {\n        for(var i = 2 * Math.PI, a = Math.PI / 2; e > n;)e -= i;\n        var o = Math.abs(n - e);\n        o < i && r && (o = i - o);\n        for(var s = [], u = r ? -1 : 1, c = e; o > 1e-5;){\n            var l = c + u * Math.min(o, a);\n            s.push(q.call(this, t, c, l)), o -= Math.abs(l - c), c = l;\n        }\n        return s;\n    }, q = function(t, e, n) {\n        var r = (n - e) / 2, i = t * Math.cos(r), a = t * Math.sin(r), o = i, s = -a, u = o * o + s * s, c = u + o * i + s * a, l = 4 / 3 * (Math.sqrt(2 * u * c) - c) / (o * a - s * i), h = o - l * s, f = s + l * o, d = h, p = -f, g = r + e, m = Math.cos(g), v = Math.sin(g);\n        return {\n            x1: t * Math.cos(e),\n            y1: t * Math.sin(e),\n            x2: h * m - f * v,\n            y2: h * v + f * m,\n            x3: d * m - p * v,\n            y3: d * v + p * m,\n            x4: t * Math.cos(n),\n            y4: t * Math.sin(n)\n        };\n    }, E = function(t) {\n        return 180 * t / Math.PI;\n    }, R = function(t, e, n, r, i, a) {\n        var o = t + .5 * (n - t), s = e + .5 * (r - e), u = i + .5 * (n - i), l = a + .5 * (r - a), h = Math.min(t, i, o, u), f = Math.max(t, i, o, u), d = Math.min(e, a, s, l), p = Math.max(e, a, s, l);\n        return new c(h, d, f - h, p - d);\n    }, D = function(t, e, n, r, i, a, o, s) {\n        var u, l, h, f, d, p, g, m, v, b, y, w, N, L, x = n - t, A = r - e, S = i - n, _ = a - r, P = o - i, k = s - a;\n        for(l = 0; l < 41; l++)v = (g = (h = t + (u = l / 40) * x) + u * ((d = n + u * S) - h)) + u * (d + u * (i + u * P - d) - g), b = (m = (f = e + u * A) + u * ((p = r + u * _) - f)) + u * (p + u * (a + u * k - p) - m), 0 == l ? (y = v, w = b, N = v, L = b) : (y = Math.min(y, v), w = Math.min(w, b), N = Math.max(N, v), L = Math.max(L, b));\n        return new c(Math.round(y), Math.round(w), Math.round(N - y), Math.round(L - w));\n    }, T = function() {\n        if (this.prevLineDash || this.ctx.lineDash.length || this.ctx.lineDashOffset) {\n            var t, e, n = (t = this.ctx.lineDash, e = this.ctx.lineDashOffset, JSON.stringify({\n                lineDash: t,\n                lineDashOffset: e\n            }));\n            this.prevLineDash !== n && (this.pdf.setLineDash(this.ctx.lineDash, this.ctx.lineDashOffset), this.prevLineDash = n);\n        }\n    };\n}(E.API), /**\n * @license\n * jsPDF filters PlugIn\n * Copyright (c) 2014 Aras Abbasi\n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */ function(t) {\n    var n = function(t) {\n        var e, n, r, i, a, o, s, u, c, l;\n        for(/[^\\x00-\\xFF]/.test(t), n = [], r = 0, i = (t += e = \"\\x00\\x00\\x00\\x00\".slice(t.length % 4 || 4)).length; i > r; r += 4)0 !== (a = (t.charCodeAt(r) << 24) + (t.charCodeAt(r + 1) << 16) + (t.charCodeAt(r + 2) << 8) + t.charCodeAt(r + 3)) ? (o = (a = ((a = ((a = ((a = (a - (l = a % 85)) / 85) - (c = a % 85)) / 85) - (u = a % 85)) / 85) - (s = a % 85)) / 85) % 85, n.push(o + 33, s + 33, u + 33, c + 33, l + 33)) : n.push(122);\n        return function(t, e) {\n            for(var n = e; n > 0; n--)t.pop();\n        }(n, e.length), String.fromCharCode.apply(String, n) + \"~>\";\n    }, r = function(t) {\n        var e, n, r, i, a, o = String, s = \"length\", u = 255, c = \"charCodeAt\", l = \"slice\", h = \"replace\";\n        for(t[l](-2), t = t[l](0, -2)[h](/\\s/g, \"\")[h](\"z\", \"!!!!!\"), r = [], i = 0, a = (t += e = \"uuuuu\"[l](t[s] % 5 || 5))[s]; a > i; i += 5)n = 52200625 * (t[c](i) - 33) + 614125 * (t[c](i + 1) - 33) + 7225 * (t[c](i + 2) - 33) + 85 * (t[c](i + 3) - 33) + (t[c](i + 4) - 33), r.push(u & n >> 24, u & n >> 16, u & n >> 8, u & n);\n        return function(t, e) {\n            for(var n = e; n > 0; n--)t.pop();\n        }(r, e[s]), o.fromCharCode.apply(o, r);\n    }, i = function(t) {\n        return t.split(\"\").map(function(t) {\n            return (\"0\" + t.charCodeAt().toString(16)).slice(-2);\n        }).join(\"\") + \">\";\n    }, a = function(t) {\n        var e = new RegExp(/^([0-9A-Fa-f]{2})+$/);\n        if (-1 !== (t = t.replace(/\\s/g, \"\")).indexOf(\">\") && (t = t.substr(0, t.indexOf(\">\"))), t.length % 2 && (t += \"0\"), !1 === e.test(t)) return \"\";\n        for(var n = \"\", r = 0; r < t.length; r += 2)n += String.fromCharCode(\"0x\" + (t[r] + t[r + 1]));\n        return n;\n    }, o = function(t) {\n        for(var n = new Uint8Array(t.length), r = t.length; r--;)n[r] = t.charCodeAt(r);\n        return (n = (0,fflate__WEBPACK_IMPORTED_MODULE_3__.zlibSync)(n)).reduce(function(t, e) {\n            return t + String.fromCharCode(e);\n        }, \"\");\n    };\n    t.processDataByFilters = function(t, e) {\n        var s = 0, u = t || \"\", c = [];\n        for(\"string\" == typeof (e = e || []) && (e = [\n            e\n        ]), s = 0; s < e.length; s += 1)switch(e[s]){\n            case \"ASCII85Decode\":\n            case \"/ASCII85Decode\":\n                u = r(u), c.push(\"/ASCII85Encode\");\n                break;\n            case \"ASCII85Encode\":\n            case \"/ASCII85Encode\":\n                u = n(u), c.push(\"/ASCII85Decode\");\n                break;\n            case \"ASCIIHexDecode\":\n            case \"/ASCIIHexDecode\":\n                u = a(u), c.push(\"/ASCIIHexEncode\");\n                break;\n            case \"ASCIIHexEncode\":\n            case \"/ASCIIHexEncode\":\n                u = i(u), c.push(\"/ASCIIHexDecode\");\n                break;\n            case \"FlateEncode\":\n            case \"/FlateEncode\":\n                u = o(u), c.push(\"/FlateDecode\");\n                break;\n            default:\n                throw new Error('The filter: \"' + e[s] + '\" is not implemented');\n        }\n        return {\n            data: u,\n            reverseChain: c.reverse().join(\" \")\n        };\n    };\n}(E.API), /**\n * @license\n * jsPDF fileloading PlugIn\n * Copyright (c) 2018 Aras Abbasi (aras.abbasi@gmail.com)\n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */ function(t) {\n    t.loadFile = function(t, e, n) {\n        return function(t, e, n) {\n            e = !1 !== e, n = \"function\" == typeof n ? n : function() {};\n            var r = void 0;\n            try {\n                r = function(t, e, n) {\n                    var r = new XMLHttpRequest, i = 0, a = function(t) {\n                        var e = t.length, n = [], r = String.fromCharCode;\n                        for(i = 0; i < e; i += 1)n.push(r(255 & t.charCodeAt(i)));\n                        return n.join(\"\");\n                    };\n                    if (r.open(\"GET\", t, !e), r.overrideMimeType(\"text/plain; charset=x-user-defined\"), !1 === e && (r.onload = function() {\n                        200 === r.status ? n(a(this.responseText)) : n(void 0);\n                    }), r.send(null), e && 200 === r.status) return a(r.responseText);\n                }(t, e, n);\n            } catch (i) {}\n            return r;\n        }(t, e, n);\n    }, t.loadImageFile = t.loadFile;\n}(E.API), function(e) {\n    function n() {\n        return (i.html2canvas ? Promise.resolve(i.html2canvas) : __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_html2canvas_dist_html2canvas_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! html2canvas */ \"(app-pages-browser)/./node_modules/html2canvas/dist/html2canvas.js\", 23))).catch(function(t) {\n            return Promise.reject(new Error(\"Could not load html2canvas: \" + t));\n        }).then(function(t) {\n            return t.default ? t.default : t;\n        });\n    }\n    function r() {\n        return (i.DOMPurify ? Promise.resolve(i.DOMPurify) : __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_dompurify_dist_purify_es_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! dompurify */ \"(app-pages-browser)/./node_modules/dompurify/dist/purify.es.mjs\"))).catch(function(t) {\n            return Promise.reject(new Error(\"Could not load dompurify: \" + t));\n        }).then(function(t) {\n            return t.default ? t.default : t;\n        });\n    }\n    var a = function(e) {\n        var n = (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(e);\n        return \"undefined\" === n ? \"undefined\" : \"string\" === n || e instanceof String ? \"string\" : \"number\" === n || e instanceof Number ? \"number\" : \"function\" === n || e instanceof Function ? \"function\" : e && e.constructor === Array ? \"array\" : e && 1 === e.nodeType ? \"element\" : \"object\" === n ? \"object\" : \"unknown\";\n    }, o = function(t, e) {\n        var n = document.createElement(t);\n        for(var r in e.className && (n.className = e.className), e.innerHTML && e.dompurify && (n.innerHTML = e.dompurify.sanitize(e.innerHTML)), e.style)n.style[r] = e.style[r];\n        return n;\n    }, s = function t(e, n) {\n        for(var r = 3 === e.nodeType ? document.createTextNode(e.nodeValue) : e.cloneNode(!1), i = e.firstChild; i; i = i.nextSibling)!0 !== n && 1 === i.nodeType && \"SCRIPT\" === i.nodeName || r.appendChild(t(i, n));\n        return 1 === e.nodeType && (\"CANVAS\" === e.nodeName ? (r.width = e.width, r.height = e.height, r.getContext(\"2d\").drawImage(e, 0, 0)) : \"TEXTAREA\" !== e.nodeName && \"SELECT\" !== e.nodeName || (r.value = e.value), r.addEventListener(\"load\", function() {\n            r.scrollTop = e.scrollTop, r.scrollLeft = e.scrollLeft;\n        }, !0)), r;\n    }, u = function t(e) {\n        var n = Object.assign(t.convert(Promise.resolve()), JSON.parse(JSON.stringify(t.template))), r = t.convert(Promise.resolve(), n);\n        return (r = r.setProgress(1, t, 1, [\n            t\n        ])).set(e);\n    };\n    (u.prototype = Object.create(Promise.prototype)).constructor = u, u.convert = function(t, e) {\n        return t.__proto__ = e || u.prototype, t;\n    }, u.template = {\n        prop: {\n            src: null,\n            container: null,\n            overlay: null,\n            canvas: null,\n            img: null,\n            pdf: null,\n            pageSize: null,\n            callback: function() {}\n        },\n        progress: {\n            val: 0,\n            state: null,\n            n: 0,\n            stack: []\n        },\n        opt: {\n            filename: \"file.pdf\",\n            margin: [\n                0,\n                0,\n                0,\n                0\n            ],\n            enableLinks: !0,\n            x: 0,\n            y: 0,\n            html2canvas: {},\n            jsPDF: {},\n            backgroundColor: \"transparent\"\n        }\n    }, u.prototype.from = function(t, e) {\n        return this.then(function() {\n            switch(e = e || function(t) {\n                switch(a(t)){\n                    case \"string\":\n                        return \"string\";\n                    case \"element\":\n                        return \"canvas\" === t.nodeName.toLowerCase() ? \"canvas\" : \"element\";\n                    default:\n                        return \"unknown\";\n                }\n            }(t), e){\n                case \"string\":\n                    return this.then(r).then(function(e) {\n                        return this.set({\n                            src: o(\"div\", {\n                                innerHTML: t,\n                                dompurify: e\n                            })\n                        });\n                    });\n                case \"element\":\n                    return this.set({\n                        src: t\n                    });\n                case \"canvas\":\n                    return this.set({\n                        canvas: t\n                    });\n                case \"img\":\n                    return this.set({\n                        img: t\n                    });\n                default:\n                    return this.error(\"Unknown source type.\");\n            }\n        });\n    }, u.prototype.to = function(t) {\n        switch(t){\n            case \"container\":\n                return this.toContainer();\n            case \"canvas\":\n                return this.toCanvas();\n            case \"img\":\n                return this.toImg();\n            case \"pdf\":\n                return this.toPdf();\n            default:\n                return this.error(\"Invalid target.\");\n        }\n    }, u.prototype.toContainer = function() {\n        return this.thenList([\n            function() {\n                return this.prop.src || this.error(\"Cannot duplicate - no source HTML.\");\n            },\n            function() {\n                return this.prop.pageSize || this.setPageSize();\n            }\n        ]).then(function() {\n            var t = {\n                position: \"relative\",\n                display: \"inline-block\",\n                width: (\"number\" != typeof this.opt.width || isNaN(this.opt.width) || \"number\" != typeof this.opt.windowWidth || isNaN(this.opt.windowWidth) ? Math.max(this.prop.src.clientWidth, this.prop.src.scrollWidth, this.prop.src.offsetWidth) : this.opt.windowWidth) + \"px\",\n                left: 0,\n                right: 0,\n                top: 0,\n                margin: \"auto\",\n                backgroundColor: this.opt.backgroundColor\n            }, e = s(this.prop.src, this.opt.html2canvas.javascriptEnabled);\n            \"BODY\" === e.tagName && (t.height = Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight) + \"px\"), this.prop.overlay = o(\"div\", {\n                className: \"html2pdf__overlay\",\n                style: {\n                    position: \"fixed\",\n                    overflow: \"hidden\",\n                    zIndex: 1e3,\n                    left: \"-100000px\",\n                    right: 0,\n                    bottom: 0,\n                    top: 0\n                }\n            }), this.prop.container = o(\"div\", {\n                className: \"html2pdf__container\",\n                style: t\n            }), this.prop.container.appendChild(e), this.prop.container.firstChild.appendChild(o(\"div\", {\n                style: {\n                    clear: \"both\",\n                    border: \"0 none transparent\",\n                    margin: 0,\n                    padding: 0,\n                    height: 0\n                }\n            })), this.prop.container.style.float = \"none\", this.prop.overlay.appendChild(this.prop.container), document.body.appendChild(this.prop.overlay), this.prop.container.firstChild.style.position = \"relative\", this.prop.container.height = Math.max(this.prop.container.firstChild.clientHeight, this.prop.container.firstChild.scrollHeight, this.prop.container.firstChild.offsetHeight) + \"px\";\n        });\n    }, u.prototype.toCanvas = function() {\n        var t = [\n            function() {\n                return document.body.contains(this.prop.container) || this.toContainer();\n            }\n        ];\n        return this.thenList(t).then(n).then(function(t) {\n            var e = Object.assign({}, this.opt.html2canvas);\n            return delete e.onrendered, t(this.prop.container, e);\n        }).then(function(t) {\n            (this.opt.html2canvas.onrendered || function() {})(t), this.prop.canvas = t, document.body.removeChild(this.prop.overlay);\n        });\n    }, u.prototype.toContext2d = function() {\n        var t = [\n            function() {\n                return document.body.contains(this.prop.container) || this.toContainer();\n            }\n        ];\n        return this.thenList(t).then(n).then(function(t) {\n            var e = this.opt.jsPDF, n = this.opt.fontFaces, r = \"number\" != typeof this.opt.width || isNaN(this.opt.width) || \"number\" != typeof this.opt.windowWidth || isNaN(this.opt.windowWidth) ? 1 : this.opt.width / this.opt.windowWidth, i = Object.assign({\n                async: !0,\n                allowTaint: !0,\n                scale: r,\n                scrollX: this.opt.scrollX || 0,\n                scrollY: this.opt.scrollY || 0,\n                backgroundColor: \"#ffffff\",\n                imageTimeout: 15e3,\n                logging: !0,\n                proxy: null,\n                removeContainer: !0,\n                foreignObjectRendering: !1,\n                useCORS: !1\n            }, this.opt.html2canvas);\n            if (delete i.onrendered, e.context2d.autoPaging = void 0 === this.opt.autoPaging || this.opt.autoPaging, e.context2d.posX = this.opt.x, e.context2d.posY = this.opt.y, e.context2d.margin = this.opt.margin, e.context2d.fontFaces = n, n) for(var a = 0; a < n.length; ++a){\n                var o = n[a], s = o.src.find(function(t) {\n                    return \"truetype\" === t.format;\n                });\n                s && e.addFont(s.url, o.ref.name, o.ref.style);\n            }\n            return i.windowHeight = i.windowHeight || 0, i.windowHeight = 0 == i.windowHeight ? Math.max(this.prop.container.clientHeight, this.prop.container.scrollHeight, this.prop.container.offsetHeight) : i.windowHeight, e.context2d.save(!0), t(this.prop.container, i);\n        }).then(function(t) {\n            this.opt.jsPDF.context2d.restore(!0), (this.opt.html2canvas.onrendered || function() {})(t), this.prop.canvas = t, document.body.removeChild(this.prop.overlay);\n        });\n    }, u.prototype.toImg = function() {\n        return this.thenList([\n            function() {\n                return this.prop.canvas || this.toCanvas();\n            }\n        ]).then(function() {\n            var t = this.prop.canvas.toDataURL(\"image/\" + this.opt.image.type, this.opt.image.quality);\n            this.prop.img = document.createElement(\"img\"), this.prop.img.src = t;\n        });\n    }, u.prototype.toPdf = function() {\n        return this.thenList([\n            function() {\n                return this.toContext2d();\n            }\n        ]).then(function() {\n            this.prop.pdf = this.prop.pdf || this.opt.jsPDF;\n        });\n    }, u.prototype.output = function(t, e, n) {\n        return \"img\" === (n = n || \"pdf\").toLowerCase() || \"image\" === n.toLowerCase() ? this.outputImg(t, e) : this.outputPdf(t, e);\n    }, u.prototype.outputPdf = function(t, e) {\n        return this.thenList([\n            function() {\n                return this.prop.pdf || this.toPdf();\n            }\n        ]).then(function() {\n            return this.prop.pdf.output(t, e);\n        });\n    }, u.prototype.outputImg = function(t) {\n        return this.thenList([\n            function() {\n                return this.prop.img || this.toImg();\n            }\n        ]).then(function() {\n            switch(t){\n                case void 0:\n                case \"img\":\n                    return this.prop.img;\n                case \"datauristring\":\n                case \"dataurlstring\":\n                    return this.prop.img.src;\n                case \"datauri\":\n                case \"dataurl\":\n                    return document.location.href = this.prop.img.src;\n                default:\n                    throw 'Image output type \"' + t + '\" is not supported.';\n            }\n        });\n    }, u.prototype.save = function(t) {\n        return this.thenList([\n            function() {\n                return this.prop.pdf || this.toPdf();\n            }\n        ]).set(t ? {\n            filename: t\n        } : null).then(function() {\n            this.prop.pdf.save(this.opt.filename);\n        });\n    }, u.prototype.doCallback = function() {\n        return this.thenList([\n            function() {\n                return this.prop.pdf || this.toPdf();\n            }\n        ]).then(function() {\n            this.prop.callback(this.prop.pdf);\n        });\n    }, u.prototype.set = function(t) {\n        if (\"object\" !== a(t)) return this;\n        var e = Object.keys(t || {}).map(function(e) {\n            if (e in u.template.prop) return function() {\n                this.prop[e] = t[e];\n            };\n            switch(e){\n                case \"margin\":\n                    return this.setMargin.bind(this, t.margin);\n                case \"jsPDF\":\n                    return function() {\n                        return this.opt.jsPDF = t.jsPDF, this.setPageSize();\n                    };\n                case \"pageSize\":\n                    return this.setPageSize.bind(this, t.pageSize);\n                default:\n                    return function() {\n                        this.opt[e] = t[e];\n                    };\n            }\n        }, this);\n        return this.then(function() {\n            return this.thenList(e);\n        });\n    }, u.prototype.get = function(t, e) {\n        return this.then(function() {\n            var n = t in u.template.prop ? this.prop[t] : this.opt[t];\n            return e ? e(n) : n;\n        });\n    }, u.prototype.setMargin = function(t) {\n        return this.then(function() {\n            switch(a(t)){\n                case \"number\":\n                    t = [\n                        t,\n                        t,\n                        t,\n                        t\n                    ];\n                case \"array\":\n                    if (2 === t.length && (t = [\n                        t[0],\n                        t[1],\n                        t[0],\n                        t[1]\n                    ]), 4 === t.length) break;\n                default:\n                    return this.error(\"Invalid margin array.\");\n            }\n            this.opt.margin = t;\n        }).then(this.setPageSize);\n    }, u.prototype.setPageSize = function(t) {\n        function e(t, e) {\n            return Math.floor(t * e / 72 * 96);\n        }\n        return this.then(function() {\n            (t = t || E.getPageSize(this.opt.jsPDF)).hasOwnProperty(\"inner\") || (t.inner = {\n                width: t.width - this.opt.margin[1] - this.opt.margin[3],\n                height: t.height - this.opt.margin[0] - this.opt.margin[2]\n            }, t.inner.px = {\n                width: e(t.inner.width, t.k),\n                height: e(t.inner.height, t.k)\n            }, t.inner.ratio = t.inner.height / t.inner.width), this.prop.pageSize = t;\n        });\n    }, u.prototype.setProgress = function(t, e, n, r) {\n        return null != t && (this.progress.val = t), null != e && (this.progress.state = e), null != n && (this.progress.n = n), null != r && (this.progress.stack = r), this.progress.ratio = this.progress.val / this.progress.state, this;\n    }, u.prototype.updateProgress = function(t, e, n, r) {\n        return this.setProgress(t ? this.progress.val + t : null, e || null, n ? this.progress.n + n : null, r ? this.progress.stack.concat(r) : null);\n    }, u.prototype.then = function(t, e) {\n        var n = this;\n        return this.thenCore(t, e, function(t, e) {\n            return n.updateProgress(null, null, 1, [\n                t\n            ]), Promise.prototype.then.call(this, function(e) {\n                return n.updateProgress(null, t), e;\n            }).then(t, e).then(function(t) {\n                return n.updateProgress(1), t;\n            });\n        });\n    }, u.prototype.thenCore = function(t, e, n) {\n        n = n || Promise.prototype.then;\n        var r = this;\n        t && (t = t.bind(r)), e && (e = e.bind(r));\n        var i = -1 !== Promise.toString().indexOf(\"[native code]\") && \"Promise\" === Promise.name ? r : u.convert(Object.assign({}, r), Promise.prototype), a = n.call(i, t, e);\n        return u.convert(a, r.__proto__);\n    }, u.prototype.thenExternal = function(t, e) {\n        return Promise.prototype.then.call(this, t, e);\n    }, u.prototype.thenList = function(t) {\n        var e = this;\n        return t.forEach(function(t) {\n            e = e.thenCore(t);\n        }), e;\n    }, u.prototype.catch = function(t) {\n        t && (t = t.bind(this));\n        var e = Promise.prototype.catch.call(this, t);\n        return u.convert(e, this);\n    }, u.prototype.catchExternal = function(t) {\n        return Promise.prototype.catch.call(this, t);\n    }, u.prototype.error = function(t) {\n        return this.then(function() {\n            throw new Error(t);\n        });\n    }, u.prototype.using = u.prototype.set, u.prototype.saveAs = u.prototype.save, u.prototype.export = u.prototype.output, u.prototype.run = u.prototype.then, E.getPageSize = function(e, n, r) {\n        if (\"object\" === (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(e)) {\n            var i = e;\n            e = i.orientation, n = i.unit || n, r = i.format || r;\n        }\n        n = n || \"mm\", r = r || \"a4\", e = (\"\" + (e || \"P\")).toLowerCase();\n        var a, o = (\"\" + r).toLowerCase(), s = {\n            a0: [\n                2383.94,\n                3370.39\n            ],\n            a1: [\n                1683.78,\n                2383.94\n            ],\n            a2: [\n                1190.55,\n                1683.78\n            ],\n            a3: [\n                841.89,\n                1190.55\n            ],\n            a4: [\n                595.28,\n                841.89\n            ],\n            a5: [\n                419.53,\n                595.28\n            ],\n            a6: [\n                297.64,\n                419.53\n            ],\n            a7: [\n                209.76,\n                297.64\n            ],\n            a8: [\n                147.4,\n                209.76\n            ],\n            a9: [\n                104.88,\n                147.4\n            ],\n            a10: [\n                73.7,\n                104.88\n            ],\n            b0: [\n                2834.65,\n                4008.19\n            ],\n            b1: [\n                2004.09,\n                2834.65\n            ],\n            b2: [\n                1417.32,\n                2004.09\n            ],\n            b3: [\n                1000.63,\n                1417.32\n            ],\n            b4: [\n                708.66,\n                1000.63\n            ],\n            b5: [\n                498.9,\n                708.66\n            ],\n            b6: [\n                354.33,\n                498.9\n            ],\n            b7: [\n                249.45,\n                354.33\n            ],\n            b8: [\n                175.75,\n                249.45\n            ],\n            b9: [\n                124.72,\n                175.75\n            ],\n            b10: [\n                87.87,\n                124.72\n            ],\n            c0: [\n                2599.37,\n                3676.54\n            ],\n            c1: [\n                1836.85,\n                2599.37\n            ],\n            c2: [\n                1298.27,\n                1836.85\n            ],\n            c3: [\n                918.43,\n                1298.27\n            ],\n            c4: [\n                649.13,\n                918.43\n            ],\n            c5: [\n                459.21,\n                649.13\n            ],\n            c6: [\n                323.15,\n                459.21\n            ],\n            c7: [\n                229.61,\n                323.15\n            ],\n            c8: [\n                161.57,\n                229.61\n            ],\n            c9: [\n                113.39,\n                161.57\n            ],\n            c10: [\n                79.37,\n                113.39\n            ],\n            dl: [\n                311.81,\n                623.62\n            ],\n            letter: [\n                612,\n                792\n            ],\n            \"government-letter\": [\n                576,\n                756\n            ],\n            legal: [\n                612,\n                1008\n            ],\n            \"junior-legal\": [\n                576,\n                360\n            ],\n            ledger: [\n                1224,\n                792\n            ],\n            tabloid: [\n                792,\n                1224\n            ],\n            \"credit-card\": [\n                153,\n                243\n            ]\n        };\n        switch(n){\n            case \"pt\":\n                a = 1;\n                break;\n            case \"mm\":\n                a = 72 / 25.4;\n                break;\n            case \"cm\":\n                a = 72 / 2.54;\n                break;\n            case \"in\":\n                a = 72;\n                break;\n            case \"px\":\n                a = .75;\n                break;\n            case \"pc\":\n            case \"em\":\n                a = 12;\n                break;\n            case \"ex\":\n                a = 6;\n                break;\n            default:\n                throw \"Invalid unit: \" + n;\n        }\n        var u, c = 0, l = 0;\n        if (s.hasOwnProperty(o)) c = s[o][1] / a, l = s[o][0] / a;\n        else try {\n            c = r[1], l = r[0];\n        } catch (h) {\n            throw new Error(\"Invalid format: \" + r);\n        }\n        if (\"p\" === e || \"portrait\" === e) e = \"p\", l > c && (u = l, l = c, c = u);\n        else {\n            if (\"l\" !== e && \"landscape\" !== e) throw \"Invalid orientation: \" + e;\n            e = \"l\", c > l && (u = l, l = c, c = u);\n        }\n        return {\n            width: l,\n            height: c,\n            unit: n,\n            k: a,\n            orientation: e\n        };\n    }, e.html = function(t, e) {\n        (e = e || {}).callback = e.callback || function() {}, e.html2canvas = e.html2canvas || {}, e.html2canvas.canvas = e.html2canvas.canvas || this.canvas, e.jsPDF = e.jsPDF || this, e.fontFaces = e.fontFaces ? e.fontFaces.map(Ct) : null;\n        var n = new u(e);\n        return e.worker ? n : n.from(t).doCallback();\n    };\n}(E.API), E.API.addJS = function(t) {\n    return Ut = t, this.internal.events.subscribe(\"postPutResources\", function() {\n        Tt = this.internal.newObject(), this.internal.out(\"<<\"), this.internal.out(\"/Names [(EmbeddedJS) \" + (Tt + 1) + \" 0 R]\"), this.internal.out(\">>\"), this.internal.out(\"endobj\"), zt = this.internal.newObject(), this.internal.out(\"<<\"), this.internal.out(\"/S /JavaScript\"), this.internal.out(\"/JS (\" + Ut + \")\"), this.internal.out(\">>\"), this.internal.out(\"endobj\");\n    }), this.internal.events.subscribe(\"putCatalog\", function() {\n        void 0 !== Tt && void 0 !== zt && this.internal.out(\"/Names <</JavaScript \" + Tt + \" 0 R>>\");\n    }), this;\n}, /**\n * @license\n * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv\n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */ function(t) {\n    var e;\n    t.events.push([\n        \"postPutResources\",\n        function() {\n            var t = this, n = /^(\\d+) 0 obj$/;\n            if (this.outline.root.children.length > 0) for(var r = t.outline.render().split(/\\r\\n/), i = 0; i < r.length; i++){\n                var a = r[i], o = n.exec(a);\n                if (null != o) {\n                    var s = o[1];\n                    t.internal.newObjectDeferredBegin(s, !1);\n                }\n                t.internal.write(a);\n            }\n            if (this.outline.createNamedDestinations) {\n                var u = this.internal.pages.length, c = [];\n                for(i = 0; i < u; i++){\n                    var l = t.internal.newObject();\n                    c.push(l);\n                    var h = t.internal.getPageInfo(i + 1);\n                    t.internal.write(\"<< /D[\" + h.objId + \" 0 R /XYZ null null null]>> endobj\");\n                }\n                var f = t.internal.newObject();\n                for(t.internal.write(\"<< /Names [ \"), i = 0; i < c.length; i++)t.internal.write(\"(page_\" + (i + 1) + \")\" + c[i] + \" 0 R\");\n                t.internal.write(\" ] >>\", \"endobj\"), e = t.internal.newObject(), t.internal.write(\"<< /Dests \" + f + \" 0 R\"), t.internal.write(\">>\", \"endobj\");\n            }\n        }\n    ]), t.events.push([\n        \"putCatalog\",\n        function() {\n            var t = this;\n            t.outline.root.children.length > 0 && (t.internal.write(\"/Outlines\", this.outline.makeRef(this.outline.root)), this.outline.createNamedDestinations && t.internal.write(\"/Names \" + e + \" 0 R\"));\n        }\n    ]), t.events.push([\n        \"initialized\",\n        function() {\n            var t = this;\n            t.outline = {\n                createNamedDestinations: !1,\n                root: {\n                    children: []\n                }\n            }, t.outline.add = function(t, e, n) {\n                var r = {\n                    title: e,\n                    options: n,\n                    children: []\n                };\n                return null == t && (t = this.root), t.children.push(r), r;\n            }, t.outline.render = function() {\n                return this.ctx = {}, this.ctx.val = \"\", this.ctx.pdf = t, this.genIds_r(this.root), this.renderRoot(this.root), this.renderItems(this.root), this.ctx.val;\n            }, t.outline.genIds_r = function(e) {\n                e.id = t.internal.newObjectDeferred();\n                for(var n = 0; n < e.children.length; n++)this.genIds_r(e.children[n]);\n            }, t.outline.renderRoot = function(t) {\n                this.objStart(t), this.line(\"/Type /Outlines\"), t.children.length > 0 && (this.line(\"/First \" + this.makeRef(t.children[0])), this.line(\"/Last \" + this.makeRef(t.children[t.children.length - 1]))), this.line(\"/Count \" + this.count_r({\n                    count: 0\n                }, t)), this.objEnd();\n            }, t.outline.renderItems = function(e) {\n                for(var n = this.ctx.pdf.internal.getVerticalCoordinateString, r = 0; r < e.children.length; r++){\n                    var i = e.children[r];\n                    this.objStart(i), this.line(\"/Title \" + this.makeString(i.title)), this.line(\"/Parent \" + this.makeRef(e)), r > 0 && this.line(\"/Prev \" + this.makeRef(e.children[r - 1])), r < e.children.length - 1 && this.line(\"/Next \" + this.makeRef(e.children[r + 1])), i.children.length > 0 && (this.line(\"/First \" + this.makeRef(i.children[0])), this.line(\"/Last \" + this.makeRef(i.children[i.children.length - 1])));\n                    var a = this.count = this.count_r({\n                        count: 0\n                    }, i);\n                    if (a > 0 && this.line(\"/Count \" + a), i.options && i.options.pageNumber) {\n                        var o = t.internal.getPageInfo(i.options.pageNumber);\n                        this.line(\"/Dest [\" + o.objId + \" 0 R /XYZ 0 \" + n(0) + \" 0]\");\n                    }\n                    this.objEnd();\n                }\n                for(var s = 0; s < e.children.length; s++)this.renderItems(e.children[s]);\n            }, t.outline.line = function(t) {\n                this.ctx.val += t + \"\\r\\n\";\n            }, t.outline.makeRef = function(t) {\n                return t.id + \" 0 R\";\n            }, t.outline.makeString = function(e) {\n                return \"(\" + t.internal.pdfEscape(e) + \")\";\n            }, t.outline.objStart = function(t) {\n                this.ctx.val += \"\\r\\n\" + t.id + \" 0 obj\\r\\n<<\\r\\n\";\n            }, t.outline.objEnd = function() {\n                this.ctx.val += \">> \\r\\nendobj\\r\\n\";\n            }, t.outline.count_r = function(t, e) {\n                for(var n = 0; n < e.children.length; n++)t.count++, this.count_r(t, e.children[n]);\n                return t.count;\n            };\n        }\n    ]);\n}(E.API), /**\n * @license\n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */ function(t) {\n    var e = [\n        192,\n        193,\n        194,\n        195,\n        196,\n        197,\n        198,\n        199\n    ];\n    t.processJPEG = function(t, n, r, i, a, o) {\n        var s, u = this.decode.DCT_DECODE, c = null;\n        if (\"string\" == typeof t || this.__addimage__.isArrayBuffer(t) || this.__addimage__.isArrayBufferView(t)) {\n            switch(t = a || t, t = this.__addimage__.isArrayBuffer(t) ? new Uint8Array(t) : t, s = function(t) {\n                for(var n, r = 256 * t.charCodeAt(4) + t.charCodeAt(5), i = t.length, a = {\n                    width: 0,\n                    height: 0,\n                    numcomponents: 1\n                }, o = 4; o < i; o += 2){\n                    if (o += r, -1 !== e.indexOf(t.charCodeAt(o + 1))) {\n                        n = 256 * t.charCodeAt(o + 5) + t.charCodeAt(o + 6), a = {\n                            width: 256 * t.charCodeAt(o + 7) + t.charCodeAt(o + 8),\n                            height: n,\n                            numcomponents: t.charCodeAt(o + 9)\n                        };\n                        break;\n                    }\n                    r = 256 * t.charCodeAt(o + 2) + t.charCodeAt(o + 3);\n                }\n                return a;\n            }(t = this.__addimage__.isArrayBufferView(t) ? this.__addimage__.arrayBufferToBinaryString(t) : t), s.numcomponents){\n                case 1:\n                    o = this.color_spaces.DEVICE_GRAY;\n                    break;\n                case 4:\n                    o = this.color_spaces.DEVICE_CMYK;\n                    break;\n                case 3:\n                    o = this.color_spaces.DEVICE_RGB;\n            }\n            c = {\n                data: t,\n                width: s.width,\n                height: s.height,\n                colorSpace: o,\n                bitsPerComponent: 8,\n                filter: u,\n                index: n,\n                alias: r\n            };\n        }\n        return c;\n    };\n}(E.API), E.API.processPNG = function(t, i, a, o) {\n    if (this.__addimage__.isArrayBuffer(t) && (t = new Uint8Array(t)), this.__addimage__.isArrayBufferView(t)) {\n        var s, u = (0,fast_png__WEBPACK_IMPORTED_MODULE_2__.decode)(t, {\n            checkCrc: !0\n        }), c = u.width, l = u.height, h = u.channels, f = u.palette, d = u.depth;\n        s = f && 1 === h ? function(t) {\n            for(var e = t.width, r = t.height, i = t.data, a = t.palette, o = t.depth, s = !1, u = [], c = [], l = void 0, h = !1, f = 0, d = 0; d < a.length; d++){\n                var p = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(a[d], 4), g = p[0], m = p[1], v = p[2], b = p[3];\n                u.push(g, m, v), null != b && (0 === b ? (f++, c.length < 1 && c.push(d)) : b < 255 && (h = !0));\n            }\n            if (h || f > 1) {\n                s = !0, c = void 0;\n                var y = e * r;\n                l = new Uint8Array(y);\n                for(var w = new DataView(i.buffer), N = 0; N < y; N++){\n                    var L = re(w, N, o), x = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(a[L], 4)[3];\n                    l[N] = x;\n                }\n            } else 0 === f && (c = void 0);\n            return {\n                colorSpace: \"Indexed\",\n                colorsPerPixel: 1,\n                sMaskBitsPerComponent: s ? 8 : void 0,\n                colorBytes: i,\n                alphaBytes: l,\n                needSMask: s,\n                palette: u,\n                mask: c\n            };\n        }(u) : 2 === h || 4 === h ? function(t) {\n            for(var e = t.data, n = t.width, r = t.height, i = t.channels, a = t.depth, o = 2 === i ? \"DeviceGray\" : \"DeviceRGB\", s = i - 1, u = n * r, c = s, l = u * c, h = 1 * u, f = Math.ceil(l * a / 8), d = Math.ceil(h * a / 8), p = new Uint8Array(f), g = new Uint8Array(d), m = new DataView(e.buffer), v = new DataView(p.buffer), b = new DataView(g.buffer), y = !1, w = 0; w < u; w++){\n                for(var N = w * i, L = 0; L < c; L++)ie(v, re(m, N + L, a), w * c + L, a);\n                var x = re(m, N + c, a);\n                x < (1 << a) - 1 && (y = !0), ie(b, x, 1 * w, a);\n            }\n            return {\n                colorSpace: o,\n                colorsPerPixel: s,\n                sMaskBitsPerComponent: y ? a : void 0,\n                colorBytes: p,\n                alphaBytes: g,\n                needSMask: y\n            };\n        }(u) : function(t) {\n            var e = t.data, n = 1 === t.channels ? \"DeviceGray\" : \"DeviceRGB\";\n            return {\n                colorSpace: n,\n                colorsPerPixel: \"DeviceGray\" === n ? 1 : 3,\n                colorBytes: e instanceof Uint16Array ? function(t) {\n                    for(var e = t.length, n = new Uint8Array(2 * e), r = new DataView(n.buffer, n.byteOffset, n.byteLength), i = 0; i < e; i++)r.setUint16(2 * i, t[i], !1);\n                    return n;\n                }(e) : e,\n                needSMask: !1\n            };\n        }(u);\n        var p, g, m, v = s, b = v.colorSpace, y = v.colorsPerPixel, w = v.sMaskBitsPerComponent, N = v.colorBytes, L = v.alphaBytes, x = v.needSMask, A = v.palette, S = v.mask, _ = null;\n        return o !== E.API.image_compression.NONE && \"function\" == typeof fflate__WEBPACK_IMPORTED_MODULE_3__.zlibSync ? (_ = function(t) {\n            var e;\n            switch(t){\n                case E.API.image_compression.FAST:\n                    e = 11;\n                    break;\n                case E.API.image_compression.MEDIUM:\n                    e = 13;\n                    break;\n                case E.API.image_compression.SLOW:\n                    e = 14;\n                    break;\n                default:\n                    e = 12;\n            }\n            return e;\n        }(o), p = this.decode.FLATE_DECODE, g = \"/Predictor \".concat(_, \" /Colors \").concat(y, \" /BitsPerComponent \").concat(d, \" /Columns \").concat(c), t = Xt(N, Math.ceil(c * y * d / 8), y, d, o), x && (m = Xt(L, Math.ceil(c * w / 8), 1, w, o))) : (p = void 0, g = void 0, t = N, x && (m = L)), (this.__addimage__.isArrayBuffer(t) || this.__addimage__.isArrayBufferView(t)) && (t = this.__addimage__.arrayBufferToBinaryString(t)), (m && this.__addimage__.isArrayBuffer(m) || this.__addimage__.isArrayBufferView(m)) && (m = this.__addimage__.arrayBufferToBinaryString(m)), {\n            alias: a,\n            data: t,\n            index: i,\n            filter: p,\n            decodeParameters: g,\n            transparency: S,\n            palette: A,\n            sMask: m,\n            predictor: _,\n            width: c,\n            height: l,\n            bitsPerComponent: d,\n            sMaskBitsPerComponent: w,\n            colorSpace: b\n        };\n    }\n}, function(t) {\n    t.processGIF89A = function(e, n, r, i) {\n        var a = new oe(e), o = a.width, s = a.height, u = [];\n        a.decodeAndBlitFrameRGBA(0, u);\n        var c = {\n            data: u,\n            width: o,\n            height: s\n        }, l = new ue(100).encode(c, 100);\n        return t.processJPEG.call(this, l, n, r, i);\n    }, t.processGIF87A = t.processGIF89A;\n}(E.API), ce.prototype.parseHeader = function() {\n    if (this.fileSize = this.datav.getUint32(this.pos, !0), this.pos += 4, this.reserved = this.datav.getUint32(this.pos, !0), this.pos += 4, this.offset = this.datav.getUint32(this.pos, !0), this.pos += 4, this.headerSize = this.datav.getUint32(this.pos, !0), this.pos += 4, this.width = this.datav.getUint32(this.pos, !0), this.pos += 4, this.height = this.datav.getInt32(this.pos, !0), this.pos += 4, this.planes = this.datav.getUint16(this.pos, !0), this.pos += 2, this.bitPP = this.datav.getUint16(this.pos, !0), this.pos += 2, this.compress = this.datav.getUint32(this.pos, !0), this.pos += 4, this.rawSize = this.datav.getUint32(this.pos, !0), this.pos += 4, this.hr = this.datav.getUint32(this.pos, !0), this.pos += 4, this.vr = this.datav.getUint32(this.pos, !0), this.pos += 4, this.colors = this.datav.getUint32(this.pos, !0), this.pos += 4, this.importantColors = this.datav.getUint32(this.pos, !0), this.pos += 4, 16 === this.bitPP && this.is_with_alpha && (this.bitPP = 15), this.bitPP < 15) {\n        var t = 0 === this.colors ? 1 << this.bitPP : this.colors;\n        this.palette = new Array(t);\n        for(var e = 0; e < t; e++){\n            var n = this.datav.getUint8(this.pos++, !0), r = this.datav.getUint8(this.pos++, !0), i = this.datav.getUint8(this.pos++, !0), a = this.datav.getUint8(this.pos++, !0);\n            this.palette[e] = {\n                red: i,\n                green: r,\n                blue: n,\n                quad: a\n            };\n        }\n    }\n    this.height < 0 && (this.height *= -1, this.bottom_up = !1);\n}, ce.prototype.parseBGR = function() {\n    this.pos = this.offset;\n    try {\n        var t = \"bit\" + this.bitPP, e = this.width * this.height * 4;\n        this.data = new Uint8Array(e), this[t]();\n    } catch (n) {\n        o.log(\"bit decode error:\" + n);\n    }\n}, ce.prototype.bit1 = function() {\n    var t, e = Math.ceil(this.width / 8), n = e % 4;\n    for(t = this.height - 1; t >= 0; t--){\n        for(var r = this.bottom_up ? t : this.height - 1 - t, i = 0; i < e; i++)for(var a = this.datav.getUint8(this.pos++, !0), o = r * this.width * 4 + 8 * i * 4, s = 0; s < 8 && 8 * i + s < this.width; s++){\n            var u = this.palette[a >> 7 - s & 1];\n            this.data[o + 4 * s] = u.blue, this.data[o + 4 * s + 1] = u.green, this.data[o + 4 * s + 2] = u.red, this.data[o + 4 * s + 3] = 255;\n        }\n        0 !== n && (this.pos += 4 - n);\n    }\n}, ce.prototype.bit4 = function() {\n    for(var t = Math.ceil(this.width / 2), e = t % 4, n = this.height - 1; n >= 0; n--){\n        for(var r = this.bottom_up ? n : this.height - 1 - n, i = 0; i < t; i++){\n            var a = this.datav.getUint8(this.pos++, !0), o = r * this.width * 4 + 2 * i * 4, s = a >> 4, u = 15 & a, c = this.palette[s];\n            if (this.data[o] = c.blue, this.data[o + 1] = c.green, this.data[o + 2] = c.red, this.data[o + 3] = 255, 2 * i + 1 >= this.width) break;\n            c = this.palette[u], this.data[o + 4] = c.blue, this.data[o + 4 + 1] = c.green, this.data[o + 4 + 2] = c.red, this.data[o + 4 + 3] = 255;\n        }\n        0 !== e && (this.pos += 4 - e);\n    }\n}, ce.prototype.bit8 = function() {\n    for(var t = this.width % 4, e = this.height - 1; e >= 0; e--){\n        for(var n = this.bottom_up ? e : this.height - 1 - e, r = 0; r < this.width; r++){\n            var i = this.datav.getUint8(this.pos++, !0), a = n * this.width * 4 + 4 * r;\n            if (i < this.palette.length) {\n                var o = this.palette[i];\n                this.data[a] = o.red, this.data[a + 1] = o.green, this.data[a + 2] = o.blue, this.data[a + 3] = 255;\n            } else this.data[a] = 255, this.data[a + 1] = 255, this.data[a + 2] = 255, this.data[a + 3] = 255;\n        }\n        0 !== t && (this.pos += 4 - t);\n    }\n}, ce.prototype.bit15 = function() {\n    for(var t = this.width % 3, e = parseInt(\"11111\", 2), n = this.height - 1; n >= 0; n--){\n        for(var r = this.bottom_up ? n : this.height - 1 - n, i = 0; i < this.width; i++){\n            var a = this.datav.getUint16(this.pos, !0);\n            this.pos += 2;\n            var o = (a & e) / e * 255 | 0, s = (a >> 5 & e) / e * 255 | 0, u = (a >> 10 & e) / e * 255 | 0, c = a >> 15 ? 255 : 0, l = r * this.width * 4 + 4 * i;\n            this.data[l] = u, this.data[l + 1] = s, this.data[l + 2] = o, this.data[l + 3] = c;\n        }\n        this.pos += t;\n    }\n}, ce.prototype.bit16 = function() {\n    for(var t = this.width % 3, e = parseInt(\"11111\", 2), n = parseInt(\"111111\", 2), r = this.height - 1; r >= 0; r--){\n        for(var i = this.bottom_up ? r : this.height - 1 - r, a = 0; a < this.width; a++){\n            var o = this.datav.getUint16(this.pos, !0);\n            this.pos += 2;\n            var s = (o & e) / e * 255 | 0, u = (o >> 5 & n) / n * 255 | 0, c = (o >> 11) / e * 255 | 0, l = i * this.width * 4 + 4 * a;\n            this.data[l] = c, this.data[l + 1] = u, this.data[l + 2] = s, this.data[l + 3] = 255;\n        }\n        this.pos += t;\n    }\n}, ce.prototype.bit24 = function() {\n    for(var t = this.height - 1; t >= 0; t--){\n        for(var e = this.bottom_up ? t : this.height - 1 - t, n = 0; n < this.width; n++){\n            var r = this.datav.getUint8(this.pos++, !0), i = this.datav.getUint8(this.pos++, !0), a = this.datav.getUint8(this.pos++, !0), o = e * this.width * 4 + 4 * n;\n            this.data[o] = a, this.data[o + 1] = i, this.data[o + 2] = r, this.data[o + 3] = 255;\n        }\n        this.pos += this.width % 4;\n    }\n}, ce.prototype.bit32 = function() {\n    for(var t = this.height - 1; t >= 0; t--)for(var e = this.bottom_up ? t : this.height - 1 - t, n = 0; n < this.width; n++){\n        var r = this.datav.getUint8(this.pos++, !0), i = this.datav.getUint8(this.pos++, !0), a = this.datav.getUint8(this.pos++, !0), o = this.datav.getUint8(this.pos++, !0), s = e * this.width * 4 + 4 * n;\n        this.data[s] = a, this.data[s + 1] = i, this.data[s + 2] = r, this.data[s + 3] = o;\n    }\n}, ce.prototype.getData = function() {\n    return this.data;\n}, /**\n * @license\n * Copyright (c) 2018 Aras Abbasi\n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */ function(t) {\n    t.processBMP = function(e, n, r, i) {\n        var a = new ce(e, !1), o = a.width, s = a.height, u = {\n            data: a.getData(),\n            width: o,\n            height: s\n        }, c = new ue(100).encode(u, 100);\n        return t.processJPEG.call(this, c, n, r, i);\n    };\n}(E.API), le.prototype.getData = function() {\n    return this.data;\n}, /**\n * @license\n * Copyright (c) 2019 Aras Abbasi\n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */ function(t) {\n    t.processWEBP = function(e, n, r, i) {\n        var a = new le(e), o = a.width, s = a.height, u = {\n            data: a.getData(),\n            width: o,\n            height: s\n        }, c = new ue(100).encode(u, 100);\n        return t.processJPEG.call(this, c, n, r, i);\n    };\n}(E.API), E.API.processRGBA = function(t, e, n) {\n    for(var r = t.data, i = r.length, a = new Uint8Array(i / 4 * 3), o = new Uint8Array(i / 4), s = 0, u = 0, c = 0; c < i; c += 4){\n        var l = r[c], h = r[c + 1], f = r[c + 2], d = r[c + 3];\n        a[s++] = l, a[s++] = h, a[s++] = f, o[u++] = d;\n    }\n    var p = this.__addimage__.arrayBufferToBinaryString(a);\n    return {\n        alpha: this.__addimage__.arrayBufferToBinaryString(o),\n        data: p,\n        index: e,\n        alias: n,\n        colorSpace: \"DeviceRGB\",\n        bitsPerComponent: 8,\n        width: t.width,\n        height: t.height\n    };\n}, E.API.setLanguage = function(t) {\n    return void 0 === this.internal.languageSettings && (this.internal.languageSettings = {}, this.internal.languageSettings.isSubscribed = !1), void 0 !== ({\n        af: \"Afrikaans\",\n        sq: \"Albanian\",\n        ar: \"Arabic (Standard)\",\n        \"ar-DZ\": \"Arabic (Algeria)\",\n        \"ar-BH\": \"Arabic (Bahrain)\",\n        \"ar-EG\": \"Arabic (Egypt)\",\n        \"ar-IQ\": \"Arabic (Iraq)\",\n        \"ar-JO\": \"Arabic (Jordan)\",\n        \"ar-KW\": \"Arabic (Kuwait)\",\n        \"ar-LB\": \"Arabic (Lebanon)\",\n        \"ar-LY\": \"Arabic (Libya)\",\n        \"ar-MA\": \"Arabic (Morocco)\",\n        \"ar-OM\": \"Arabic (Oman)\",\n        \"ar-QA\": \"Arabic (Qatar)\",\n        \"ar-SA\": \"Arabic (Saudi Arabia)\",\n        \"ar-SY\": \"Arabic (Syria)\",\n        \"ar-TN\": \"Arabic (Tunisia)\",\n        \"ar-AE\": \"Arabic (U.A.E.)\",\n        \"ar-YE\": \"Arabic (Yemen)\",\n        an: \"Aragonese\",\n        hy: \"Armenian\",\n        as: \"Assamese\",\n        ast: \"Asturian\",\n        az: \"Azerbaijani\",\n        eu: \"Basque\",\n        be: \"Belarusian\",\n        bn: \"Bengali\",\n        bs: \"Bosnian\",\n        br: \"Breton\",\n        bg: \"Bulgarian\",\n        my: \"Burmese\",\n        ca: \"Catalan\",\n        ch: \"Chamorro\",\n        ce: \"Chechen\",\n        zh: \"Chinese\",\n        \"zh-HK\": \"Chinese (Hong Kong)\",\n        \"zh-CN\": \"Chinese (PRC)\",\n        \"zh-SG\": \"Chinese (Singapore)\",\n        \"zh-TW\": \"Chinese (Taiwan)\",\n        cv: \"Chuvash\",\n        co: \"Corsican\",\n        cr: \"Cree\",\n        hr: \"Croatian\",\n        cs: \"Czech\",\n        da: \"Danish\",\n        nl: \"Dutch (Standard)\",\n        \"nl-BE\": \"Dutch (Belgian)\",\n        en: \"English\",\n        \"en-AU\": \"English (Australia)\",\n        \"en-BZ\": \"English (Belize)\",\n        \"en-CA\": \"English (Canada)\",\n        \"en-IE\": \"English (Ireland)\",\n        \"en-JM\": \"English (Jamaica)\",\n        \"en-NZ\": \"English (New Zealand)\",\n        \"en-PH\": \"English (Philippines)\",\n        \"en-ZA\": \"English (South Africa)\",\n        \"en-TT\": \"English (Trinidad & Tobago)\",\n        \"en-GB\": \"English (United Kingdom)\",\n        \"en-US\": \"English (United States)\",\n        \"en-ZW\": \"English (Zimbabwe)\",\n        eo: \"Esperanto\",\n        et: \"Estonian\",\n        fo: \"Faeroese\",\n        fj: \"Fijian\",\n        fi: \"Finnish\",\n        fr: \"French (Standard)\",\n        \"fr-BE\": \"French (Belgium)\",\n        \"fr-CA\": \"French (Canada)\",\n        \"fr-FR\": \"French (France)\",\n        \"fr-LU\": \"French (Luxembourg)\",\n        \"fr-MC\": \"French (Monaco)\",\n        \"fr-CH\": \"French (Switzerland)\",\n        fy: \"Frisian\",\n        fur: \"Friulian\",\n        gd: \"Gaelic (Scots)\",\n        \"gd-IE\": \"Gaelic (Irish)\",\n        gl: \"Galacian\",\n        ka: \"Georgian\",\n        de: \"German (Standard)\",\n        \"de-AT\": \"German (Austria)\",\n        \"de-DE\": \"German (Germany)\",\n        \"de-LI\": \"German (Liechtenstein)\",\n        \"de-LU\": \"German (Luxembourg)\",\n        \"de-CH\": \"German (Switzerland)\",\n        el: \"Greek\",\n        gu: \"Gujurati\",\n        ht: \"Haitian\",\n        he: \"Hebrew\",\n        hi: \"Hindi\",\n        hu: \"Hungarian\",\n        is: \"Icelandic\",\n        id: \"Indonesian\",\n        iu: \"Inuktitut\",\n        ga: \"Irish\",\n        it: \"Italian (Standard)\",\n        \"it-CH\": \"Italian (Switzerland)\",\n        ja: \"Japanese\",\n        kn: \"Kannada\",\n        ks: \"Kashmiri\",\n        kk: \"Kazakh\",\n        km: \"Khmer\",\n        ky: \"Kirghiz\",\n        tlh: \"Klingon\",\n        ko: \"Korean\",\n        \"ko-KP\": \"Korean (North Korea)\",\n        \"ko-KR\": \"Korean (South Korea)\",\n        la: \"Latin\",\n        lv: \"Latvian\",\n        lt: \"Lithuanian\",\n        lb: \"Luxembourgish\",\n        mk: \"North Macedonia\",\n        ms: \"Malay\",\n        ml: \"Malayalam\",\n        mt: \"Maltese\",\n        mi: \"Maori\",\n        mr: \"Marathi\",\n        mo: \"Moldavian\",\n        nv: \"Navajo\",\n        ng: \"Ndonga\",\n        ne: \"Nepali\",\n        no: \"Norwegian\",\n        nb: \"Norwegian (Bokmal)\",\n        nn: \"Norwegian (Nynorsk)\",\n        oc: \"Occitan\",\n        or: \"Oriya\",\n        om: \"Oromo\",\n        fa: \"Persian\",\n        \"fa-IR\": \"Persian/Iran\",\n        pl: \"Polish\",\n        pt: \"Portuguese\",\n        \"pt-BR\": \"Portuguese (Brazil)\",\n        pa: \"Punjabi\",\n        \"pa-IN\": \"Punjabi (India)\",\n        \"pa-PK\": \"Punjabi (Pakistan)\",\n        qu: \"Quechua\",\n        rm: \"Rhaeto-Romanic\",\n        ro: \"Romanian\",\n        \"ro-MO\": \"Romanian (Moldavia)\",\n        ru: \"Russian\",\n        \"ru-MO\": \"Russian (Moldavia)\",\n        sz: \"Sami (Lappish)\",\n        sg: \"Sango\",\n        sa: \"Sanskrit\",\n        sc: \"Sardinian\",\n        sd: \"Sindhi\",\n        si: \"Singhalese\",\n        sr: \"Serbian\",\n        sk: \"Slovak\",\n        sl: \"Slovenian\",\n        so: \"Somani\",\n        sb: \"Sorbian\",\n        es: \"Spanish\",\n        \"es-AR\": \"Spanish (Argentina)\",\n        \"es-BO\": \"Spanish (Bolivia)\",\n        \"es-CL\": \"Spanish (Chile)\",\n        \"es-CO\": \"Spanish (Colombia)\",\n        \"es-CR\": \"Spanish (Costa Rica)\",\n        \"es-DO\": \"Spanish (Dominican Republic)\",\n        \"es-EC\": \"Spanish (Ecuador)\",\n        \"es-SV\": \"Spanish (El Salvador)\",\n        \"es-GT\": \"Spanish (Guatemala)\",\n        \"es-HN\": \"Spanish (Honduras)\",\n        \"es-MX\": \"Spanish (Mexico)\",\n        \"es-NI\": \"Spanish (Nicaragua)\",\n        \"es-PA\": \"Spanish (Panama)\",\n        \"es-PY\": \"Spanish (Paraguay)\",\n        \"es-PE\": \"Spanish (Peru)\",\n        \"es-PR\": \"Spanish (Puerto Rico)\",\n        \"es-ES\": \"Spanish (Spain)\",\n        \"es-UY\": \"Spanish (Uruguay)\",\n        \"es-VE\": \"Spanish (Venezuela)\",\n        sx: \"Sutu\",\n        sw: \"Swahili\",\n        sv: \"Swedish\",\n        \"sv-FI\": \"Swedish (Finland)\",\n        \"sv-SV\": \"Swedish (Sweden)\",\n        ta: \"Tamil\",\n        tt: \"Tatar\",\n        te: \"Teluga\",\n        th: \"Thai\",\n        tig: \"Tigre\",\n        ts: \"Tsonga\",\n        tn: \"Tswana\",\n        tr: \"Turkish\",\n        tk: \"Turkmen\",\n        uk: \"Ukrainian\",\n        hsb: \"Upper Sorbian\",\n        ur: \"Urdu\",\n        ve: \"Venda\",\n        vi: \"Vietnamese\",\n        vo: \"Volapuk\",\n        wa: \"Walloon\",\n        cy: \"Welsh\",\n        xh: \"Xhosa\",\n        ji: \"Yiddish\",\n        zu: \"Zulu\"\n    })[t] && (this.internal.languageSettings.languageCode = t, !1 === this.internal.languageSettings.isSubscribed && (this.internal.events.subscribe(\"putCatalog\", function() {\n        this.internal.write(\"/Lang (\" + this.internal.languageSettings.languageCode + \")\");\n    }), this.internal.languageSettings.isSubscribed = !0)), this;\n}, Ht = E.API, Wt = Ht.getCharWidthsArray = function(e, n) {\n    var r, i, a = (n = n || {}).font || this.internal.getFont(), o = n.fontSize || this.internal.getFontSize(), s = n.charSpace || this.internal.getCharSpace(), u = n.widths ? n.widths : a.metadata.Unicode.widths, c = u.fof ? u.fof : 1, l = n.kerning ? n.kerning : a.metadata.Unicode.kerning, h = l.fof ? l.fof : 1, f = !1 !== n.doKerning, d = 0, p = e.length, g = 0, m = u[0] || c, v = [];\n    for(r = 0; r < p; r++)i = e.charCodeAt(r), \"function\" == typeof a.metadata.widthOfString ? v.push((a.metadata.widthOfGlyph(a.metadata.characterToGlyph(i)) + s * (1e3 / o) || 0) / 1e3) : (d = f && \"object\" === (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(l[i]) && !isNaN(parseInt(l[i][g], 10)) ? l[i][g] / h : 0, v.push((u[i] || m) / c + d)), g = i;\n    return v;\n}, Vt = Ht.getStringUnitWidth = function(t, e) {\n    var n = (e = e || {}).fontSize || this.internal.getFontSize(), r = e.font || this.internal.getFont(), i = e.charSpace || this.internal.getCharSpace();\n    return Ht.processArabic && (t = Ht.processArabic(t)), \"function\" == typeof r.metadata.widthOfString ? r.metadata.widthOfString(t, n, i) / n : Wt.apply(this, arguments).reduce(function(t, e) {\n        return t + e;\n    }, 0);\n}, Gt = function(t, e, n, r) {\n    for(var i = [], a = 0, o = t.length, s = 0; a !== o && s + e[a] < n;)s += e[a], a++;\n    i.push(t.slice(0, a));\n    var u = a;\n    for(s = 0; a !== o;)s + e[a] > r && (i.push(t.slice(u, a)), s = 0, u = a), s += e[a], a++;\n    return u !== a && i.push(t.slice(u, a)), i;\n}, Yt = function(t, e, n) {\n    n || (n = {});\n    var r, i, a, o, s, u, c, l = [], h = [\n        l\n    ], f = n.textIndent || 0, d = 0, p = 0, g = t.split(\" \"), m = Wt.apply(this, [\n        \" \",\n        n\n    ])[0];\n    if (u = -1 === n.lineIndent ? g[0].length + 2 : n.lineIndent || 0) {\n        var v = Array(u).join(\" \"), b = [];\n        g.map(function(t) {\n            (t = t.split(/\\s*\\n/)).length > 1 ? b = b.concat(t.map(function(t, e) {\n                return (e && t.length ? \"\\n\" : \"\") + t;\n            })) : b.push(t[0]);\n        }), g = b, u = Vt.apply(this, [\n            v,\n            n\n        ]);\n    }\n    for(a = 0, o = g.length; a < o; a++){\n        var y = 0;\n        if (r = g[a], u && \"\\n\" == r[0] && (r = r.substr(1), y = 1), f + d + (p = (i = Wt.apply(this, [\n            r,\n            n\n        ])).reduce(function(t, e) {\n            return t + e;\n        }, 0)) > e || y) {\n            if (p > e) {\n                for(s = Gt.apply(this, [\n                    r,\n                    i,\n                    e - (f + d),\n                    e\n                ]), l.push(s.shift()), l = [\n                    s.pop()\n                ]; s.length;)h.push([\n                    s.shift()\n                ]);\n                p = i.slice(r.length - (l[0] ? l[0].length : 0)).reduce(function(t, e) {\n                    return t + e;\n                }, 0);\n            } else l = [\n                r\n            ];\n            h.push(l), f = p + u, d = m;\n        } else l.push(r), f += d + p, d = m;\n    }\n    return c = u ? function(t, e) {\n        return (e ? v : \"\") + t.join(\" \");\n    } : function(t) {\n        return t.join(\" \");\n    }, h.map(c);\n}, Ht.splitTextToSize = function(t, e, n) {\n    var r, i = (n = n || {}).fontSize || this.internal.getFontSize(), a = (function(t) {\n        if (t.widths && t.kerning) return {\n            widths: t.widths,\n            kerning: t.kerning\n        };\n        var e = this.internal.getFont(t.fontName, t.fontStyle), n = \"Unicode\";\n        return e.metadata[n] ? {\n            widths: e.metadata[n].widths || {\n                0: 1\n            },\n            kerning: e.metadata[n].kerning || {}\n        } : {\n            font: e.metadata,\n            fontSize: this.internal.getFontSize(),\n            charSpace: this.internal.getCharSpace()\n        };\n    }).call(this, n);\n    r = Array.isArray(t) ? t : String(t).split(/\\r?\\n/);\n    var o = 1 * this.internal.scaleFactor * e / i;\n    a.textIndent = n.textIndent ? 1 * n.textIndent * this.internal.scaleFactor / i : 0, a.lineIndent = n.lineIndent;\n    var s, u, c = [];\n    for(s = 0, u = r.length; s < u; s++)c = c.concat(Yt.apply(this, [\n        r[s],\n        o,\n        a\n    ]));\n    return c;\n}, function(e) {\n    e.__fontmetrics__ = e.__fontmetrics__ || {};\n    for(var n = \"0123456789abcdef\", r = \"klmnopqrstuvwxyz\", i = {}, a = {}, o = 0; o < 16; o++)i[r[o]] = n[o], a[n[o]] = r[o];\n    var s = function(t) {\n        return \"0x\" + parseInt(t, 10).toString(16);\n    }, u = e.__fontmetrics__.compress = function(e) {\n        var n, r, i, o, c = [\n            \"{\"\n        ];\n        for(var l in e){\n            if (n = e[l], isNaN(parseInt(l, 10)) ? r = \"'\" + l + \"'\" : (l = parseInt(l, 10), r = (r = s(l).slice(2)).slice(0, -1) + a[r.slice(-1)]), \"number\" == typeof n) n < 0 ? (i = s(n).slice(3), o = \"-\") : (i = s(n).slice(2), o = \"\"), i = o + i.slice(0, -1) + a[i.slice(-1)];\n            else {\n                if (\"object\" !== (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(n)) throw new Error(\"Don't know what to do with value type \" + (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(n) + \".\");\n                i = u(n);\n            }\n            c.push(r + i);\n        }\n        return c.push(\"}\"), c.join(\"\");\n    }, c = e.__fontmetrics__.uncompress = function(t) {\n        if (\"string\" != typeof t) throw new Error(\"Invalid argument passed to uncompress.\");\n        for(var e, n, r, a, o = {}, s = 1, u = o, c = [], l = \"\", h = \"\", f = t.length - 1, d = 1; d < f; d += 1)\"'\" == (a = t[d]) ? e ? (r = e.join(\"\"), e = void 0) : e = [] : e ? e.push(a) : \"{\" == a ? (c.push([\n            u,\n            r\n        ]), u = {}, r = void 0) : \"}\" == a ? ((n = c.pop())[0][n[1]] = u, r = void 0, u = n[0]) : \"-\" == a ? s = -1 : void 0 === r ? i.hasOwnProperty(a) ? (l += i[a], r = parseInt(l, 16) * s, s = 1, l = \"\") : l += a : i.hasOwnProperty(a) ? (h += i[a], u[r] = parseInt(h, 16) * s, s = 1, r = void 0, h = \"\") : h += a;\n        return o;\n    }, l = {\n        codePages: [\n            \"WinAnsiEncoding\"\n        ],\n        WinAnsiEncoding: c(\"{19m8n201n9q201o9r201s9l201t9m201u8m201w9n201x9o201y8o202k8q202l8r202m9p202q8p20aw8k203k8t203t8v203u9v2cq8s212m9t15m8w15n9w2dw9s16k8u16l9u17s9z17x8y17y9y}\")\n    }, h = {\n        Unicode: {\n            Courier: l,\n            \"Courier-Bold\": l,\n            \"Courier-BoldOblique\": l,\n            \"Courier-Oblique\": l,\n            Helvetica: l,\n            \"Helvetica-Bold\": l,\n            \"Helvetica-BoldOblique\": l,\n            \"Helvetica-Oblique\": l,\n            \"Times-Roman\": l,\n            \"Times-Bold\": l,\n            \"Times-BoldItalic\": l,\n            \"Times-Italic\": l\n        }\n    }, f = {\n        Unicode: {\n            \"Courier-Oblique\": c(\"{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}\"),\n            \"Times-BoldItalic\": c(\"{'widths'{k3o2q4ycx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2r202m2n2n3m2o3m2p5n202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5n4l4m4m4m4n4m4o4s4p4m4q4m4r4s4s4y4t2r4u3m4v4m4w3x4x5t4y4s4z4s5k3x5l4s5m4m5n3r5o3x5p4s5q4m5r5t5s4m5t3x5u3x5v2l5w1w5x2l5y3t5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q2l6r3m6s3r6t1w6u1w6v3m6w1w6x4y6y3r6z3m7k3m7l3m7m2r7n2r7o1w7p3r7q2w7r4m7s3m7t2w7u2r7v2n7w1q7x2n7y3t202l3mcl4mal2ram3man3mao3map3mar3mas2lat4uau1uav3maw3way4uaz2lbk2sbl3t'fof'6obo2lbp3tbq3mbr1tbs2lbu1ybv3mbz3mck4m202k3mcm4mcn4mco4mcp4mcq5ycr4mcs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz2w203k6o212m6o2dw2l2cq2l3t3m3u2l17s3x19m3m}'kerning'{cl{4qu5kt5qt5rs17ss5ts}201s{201ss}201t{cks4lscmscnscoscpscls2wu2yu201ts}201x{2wu2yu}2k{201ts}2w{4qx5kx5ou5qx5rs17su5tu}2x{17su5tu5ou}2y{4qx5kx5ou5qx5rs17ss5ts}'fof'-6ofn{17sw5tw5ou5qw5rs}7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qs}3v{17su5tu5os5qs}7p{17su5tu}ck{4qu5kt5qt5rs17ss5ts}4l{4qu5kt5qt5rs17ss5ts}cm{4qu5kt5qt5rs17ss5ts}cn{4qu5kt5qt5rs17ss5ts}co{4qu5kt5qt5rs17ss5ts}cp{4qu5kt5qt5rs17ss5ts}6l{4qu5ou5qw5rt17su5tu}5q{ckuclucmucnucoucpu4lu}5r{ckuclucmucnucoucpu4lu}7q{cksclscmscnscoscps4ls}6p{4qu5ou5qw5rt17sw5tw}ek{4qu5ou5qw5rt17su5tu}el{4qu5ou5qw5rt17su5tu}em{4qu5ou5qw5rt17su5tu}en{4qu5ou5qw5rt17su5tu}eo{4qu5ou5qw5rt17su5tu}ep{4qu5ou5qw5rt17su5tu}es{17ss5ts5qs4qu}et{4qu5ou5qw5rt17sw5tw}eu{4qu5ou5qw5rt17ss5ts}ev{17ss5ts5qs4qu}6z{17sw5tw5ou5qw5rs}fm{17sw5tw5ou5qw5rs}7n{201ts}fo{17sw5tw5ou5qw5rs}fp{17sw5tw5ou5qw5rs}fq{17sw5tw5ou5qw5rs}7r{cksclscmscnscoscps4ls}fs{17sw5tw5ou5qw5rs}ft{17su5tu}fu{17su5tu}fv{17su5tu}fw{17su5tu}fz{cksclscmscnscoscps4ls}}}\"),\n            \"Helvetica-Bold\": c(\"{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}\"),\n            Courier: c(\"{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}\"),\n            \"Courier-BoldOblique\": c(\"{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}\"),\n            \"Times-Bold\": c(\"{'widths'{k3q2q5ncx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2l202m2n2n3m2o3m2p6o202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5x4l4s4m4m4n4s4o4s4p4m4q3x4r4y4s4y4t2r4u3m4v4y4w4m4x5y4y4s4z4y5k3x5l4y5m4s5n3r5o4m5p4s5q4s5r6o5s4s5t4s5u4m5v2l5w1w5x2l5y3u5z3m6k2l6l3m6m3r6n2w6o3r6p2w6q2l6r3m6s3r6t1w6u2l6v3r6w1w6x5n6y3r6z3m7k3r7l3r7m2w7n2r7o2l7p3r7q3m7r4s7s3m7t3m7u2w7v2r7w1q7x2r7y3o202l3mcl4sal2lam3man3mao3map3mar3mas2lat4uau1yav3maw3tay4uaz2lbk2sbl3t'fof'6obo2lbp3rbr1tbs2lbu2lbv3mbz3mck4s202k3mcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3rek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3m3u2l17s4s19m3m}'kerning'{cl{4qt5ks5ot5qy5rw17sv5tv}201t{cks4lscmscnscoscpscls4wv}2k{201ts}2w{4qu5ku7mu5os5qx5ru17su5tu}2x{17su5tu5ou5qs}2y{4qv5kv7mu5ot5qz5ru17su5tu}'fof'-6o7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qu}3v{17su5tu5os5qu}fu{17su5tu5ou5qu}7p{17su5tu5ou5qu}ck{4qt5ks5ot5qy5rw17sv5tv}4l{4qt5ks5ot5qy5rw17sv5tv}cm{4qt5ks5ot5qy5rw17sv5tv}cn{4qt5ks5ot5qy5rw17sv5tv}co{4qt5ks5ot5qy5rw17sv5tv}cp{4qt5ks5ot5qy5rw17sv5tv}6l{17st5tt5ou5qu}17s{ckuclucmucnucoucpu4lu4wu}5o{ckuclucmucnucoucpu4lu4wu}5q{ckzclzcmzcnzcozcpz4lz4wu}5r{ckxclxcmxcnxcoxcpx4lx4wu}5t{ckuclucmucnucoucpu4lu4wu}7q{ckuclucmucnucoucpu4lu}6p{17sw5tw5ou5qu}ek{17st5tt5qu}el{17st5tt5ou5qu}em{17st5tt5qu}en{17st5tt5qu}eo{17st5tt5qu}ep{17st5tt5ou5qu}es{17ss5ts5qu}et{17sw5tw5ou5qu}eu{17sw5tw5ou5qu}ev{17ss5ts5qu}6z{17sw5tw5ou5qu5rs}fm{17sw5tw5ou5qu5rs}fn{17sw5tw5ou5qu5rs}fo{17sw5tw5ou5qu5rs}fp{17sw5tw5ou5qu5rs}fq{17sw5tw5ou5qu5rs}7r{cktcltcmtcntcotcpt4lt5os}fs{17sw5tw5ou5qu5rs}ft{17su5tu5ou5qu}7m{5os}fv{17su5tu5ou5qu}fw{17su5tu5ou5qu}fz{cksclscmscnscoscps4ls}}}\"),\n            Symbol: c(\"{'widths'{k3uaw4r19m3m2k1t2l2l202m2y2n3m2p5n202q6o3k3m2s2l2t2l2v3r2w1t3m3m2y1t2z1wbk2sbl3r'fof'6o3n3m3o3m3p3m3q3m3r3m3s3m3t3m3u1w3v1w3w3r3x3r3y3r3z2wbp3t3l3m5v2l5x2l5z3m2q4yfr3r7v3k7w1o7x3k}'kerning'{'fof'-6o}}\"),\n            Helvetica: c(\"{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}\"),\n            \"Helvetica-BoldOblique\": c(\"{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}\"),\n            ZapfDingbats: c(\"{'widths'{k4u2k1w'fof'6o}'kerning'{'fof'-6o}}\"),\n            \"Courier-Bold\": c(\"{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}\"),\n            \"Times-Italic\": c(\"{'widths'{k3n2q4ycx2l201n3m201o5t201s2l201t2l201u2l201w3r201x3r201y3r2k1t2l2l202m2n2n3m2o3m2p5n202q5t2r1p2s2l2t2l2u3m2v4n2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w4n3x4n3y4n3z3m4k5w4l3x4m3x4n4m4o4s4p3x4q3x4r4s4s4s4t2l4u2w4v4m4w3r4x5n4y4m4z4s5k3x5l4s5m3x5n3m5o3r5p4s5q3x5r5n5s3x5t3r5u3r5v2r5w1w5x2r5y2u5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q1w6r3m6s3m6t1w6u1w6v2w6w1w6x4s6y3m6z3m7k3m7l3m7m2r7n2r7o1w7p3m7q2w7r4m7s2w7t2w7u2r7v2s7w1v7x2s7y3q202l3mcl3xal2ram3man3mao3map3mar3mas2lat4wau1vav3maw4nay4waz2lbk2sbl4n'fof'6obo2lbp3mbq3obr1tbs2lbu1zbv3mbz3mck3x202k3mcm3xcn3xco3xcp3xcq5tcr4mcs3xct3xcu3xcv3xcw2l2m2ucy2lcz2ldl4mdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr4nfs3mft3mfu3mfv3mfw3mfz2w203k6o212m6m2dw2l2cq2l3t3m3u2l17s3r19m3m}'kerning'{cl{5kt4qw}201s{201sw}201t{201tw2wy2yy6q-t}201x{2wy2yy}2k{201tw}2w{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}2x{17ss5ts5os}2y{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}'fof'-6o6t{17ss5ts5qs}7t{5os}3v{5qs}7p{17su5tu5qs}ck{5kt4qw}4l{5kt4qw}cm{5kt4qw}cn{5kt4qw}co{5kt4qw}cp{5kt4qw}6l{4qs5ks5ou5qw5ru17su5tu}17s{2ks}5q{ckvclvcmvcnvcovcpv4lv}5r{ckuclucmucnucoucpu4lu}5t{2ks}6p{4qs5ks5ou5qw5ru17su5tu}ek{4qs5ks5ou5qw5ru17su5tu}el{4qs5ks5ou5qw5ru17su5tu}em{4qs5ks5ou5qw5ru17su5tu}en{4qs5ks5ou5qw5ru17su5tu}eo{4qs5ks5ou5qw5ru17su5tu}ep{4qs5ks5ou5qw5ru17su5tu}es{5ks5qs4qs}et{4qs5ks5ou5qw5ru17su5tu}eu{4qs5ks5qw5ru17su5tu}ev{5ks5qs4qs}ex{17ss5ts5qs}6z{4qv5ks5ou5qw5ru17su5tu}fm{4qv5ks5ou5qw5ru17su5tu}fn{4qv5ks5ou5qw5ru17su5tu}fo{4qv5ks5ou5qw5ru17su5tu}fp{4qv5ks5ou5qw5ru17su5tu}fq{4qv5ks5ou5qw5ru17su5tu}7r{5os}fs{4qv5ks5ou5qw5ru17su5tu}ft{17su5tu5qs}fu{17su5tu5qs}fv{17su5tu5qs}fw{17su5tu5qs}}}\"),\n            \"Times-Roman\": c(\"{'widths'{k3n2q4ycx2l201n3m201o6o201s2l201t2l201u2l201w2w201x2w201y2w2k1t2l2l202m2n2n3m2o3m2p5n202q6o2r1m2s2l2t2l2u3m2v3s2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v1w3w3s3x3s3y3s3z2w4k5w4l4s4m4m4n4m4o4s4p3x4q3r4r4s4s4s4t2l4u2r4v4s4w3x4x5t4y4s4z4s5k3r5l4s5m4m5n3r5o3x5p4s5q4s5r5y5s4s5t4s5u3x5v2l5w1w5x2l5y2z5z3m6k2l6l2w6m3m6n2w6o3m6p2w6q2l6r3m6s3m6t1w6u1w6v3m6w1w6x4y6y3m6z3m7k3m7l3m7m2l7n2r7o1w7p3m7q3m7r4s7s3m7t3m7u2w7v3k7w1o7x3k7y3q202l3mcl4sal2lam3man3mao3map3mar3mas2lat4wau1vav3maw3say4waz2lbk2sbl3s'fof'6obo2lbp3mbq2xbr1tbs2lbu1zbv3mbz2wck4s202k3mcm4scn4sco4scp4scq5tcr4mcs3xct3xcu3xcv3xcw2l2m2tcy2lcz2ldl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek2wel2wem2wen2weo2wep2weq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr3sfs3mft3mfu3mfv3mfw3mfz3m203k6o212m6m2dw2l2cq2l3t3m3u1w17s4s19m3m}'kerning'{cl{4qs5ku17sw5ou5qy5rw201ss5tw201ws}201s{201ss}201t{ckw4lwcmwcnwcowcpwclw4wu201ts}2k{201ts}2w{4qs5kw5os5qx5ru17sx5tx}2x{17sw5tw5ou5qu}2y{4qs5kw5os5qx5ru17sx5tx}'fof'-6o7t{ckuclucmucnucoucpu4lu5os5rs}3u{17su5tu5qs}3v{17su5tu5qs}7p{17sw5tw5qs}ck{4qs5ku17sw5ou5qy5rw201ss5tw201ws}4l{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cm{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cn{4qs5ku17sw5ou5qy5rw201ss5tw201ws}co{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cp{4qs5ku17sw5ou5qy5rw201ss5tw201ws}6l{17su5tu5os5qw5rs}17s{2ktclvcmvcnvcovcpv4lv4wuckv}5o{ckwclwcmwcnwcowcpw4lw4wu}5q{ckyclycmycnycoycpy4ly4wu5ms}5r{cktcltcmtcntcotcpt4lt4ws}5t{2ktclvcmvcnvcovcpv4lv4wuckv}7q{cksclscmscnscoscps4ls}6p{17su5tu5qw5rs}ek{5qs5rs}el{17su5tu5os5qw5rs}em{17su5tu5os5qs5rs}en{17su5qs5rs}eo{5qs5rs}ep{17su5tu5os5qw5rs}es{5qs}et{17su5tu5qw5rs}eu{17su5tu5qs5rs}ev{5qs}6z{17sv5tv5os5qx5rs}fm{5os5qt5rs}fn{17sv5tv5os5qx5rs}fo{17sv5tv5os5qx5rs}fp{5os5qt5rs}fq{5os5qt5rs}7r{ckuclucmucnucoucpu4lu5os}fs{17sv5tv5os5qx5rs}ft{17ss5ts5qs}fu{17sw5tw5qs}fv{17sw5tw5qs}fw{17ss5ts5qs}fz{ckuclucmucnucoucpu4lu5os5rs}}}\"),\n            \"Helvetica-Oblique\": c(\"{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}\")\n        }\n    };\n    e.events.push([\n        \"addFont\",\n        function(t) {\n            var e = t.font, n = f.Unicode[e.postScriptName];\n            n && (e.metadata.Unicode = {}, e.metadata.Unicode.widths = n.widths, e.metadata.Unicode.kerning = n.kerning);\n            var r = h.Unicode[e.postScriptName];\n            r && (e.metadata.Unicode.encoding = r, e.encoding = r.codePages[0]);\n        }\n    ]);\n}(E.API), /**\n * @license\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */ function(t) {\n    var e = function(t) {\n        for(var e = t.length, n = new Uint8Array(e), r = 0; r < e; r++)n[r] = t.charCodeAt(r);\n        return n;\n    };\n    t.API.events.push([\n        \"addFont\",\n        function(n) {\n            var r = void 0, i = n.font, a = n.instance;\n            if (!i.isStandardFont) {\n                if (void 0 === a) throw new Error(\"Font does not exist in vFS, import fonts or remove declaration doc.addFont('\" + i.postScriptName + \"').\");\n                if (\"string\" != typeof (r = !1 === a.existsFileInVFS(i.postScriptName) ? a.loadFile(i.postScriptName) : a.getFileFromVFS(i.postScriptName))) throw new Error(\"Font is not stored as string-data in vFS, import fonts or remove declaration doc.addFont('\" + i.postScriptName + \"').\");\n                !function(n, r) {\n                    r = /^\\x00\\x01\\x00\\x00/.test(r) ? e(r) : e(f(r)), n.metadata = t.API.TTFFont.open(r), n.metadata.Unicode = n.metadata.Unicode || {\n                        encoding: {},\n                        kerning: {},\n                        widths: []\n                    }, n.metadata.glyIdsUsed = [\n                        0\n                    ];\n                }(i, r);\n            }\n        }\n    ]);\n}(E), E.API.addSvgAsImage = function(t, e, n, r, a, s, u, c) {\n    if (isNaN(e) || isNaN(n)) throw o.error(\"jsPDF.addSvgAsImage: Invalid coordinates\", arguments), new Error(\"Invalid coordinates passed to jsPDF.addSvgAsImage\");\n    if (isNaN(r) || isNaN(a)) throw o.error(\"jsPDF.addSvgAsImage: Invalid measurements\", arguments), new Error(\"Invalid measurements (width and/or height) passed to jsPDF.addSvgAsImage\");\n    var l = document.createElement(\"canvas\");\n    l.width = r, l.height = a;\n    var h = l.getContext(\"2d\");\n    h.fillStyle = \"#fff\", h.fillRect(0, 0, l.width, l.height);\n    var f = {\n        ignoreMouse: !0,\n        ignoreAnimation: !0,\n        ignoreDimensions: !0\n    }, d = this;\n    return (i.canvg ? Promise.resolve(i.canvg) : __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_canvg_lib_index_es_js\").then(__webpack_require__.bind(__webpack_require__, /*! canvg */ \"(app-pages-browser)/./node_modules/canvg/lib/index.es.js\"))).catch(function(t) {\n        return Promise.reject(new Error(\"Could not load canvg: \" + t));\n    }).then(function(t) {\n        return t.default ? t.default : t;\n    }).then(function(e) {\n        return e.fromString(h, t, f);\n    }, function() {\n        return Promise.reject(new Error(\"Could not load canvg.\"));\n    }).then(function(t) {\n        return t.render(f);\n    }).then(function() {\n        d.addImage(l.toDataURL(\"image/jpeg\", 1), e, n, r, a, u, c);\n    });\n}, E.API.putTotalPages = function(t) {\n    var e, n = 0;\n    parseInt(this.internal.getFont().id.substr(1), 10) < 15 ? (e = new RegExp(t, \"g\"), n = this.internal.getNumberOfPages()) : (e = new RegExp(this.pdfEscape16(t, this.internal.getFont()), \"g\"), n = this.pdfEscape16(this.internal.getNumberOfPages() + \"\", this.internal.getFont()));\n    for(var r = 1; r <= this.internal.getNumberOfPages(); r++)for(var i = 0; i < this.internal.pages[r].length; i++)this.internal.pages[r][i] = this.internal.pages[r][i].replace(e, n);\n    return this;\n}, E.API.viewerPreferences = function(e, n) {\n    var r;\n    e = e || {}, n = n || !1;\n    var i, a, o, s = {\n        HideToolbar: {\n            defaultValue: !1,\n            value: !1,\n            type: \"boolean\",\n            explicitSet: !1,\n            valueSet: [\n                !0,\n                !1\n            ],\n            pdfVersion: 1.3\n        },\n        HideMenubar: {\n            defaultValue: !1,\n            value: !1,\n            type: \"boolean\",\n            explicitSet: !1,\n            valueSet: [\n                !0,\n                !1\n            ],\n            pdfVersion: 1.3\n        },\n        HideWindowUI: {\n            defaultValue: !1,\n            value: !1,\n            type: \"boolean\",\n            explicitSet: !1,\n            valueSet: [\n                !0,\n                !1\n            ],\n            pdfVersion: 1.3\n        },\n        FitWindow: {\n            defaultValue: !1,\n            value: !1,\n            type: \"boolean\",\n            explicitSet: !1,\n            valueSet: [\n                !0,\n                !1\n            ],\n            pdfVersion: 1.3\n        },\n        CenterWindow: {\n            defaultValue: !1,\n            value: !1,\n            type: \"boolean\",\n            explicitSet: !1,\n            valueSet: [\n                !0,\n                !1\n            ],\n            pdfVersion: 1.3\n        },\n        DisplayDocTitle: {\n            defaultValue: !1,\n            value: !1,\n            type: \"boolean\",\n            explicitSet: !1,\n            valueSet: [\n                !0,\n                !1\n            ],\n            pdfVersion: 1.4\n        },\n        NonFullScreenPageMode: {\n            defaultValue: \"UseNone\",\n            value: \"UseNone\",\n            type: \"name\",\n            explicitSet: !1,\n            valueSet: [\n                \"UseNone\",\n                \"UseOutlines\",\n                \"UseThumbs\",\n                \"UseOC\"\n            ],\n            pdfVersion: 1.3\n        },\n        Direction: {\n            defaultValue: \"L2R\",\n            value: \"L2R\",\n            type: \"name\",\n            explicitSet: !1,\n            valueSet: [\n                \"L2R\",\n                \"R2L\"\n            ],\n            pdfVersion: 1.3\n        },\n        ViewArea: {\n            defaultValue: \"CropBox\",\n            value: \"CropBox\",\n            type: \"name\",\n            explicitSet: !1,\n            valueSet: [\n                \"MediaBox\",\n                \"CropBox\",\n                \"TrimBox\",\n                \"BleedBox\",\n                \"ArtBox\"\n            ],\n            pdfVersion: 1.4\n        },\n        ViewClip: {\n            defaultValue: \"CropBox\",\n            value: \"CropBox\",\n            type: \"name\",\n            explicitSet: !1,\n            valueSet: [\n                \"MediaBox\",\n                \"CropBox\",\n                \"TrimBox\",\n                \"BleedBox\",\n                \"ArtBox\"\n            ],\n            pdfVersion: 1.4\n        },\n        PrintArea: {\n            defaultValue: \"CropBox\",\n            value: \"CropBox\",\n            type: \"name\",\n            explicitSet: !1,\n            valueSet: [\n                \"MediaBox\",\n                \"CropBox\",\n                \"TrimBox\",\n                \"BleedBox\",\n                \"ArtBox\"\n            ],\n            pdfVersion: 1.4\n        },\n        PrintClip: {\n            defaultValue: \"CropBox\",\n            value: \"CropBox\",\n            type: \"name\",\n            explicitSet: !1,\n            valueSet: [\n                \"MediaBox\",\n                \"CropBox\",\n                \"TrimBox\",\n                \"BleedBox\",\n                \"ArtBox\"\n            ],\n            pdfVersion: 1.4\n        },\n        PrintScaling: {\n            defaultValue: \"AppDefault\",\n            value: \"AppDefault\",\n            type: \"name\",\n            explicitSet: !1,\n            valueSet: [\n                \"AppDefault\",\n                \"None\"\n            ],\n            pdfVersion: 1.6\n        },\n        Duplex: {\n            defaultValue: \"\",\n            value: \"none\",\n            type: \"name\",\n            explicitSet: !1,\n            valueSet: [\n                \"Simplex\",\n                \"DuplexFlipShortEdge\",\n                \"DuplexFlipLongEdge\",\n                \"none\"\n            ],\n            pdfVersion: 1.7\n        },\n        PickTrayByPDFSize: {\n            defaultValue: !1,\n            value: !1,\n            type: \"boolean\",\n            explicitSet: !1,\n            valueSet: [\n                !0,\n                !1\n            ],\n            pdfVersion: 1.7\n        },\n        PrintPageRange: {\n            defaultValue: \"\",\n            value: \"\",\n            type: \"array\",\n            explicitSet: !1,\n            valueSet: null,\n            pdfVersion: 1.7\n        },\n        NumCopies: {\n            defaultValue: 1,\n            value: 1,\n            type: \"integer\",\n            explicitSet: !1,\n            valueSet: null,\n            pdfVersion: 1.7\n        }\n    }, u = Object.keys(s), c = [], l = 0, h = 0, f = 0;\n    function d(t, e) {\n        var n, r = !1;\n        for(n = 0; n < t.length; n += 1)t[n] === e && (r = !0);\n        return r;\n    }\n    if (void 0 === this.internal.viewerpreferences && (this.internal.viewerpreferences = {}, this.internal.viewerpreferences.configuration = JSON.parse(JSON.stringify(s)), this.internal.viewerpreferences.isSubscribed = !1), r = this.internal.viewerpreferences.configuration, \"reset\" === e || !0 === n) {\n        var p = u.length;\n        for(f = 0; f < p; f += 1)r[u[f]].value = r[u[f]].defaultValue, r[u[f]].explicitSet = !1;\n    }\n    if (\"object\" === (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(e)) {\n        for(a in e)if (o = e[a], d(u, a) && void 0 !== o) {\n            if (\"boolean\" === r[a].type && \"boolean\" == typeof o) r[a].value = o;\n            else if (\"name\" === r[a].type && d(r[a].valueSet, o)) r[a].value = o;\n            else if (\"integer\" === r[a].type && Number.isInteger(o)) r[a].value = o;\n            else if (\"array\" === r[a].type) {\n                for(l = 0; l < o.length; l += 1)if (i = !0, 1 === o[l].length && \"number\" == typeof o[l][0]) c.push(String(o[l] - 1));\n                else if (o[l].length > 1) {\n                    for(h = 0; h < o[l].length; h += 1)\"number\" != typeof o[l][h] && (i = !1);\n                    !0 === i && c.push([\n                        o[l][0] - 1,\n                        o[l][1] - 1\n                    ].join(\" \"));\n                }\n                r[a].value = \"[\" + c.join(\" \") + \"]\";\n            } else r[a].value = r[a].defaultValue;\n            r[a].explicitSet = !0;\n        }\n    }\n    return !1 === this.internal.viewerpreferences.isSubscribed && (this.internal.events.subscribe(\"putCatalog\", function() {\n        var t, e = [];\n        for(t in r)!0 === r[t].explicitSet && (\"name\" === r[t].type ? e.push(\"/\" + t + \" /\" + r[t].value) : e.push(\"/\" + t + \" \" + r[t].value));\n        0 !== e.length && this.internal.write(\"/ViewerPreferences\\n<<\\n\" + e.join(\"\\n\") + \"\\n>>\");\n    }), this.internal.viewerpreferences.isSubscribed = !0), this.internal.viewerpreferences.configuration = r, this;\n}, /** ====================================================================\n * @license\n * jsPDF XMP metadata plugin\n * Copyright (c) 2016 Jussi Utunen, u-jussi@suomi24.fi\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n * ====================================================================\n */ function(t) {\n    var e = function() {\n        var t = '<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"><rdf:Description rdf:about=\"\" xmlns:jspdf=\"' + this.internal.__metadata__.namespaceuri + '\"><jspdf:metadata>', e = unescape(encodeURIComponent('<x:xmpmeta xmlns:x=\"adobe:ns:meta/\">')), n = unescape(encodeURIComponent(t)), r = unescape(encodeURIComponent(this.internal.__metadata__.metadata)), i = unescape(encodeURIComponent(\"</jspdf:metadata></rdf:Description></rdf:RDF>\")), a = unescape(encodeURIComponent(\"</x:xmpmeta>\")), o = n.length + r.length + i.length + e.length + a.length;\n        this.internal.__metadata__.metadata_object_number = this.internal.newObject(), this.internal.write(\"<< /Type /Metadata /Subtype /XML /Length \" + o + \" >>\"), this.internal.write(\"stream\"), this.internal.write(e + n + r + i + a), this.internal.write(\"endstream\"), this.internal.write(\"endobj\");\n    }, n = function() {\n        this.internal.__metadata__.metadata_object_number && this.internal.write(\"/Metadata \" + this.internal.__metadata__.metadata_object_number + \" 0 R\");\n    };\n    t.addMetadata = function(t, r) {\n        return void 0 === this.internal.__metadata__ && (this.internal.__metadata__ = {\n            metadata: t,\n            namespaceuri: r || \"http://jspdf.default.namespaceuri/\"\n        }, this.internal.events.subscribe(\"putCatalog\", n), this.internal.events.subscribe(\"postPutResources\", e)), this;\n    };\n}(E.API), function(t) {\n    var e = t.API, n = e.pdfEscape16 = function(t, e) {\n        for(var n, r = e.metadata.Unicode.widths, i = [\n            \"\",\n            \"0\",\n            \"00\",\n            \"000\",\n            \"0000\"\n        ], a = [\n            \"\"\n        ], o = 0, s = t.length; o < s; ++o){\n            if (n = e.metadata.characterToGlyph(t.charCodeAt(o)), e.metadata.glyIdsUsed.push(n), e.metadata.toUnicode[n] = t.charCodeAt(o), -1 == r.indexOf(n) && (r.push(n), r.push([\n                parseInt(e.metadata.widthOfGlyph(n), 10)\n            ])), \"0\" == n) return a.join(\"\");\n            n = n.toString(16), a.push(i[4 - n.length], n);\n        }\n        return a.join(\"\");\n    }, r = function(t) {\n        var e, n, r, i, a, o, s;\n        for(a = \"/CIDInit /ProcSet findresource begin\\n12 dict begin\\nbegincmap\\n/CIDSystemInfo <<\\n  /Registry (Adobe)\\n  /Ordering (UCS)\\n  /Supplement 0\\n>> def\\n/CMapName /Adobe-Identity-UCS def\\n/CMapType 2 def\\n1 begincodespacerange\\n<0000><ffff>\\nendcodespacerange\", r = [], o = 0, s = (n = Object.keys(t).sort(function(t, e) {\n            return t - e;\n        })).length; o < s; o++)e = n[o], r.length >= 100 && (a += \"\\n\" + r.length + \" beginbfchar\\n\" + r.join(\"\\n\") + \"\\nendbfchar\", r = []), void 0 !== t[e] && null !== t[e] && \"function\" == typeof t[e].toString && (i = (\"0000\" + t[e].toString(16)).slice(-4), e = (\"0000\" + (+e).toString(16)).slice(-4), r.push(\"<\" + e + \"><\" + i + \">\"));\n        return r.length && (a += \"\\n\" + r.length + \" beginbfchar\\n\" + r.join(\"\\n\") + \"\\nendbfchar\\n\"), a + \"endcmap\\nCMapName currentdict /CMap defineresource pop\\nend\\nend\";\n    };\n    e.events.push([\n        \"putFont\",\n        function(e) {\n            !function(e) {\n                var n = e.font, i = e.out, a = e.newObject, o = e.putStream;\n                if (n.metadata instanceof t.API.TTFFont && \"Identity-H\" === n.encoding) {\n                    for(var s = n.metadata.Unicode.widths, u = n.metadata.subset.encode(n.metadata.glyIdsUsed, 1), c = \"\", l = 0; l < u.length; l++)c += String.fromCharCode(u[l]);\n                    var h = a();\n                    o({\n                        data: c,\n                        addLength1: !0,\n                        objectId: h\n                    }), i(\"endobj\");\n                    var f = a();\n                    o({\n                        data: r(n.metadata.toUnicode),\n                        addLength1: !0,\n                        objectId: f\n                    }), i(\"endobj\");\n                    var d = a();\n                    i(\"<<\"), i(\"/Type /FontDescriptor\"), i(\"/FontName /\" + j(n.fontName)), i(\"/FontFile2 \" + h + \" 0 R\"), i(\"/FontBBox \" + t.API.PDFObject.convert(n.metadata.bbox)), i(\"/Flags \" + n.metadata.flags), i(\"/StemV \" + n.metadata.stemV), i(\"/ItalicAngle \" + n.metadata.italicAngle), i(\"/Ascent \" + n.metadata.ascender), i(\"/Descent \" + n.metadata.decender), i(\"/CapHeight \" + n.metadata.capHeight), i(\">>\"), i(\"endobj\");\n                    var p = a();\n                    i(\"<<\"), i(\"/Type /Font\"), i(\"/BaseFont /\" + j(n.fontName)), i(\"/FontDescriptor \" + d + \" 0 R\"), i(\"/W \" + t.API.PDFObject.convert(s)), i(\"/CIDToGIDMap /Identity\"), i(\"/DW 1000\"), i(\"/Subtype /CIDFontType2\"), i(\"/CIDSystemInfo\"), i(\"<<\"), i(\"/Supplement 0\"), i(\"/Registry (Adobe)\"), i(\"/Ordering (\" + n.encoding + \")\"), i(\">>\"), i(\">>\"), i(\"endobj\"), n.objectNumber = a(), i(\"<<\"), i(\"/Type /Font\"), i(\"/Subtype /Type0\"), i(\"/ToUnicode \" + f + \" 0 R\"), i(\"/BaseFont /\" + j(n.fontName)), i(\"/Encoding /\" + n.encoding), i(\"/DescendantFonts [\" + p + \" 0 R]\"), i(\">>\"), i(\"endobj\"), n.isAlreadyPutted = !0;\n                }\n            }(e);\n        }\n    ]), e.events.push([\n        \"putFont\",\n        function(e) {\n            !function(e) {\n                var n = e.font, i = e.out, a = e.newObject, o = e.putStream;\n                if (n.metadata instanceof t.API.TTFFont && \"WinAnsiEncoding\" === n.encoding) {\n                    for(var s = n.metadata.rawData, u = \"\", c = 0; c < s.length; c++)u += String.fromCharCode(s[c]);\n                    var l = a();\n                    o({\n                        data: u,\n                        addLength1: !0,\n                        objectId: l\n                    }), i(\"endobj\");\n                    var h = a();\n                    o({\n                        data: r(n.metadata.toUnicode),\n                        addLength1: !0,\n                        objectId: h\n                    }), i(\"endobj\");\n                    var f = a();\n                    i(\"<<\"), i(\"/Descent \" + n.metadata.decender), i(\"/CapHeight \" + n.metadata.capHeight), i(\"/StemV \" + n.metadata.stemV), i(\"/Type /FontDescriptor\"), i(\"/FontFile2 \" + l + \" 0 R\"), i(\"/Flags 96\"), i(\"/FontBBox \" + t.API.PDFObject.convert(n.metadata.bbox)), i(\"/FontName /\" + j(n.fontName)), i(\"/ItalicAngle \" + n.metadata.italicAngle), i(\"/Ascent \" + n.metadata.ascender), i(\">>\"), i(\"endobj\"), n.objectNumber = a();\n                    for(var d = 0; d < n.metadata.hmtx.widths.length; d++)n.metadata.hmtx.widths[d] = parseInt(n.metadata.hmtx.widths[d] * (1e3 / n.metadata.head.unitsPerEm));\n                    i(\"<</Subtype/TrueType/Type/Font/ToUnicode \" + h + \" 0 R/BaseFont/\" + j(n.fontName) + \"/FontDescriptor \" + f + \" 0 R/Encoding/\" + n.encoding + \" /FirstChar 29 /LastChar 255 /Widths \" + t.API.PDFObject.convert(n.metadata.hmtx.widths) + \">>\"), i(\"endobj\"), n.isAlreadyPutted = !0;\n                }\n            }(e);\n        }\n    ]);\n    var i = function(t) {\n        var e, r = t.text || \"\", i = t.x, a = t.y, o = t.options || {}, s = t.mutex || {}, u = s.pdfEscape, c = s.activeFontKey, l = s.fonts, h = c, f = \"\", d = 0, p = \"\", g = l[h].encoding;\n        if (\"Identity-H\" !== l[h].encoding) return {\n            text: r,\n            x: i,\n            y: a,\n            options: o,\n            mutex: s\n        };\n        for(p = r, h = c, Array.isArray(r) && (p = r[0]), d = 0; d < p.length; d += 1)l[h].metadata.hasOwnProperty(\"cmap\") && (e = l[h].metadata.cmap.unicode.codeMap[p[d].charCodeAt(0)]), e || p[d].charCodeAt(0) < 256 && l[h].metadata.hasOwnProperty(\"Unicode\") ? f += p[d] : f += \"\";\n        var m = \"\";\n        return parseInt(h.slice(1)) < 14 || \"WinAnsiEncoding\" === g ? m = u(f, h).split(\"\").map(function(t) {\n            return t.charCodeAt(0).toString(16);\n        }).join(\"\") : \"Identity-H\" === g && (m = n(f, l[h])), s.isHex = !0, {\n            text: m,\n            x: i,\n            y: a,\n            options: o,\n            mutex: s\n        };\n    };\n    e.events.push([\n        \"postProcessText\",\n        function(t) {\n            var e = t.text || \"\", n = [], r = {\n                text: e,\n                x: t.x,\n                y: t.y,\n                options: t.options,\n                mutex: t.mutex\n            };\n            if (Array.isArray(e)) {\n                var a = 0;\n                for(a = 0; a < e.length; a += 1)Array.isArray(e[a]) && 3 === e[a].length ? n.push([\n                    i(Object.assign({}, r, {\n                        text: e[a][0]\n                    })).text,\n                    e[a][1],\n                    e[a][2]\n                ]) : n.push(i(Object.assign({}, r, {\n                    text: e[a]\n                })).text);\n                t.text = n;\n            } else t.text = i(Object.assign({}, r, {\n                text: e\n            })).text;\n        }\n    ]);\n}(E), /**\n * @license\n * jsPDF virtual FileSystem functionality\n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */ function(t) {\n    var e = function() {\n        return void 0 === this.internal.vFS && (this.internal.vFS = {}), !0;\n    };\n    t.existsFileInVFS = function(t) {\n        return e.call(this), void 0 !== this.internal.vFS[t];\n    }, t.addFileToVFS = function(t, n) {\n        return e.call(this), this.internal.vFS[t] = n, this;\n    }, t.getFileFromVFS = function(t) {\n        return e.call(this), void 0 !== this.internal.vFS[t] ? this.internal.vFS[t] : null;\n    };\n}(E.API), /**\n * @license\n * Unicode Bidi Engine based on the work of Alex Shensis (@asthensis)\n * MIT License\n */ function(t) {\n    t.__bidiEngine__ = t.prototype.__bidiEngine__ = function(t) {\n        var n, r, i, a, o, s, u, c = e, l = [\n            [\n                0,\n                3,\n                0,\n                1,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                3,\n                0,\n                1,\n                2,\n                2,\n                0\n            ],\n            [\n                0,\n                3,\n                0,\n                17,\n                2,\n                0,\n                1\n            ],\n            [\n                0,\n                3,\n                5,\n                5,\n                4,\n                1,\n                0\n            ],\n            [\n                0,\n                3,\n                21,\n                21,\n                4,\n                0,\n                1\n            ],\n            [\n                0,\n                3,\n                5,\n                5,\n                4,\n                2,\n                0\n            ]\n        ], h = [\n            [\n                2,\n                0,\n                1,\n                1,\n                0,\n                1,\n                0\n            ],\n            [\n                2,\n                0,\n                1,\n                1,\n                0,\n                2,\n                0\n            ],\n            [\n                2,\n                0,\n                2,\n                1,\n                3,\n                2,\n                0\n            ],\n            [\n                2,\n                0,\n                2,\n                33,\n                3,\n                1,\n                1\n            ]\n        ], f = {\n            L: 0,\n            R: 1,\n            EN: 2,\n            AN: 3,\n            N: 4,\n            B: 5,\n            S: 6\n        }, d = {\n            0: 0,\n            5: 1,\n            6: 2,\n            7: 3,\n            32: 4,\n            251: 5,\n            254: 6,\n            255: 7\n        }, p = [\n            \"(\",\n            \")\",\n            \"(\",\n            \"<\",\n            \">\",\n            \"<\",\n            \"[\",\n            \"]\",\n            \"[\",\n            \"{\",\n            \"}\",\n            \"{\",\n            \"\\xab\",\n            \"\\xbb\",\n            \"\\xab\",\n            \"‹\",\n            \"›\",\n            \"‹\",\n            \"⁅\",\n            \"⁆\",\n            \"⁅\",\n            \"⁽\",\n            \"⁾\",\n            \"⁽\",\n            \"₍\",\n            \"₎\",\n            \"₍\",\n            \"≤\",\n            \"≥\",\n            \"≤\",\n            \"〈\",\n            \"〉\",\n            \"〈\",\n            \"﹙\",\n            \"﹚\",\n            \"﹙\",\n            \"﹛\",\n            \"﹜\",\n            \"﹛\",\n            \"﹝\",\n            \"﹞\",\n            \"﹝\",\n            \"﹤\",\n            \"﹥\",\n            \"﹤\"\n        ], g = new RegExp(/^([1-4|9]|1[0-9]|2[0-9]|3[0168]|4[04589]|5[012]|7[78]|159|16[0-9]|17[0-2]|21[569]|22[03489]|250)$/), m = !1, v = 0;\n        this.__bidiEngine__ = {};\n        var b = function(t) {\n            var e = t.charCodeAt(), n = e >> 8, r = d[n];\n            return void 0 !== r ? c[256 * r + (255 & e)] : 252 === n || 253 === n ? \"AL\" : g.test(n) ? \"L\" : 8 === n ? \"R\" : \"N\";\n        }, y = function(t) {\n            for(var e, n = 0; n < t.length; n++){\n                if (\"L\" === (e = b(t.charAt(n)))) return !1;\n                if (\"R\" === e) return !0;\n            }\n            return !1;\n        }, w = function(t, e, o, s) {\n            var u, c, l, h, f = e[s];\n            switch(f){\n                case \"L\":\n                case \"R\":\n                case \"LRE\":\n                case \"RLE\":\n                case \"LRO\":\n                case \"RLO\":\n                case \"PDF\":\n                    m = !1;\n                    break;\n                case \"N\":\n                case \"AN\":\n                    break;\n                case \"EN\":\n                    m && (f = \"AN\");\n                    break;\n                case \"AL\":\n                    m = !0, f = \"R\";\n                    break;\n                case \"WS\":\n                case \"BN\":\n                    f = \"N\";\n                    break;\n                case \"CS\":\n                    s < 1 || s + 1 >= e.length || \"EN\" !== (u = o[s - 1]) && \"AN\" !== u || \"EN\" !== (c = e[s + 1]) && \"AN\" !== c ? f = \"N\" : m && (c = \"AN\"), f = c === u ? c : \"N\";\n                    break;\n                case \"ES\":\n                    f = \"EN\" === (u = s > 0 ? o[s - 1] : \"B\") && s + 1 < e.length && \"EN\" === e[s + 1] ? \"EN\" : \"N\";\n                    break;\n                case \"ET\":\n                    if (s > 0 && \"EN\" === o[s - 1]) {\n                        f = \"EN\";\n                        break;\n                    }\n                    if (m) {\n                        f = \"N\";\n                        break;\n                    }\n                    for(l = s + 1, h = e.length; l < h && \"ET\" === e[l];)l++;\n                    f = l < h && \"EN\" === e[l] ? \"EN\" : \"N\";\n                    break;\n                case \"NSM\":\n                    if (i && !a) {\n                        for(h = e.length, l = s + 1; l < h && \"NSM\" === e[l];)l++;\n                        if (l < h) {\n                            var d = t[s], p = d >= 1425 && d <= 2303 || 64286 === d;\n                            if (u = e[l], p && (\"R\" === u || \"AL\" === u)) {\n                                f = \"R\";\n                                break;\n                            }\n                        }\n                    }\n                    f = s < 1 || \"B\" === (u = e[s - 1]) ? \"N\" : o[s - 1];\n                    break;\n                case \"B\":\n                    m = !1, n = !0, f = v;\n                    break;\n                case \"S\":\n                    r = !0, f = \"N\";\n            }\n            return f;\n        }, N = function(t, e, n) {\n            var r = t.split(\"\");\n            return n && L(r, n, {\n                hiLevel: v\n            }), r.reverse(), e && e.reverse(), r.join(\"\");\n        }, L = function(t, e, i) {\n            var a, o, s, u, c, d = -1, p = t.length, g = 0, y = [], N = v ? h : l, L = [];\n            for(m = !1, n = !1, r = !1, o = 0; o < p; o++)L[o] = b(t[o]);\n            for(s = 0; s < p; s++){\n                if (c = g, y[s] = w(t, L, y, s), a = 240 & (g = N[c][f[y[s]]]), g &= 15, e[s] = u = N[g][5], a > 0) if (16 === a) {\n                    for(o = d; o < s; o++)e[o] = 1;\n                    d = -1;\n                } else d = -1;\n                if (N[g][6]) -1 === d && (d = s);\n                else if (d > -1) {\n                    for(o = d; o < s; o++)e[o] = u;\n                    d = -1;\n                }\n                \"B\" === L[s] && (e[s] = 0), i.hiLevel |= u;\n            }\n            r && function(t, e, n) {\n                for(var r = 0; r < n; r++)if (\"S\" === t[r]) {\n                    e[r] = v;\n                    for(var i = r - 1; i >= 0 && \"WS\" === t[i]; i--)e[i] = v;\n                }\n            }(L, e, p);\n        }, x = function(t, e, r, i, a) {\n            if (!(a.hiLevel < t)) {\n                if (1 === t && 1 === v && !n) return e.reverse(), void (r && r.reverse());\n                for(var o, s, u, c, l = e.length, h = 0; h < l;){\n                    if (i[h] >= t) {\n                        for(u = h + 1; u < l && i[u] >= t;)u++;\n                        for(c = h, s = u - 1; c < s; c++, s--)o = e[c], e[c] = e[s], e[s] = o, r && (o = r[c], r[c] = r[s], r[s] = o);\n                        h = u;\n                    }\n                    h++;\n                }\n            }\n        }, A = function(t, e, n) {\n            var r = t.split(\"\"), i = {\n                hiLevel: v\n            };\n            return n || (n = []), L(r, n, i), function(t, e, n) {\n                if (0 !== n.hiLevel && u) for(var r, i = 0; i < t.length; i++)1 === e[i] && (r = p.indexOf(t[i])) >= 0 && (t[i] = p[r + 1]);\n            }(r, n, i), x(2, r, e, n, i), x(1, r, e, n, i), r.join(\"\");\n        };\n        return this.__bidiEngine__.doBidiReorder = function(t, e, n) {\n            if (function(t, e) {\n                if (e) for(var n = 0; n < t.length; n++)e[n] = n;\n                void 0 === a && (a = y(t)), void 0 === s && (s = y(t));\n            }(t, e), i || !o || s) if (i && o && a ^ s) v = a ? 1 : 0, t = N(t, e, n);\n            else if (!i && o && s) v = a ? 1 : 0, t = A(t, e, n), t = N(t, e);\n            else if (!i || a || o || s) {\n                if (i && !o && a ^ s) t = N(t, e), a ? (v = 0, t = A(t, e, n)) : (v = 1, t = A(t, e, n), t = N(t, e));\n                else if (i && a && !o && s) v = 1, t = A(t, e, n), t = N(t, e);\n                else if (!i && !o && a ^ s) {\n                    var r = u;\n                    a ? (v = 1, t = A(t, e, n), v = 0, u = !1, t = A(t, e, n), u = r) : (v = 0, t = A(t, e, n), t = N(t, e), v = 1, u = !1, t = A(t, e, n), u = r, t = N(t, e));\n                }\n            } else v = 0, t = A(t, e, n);\n            else v = a ? 1 : 0, t = A(t, e, n);\n            return t;\n        }, this.__bidiEngine__.setOptions = function(t) {\n            t && (i = t.isInputVisual, o = t.isOutputVisual, a = t.isInputRtl, s = t.isOutputRtl, u = t.isSymmetricSwapping);\n        }, this.__bidiEngine__.setOptions(t), this.__bidiEngine__;\n    };\n    var e = [\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"S\",\n        \"B\",\n        \"S\",\n        \"WS\",\n        \"B\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"B\",\n        \"B\",\n        \"B\",\n        \"S\",\n        \"WS\",\n        \"N\",\n        \"N\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"ES\",\n        \"CS\",\n        \"ES\",\n        \"CS\",\n        \"CS\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"CS\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"B\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"CS\",\n        \"N\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"L\",\n        \"N\",\n        \"N\",\n        \"BN\",\n        \"N\",\n        \"N\",\n        \"ET\",\n        \"ET\",\n        \"EN\",\n        \"EN\",\n        \"N\",\n        \"L\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"EN\",\n        \"L\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"N\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"N\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"N\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"N\",\n        \"N\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"N\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"N\",\n        \"L\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"ET\",\n        \"N\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"R\",\n        \"NSM\",\n        \"R\",\n        \"NSM\",\n        \"NSM\",\n        \"R\",\n        \"NSM\",\n        \"NSM\",\n        \"R\",\n        \"NSM\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"AN\",\n        \"AN\",\n        \"AN\",\n        \"AN\",\n        \"AN\",\n        \"AN\",\n        \"N\",\n        \"N\",\n        \"AL\",\n        \"ET\",\n        \"ET\",\n        \"AL\",\n        \"CS\",\n        \"AL\",\n        \"N\",\n        \"N\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"AL\",\n        \"AL\",\n        \"N\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"AN\",\n        \"AN\",\n        \"AN\",\n        \"AN\",\n        \"AN\",\n        \"AN\",\n        \"AN\",\n        \"AN\",\n        \"AN\",\n        \"AN\",\n        \"ET\",\n        \"AN\",\n        \"AN\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"NSM\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"AN\",\n        \"N\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"AL\",\n        \"AL\",\n        \"NSM\",\n        \"NSM\",\n        \"N\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"AL\",\n        \"AL\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"N\",\n        \"AL\",\n        \"AL\",\n        \"NSM\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"N\",\n        \"N\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"AL\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"R\",\n        \"R\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"R\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"WS\",\n        \"WS\",\n        \"WS\",\n        \"WS\",\n        \"WS\",\n        \"WS\",\n        \"WS\",\n        \"WS\",\n        \"WS\",\n        \"WS\",\n        \"WS\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"L\",\n        \"R\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"WS\",\n        \"B\",\n        \"LRE\",\n        \"RLE\",\n        \"PDF\",\n        \"LRO\",\n        \"RLO\",\n        \"CS\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"CS\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"WS\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"N\",\n        \"LRI\",\n        \"RLI\",\n        \"FSI\",\n        \"PDI\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"BN\",\n        \"EN\",\n        \"L\",\n        \"N\",\n        \"N\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"ES\",\n        \"ES\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"L\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"ES\",\n        \"ES\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"R\",\n        \"NSM\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"ES\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"N\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"N\",\n        \"R\",\n        \"N\",\n        \"R\",\n        \"R\",\n        \"N\",\n        \"R\",\n        \"R\",\n        \"N\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"R\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"NSM\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"CS\",\n        \"N\",\n        \"CS\",\n        \"N\",\n        \"N\",\n        \"CS\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"ET\",\n        \"N\",\n        \"N\",\n        \"ES\",\n        \"ES\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"ET\",\n        \"ET\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"N\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"AL\",\n        \"N\",\n        \"N\",\n        \"BN\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"ET\",\n        \"ET\",\n        \"ET\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"ES\",\n        \"CS\",\n        \"ES\",\n        \"CS\",\n        \"CS\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"EN\",\n        \"CS\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"N\",\n        \"N\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"N\",\n        \"N\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"N\",\n        \"N\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"ET\",\n        \"ET\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"ET\",\n        \"ET\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\",\n        \"N\"\n    ], n = new t.__bidiEngine__({\n        isInputVisual: !0\n    });\n    t.API.events.push([\n        \"postProcessText\",\n        function(t) {\n            var e = t.text;\n            t.x, t.y;\n            var r = t.options || {};\n            t.mutex, r.lang;\n            var i = [];\n            if (r.isInputVisual = \"boolean\" != typeof r.isInputVisual || r.isInputVisual, n.setOptions(r), \"[object Array]\" === Object.prototype.toString.call(e)) {\n                var a = 0;\n                for(i = [], a = 0; a < e.length; a += 1)\"[object Array]\" === Object.prototype.toString.call(e[a]) ? i.push([\n                    n.doBidiReorder(e[a][0]),\n                    e[a][1],\n                    e[a][2]\n                ]) : i.push([\n                    n.doBidiReorder(e[a])\n                ]);\n                t.text = i;\n            } else t.text = n.doBidiReorder(e);\n            n.setOptions({\n                isInputVisual: !0\n            });\n        }\n    ]);\n}(E), E.API.TTFFont = function() {\n    function t(t) {\n        var e;\n        if (this.rawData = t, e = this.contents = new fe(t), this.contents.pos = 4, \"ttcf\" === e.readString(4)) throw new Error(\"TTCF not supported.\");\n        e.pos = 0, this.parse(), this.subset = new je(this), this.registerTTF();\n    }\n    return t.open = function(e) {\n        return new t(e);\n    }, t.prototype.parse = function() {\n        return this.directory = new de(this.contents), this.head = new me(this), this.name = new xe(this), this.cmap = new be(this), this.toUnicode = {}, this.hhea = new ye(this), this.maxp = new Ae(this), this.hmtx = new Se(this), this.post = new Ne(this), this.os2 = new we(this), this.loca = new Ie(this), this.glyf = new Pe(this), this.ascender = this.os2.exists && this.os2.ascender || this.hhea.ascender, this.decender = this.os2.exists && this.os2.decender || this.hhea.decender, this.lineGap = this.os2.exists && this.os2.lineGap || this.hhea.lineGap, this.bbox = [\n            this.head.xMin,\n            this.head.yMin,\n            this.head.xMax,\n            this.head.yMax\n        ];\n    }, t.prototype.registerTTF = function() {\n        var t, e, n, r, i;\n        if (this.scaleFactor = 1e3 / this.head.unitsPerEm, this.bbox = (function() {\n            var e, n, r, i;\n            for(i = [], e = 0, n = (r = this.bbox).length; e < n; e++)t = r[e], i.push(Math.round(t * this.scaleFactor));\n            return i;\n        }).call(this), this.stemV = 0, this.post.exists ? (n = 255 & (r = this.post.italic_angle), 32768 & (e = r >> 16) && (e = -(1 + (65535 ^ e))), this.italicAngle = +(e + \".\" + n)) : this.italicAngle = 0, this.ascender = Math.round(this.ascender * this.scaleFactor), this.decender = Math.round(this.decender * this.scaleFactor), this.lineGap = Math.round(this.lineGap * this.scaleFactor), this.capHeight = this.os2.exists && this.os2.capHeight || this.ascender, this.xHeight = this.os2.exists && this.os2.xHeight || 0, this.familyClass = (this.os2.exists && this.os2.familyClass || 0) >> 8, this.isSerif = 1 === (i = this.familyClass) || 2 === i || 3 === i || 4 === i || 5 === i || 7 === i, this.isScript = 10 === this.familyClass, this.flags = 0, this.post.isFixedPitch && (this.flags |= 1), this.isSerif && (this.flags |= 2), this.isScript && (this.flags |= 8), 0 !== this.italicAngle && (this.flags |= 64), this.flags |= 32, !this.cmap.unicode) throw new Error(\"No unicode cmap for font\");\n    }, t.prototype.characterToGlyph = function(t) {\n        var e;\n        return (null != (e = this.cmap.unicode) ? e.codeMap[t] : void 0) || 0;\n    }, t.prototype.widthOfGlyph = function(t) {\n        var e;\n        return e = 1e3 / this.head.unitsPerEm, this.hmtx.forGlyph(t).advance * e;\n    }, t.prototype.widthOfString = function(t, e, n) {\n        var r, i, a, o;\n        for(a = 0, i = 0, o = (t = \"\" + t).length; 0 <= o ? i < o : i > o; i = 0 <= o ? ++i : --i)r = t.charCodeAt(i), a += this.widthOfGlyph(this.characterToGlyph(r)) + n * (1e3 / e) || 0;\n        return a * (e / 1e3);\n    }, t.prototype.lineHeight = function(t, e) {\n        var n;\n        return null == e && (e = !1), n = e ? this.lineGap : 0, (this.ascender + n - this.decender) / 1e3 * t;\n    }, t;\n}();\nvar he, fe = function() {\n    function t(t) {\n        this.data = null != t ? t : [], this.pos = 0, this.length = this.data.length;\n    }\n    return t.prototype.readByte = function() {\n        return this.data[this.pos++];\n    }, t.prototype.writeByte = function(t) {\n        return this.data[this.pos++] = t;\n    }, t.prototype.readUInt32 = function() {\n        return 16777216 * this.readByte() + (this.readByte() << 16) + (this.readByte() << 8) + this.readByte();\n    }, t.prototype.writeUInt32 = function(t) {\n        return this.writeByte(t >>> 24 & 255), this.writeByte(t >> 16 & 255), this.writeByte(t >> 8 & 255), this.writeByte(255 & t);\n    }, t.prototype.readInt32 = function() {\n        var t;\n        return (t = this.readUInt32()) >= 2147483648 ? t - 4294967296 : t;\n    }, t.prototype.writeInt32 = function(t) {\n        return t < 0 && (t += 4294967296), this.writeUInt32(t);\n    }, t.prototype.readUInt16 = function() {\n        return this.readByte() << 8 | this.readByte();\n    }, t.prototype.writeUInt16 = function(t) {\n        return this.writeByte(t >> 8 & 255), this.writeByte(255 & t);\n    }, t.prototype.readInt16 = function() {\n        var t;\n        return (t = this.readUInt16()) >= 32768 ? t - 65536 : t;\n    }, t.prototype.writeInt16 = function(t) {\n        return t < 0 && (t += 65536), this.writeUInt16(t);\n    }, t.prototype.readString = function(t) {\n        var e, n;\n        for(n = [], e = 0; 0 <= t ? e < t : e > t; e = 0 <= t ? ++e : --e)n[e] = String.fromCharCode(this.readByte());\n        return n.join(\"\");\n    }, t.prototype.writeString = function(t) {\n        var e, n, r;\n        for(r = [], e = 0, n = t.length; 0 <= n ? e < n : e > n; e = 0 <= n ? ++e : --e)r.push(this.writeByte(t.charCodeAt(e)));\n        return r;\n    }, t.prototype.readShort = function() {\n        return this.readInt16();\n    }, t.prototype.writeShort = function(t) {\n        return this.writeInt16(t);\n    }, t.prototype.readLongLong = function() {\n        var t, e, n, r, i, a, o, s;\n        return t = this.readByte(), e = this.readByte(), n = this.readByte(), r = this.readByte(), i = this.readByte(), a = this.readByte(), o = this.readByte(), s = this.readByte(), 128 & t ? -1 * (72057594037927940 * (255 ^ t) + 281474976710656 * (255 ^ e) + 1099511627776 * (255 ^ n) + 4294967296 * (255 ^ r) + 16777216 * (255 ^ i) + 65536 * (255 ^ a) + 256 * (255 ^ o) + (255 ^ s) + 1) : 72057594037927940 * t + 281474976710656 * e + 1099511627776 * n + 4294967296 * r + 16777216 * i + 65536 * a + 256 * o + s;\n    }, t.prototype.writeLongLong = function(t) {\n        var e, n;\n        return e = Math.floor(t / 4294967296), n = 4294967295 & t, this.writeByte(e >> 24 & 255), this.writeByte(e >> 16 & 255), this.writeByte(e >> 8 & 255), this.writeByte(255 & e), this.writeByte(n >> 24 & 255), this.writeByte(n >> 16 & 255), this.writeByte(n >> 8 & 255), this.writeByte(255 & n);\n    }, t.prototype.readInt = function() {\n        return this.readInt32();\n    }, t.prototype.writeInt = function(t) {\n        return this.writeInt32(t);\n    }, t.prototype.read = function(t) {\n        var e, n;\n        for(e = [], n = 0; 0 <= t ? n < t : n > t; n = 0 <= t ? ++n : --n)e.push(this.readByte());\n        return e;\n    }, t.prototype.write = function(t) {\n        var e, n, r, i;\n        for(i = [], n = 0, r = t.length; n < r; n++)e = t[n], i.push(this.writeByte(e));\n        return i;\n    }, t;\n}(), de = function() {\n    var t;\n    function e(t) {\n        var e, n, r;\n        for(this.scalarType = t.readInt(), this.tableCount = t.readShort(), this.searchRange = t.readShort(), this.entrySelector = t.readShort(), this.rangeShift = t.readShort(), this.tables = {}, n = 0, r = this.tableCount; 0 <= r ? n < r : n > r; n = 0 <= r ? ++n : --n)e = {\n            tag: t.readString(4),\n            checksum: t.readInt(),\n            offset: t.readInt(),\n            length: t.readInt()\n        }, this.tables[e.tag] = e;\n    }\n    return e.prototype.encode = function(e) {\n        var n, r, i, a, o, s, u, c, l, h, f, d, p;\n        for(p in f = Object.keys(e).length, s = Math.log(2), l = 16 * Math.floor(Math.log(f) / s), a = Math.floor(l / s), c = 16 * f - l, (r = new fe).writeInt(this.scalarType), r.writeShort(f), r.writeShort(l), r.writeShort(a), r.writeShort(c), i = 16 * f, u = r.pos + i, o = null, d = [], e)for(h = e[p], r.writeString(p), r.writeInt(t(h)), r.writeInt(u), r.writeInt(h.length), d = d.concat(h), \"head\" === p && (o = u), u += h.length; u % 4;)d.push(0), u++;\n        return r.write(d), n = 2981146554 - t(r.data), r.pos = o + 8, r.writeUInt32(n), r.data;\n    }, t = function(t) {\n        var e, n, r, i;\n        for(t = _e.call(t); t.length % 4;)t.push(0);\n        for(r = new fe(t), n = 0, e = 0, i = t.length; e < i; e = e += 4)n += r.readUInt32();\n        return 4294967295 & n;\n    }, e;\n}(), pe = {}.hasOwnProperty, ge = function(t, e) {\n    for(var n in e)pe.call(e, n) && (t[n] = e[n]);\n    function r() {\n        this.constructor = t;\n    }\n    return r.prototype = e.prototype, t.prototype = new r, t.__super__ = e.prototype, t;\n};\nhe = function() {\n    function t(t) {\n        var e;\n        this.file = t, e = this.file.directory.tables[this.tag], this.exists = !!e, e && (this.offset = e.offset, this.length = e.length, this.parse(this.file.contents));\n    }\n    return t.prototype.parse = function() {}, t.prototype.encode = function() {}, t.prototype.raw = function() {\n        return this.exists ? (this.file.contents.pos = this.offset, this.file.contents.read(this.length)) : null;\n    }, t;\n}();\nvar me = function() {\n    function t() {\n        return t.__super__.constructor.apply(this, arguments);\n    }\n    return ge(t, he), t.prototype.tag = \"head\", t.prototype.parse = function(t) {\n        return t.pos = this.offset, this.version = t.readInt(), this.revision = t.readInt(), this.checkSumAdjustment = t.readInt(), this.magicNumber = t.readInt(), this.flags = t.readShort(), this.unitsPerEm = t.readShort(), this.created = t.readLongLong(), this.modified = t.readLongLong(), this.xMin = t.readShort(), this.yMin = t.readShort(), this.xMax = t.readShort(), this.yMax = t.readShort(), this.macStyle = t.readShort(), this.lowestRecPPEM = t.readShort(), this.fontDirectionHint = t.readShort(), this.indexToLocFormat = t.readShort(), this.glyphDataFormat = t.readShort();\n    }, t.prototype.encode = function(t) {\n        var e;\n        return (e = new fe).writeInt(this.version), e.writeInt(this.revision), e.writeInt(this.checkSumAdjustment), e.writeInt(this.magicNumber), e.writeShort(this.flags), e.writeShort(this.unitsPerEm), e.writeLongLong(this.created), e.writeLongLong(this.modified), e.writeShort(this.xMin), e.writeShort(this.yMin), e.writeShort(this.xMax), e.writeShort(this.yMax), e.writeShort(this.macStyle), e.writeShort(this.lowestRecPPEM), e.writeShort(this.fontDirectionHint), e.writeShort(t), e.writeShort(this.glyphDataFormat), e.data;\n    }, t;\n}(), ve = function() {\n    function t(t, e) {\n        var n, r, i, a, o, s, u, c, l, h, f, d, p, g, m, v, b;\n        switch(this.platformID = t.readUInt16(), this.encodingID = t.readShort(), this.offset = e + t.readInt(), l = t.pos, t.pos = this.offset, this.format = t.readUInt16(), this.length = t.readUInt16(), this.language = t.readUInt16(), this.isUnicode = 3 === this.platformID && 1 === this.encodingID && 4 === this.format || 0 === this.platformID && 4 === this.format, this.codeMap = {}, this.format){\n            case 0:\n                for(s = 0; s < 256; ++s)this.codeMap[s] = t.readByte();\n                break;\n            case 4:\n                for(f = t.readUInt16(), h = f / 2, t.pos += 6, i = function() {\n                    var e, n;\n                    for(n = [], s = e = 0; 0 <= h ? e < h : e > h; s = 0 <= h ? ++e : --e)n.push(t.readUInt16());\n                    return n;\n                }(), t.pos += 2, p = function() {\n                    var e, n;\n                    for(n = [], s = e = 0; 0 <= h ? e < h : e > h; s = 0 <= h ? ++e : --e)n.push(t.readUInt16());\n                    return n;\n                }(), u = function() {\n                    var e, n;\n                    for(n = [], s = e = 0; 0 <= h ? e < h : e > h; s = 0 <= h ? ++e : --e)n.push(t.readUInt16());\n                    return n;\n                }(), c = function() {\n                    var e, n;\n                    for(n = [], s = e = 0; 0 <= h ? e < h : e > h; s = 0 <= h ? ++e : --e)n.push(t.readUInt16());\n                    return n;\n                }(), r = (this.length - t.pos + this.offset) / 2, o = function() {\n                    var e, n;\n                    for(n = [], s = e = 0; 0 <= r ? e < r : e > r; s = 0 <= r ? ++e : --e)n.push(t.readUInt16());\n                    return n;\n                }(), s = m = 0, b = i.length; m < b; s = ++m)for(g = i[s], n = v = d = p[s]; d <= g ? v <= g : v >= g; n = d <= g ? ++v : --v)0 === c[s] ? a = n + u[s] : 0 !== (a = o[c[s] / 2 + (n - d) - (h - s)] || 0) && (a += u[s]), this.codeMap[n] = 65535 & a;\n        }\n        t.pos = l;\n    }\n    return t.encode = function(t, e) {\n        var n, r, i, a, o, s, u, c, l, h, f, d, p, g, m, v, b, y, w, N, L, x, A, S, _, P, k, F, I, j, C, O, B, M, q, E, R, D, T, z, U, H, W, V, G, Y;\n        switch(F = new fe, a = Object.keys(t).sort(function(t, e) {\n            return t - e;\n        }), e){\n            case \"macroman\":\n                for(p = 0, g = function() {\n                    var t = [];\n                    for(d = 0; d < 256; ++d)t.push(0);\n                    return t;\n                }(), v = {\n                    0: 0\n                }, i = {}, I = 0, B = a.length; I < B; I++)null == v[W = t[r = a[I]]] && (v[W] = ++p), i[r] = {\n                    old: t[r],\n                    new: v[t[r]]\n                }, g[r] = v[t[r]];\n                return F.writeUInt16(1), F.writeUInt16(0), F.writeUInt32(12), F.writeUInt16(0), F.writeUInt16(262), F.writeUInt16(0), F.write(g), {\n                    charMap: i,\n                    subtable: F.data,\n                    maxGlyphID: p + 1\n                };\n            case \"unicode\":\n                for(P = [], l = [], b = 0, v = {}, n = {}, m = u = null, j = 0, M = a.length; j < M; j++)null == v[w = t[r = a[j]]] && (v[w] = ++b), n[r] = {\n                    old: w,\n                    new: v[w]\n                }, o = v[w] - r, null != m && o === u || (m && l.push(m), P.push(r), u = o), m = r;\n                for(m && l.push(m), l.push(65535), P.push(65535), S = 2 * (A = P.length), x = 2 * Math.pow(Math.log(A) / Math.LN2, 2), h = Math.log(x / 2) / Math.LN2, L = 2 * A - x, s = [], N = [], f = [], d = C = 0, q = P.length; C < q; d = ++C){\n                    if (_ = P[d], c = l[d], 65535 === _) {\n                        s.push(0), N.push(0);\n                        break;\n                    }\n                    if (_ - (k = n[_].new) >= 32768) for(s.push(0), N.push(2 * (f.length + A - d)), r = O = _; _ <= c ? O <= c : O >= c; r = _ <= c ? ++O : --O)f.push(n[r].new);\n                    else s.push(k - _), N.push(0);\n                }\n                for(F.writeUInt16(3), F.writeUInt16(1), F.writeUInt32(12), F.writeUInt16(4), F.writeUInt16(16 + 8 * A + 2 * f.length), F.writeUInt16(0), F.writeUInt16(S), F.writeUInt16(x), F.writeUInt16(h), F.writeUInt16(L), U = 0, E = l.length; U < E; U++)r = l[U], F.writeUInt16(r);\n                for(F.writeUInt16(0), H = 0, R = P.length; H < R; H++)r = P[H], F.writeUInt16(r);\n                for(V = 0, D = s.length; V < D; V++)o = s[V], F.writeUInt16(o);\n                for(G = 0, T = N.length; G < T; G++)y = N[G], F.writeUInt16(y);\n                for(Y = 0, z = f.length; Y < z; Y++)p = f[Y], F.writeUInt16(p);\n                return {\n                    charMap: n,\n                    subtable: F.data,\n                    maxGlyphID: b + 1\n                };\n        }\n    }, t;\n}(), be = function() {\n    function t() {\n        return t.__super__.constructor.apply(this, arguments);\n    }\n    return ge(t, he), t.prototype.tag = \"cmap\", t.prototype.parse = function(t) {\n        var e, n, r;\n        for(t.pos = this.offset, this.version = t.readUInt16(), r = t.readUInt16(), this.tables = [], this.unicode = null, n = 0; 0 <= r ? n < r : n > r; n = 0 <= r ? ++n : --n)e = new ve(t, this.offset), this.tables.push(e), e.isUnicode && null == this.unicode && (this.unicode = e);\n        return !0;\n    }, t.encode = function(t, e) {\n        var n, r;\n        return null == e && (e = \"macroman\"), n = ve.encode(t, e), (r = new fe).writeUInt16(0), r.writeUInt16(1), n.table = r.data.concat(n.subtable), n;\n    }, t;\n}(), ye = function() {\n    function t() {\n        return t.__super__.constructor.apply(this, arguments);\n    }\n    return ge(t, he), t.prototype.tag = \"hhea\", t.prototype.parse = function(t) {\n        return t.pos = this.offset, this.version = t.readInt(), this.ascender = t.readShort(), this.decender = t.readShort(), this.lineGap = t.readShort(), this.advanceWidthMax = t.readShort(), this.minLeftSideBearing = t.readShort(), this.minRightSideBearing = t.readShort(), this.xMaxExtent = t.readShort(), this.caretSlopeRise = t.readShort(), this.caretSlopeRun = t.readShort(), this.caretOffset = t.readShort(), t.pos += 8, this.metricDataFormat = t.readShort(), this.numberOfMetrics = t.readUInt16();\n    }, t;\n}(), we = function() {\n    function t() {\n        return t.__super__.constructor.apply(this, arguments);\n    }\n    return ge(t, he), t.prototype.tag = \"OS/2\", t.prototype.parse = function(t) {\n        if (t.pos = this.offset, this.version = t.readUInt16(), this.averageCharWidth = t.readShort(), this.weightClass = t.readUInt16(), this.widthClass = t.readUInt16(), this.type = t.readShort(), this.ySubscriptXSize = t.readShort(), this.ySubscriptYSize = t.readShort(), this.ySubscriptXOffset = t.readShort(), this.ySubscriptYOffset = t.readShort(), this.ySuperscriptXSize = t.readShort(), this.ySuperscriptYSize = t.readShort(), this.ySuperscriptXOffset = t.readShort(), this.ySuperscriptYOffset = t.readShort(), this.yStrikeoutSize = t.readShort(), this.yStrikeoutPosition = t.readShort(), this.familyClass = t.readShort(), this.panose = function() {\n            var e, n;\n            for(n = [], e = 0; e < 10; ++e)n.push(t.readByte());\n            return n;\n        }(), this.charRange = function() {\n            var e, n;\n            for(n = [], e = 0; e < 4; ++e)n.push(t.readInt());\n            return n;\n        }(), this.vendorID = t.readString(4), this.selection = t.readShort(), this.firstCharIndex = t.readShort(), this.lastCharIndex = t.readShort(), this.version > 0 && (this.ascent = t.readShort(), this.descent = t.readShort(), this.lineGap = t.readShort(), this.winAscent = t.readShort(), this.winDescent = t.readShort(), this.codePageRange = function() {\n            var e, n;\n            for(n = [], e = 0; e < 2; e = ++e)n.push(t.readInt());\n            return n;\n        }(), this.version > 1)) return this.xHeight = t.readShort(), this.capHeight = t.readShort(), this.defaultChar = t.readShort(), this.breakChar = t.readShort(), this.maxContext = t.readShort();\n    }, t;\n}(), Ne = function() {\n    function t() {\n        return t.__super__.constructor.apply(this, arguments);\n    }\n    return ge(t, he), t.prototype.tag = \"post\", t.prototype.parse = function(t) {\n        var e, n, r;\n        switch(t.pos = this.offset, this.format = t.readInt(), this.italicAngle = t.readInt(), this.underlinePosition = t.readShort(), this.underlineThickness = t.readShort(), this.isFixedPitch = t.readInt(), this.minMemType42 = t.readInt(), this.maxMemType42 = t.readInt(), this.minMemType1 = t.readInt(), this.maxMemType1 = t.readInt(), this.format){\n            case 65536:\n            case 196608:\n                break;\n            case 131072:\n                var i;\n                for(n = t.readUInt16(), this.glyphNameIndex = [], i = 0; 0 <= n ? i < n : i > n; i = 0 <= n ? ++i : --i)this.glyphNameIndex.push(t.readUInt16());\n                for(this.names = [], r = []; t.pos < this.offset + this.length;)e = t.readByte(), r.push(this.names.push(t.readString(e)));\n                return r;\n            case 151552:\n                return n = t.readUInt16(), this.offsets = t.read(n);\n            case 262144:\n                return this.map = (function() {\n                    var e, n, r;\n                    for(r = [], i = e = 0, n = this.file.maxp.numGlyphs; 0 <= n ? e < n : e > n; i = 0 <= n ? ++e : --e)r.push(t.readUInt32());\n                    return r;\n                }).call(this);\n        }\n    }, t;\n}(), Le = function(t, e) {\n    this.raw = t, this.length = t.length, this.platformID = e.platformID, this.encodingID = e.encodingID, this.languageID = e.languageID;\n}, xe = function() {\n    function t() {\n        return t.__super__.constructor.apply(this, arguments);\n    }\n    return ge(t, he), t.prototype.tag = \"name\", t.prototype.parse = function(t) {\n        var e, n, r, i, a, o, s, u, c, l, h;\n        for(t.pos = this.offset, t.readShort(), e = t.readShort(), o = t.readShort(), n = [], i = 0; 0 <= e ? i < e : i > e; i = 0 <= e ? ++i : --i)n.push({\n            platformID: t.readShort(),\n            encodingID: t.readShort(),\n            languageID: t.readShort(),\n            nameID: t.readShort(),\n            length: t.readShort(),\n            offset: this.offset + o + t.readShort()\n        });\n        for(s = {}, i = c = 0, l = n.length; c < l; i = ++c)r = n[i], t.pos = r.offset, u = t.readString(r.length), a = new Le(u, r), null == s[h = r.nameID] && (s[h] = []), s[r.nameID].push(a);\n        this.strings = s, this.copyright = s[0], this.fontFamily = s[1], this.fontSubfamily = s[2], this.uniqueSubfamily = s[3], this.fontName = s[4], this.version = s[5];\n        try {\n            this.postscriptName = s[6][0].raw.replace(/[\\x00-\\x19\\x80-\\xff]/g, \"\");\n        } catch (f) {\n            this.postscriptName = s[4][0].raw.replace(/[\\x00-\\x19\\x80-\\xff]/g, \"\");\n        }\n        return this.trademark = s[7], this.manufacturer = s[8], this.designer = s[9], this.description = s[10], this.vendorUrl = s[11], this.designerUrl = s[12], this.license = s[13], this.licenseUrl = s[14], this.preferredFamily = s[15], this.preferredSubfamily = s[17], this.compatibleFull = s[18], this.sampleText = s[19];\n    }, t;\n}(), Ae = function() {\n    function t() {\n        return t.__super__.constructor.apply(this, arguments);\n    }\n    return ge(t, he), t.prototype.tag = \"maxp\", t.prototype.parse = function(t) {\n        return t.pos = this.offset, this.version = t.readInt(), this.numGlyphs = t.readUInt16(), this.maxPoints = t.readUInt16(), this.maxContours = t.readUInt16(), this.maxCompositePoints = t.readUInt16(), this.maxComponentContours = t.readUInt16(), this.maxZones = t.readUInt16(), this.maxTwilightPoints = t.readUInt16(), this.maxStorage = t.readUInt16(), this.maxFunctionDefs = t.readUInt16(), this.maxInstructionDefs = t.readUInt16(), this.maxStackElements = t.readUInt16(), this.maxSizeOfInstructions = t.readUInt16(), this.maxComponentElements = t.readUInt16(), this.maxComponentDepth = t.readUInt16();\n    }, t;\n}(), Se = function() {\n    function t() {\n        return t.__super__.constructor.apply(this, arguments);\n    }\n    return ge(t, he), t.prototype.tag = \"hmtx\", t.prototype.parse = function(t) {\n        var e, n, r, i, a, o, s;\n        for(t.pos = this.offset, this.metrics = [], e = 0, o = this.file.hhea.numberOfMetrics; 0 <= o ? e < o : e > o; e = 0 <= o ? ++e : --e)this.metrics.push({\n            advance: t.readUInt16(),\n            lsb: t.readInt16()\n        });\n        for(r = this.file.maxp.numGlyphs - this.file.hhea.numberOfMetrics, this.leftSideBearings = function() {\n            var n, i;\n            for(i = [], e = n = 0; 0 <= r ? n < r : n > r; e = 0 <= r ? ++n : --n)i.push(t.readInt16());\n            return i;\n        }(), this.widths = (function() {\n            var t, e, n, r;\n            for(r = [], t = 0, e = (n = this.metrics).length; t < e; t++)i = n[t], r.push(i.advance);\n            return r;\n        }).call(this), n = this.widths[this.widths.length - 1], s = [], e = a = 0; 0 <= r ? a < r : a > r; e = 0 <= r ? ++a : --a)s.push(this.widths.push(n));\n        return s;\n    }, t.prototype.forGlyph = function(t) {\n        return t in this.metrics ? this.metrics[t] : {\n            advance: this.metrics[this.metrics.length - 1].advance,\n            lsb: this.leftSideBearings[t - this.metrics.length]\n        };\n    }, t;\n}(), _e = [].slice, Pe = function() {\n    function t() {\n        return t.__super__.constructor.apply(this, arguments);\n    }\n    return ge(t, he), t.prototype.tag = \"glyf\", t.prototype.parse = function() {\n        return this.cache = {};\n    }, t.prototype.glyphFor = function(t) {\n        var e, n, r, i, a, o, s, u, c, l;\n        return t in this.cache ? this.cache[t] : (i = this.file.loca, e = this.file.contents, n = i.indexOf(t), 0 === (r = i.lengthOf(t)) ? this.cache[t] = null : (e.pos = this.offset + n, a = (o = new fe(e.read(r))).readShort(), u = o.readShort(), l = o.readShort(), s = o.readShort(), c = o.readShort(), this.cache[t] = -1 === a ? new Fe(o, u, l, s, c) : new ke(o, a, u, l, s, c), this.cache[t]));\n    }, t.prototype.encode = function(t, e, n) {\n        var r, i, a, o, s;\n        for(a = [], i = [], o = 0, s = e.length; o < s; o++)r = t[e[o]], i.push(a.length), r && (a = a.concat(r.encode(n)));\n        return i.push(a.length), {\n            table: a,\n            offsets: i\n        };\n    }, t;\n}(), ke = function() {\n    function t(t, e, n, r, i, a) {\n        this.raw = t, this.numberOfContours = e, this.xMin = n, this.yMin = r, this.xMax = i, this.yMax = a, this.compound = !1;\n    }\n    return t.prototype.encode = function() {\n        return this.raw.data;\n    }, t;\n}(), Fe = function() {\n    function t(t, e, n, r, i) {\n        var a, o;\n        for(this.raw = t, this.xMin = e, this.yMin = n, this.xMax = r, this.yMax = i, this.compound = !0, this.glyphIDs = [], this.glyphOffsets = [], a = this.raw; o = a.readShort(), this.glyphOffsets.push(a.pos), this.glyphIDs.push(a.readUInt16()), 32 & o;)a.pos += 1 & o ? 4 : 2, 128 & o ? a.pos += 8 : 64 & o ? a.pos += 4 : 8 & o && (a.pos += 2);\n    }\n    return t.prototype.encode = function() {\n        var t, e, n;\n        for(e = new fe(_e.call(this.raw.data)), t = 0, n = this.glyphIDs.length; t < n; ++t)e.pos = this.glyphOffsets[t];\n        return e.data;\n    }, t;\n}(), Ie = function() {\n    function t() {\n        return t.__super__.constructor.apply(this, arguments);\n    }\n    return ge(t, he), t.prototype.tag = \"loca\", t.prototype.parse = function(t) {\n        var e, n;\n        return t.pos = this.offset, e = this.file.head.indexToLocFormat, this.offsets = 0 === e ? (function() {\n            var e, r;\n            for(r = [], n = 0, e = this.length; n < e; n += 2)r.push(2 * t.readUInt16());\n            return r;\n        }).call(this) : (function() {\n            var e, r;\n            for(r = [], n = 0, e = this.length; n < e; n += 4)r.push(t.readUInt32());\n            return r;\n        }).call(this);\n    }, t.prototype.indexOf = function(t) {\n        return this.offsets[t];\n    }, t.prototype.lengthOf = function(t) {\n        return this.offsets[t + 1] - this.offsets[t];\n    }, t.prototype.encode = function(t, e) {\n        for(var n = new Uint32Array(this.offsets.length), r = 0, i = 0, a = 0; a < n.length; ++a)if (n[a] = r, i < e.length && e[i] == a) {\n            ++i, n[a] = r;\n            var o = this.offsets[a], s = this.offsets[a + 1] - o;\n            s > 0 && (r += s);\n        }\n        for(var u = new Array(4 * n.length), c = 0; c < n.length; ++c)u[4 * c + 3] = 255 & n[c], u[4 * c + 2] = (65280 & n[c]) >> 8, u[4 * c + 1] = (16711680 & n[c]) >> 16, u[4 * c] = (4278190080 & n[c]) >> 24;\n        return u;\n    }, t;\n}(), je = function() {\n    function t(t) {\n        this.font = t, this.subset = {}, this.unicodes = {}, this.next = 33;\n    }\n    return t.prototype.generateCmap = function() {\n        var t, e, n, r, i;\n        for(e in r = this.font.cmap.tables[0].codeMap, t = {}, i = this.subset)n = i[e], t[e] = r[n];\n        return t;\n    }, t.prototype.glyphsFor = function(t) {\n        var e, n, r, i, a, o, s;\n        for(r = {}, a = 0, o = t.length; a < o; a++)r[i = t[a]] = this.font.glyf.glyphFor(i);\n        for(i in e = [], r)(null != (n = r[i]) ? n.compound : void 0) && e.push.apply(e, n.glyphIDs);\n        if (e.length > 0) for(i in s = this.glyphsFor(e))n = s[i], r[i] = n;\n        return r;\n    }, t.prototype.encode = function(t, e) {\n        var n, r, i, a, o, s, u, c, l, h, f, d, p, g, m;\n        for(r in n = be.encode(this.generateCmap(), \"unicode\"), a = this.glyphsFor(t), f = {\n            0: 0\n        }, m = n.charMap)f[(s = m[r]).old] = s.new;\n        for(d in h = n.maxGlyphID, a)d in f || (f[d] = h++);\n        return c = function(t) {\n            var e, n;\n            for(e in n = {}, t)n[t[e]] = e;\n            return n;\n        }(f), l = Object.keys(c).sort(function(t, e) {\n            return t - e;\n        }), p = function() {\n            var t, e, n;\n            for(n = [], t = 0, e = l.length; t < e; t++)o = l[t], n.push(c[o]);\n            return n;\n        }(), i = this.font.glyf.encode(a, p, f), u = this.font.loca.encode(i.offsets, p), g = {\n            cmap: this.font.cmap.raw(),\n            glyf: i.table,\n            loca: u,\n            hmtx: this.font.hmtx.raw(),\n            hhea: this.font.hhea.raw(),\n            maxp: this.font.maxp.raw(),\n            post: this.font.post.raw(),\n            name: this.font.name.raw(),\n            head: this.font.head.encode(e)\n        }, this.font.os2.exists && (g[\"OS/2\"] = this.font.os2.raw()), this.font.directory.encode(g);\n    }, t;\n}();\nE.API.PDFObject = function() {\n    var t;\n    function e() {}\n    return t = function(t, e) {\n        return (Array(e + 1).join(\"0\") + t).slice(-e);\n    }, e.convert = function(n) {\n        var r, i, a, o;\n        if (Array.isArray(n)) return \"[\" + (function() {\n            var t, i, a;\n            for(a = [], t = 0, i = n.length; t < i; t++)r = n[t], a.push(e.convert(r));\n            return a;\n        })().join(\" \") + \"]\";\n        if (\"string\" == typeof n) return \"/\" + n;\n        if (null != n ? n.isString : void 0) return \"(\" + n + \")\";\n        if (n instanceof Date) return \"(D:\" + t(n.getUTCFullYear(), 4) + t(n.getUTCMonth(), 2) + t(n.getUTCDate(), 2) + t(n.getUTCHours(), 2) + t(n.getUTCMinutes(), 2) + t(n.getUTCSeconds(), 2) + \"Z)\";\n        if (\"[object Object]\" === ({}).toString.call(n)) {\n            for(i in a = [\n                \"<<\"\n            ], n)o = n[i], a.push(\"/\" + i + \" \" + e.convert(o));\n            return a.push(\">>\"), a.join(\"\\n\");\n        }\n        return \"\" + n;\n    }, e;\n}();\n //# sourceMappingURL=jspdf.es.min.js.map\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20;\n$RefreshReg$(_c, \"N\");\n$RefreshReg$(_c1, \"A\");\n$RefreshReg$(_c2, \"S\");\n$RefreshReg$(_c3, \"P\");\n$RefreshReg$(_c4, \"I\");\n$RefreshReg$(_c5, \"C\");\n$RefreshReg$(_c6, \"O\");\n$RefreshReg$(_c7, \"B\");\n$RefreshReg$(_c8, \"M\");\n$RefreshReg$(_c9, \"E\");\n$RefreshReg$(_c10, \"Nt\");\n$RefreshReg$(_c11, \"Lt\");\n$RefreshReg$(_c12, \"Ct\");\n$RefreshReg$(_c13, \"Ot\");\n$RefreshReg$(_c14, \"Et\");\n$RefreshReg$(_c15, \"Rt\");\n$RefreshReg$(_c16, \"Dt\");\n$RefreshReg$(_c17, \"Xt\");\n$RefreshReg$(_c18, \"Kt\");\n$RefreshReg$(_c19, \"Zt\");\n$RefreshReg$(_c20, \"Qt\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/jspdf/dist/jspdf.es.min.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/admin/page.tsx":
/*!****************************!*\
  !*** ./app/admin/page.tsx ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ AdminDashboard; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var jspdf__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jspdf */ \"(app-pages-browser)/./node_modules/jspdf/dist/jspdf.es.min.js\");\n/* harmony import */ var _barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=format!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/format.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\nfunction AdminDashboard() {\n    _s();\n    const [reservations, setReservations] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [search, setSearch] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [filterStatus, setFilterStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [currentPage, setCurrentPage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(1);\n    const perPage = 10;\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const fetchReservations = async ()=>{\n            setLoading(true);\n            try {\n                const res = await fetch(\"/api/admin/reservation\", {\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                });\n                const data = await res.json();\n                setReservations(data.reservations || []);\n            } catch (err) {\n                console.error(err);\n            } finally{\n                setLoading(false);\n            }\n        };\n        fetchReservations();\n    }, []);\n    const updateStatus = async (id, status)=>{\n        try {\n            await fetch(\"/api/admin/reservation\", {\n                method: \"PATCH\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    id,\n                    status\n                })\n            });\n            setReservations((prev)=>prev.map((r)=>r._id === id ? {\n                        ...r,\n                        status\n                    } : r));\n        } catch (err) {\n            console.error(err);\n        }\n    };\n    const deleteReservation = async (id)=>{\n        if (!confirm(\"Supprimer cette r\\xe9servation ?\")) return;\n        try {\n            await fetch(\"/api/admin/reservation\", {\n                method: \"DELETE\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    id\n                })\n            });\n            setReservations((prev)=>prev.filter((r)=>r._id !== id));\n        } catch (err) {\n            console.error(err);\n        }\n    };\n    const filtered = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        return reservations.filter((r)=>{\n            const matchesSearch = r.nom.toLowerCase().includes(search.toLowerCase()) || r.telephone.includes(search);\n            const matchesStatus = filterStatus ? r.status === filterStatus : true;\n            return matchesSearch && matchesStatus;\n        });\n    }, [\n        reservations,\n        search,\n        filterStatus\n    ]);\n    const totalPages = Math.ceil(filtered.length / perPage);\n    const displayed = filtered.slice((currentPage - 1) * perPage, currentPage * perPage);\n    const exportPDF = ()=>{\n        const doc = new jspdf__WEBPACK_IMPORTED_MODULE_2__.jsPDF();\n        doc.setFontSize(16);\n        doc.text(\"R\\xe9servations Taxi VSL\", 10, 20);\n        let y = 30;\n        displayed.forEach((r, i)=>{\n            doc.setFontSize(12);\n            doc.text(\"\".concat(i + 1, \". \").concat(r.nom, \" | \").concat(r.telephone, \" | \").concat(r.status || \"Nouveau\", \" | \").concat((0,_barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_3__.format)(new Date(r.createdAt), \"yyyy-MM-dd HH:mm\")), 10, y);\n            y += 10;\n            if (y > 280) {\n                doc.addPage();\n                y = 20;\n            }\n        });\n        doc.save(\"reservations.pdf\");\n    };\n    const updateAllStatus = async (status)=>{\n        for (const r of displayed){\n            await updateStatus(r._id, status);\n        }\n    };\n    if (loading) return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n        children: \"Chargement...\"\n    }, void 0, false, {\n        fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n        lineNumber: 115,\n        columnNumber: 23\n    }, this);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"p-6\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                className: \"text-2xl font-bold mb-4\",\n                children: \"Dashboard R\\xe9servations\"\n            }, void 0, false, {\n                fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                lineNumber: 119,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex flex-wrap gap-2 mb-4\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                        type: \"text\",\n                        placeholder: \"Rechercher par nom ou t\\xe9l\\xe9phone...\",\n                        className: \"border p-2 rounded flex-1 min-w-[200px]\",\n                        value: search,\n                        onChange: (e)=>setSearch(e.target.value)\n                    }, void 0, false, {\n                        fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                        lineNumber: 123,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"select\", {\n                        className: \"border p-2 rounded\",\n                        value: filterStatus,\n                        onChange: (e)=>setFilterStatus(e.target.value),\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                value: \"\",\n                                children: \"Tous\"\n                            }, void 0, false, {\n                                fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                                lineNumber: 135,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                value: \"Nouveau\",\n                                children: \"Nouveau\"\n                            }, void 0, false, {\n                                fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                                lineNumber: 136,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                value: \"Confirm\\xe9\",\n                                children: \"Confirm\\xe9\"\n                            }, void 0, false, {\n                                fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                                lineNumber: 137,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                value: \"Annul\\xe9\",\n                                children: \"Annul\\xe9\"\n                            }, void 0, false, {\n                                fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                                lineNumber: 138,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                        lineNumber: 130,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        className: \"bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700\",\n                        onClick: exportPDF,\n                        children: \"Exporter PDF\"\n                    }, void 0, false, {\n                        fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                        lineNumber: 140,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        className: \"bg-green-600 text-white px-3 py-1 rounded hover:bg-green-700\",\n                        onClick: ()=>updateAllStatus(\"Confirm\\xe9\"),\n                        children: \"Tout Confirmer\"\n                    }, void 0, false, {\n                        fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                        lineNumber: 146,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        className: \"bg-red-600 text-white px-3 py-1 rounded hover:bg-red-700\",\n                        onClick: ()=>updateAllStatus(\"Annul\\xe9\"),\n                        children: \"Tout Annuler\"\n                    }, void 0, false, {\n                        fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                        lineNumber: 152,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                lineNumber: 122,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"overflow-x-auto\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"table\", {\n                    className: \"min-w-full border border-gray-300\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"thead\", {\n                            className: \"bg-gray-200\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"tr\", {\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"th\", {\n                                        className: \"border px-4 py-2\",\n                                        children: \"Nom\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                                        lineNumber: 165,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"th\", {\n                                        className: \"border px-4 py-2\",\n                                        children: \"T\\xe9l\\xe9phone\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                                        lineNumber: 166,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"th\", {\n                                        className: \"border px-4 py-2\",\n                                        children: \"Statut\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                                        lineNumber: 167,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"th\", {\n                                        className: \"border px-4 py-2\",\n                                        children: \"Date\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                                        lineNumber: 168,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"th\", {\n                                        className: \"border px-4 py-2\",\n                                        children: \"Actions\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                                        lineNumber: 169,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                                lineNumber: 164,\n                                columnNumber: 13\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                            lineNumber: 163,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"tbody\", {\n                            children: displayed.map((r)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"tr\", {\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                            className: \"border px-4 py-2\",\n                                            children: r.nom\n                                        }, void 0, false, {\n                                            fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                                            lineNumber: 175,\n                                            columnNumber: 17\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                            className: \"border px-4 py-2\",\n                                            children: r.telephone\n                                        }, void 0, false, {\n                                            fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                                            lineNumber: 176,\n                                            columnNumber: 17\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                            className: \"border px-4 py-2 font-bold \".concat(r.status === \"Confirm\\xe9\" ? \"text-green-600\" : r.status === \"Annul\\xe9\" ? \"text-red-600\" : \"text-gray-700\"),\n                                            children: r.status || \"Nouveau\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                                            lineNumber: 177,\n                                            columnNumber: 17\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                            className: \"border px-4 py-2\",\n                                            children: (0,_barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_3__.format)(new Date(r.createdAt), \"yyyy-MM-dd HH:mm\")\n                                        }, void 0, false, {\n                                            fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                                            lineNumber: 188,\n                                            columnNumber: 17\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                            className: \"border px-4 py-2 flex gap-1\",\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                                    className: \"bg-green-600 text-white px-2 py-1 rounded\",\n                                                    onClick: ()=>updateStatus(r._id, \"Confirm\\xe9\"),\n                                                    children: \"Confirmer\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                                                    lineNumber: 192,\n                                                    columnNumber: 19\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                                    className: \"bg-red-600 text-white px-2 py-1 rounded\",\n                                                    onClick: ()=>updateStatus(r._id, \"Annul\\xe9\"),\n                                                    children: \"Annuler\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                                                    lineNumber: 198,\n                                                    columnNumber: 19\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                                    className: \"bg-gray-600 text-white px-2 py-1 rounded\",\n                                                    onClick: ()=>deleteReservation(r._id),\n                                                    children: \"Supprimer\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                                                    lineNumber: 204,\n                                                    columnNumber: 19\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                                            lineNumber: 191,\n                                            columnNumber: 17\n                                        }, this)\n                                    ]\n                                }, r._id, true, {\n                                    fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                                    lineNumber: 174,\n                                    columnNumber: 15\n                                }, this))\n                        }, void 0, false, {\n                            fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                            lineNumber: 172,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                    lineNumber: 162,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                lineNumber: 161,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex justify-center gap-2 mt-4\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        className: \"px-3 py-1 border rounded\",\n                        onClick: ()=>setCurrentPage((p)=>Math.max(1, p - 1)),\n                        disabled: currentPage === 1,\n                        children: \"Pr\\xe9c\"\n                    }, void 0, false, {\n                        fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                        lineNumber: 219,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                        className: \"px-3 py-1\",\n                        children: [\n                            currentPage,\n                            \" / \",\n                            totalPages\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                        lineNumber: 226,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        className: \"px-3 py-1 border rounded\",\n                        onClick: ()=>setCurrentPage((p)=>Math.min(totalPages, p + 1)),\n                        disabled: currentPage === totalPages,\n                        children: \"Suiv\"\n                    }, void 0, false, {\n                        fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                        lineNumber: 229,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n                lineNumber: 218,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/mondz/Downloads/taxi-vsl-nextjs-complete/app/admin/page.tsx\",\n        lineNumber: 118,\n        columnNumber: 5\n    }, this);\n}\n_s(AdminDashboard, \"KH2vgVV4+dPzwp9MW+wktccpa28=\");\n_c = AdminDashboard;\nvar _c;\n$RefreshReg$(_c, \"AdminDashboard\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/admin/page.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _arrayLikeToArray; }\n/* harmony export */ });\nfunction _arrayLikeToArray(r, a) {\n    (null == a || a > r.length) && (a = r.length);\n    for(var e = 0, n = Array(a); e < a; e++)n[e] = r[e];\n    return n;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheUxpa2VUb0FycmF5LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxTQUFTQSxrQkFBa0JDLENBQUMsRUFBRUMsQ0FBQztJQUM1QixTQUFRQSxLQUFLQSxJQUFJRCxFQUFFRSxNQUFNLEtBQU1ELENBQUFBLElBQUlELEVBQUVFLE1BQU07SUFDNUMsSUFBSyxJQUFJQyxJQUFJLEdBQUdDLElBQUlDLE1BQU1KLElBQUlFLElBQUlGLEdBQUdFLElBQUtDLENBQUMsQ0FBQ0QsRUFBRSxHQUFHSCxDQUFDLENBQUNHLEVBQUU7SUFDckQsT0FBT0M7QUFDVDtBQUN3QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlMaWtlVG9BcnJheS5qcz9jNzkwIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KHIsIGEpIHtcbiAgKG51bGwgPT0gYSB8fCBhID4gci5sZW5ndGgpICYmIChhID0gci5sZW5ndGgpO1xuICBmb3IgKHZhciBlID0gMCwgbiA9IEFycmF5KGEpOyBlIDwgYTsgZSsrKSBuW2VdID0gcltlXTtcbiAgcmV0dXJuIG47XG59XG5leHBvcnQgeyBfYXJyYXlMaWtlVG9BcnJheSBhcyBkZWZhdWx0IH07Il0sIm5hbWVzIjpbIl9hcnJheUxpa2VUb0FycmF5IiwiciIsImEiLCJsZW5ndGgiLCJlIiwibiIsIkFycmF5IiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _arrayWithHoles; }\n/* harmony export */ });\nfunction _arrayWithHoles(r) {\n    if (Array.isArray(r)) return r;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheVdpdGhIb2xlcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsU0FBU0EsZ0JBQWdCQyxDQUFDO0lBQ3hCLElBQUlDLE1BQU1DLE9BQU8sQ0FBQ0YsSUFBSSxPQUFPQTtBQUMvQjtBQUNzQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRoSG9sZXMuanM/YTJiMSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMocikge1xuICBpZiAoQXJyYXkuaXNBcnJheShyKSkgcmV0dXJuIHI7XG59XG5leHBvcnQgeyBfYXJyYXlXaXRoSG9sZXMgYXMgZGVmYXVsdCB9OyJdLCJuYW1lcyI6WyJfYXJyYXlXaXRoSG9sZXMiLCJyIiwiQXJyYXkiLCJpc0FycmF5IiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _iterableToArrayLimit; }\n/* harmony export */ });\nfunction _iterableToArrayLimit(r, l) {\n    var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (null != t) {\n        var e, n, i, u, a = [], f = !0, o = !1;\n        try {\n            if (i = (t = t.call(r)).next, 0 === l) {\n                if (Object(t) !== t) return;\n                f = !1;\n            } else for(; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n        } catch (r) {\n            o = !0, n = r;\n        } finally{\n            try {\n                if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n            } finally{\n                if (o) throw n;\n            }\n        }\n        return a;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsU0FBU0Esc0JBQXNCQyxDQUFDLEVBQUVDLENBQUM7SUFDakMsSUFBSUMsSUFBSSxRQUFRRixJQUFJLE9BQU8sZUFBZSxPQUFPRyxVQUFVSCxDQUFDLENBQUNHLE9BQU9DLFFBQVEsQ0FBQyxJQUFJSixDQUFDLENBQUMsYUFBYTtJQUNoRyxJQUFJLFFBQVFFLEdBQUc7UUFDYixJQUFJRyxHQUNGQyxHQUNBQyxHQUNBQyxHQUNBQyxJQUFJLEVBQUUsRUFDTkMsSUFBSSxDQUFDLEdBQ0xDLElBQUksQ0FBQztRQUNQLElBQUk7WUFDRixJQUFJSixJQUFJLENBQUNMLElBQUlBLEVBQUVVLElBQUksQ0FBQ1osRUFBQyxFQUFHYSxJQUFJLEVBQUUsTUFBTVosR0FBRztnQkFDckMsSUFBSWEsT0FBT1osT0FBT0EsR0FBRztnQkFDckJRLElBQUksQ0FBQztZQUNQLE9BQU8sTUFBTyxDQUFFQSxDQUFBQSxJQUFJLENBQUNMLElBQUlFLEVBQUVLLElBQUksQ0FBQ1YsRUFBQyxFQUFHYSxJQUFJLEtBQU1OLENBQUFBLEVBQUVPLElBQUksQ0FBQ1gsRUFBRVksS0FBSyxHQUFHUixFQUFFUyxNQUFNLEtBQUtqQixDQUFBQSxHQUFJUyxJQUFJLENBQUM7UUFDdkYsRUFBRSxPQUFPVixHQUFHO1lBQ1ZXLElBQUksQ0FBQyxHQUFHTCxJQUFJTjtRQUNkLFNBQVU7WUFDUixJQUFJO2dCQUNGLElBQUksQ0FBQ1UsS0FBSyxRQUFRUixDQUFDLENBQUMsU0FBUyxJQUFLTSxDQUFBQSxJQUFJTixDQUFDLENBQUMsU0FBUyxJQUFJWSxPQUFPTixPQUFPQSxDQUFBQSxHQUFJO1lBQ3pFLFNBQVU7Z0JBQ1IsSUFBSUcsR0FBRyxNQUFNTDtZQUNmO1FBQ0Y7UUFDQSxPQUFPRztJQUNUO0FBQ0Y7QUFDNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzPzI5NjgiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KHIsIGwpIHtcbiAgdmFyIHQgPSBudWxsID09IHIgPyBudWxsIDogXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgU3ltYm9sICYmIHJbU3ltYm9sLml0ZXJhdG9yXSB8fCByW1wiQEBpdGVyYXRvclwiXTtcbiAgaWYgKG51bGwgIT0gdCkge1xuICAgIHZhciBlLFxuICAgICAgbixcbiAgICAgIGksXG4gICAgICB1LFxuICAgICAgYSA9IFtdLFxuICAgICAgZiA9ICEwLFxuICAgICAgbyA9ICExO1xuICAgIHRyeSB7XG4gICAgICBpZiAoaSA9ICh0ID0gdC5jYWxsKHIpKS5uZXh0LCAwID09PSBsKSB7XG4gICAgICAgIGlmIChPYmplY3QodCkgIT09IHQpIHJldHVybjtcbiAgICAgICAgZiA9ICExO1xuICAgICAgfSBlbHNlIGZvciAoOyAhKGYgPSAoZSA9IGkuY2FsbCh0KSkuZG9uZSkgJiYgKGEucHVzaChlLnZhbHVlKSwgYS5sZW5ndGggIT09IGwpOyBmID0gITApO1xuICAgIH0gY2F0Y2ggKHIpIHtcbiAgICAgIG8gPSAhMCwgbiA9IHI7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICghZiAmJiBudWxsICE9IHRbXCJyZXR1cm5cIl0gJiYgKHUgPSB0W1wicmV0dXJuXCJdKCksIE9iamVjdCh1KSAhPT0gdSkpIHJldHVybjtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChvKSB0aHJvdyBuO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYTtcbiAgfVxufVxuZXhwb3J0IHsgX2l0ZXJhYmxlVG9BcnJheUxpbWl0IGFzIGRlZmF1bHQgfTsiXSwibmFtZXMiOlsiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiciIsImwiLCJ0IiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJlIiwibiIsImkiLCJ1IiwiYSIsImYiLCJvIiwiY2FsbCIsIm5leHQiLCJPYmplY3QiLCJkb25lIiwicHVzaCIsInZhbHVlIiwibGVuZ3RoIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js":
/*!********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _nonIterableRest; }\n/* harmony export */ });\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVJlc3QuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBO0lBQ1AsTUFBTSxJQUFJQyxVQUFVO0FBQ3RCO0FBQ3VDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVJlc3QuanM/ODQyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuZXhwb3J0IHsgX25vbkl0ZXJhYmxlUmVzdCBhcyBkZWZhdWx0IH07Il0sIm5hbWVzIjpbIl9ub25JdGVyYWJsZVJlc3QiLCJUeXBlRXJyb3IiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/slicedToArray.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _slicedToArray; }\n/* harmony export */ });\n/* harmony import */ var _arrayWithHoles_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayWithHoles.js */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js\");\n/* harmony import */ var _iterableToArrayLimit_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iterableToArrayLimit.js */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js\");\n/* harmony import */ var _unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./unsupportedIterableToArray.js */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js\");\n/* harmony import */ var _nonIterableRest_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./nonIterableRest.js */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js\");\n\n\n\n\nfunction _slicedToArray(r, e) {\n    return (0,_arrayWithHoles_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(r) || (0,_iterableToArrayLimit_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(r, e) || (0,_unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(r, e) || (0,_nonIterableRest_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQWlEO0FBQ1k7QUFDWTtBQUN0QjtBQUNuRCxTQUFTSSxlQUFlQyxDQUFDLEVBQUVDLENBQUM7SUFDMUIsT0FBT04sOERBQWNBLENBQUNLLE1BQU1KLG9FQUFvQkEsQ0FBQ0ksR0FBR0MsTUFBTUosMEVBQTBCQSxDQUFDRyxHQUFHQyxNQUFNSCwrREFBZUE7QUFDL0c7QUFDcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXkuanM/ZjZiNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXJyYXlXaXRoSG9sZXMgZnJvbSBcIi4vYXJyYXlXaXRoSG9sZXMuanNcIjtcbmltcG9ydCBpdGVyYWJsZVRvQXJyYXlMaW1pdCBmcm9tIFwiLi9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qc1wiO1xuaW1wb3J0IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IGZyb20gXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgbm9uSXRlcmFibGVSZXN0IGZyb20gXCIuL25vbkl0ZXJhYmxlUmVzdC5qc1wiO1xuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkociwgZSkge1xuICByZXR1cm4gYXJyYXlXaXRoSG9sZXMocikgfHwgaXRlcmFibGVUb0FycmF5TGltaXQociwgZSkgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkociwgZSkgfHwgbm9uSXRlcmFibGVSZXN0KCk7XG59XG5leHBvcnQgeyBfc2xpY2VkVG9BcnJheSBhcyBkZWZhdWx0IH07Il0sIm5hbWVzIjpbImFycmF5V2l0aEhvbGVzIiwiaXRlcmFibGVUb0FycmF5TGltaXQiLCJ1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIm5vbkl0ZXJhYmxlUmVzdCIsIl9zbGljZWRUb0FycmF5IiwiciIsImUiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/typeof.js":
/*!***********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/typeof.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _typeof; }\n/* harmony export */ });\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBLFFBQVFDLENBQUM7SUFDaEI7SUFFQSxPQUFPRCxVQUFVLGNBQWMsT0FBT0UsVUFBVSxZQUFZLE9BQU9BLE9BQU9DLFFBQVEsR0FBRyxTQUFVRixDQUFDO1FBQzlGLE9BQU8sT0FBT0E7SUFDaEIsSUFBSSxTQUFVQSxDQUFDO1FBQ2IsT0FBT0EsS0FBSyxjQUFjLE9BQU9DLFVBQVVELEVBQUVHLFdBQVcsS0FBS0YsVUFBVUQsTUFBTUMsT0FBT0csU0FBUyxHQUFHLFdBQVcsT0FBT0o7SUFDcEgsR0FBR0QsUUFBUUM7QUFDYjtBQUM4QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mLmpzP2IwZmEiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX3R5cGVvZihvKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvO1xuICB9IDogZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbztcbiAgfSwgX3R5cGVvZihvKTtcbn1cbmV4cG9ydCB7IF90eXBlb2YgYXMgZGVmYXVsdCB9OyJdLCJuYW1lcyI6WyJfdHlwZW9mIiwibyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/typeof.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _unsupportedIterableToArray; }\n/* harmony export */ });\n/* harmony import */ var _arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayLikeToArray.js */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js\");\n\nfunction _unsupportedIterableToArray(r, a) {\n    if (r) {\n        if (\"string\" == typeof r) return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(r, a);\n        var t = ({}).toString.call(r).slice(8, -1);\n        return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(r, a) : void 0;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxRDtBQUNyRCxTQUFTQyw0QkFBNEJDLENBQUMsRUFBRUMsQ0FBQztJQUN2QyxJQUFJRCxHQUFHO1FBQ0wsSUFBSSxZQUFZLE9BQU9BLEdBQUcsT0FBT0YsZ0VBQWdCQSxDQUFDRSxHQUFHQztRQUNyRCxJQUFJQyxJQUFJLEVBQUMsR0FBRUMsUUFBUSxDQUFDQyxJQUFJLENBQUNKLEdBQUdLLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFDdEMsT0FBTyxhQUFhSCxLQUFLRixFQUFFTSxXQUFXLElBQUtKLENBQUFBLElBQUlGLEVBQUVNLFdBQVcsQ0FBQ0MsSUFBSSxHQUFHLFVBQVVMLEtBQUssVUFBVUEsSUFBSU0sTUFBTUMsSUFBSSxDQUFDVCxLQUFLLGdCQUFnQkUsS0FBSywyQ0FBMkNRLElBQUksQ0FBQ1IsS0FBS0osZ0VBQWdCQSxDQUFDRSxHQUFHQyxLQUFLLEtBQUs7SUFDM047QUFDRjtBQUNrRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanM/ZDlmNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCI7XG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkociwgYSkge1xuICBpZiAocikge1xuICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiByKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShyLCBhKTtcbiAgICB2YXIgdCA9IHt9LnRvU3RyaW5nLmNhbGwocikuc2xpY2UoOCwgLTEpO1xuICAgIHJldHVybiBcIk9iamVjdFwiID09PSB0ICYmIHIuY29uc3RydWN0b3IgJiYgKHQgPSByLmNvbnN0cnVjdG9yLm5hbWUpLCBcIk1hcFwiID09PSB0IHx8IFwiU2V0XCIgPT09IHQgPyBBcnJheS5mcm9tKHIpIDogXCJBcmd1bWVudHNcIiA9PT0gdCB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdCh0KSA/IGFycmF5TGlrZVRvQXJyYXkociwgYSkgOiB2b2lkIDA7XG4gIH1cbn1cbmV4cG9ydCB7IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBhcyBkZWZhdWx0IH07Il0sIm5hbWVzIjpbImFycmF5TGlrZVRvQXJyYXkiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJyIiwiYSIsInQiLCJ0b1N0cmluZyIsImNhbGwiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsIkFycmF5IiwiZnJvbSIsInRlc3QiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/_lib/addLeadingZeros.js":
/*!*******************************************************!*\
  !*** ./node_modules/date-fns/_lib/addLeadingZeros.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addLeadingZeros: function() { return /* binding */ addLeadingZeros; }\n/* harmony export */ });\nfunction addLeadingZeros(number, targetLength) {\n    const sign = number < 0 ? \"-\" : \"\";\n    const output = Math.abs(number).toString().padStart(targetLength, \"0\");\n    return sign + output;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2FkZExlYWRpbmdaZXJvcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0EsZ0JBQWdCQyxNQUFNLEVBQUVDLFlBQVk7SUFDbEQsTUFBTUMsT0FBT0YsU0FBUyxJQUFJLE1BQU07SUFDaEMsTUFBTUcsU0FBU0MsS0FBS0MsR0FBRyxDQUFDTCxRQUFRTSxRQUFRLEdBQUdDLFFBQVEsQ0FBQ04sY0FBYztJQUNsRSxPQUFPQyxPQUFPQztBQUNoQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvX2xpYi9hZGRMZWFkaW5nWmVyb3MuanM/YjM2MyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gYWRkTGVhZGluZ1plcm9zKG51bWJlciwgdGFyZ2V0TGVuZ3RoKSB7XG4gIGNvbnN0IHNpZ24gPSBudW1iZXIgPCAwID8gXCItXCIgOiBcIlwiO1xuICBjb25zdCBvdXRwdXQgPSBNYXRoLmFicyhudW1iZXIpLnRvU3RyaW5nKCkucGFkU3RhcnQodGFyZ2V0TGVuZ3RoLCBcIjBcIik7XG4gIHJldHVybiBzaWduICsgb3V0cHV0O1xufVxuIl0sIm5hbWVzIjpbImFkZExlYWRpbmdaZXJvcyIsIm51bWJlciIsInRhcmdldExlbmd0aCIsInNpZ24iLCJvdXRwdXQiLCJNYXRoIiwiYWJzIiwidG9TdHJpbmciLCJwYWRTdGFydCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/_lib/addLeadingZeros.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/_lib/defaultOptions.js":
/*!******************************************************!*\
  !*** ./node_modules/date-fns/_lib/defaultOptions.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDefaultOptions: function() { return /* binding */ getDefaultOptions; },\n/* harmony export */   setDefaultOptions: function() { return /* binding */ setDefaultOptions; }\n/* harmony export */ });\nlet defaultOptions = {};\nfunction getDefaultOptions() {\n    return defaultOptions;\n}\nfunction setDefaultOptions(newOptions) {\n    defaultOptions = newOptions;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2RlZmF1bHRPcHRpb25zLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBSUEsaUJBQWlCLENBQUM7QUFFZixTQUFTQztJQUNkLE9BQU9EO0FBQ1Q7QUFFTyxTQUFTRSxrQkFBa0JDLFVBQVU7SUFDMUNILGlCQUFpQkc7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL19saWIvZGVmYXVsdE9wdGlvbnMuanM/Y2Q3ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgZGVmYXVsdE9wdGlvbnMgPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRPcHRpb25zKCkge1xuICByZXR1cm4gZGVmYXVsdE9wdGlvbnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXREZWZhdWx0T3B0aW9ucyhuZXdPcHRpb25zKSB7XG4gIGRlZmF1bHRPcHRpb25zID0gbmV3T3B0aW9ucztcbn1cbiJdLCJuYW1lcyI6WyJkZWZhdWx0T3B0aW9ucyIsImdldERlZmF1bHRPcHRpb25zIiwic2V0RGVmYXVsdE9wdGlvbnMiLCJuZXdPcHRpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/_lib/defaultOptions.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/_lib/format/formatters.js":
/*!*********************************************************!*\
  !*** ./node_modules/date-fns/_lib/format/formatters.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatters: function() { return /* binding */ formatters; }\n/* harmony export */ });\n/* harmony import */ var _getDayOfYear_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../getDayOfYear.js */ \"(app-pages-browser)/./node_modules/date-fns/getDayOfYear.js\");\n/* harmony import */ var _getISOWeek_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../getISOWeek.js */ \"(app-pages-browser)/./node_modules/date-fns/getISOWeek.js\");\n/* harmony import */ var _getISOWeekYear_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../getISOWeekYear.js */ \"(app-pages-browser)/./node_modules/date-fns/getISOWeekYear.js\");\n/* harmony import */ var _getWeek_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../getWeek.js */ \"(app-pages-browser)/./node_modules/date-fns/getWeek.js\");\n/* harmony import */ var _getWeekYear_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../getWeekYear.js */ \"(app-pages-browser)/./node_modules/date-fns/getWeekYear.js\");\n/* harmony import */ var _addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../addLeadingZeros.js */ \"(app-pages-browser)/./node_modules/date-fns/_lib/addLeadingZeros.js\");\n/* harmony import */ var _lightFormatters_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lightFormatters.js */ \"(app-pages-browser)/./node_modules/date-fns/_lib/format/lightFormatters.js\");\n\n\n\n\n\n\n\nconst dayPeriodEnum = {\n    am: \"am\",\n    pm: \"pm\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\"\n};\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */ const formatters = {\n    // Era\n    G: function(date, token, localize) {\n        const era = date.getFullYear() > 0 ? 1 : 0;\n        switch(token){\n            // AD, BC\n            case \"G\":\n            case \"GG\":\n            case \"GGG\":\n                return localize.era(era, {\n                    width: \"abbreviated\"\n                });\n            // A, B\n            case \"GGGGG\":\n                return localize.era(era, {\n                    width: \"narrow\"\n                });\n            // Anno Domini, Before Christ\n            case \"GGGG\":\n            default:\n                return localize.era(era, {\n                    width: \"wide\"\n                });\n        }\n    },\n    // Year\n    y: function(date, token, localize) {\n        // Ordinal number\n        if (token === \"yo\") {\n            const signedYear = date.getFullYear();\n            // Returns 1 for 1 BC (which is year 0 in JavaScript)\n            const year = signedYear > 0 ? signedYear : 1 - signedYear;\n            return localize.ordinalNumber(year, {\n                unit: \"year\"\n            });\n        }\n        return _lightFormatters_js__WEBPACK_IMPORTED_MODULE_0__.lightFormatters.y(date, token);\n    },\n    // Local week-numbering year\n    Y: function(date, token, localize, options) {\n        const signedWeekYear = (0,_getWeekYear_js__WEBPACK_IMPORTED_MODULE_1__.getWeekYear)(date, options);\n        // Returns 1 for 1 BC (which is year 0 in JavaScript)\n        const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n        // Two digit year\n        if (token === \"YY\") {\n            const twoDigitYear = weekYear % 100;\n            return (0,_addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(twoDigitYear, 2);\n        }\n        // Ordinal number\n        if (token === \"Yo\") {\n            return localize.ordinalNumber(weekYear, {\n                unit: \"year\"\n            });\n        }\n        // Padding\n        return (0,_addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(weekYear, token.length);\n    },\n    // ISO week-numbering year\n    R: function(date, token) {\n        const isoWeekYear = (0,_getISOWeekYear_js__WEBPACK_IMPORTED_MODULE_3__.getISOWeekYear)(date);\n        // Padding\n        return (0,_addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(isoWeekYear, token.length);\n    },\n    // Extended year. This is a single number designating the year of this calendar system.\n    // The main difference between `y` and `u` localizers are B.C. years:\n    // | Year | `y` | `u` |\n    // |------|-----|-----|\n    // | AC 1 |   1 |   1 |\n    // | BC 1 |   1 |   0 |\n    // | BC 2 |   2 |  -1 |\n    // Also `yy` always returns the last two digits of a year,\n    // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n    u: function(date, token) {\n        const year = date.getFullYear();\n        return (0,_addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(year, token.length);\n    },\n    // Quarter\n    Q: function(date, token, localize) {\n        const quarter = Math.ceil((date.getMonth() + 1) / 3);\n        switch(token){\n            // 1, 2, 3, 4\n            case \"Q\":\n                return String(quarter);\n            // 01, 02, 03, 04\n            case \"QQ\":\n                return (0,_addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(quarter, 2);\n            // 1st, 2nd, 3rd, 4th\n            case \"Qo\":\n                return localize.ordinalNumber(quarter, {\n                    unit: \"quarter\"\n                });\n            // Q1, Q2, Q3, Q4\n            case \"QQQ\":\n                return localize.quarter(quarter, {\n                    width: \"abbreviated\",\n                    context: \"formatting\"\n                });\n            // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n            case \"QQQQQ\":\n                return localize.quarter(quarter, {\n                    width: \"narrow\",\n                    context: \"formatting\"\n                });\n            // 1st quarter, 2nd quarter, ...\n            case \"QQQQ\":\n            default:\n                return localize.quarter(quarter, {\n                    width: \"wide\",\n                    context: \"formatting\"\n                });\n        }\n    },\n    // Stand-alone quarter\n    q: function(date, token, localize) {\n        const quarter = Math.ceil((date.getMonth() + 1) / 3);\n        switch(token){\n            // 1, 2, 3, 4\n            case \"q\":\n                return String(quarter);\n            // 01, 02, 03, 04\n            case \"qq\":\n                return (0,_addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(quarter, 2);\n            // 1st, 2nd, 3rd, 4th\n            case \"qo\":\n                return localize.ordinalNumber(quarter, {\n                    unit: \"quarter\"\n                });\n            // Q1, Q2, Q3, Q4\n            case \"qqq\":\n                return localize.quarter(quarter, {\n                    width: \"abbreviated\",\n                    context: \"standalone\"\n                });\n            // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n            case \"qqqqq\":\n                return localize.quarter(quarter, {\n                    width: \"narrow\",\n                    context: \"standalone\"\n                });\n            // 1st quarter, 2nd quarter, ...\n            case \"qqqq\":\n            default:\n                return localize.quarter(quarter, {\n                    width: \"wide\",\n                    context: \"standalone\"\n                });\n        }\n    },\n    // Month\n    M: function(date, token, localize) {\n        const month = date.getMonth();\n        switch(token){\n            case \"M\":\n            case \"MM\":\n                return _lightFormatters_js__WEBPACK_IMPORTED_MODULE_0__.lightFormatters.M(date, token);\n            // 1st, 2nd, ..., 12th\n            case \"Mo\":\n                return localize.ordinalNumber(month + 1, {\n                    unit: \"month\"\n                });\n            // Jan, Feb, ..., Dec\n            case \"MMM\":\n                return localize.month(month, {\n                    width: \"abbreviated\",\n                    context: \"formatting\"\n                });\n            // J, F, ..., D\n            case \"MMMMM\":\n                return localize.month(month, {\n                    width: \"narrow\",\n                    context: \"formatting\"\n                });\n            // January, February, ..., December\n            case \"MMMM\":\n            default:\n                return localize.month(month, {\n                    width: \"wide\",\n                    context: \"formatting\"\n                });\n        }\n    },\n    // Stand-alone month\n    L: function(date, token, localize) {\n        const month = date.getMonth();\n        switch(token){\n            // 1, 2, ..., 12\n            case \"L\":\n                return String(month + 1);\n            // 01, 02, ..., 12\n            case \"LL\":\n                return (0,_addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(month + 1, 2);\n            // 1st, 2nd, ..., 12th\n            case \"Lo\":\n                return localize.ordinalNumber(month + 1, {\n                    unit: \"month\"\n                });\n            // Jan, Feb, ..., Dec\n            case \"LLL\":\n                return localize.month(month, {\n                    width: \"abbreviated\",\n                    context: \"standalone\"\n                });\n            // J, F, ..., D\n            case \"LLLLL\":\n                return localize.month(month, {\n                    width: \"narrow\",\n                    context: \"standalone\"\n                });\n            // January, February, ..., December\n            case \"LLLL\":\n            default:\n                return localize.month(month, {\n                    width: \"wide\",\n                    context: \"standalone\"\n                });\n        }\n    },\n    // Local week of year\n    w: function(date, token, localize, options) {\n        const week = (0,_getWeek_js__WEBPACK_IMPORTED_MODULE_4__.getWeek)(date, options);\n        if (token === \"wo\") {\n            return localize.ordinalNumber(week, {\n                unit: \"week\"\n            });\n        }\n        return (0,_addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(week, token.length);\n    },\n    // ISO week of year\n    I: function(date, token, localize) {\n        const isoWeek = (0,_getISOWeek_js__WEBPACK_IMPORTED_MODULE_5__.getISOWeek)(date);\n        if (token === \"Io\") {\n            return localize.ordinalNumber(isoWeek, {\n                unit: \"week\"\n            });\n        }\n        return (0,_addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(isoWeek, token.length);\n    },\n    // Day of the month\n    d: function(date, token, localize) {\n        if (token === \"do\") {\n            return localize.ordinalNumber(date.getDate(), {\n                unit: \"date\"\n            });\n        }\n        return _lightFormatters_js__WEBPACK_IMPORTED_MODULE_0__.lightFormatters.d(date, token);\n    },\n    // Day of year\n    D: function(date, token, localize) {\n        const dayOfYear = (0,_getDayOfYear_js__WEBPACK_IMPORTED_MODULE_6__.getDayOfYear)(date);\n        if (token === \"Do\") {\n            return localize.ordinalNumber(dayOfYear, {\n                unit: \"dayOfYear\"\n            });\n        }\n        return (0,_addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(dayOfYear, token.length);\n    },\n    // Day of week\n    E: function(date, token, localize) {\n        const dayOfWeek = date.getDay();\n        switch(token){\n            // Tue\n            case \"E\":\n            case \"EE\":\n            case \"EEE\":\n                return localize.day(dayOfWeek, {\n                    width: \"abbreviated\",\n                    context: \"formatting\"\n                });\n            // T\n            case \"EEEEE\":\n                return localize.day(dayOfWeek, {\n                    width: \"narrow\",\n                    context: \"formatting\"\n                });\n            // Tu\n            case \"EEEEEE\":\n                return localize.day(dayOfWeek, {\n                    width: \"short\",\n                    context: \"formatting\"\n                });\n            // Tuesday\n            case \"EEEE\":\n            default:\n                return localize.day(dayOfWeek, {\n                    width: \"wide\",\n                    context: \"formatting\"\n                });\n        }\n    },\n    // Local day of week\n    e: function(date, token, localize, options) {\n        const dayOfWeek = date.getDay();\n        const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n        switch(token){\n            // Numerical value (Nth day of week with current locale or weekStartsOn)\n            case \"e\":\n                return String(localDayOfWeek);\n            // Padded numerical value\n            case \"ee\":\n                return (0,_addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(localDayOfWeek, 2);\n            // 1st, 2nd, ..., 7th\n            case \"eo\":\n                return localize.ordinalNumber(localDayOfWeek, {\n                    unit: \"day\"\n                });\n            case \"eee\":\n                return localize.day(dayOfWeek, {\n                    width: \"abbreviated\",\n                    context: \"formatting\"\n                });\n            // T\n            case \"eeeee\":\n                return localize.day(dayOfWeek, {\n                    width: \"narrow\",\n                    context: \"formatting\"\n                });\n            // Tu\n            case \"eeeeee\":\n                return localize.day(dayOfWeek, {\n                    width: \"short\",\n                    context: \"formatting\"\n                });\n            // Tuesday\n            case \"eeee\":\n            default:\n                return localize.day(dayOfWeek, {\n                    width: \"wide\",\n                    context: \"formatting\"\n                });\n        }\n    },\n    // Stand-alone local day of week\n    c: function(date, token, localize, options) {\n        const dayOfWeek = date.getDay();\n        const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n        switch(token){\n            // Numerical value (same as in `e`)\n            case \"c\":\n                return String(localDayOfWeek);\n            // Padded numerical value\n            case \"cc\":\n                return (0,_addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(localDayOfWeek, token.length);\n            // 1st, 2nd, ..., 7th\n            case \"co\":\n                return localize.ordinalNumber(localDayOfWeek, {\n                    unit: \"day\"\n                });\n            case \"ccc\":\n                return localize.day(dayOfWeek, {\n                    width: \"abbreviated\",\n                    context: \"standalone\"\n                });\n            // T\n            case \"ccccc\":\n                return localize.day(dayOfWeek, {\n                    width: \"narrow\",\n                    context: \"standalone\"\n                });\n            // Tu\n            case \"cccccc\":\n                return localize.day(dayOfWeek, {\n                    width: \"short\",\n                    context: \"standalone\"\n                });\n            // Tuesday\n            case \"cccc\":\n            default:\n                return localize.day(dayOfWeek, {\n                    width: \"wide\",\n                    context: \"standalone\"\n                });\n        }\n    },\n    // ISO day of week\n    i: function(date, token, localize) {\n        const dayOfWeek = date.getDay();\n        const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n        switch(token){\n            // 2\n            case \"i\":\n                return String(isoDayOfWeek);\n            // 02\n            case \"ii\":\n                return (0,_addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(isoDayOfWeek, token.length);\n            // 2nd\n            case \"io\":\n                return localize.ordinalNumber(isoDayOfWeek, {\n                    unit: \"day\"\n                });\n            // Tue\n            case \"iii\":\n                return localize.day(dayOfWeek, {\n                    width: \"abbreviated\",\n                    context: \"formatting\"\n                });\n            // T\n            case \"iiiii\":\n                return localize.day(dayOfWeek, {\n                    width: \"narrow\",\n                    context: \"formatting\"\n                });\n            // Tu\n            case \"iiiiii\":\n                return localize.day(dayOfWeek, {\n                    width: \"short\",\n                    context: \"formatting\"\n                });\n            // Tuesday\n            case \"iiii\":\n            default:\n                return localize.day(dayOfWeek, {\n                    width: \"wide\",\n                    context: \"formatting\"\n                });\n        }\n    },\n    // AM or PM\n    a: function(date, token, localize) {\n        const hours = date.getHours();\n        const dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n        switch(token){\n            case \"a\":\n            case \"aa\":\n                return localize.dayPeriod(dayPeriodEnumValue, {\n                    width: \"abbreviated\",\n                    context: \"formatting\"\n                });\n            case \"aaa\":\n                return localize.dayPeriod(dayPeriodEnumValue, {\n                    width: \"abbreviated\",\n                    context: \"formatting\"\n                }).toLowerCase();\n            case \"aaaaa\":\n                return localize.dayPeriod(dayPeriodEnumValue, {\n                    width: \"narrow\",\n                    context: \"formatting\"\n                });\n            case \"aaaa\":\n            default:\n                return localize.dayPeriod(dayPeriodEnumValue, {\n                    width: \"wide\",\n                    context: \"formatting\"\n                });\n        }\n    },\n    // AM, PM, midnight, noon\n    b: function(date, token, localize) {\n        const hours = date.getHours();\n        let dayPeriodEnumValue;\n        if (hours === 12) {\n            dayPeriodEnumValue = dayPeriodEnum.noon;\n        } else if (hours === 0) {\n            dayPeriodEnumValue = dayPeriodEnum.midnight;\n        } else {\n            dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n        }\n        switch(token){\n            case \"b\":\n            case \"bb\":\n                return localize.dayPeriod(dayPeriodEnumValue, {\n                    width: \"abbreviated\",\n                    context: \"formatting\"\n                });\n            case \"bbb\":\n                return localize.dayPeriod(dayPeriodEnumValue, {\n                    width: \"abbreviated\",\n                    context: \"formatting\"\n                }).toLowerCase();\n            case \"bbbbb\":\n                return localize.dayPeriod(dayPeriodEnumValue, {\n                    width: \"narrow\",\n                    context: \"formatting\"\n                });\n            case \"bbbb\":\n            default:\n                return localize.dayPeriod(dayPeriodEnumValue, {\n                    width: \"wide\",\n                    context: \"formatting\"\n                });\n        }\n    },\n    // in the morning, in the afternoon, in the evening, at night\n    B: function(date, token, localize) {\n        const hours = date.getHours();\n        let dayPeriodEnumValue;\n        if (hours >= 17) {\n            dayPeriodEnumValue = dayPeriodEnum.evening;\n        } else if (hours >= 12) {\n            dayPeriodEnumValue = dayPeriodEnum.afternoon;\n        } else if (hours >= 4) {\n            dayPeriodEnumValue = dayPeriodEnum.morning;\n        } else {\n            dayPeriodEnumValue = dayPeriodEnum.night;\n        }\n        switch(token){\n            case \"B\":\n            case \"BB\":\n            case \"BBB\":\n                return localize.dayPeriod(dayPeriodEnumValue, {\n                    width: \"abbreviated\",\n                    context: \"formatting\"\n                });\n            case \"BBBBB\":\n                return localize.dayPeriod(dayPeriodEnumValue, {\n                    width: \"narrow\",\n                    context: \"formatting\"\n                });\n            case \"BBBB\":\n            default:\n                return localize.dayPeriod(dayPeriodEnumValue, {\n                    width: \"wide\",\n                    context: \"formatting\"\n                });\n        }\n    },\n    // Hour [1-12]\n    h: function(date, token, localize) {\n        if (token === \"ho\") {\n            let hours = date.getHours() % 12;\n            if (hours === 0) hours = 12;\n            return localize.ordinalNumber(hours, {\n                unit: \"hour\"\n            });\n        }\n        return _lightFormatters_js__WEBPACK_IMPORTED_MODULE_0__.lightFormatters.h(date, token);\n    },\n    // Hour [0-23]\n    H: function(date, token, localize) {\n        if (token === \"Ho\") {\n            return localize.ordinalNumber(date.getHours(), {\n                unit: \"hour\"\n            });\n        }\n        return _lightFormatters_js__WEBPACK_IMPORTED_MODULE_0__.lightFormatters.H(date, token);\n    },\n    // Hour [0-11]\n    K: function(date, token, localize) {\n        const hours = date.getHours() % 12;\n        if (token === \"Ko\") {\n            return localize.ordinalNumber(hours, {\n                unit: \"hour\"\n            });\n        }\n        return (0,_addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(hours, token.length);\n    },\n    // Hour [1-24]\n    k: function(date, token, localize) {\n        let hours = date.getHours();\n        if (hours === 0) hours = 24;\n        if (token === \"ko\") {\n            return localize.ordinalNumber(hours, {\n                unit: \"hour\"\n            });\n        }\n        return (0,_addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(hours, token.length);\n    },\n    // Minute\n    m: function(date, token, localize) {\n        if (token === \"mo\") {\n            return localize.ordinalNumber(date.getMinutes(), {\n                unit: \"minute\"\n            });\n        }\n        return _lightFormatters_js__WEBPACK_IMPORTED_MODULE_0__.lightFormatters.m(date, token);\n    },\n    // Second\n    s: function(date, token, localize) {\n        if (token === \"so\") {\n            return localize.ordinalNumber(date.getSeconds(), {\n                unit: \"second\"\n            });\n        }\n        return _lightFormatters_js__WEBPACK_IMPORTED_MODULE_0__.lightFormatters.s(date, token);\n    },\n    // Fraction of second\n    S: function(date, token) {\n        return _lightFormatters_js__WEBPACK_IMPORTED_MODULE_0__.lightFormatters.S(date, token);\n    },\n    // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n    X: function(date, token, _localize) {\n        const timezoneOffset = date.getTimezoneOffset();\n        if (timezoneOffset === 0) {\n            return \"Z\";\n        }\n        switch(token){\n            // Hours and optional minutes\n            case \"X\":\n                return formatTimezoneWithOptionalMinutes(timezoneOffset);\n            // Hours, minutes and optional seconds without `:` delimiter\n            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n            // so this token always has the same output as `XX`\n            case \"XXXX\":\n            case \"XX\":\n                return formatTimezone(timezoneOffset);\n            // Hours, minutes and optional seconds with `:` delimiter\n            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n            // so this token always has the same output as `XXX`\n            case \"XXXXX\":\n            case \"XXX\":\n            default:\n                return formatTimezone(timezoneOffset, \":\");\n        }\n    },\n    // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n    x: function(date, token, _localize) {\n        const timezoneOffset = date.getTimezoneOffset();\n        switch(token){\n            // Hours and optional minutes\n            case \"x\":\n                return formatTimezoneWithOptionalMinutes(timezoneOffset);\n            // Hours, minutes and optional seconds without `:` delimiter\n            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n            // so this token always has the same output as `xx`\n            case \"xxxx\":\n            case \"xx\":\n                return formatTimezone(timezoneOffset);\n            // Hours, minutes and optional seconds with `:` delimiter\n            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n            // so this token always has the same output as `xxx`\n            case \"xxxxx\":\n            case \"xxx\":\n            default:\n                return formatTimezone(timezoneOffset, \":\");\n        }\n    },\n    // Timezone (GMT)\n    O: function(date, token, _localize) {\n        const timezoneOffset = date.getTimezoneOffset();\n        switch(token){\n            // Short\n            case \"O\":\n            case \"OO\":\n            case \"OOO\":\n                return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n            // Long\n            case \"OOOO\":\n            default:\n                return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n        }\n    },\n    // Timezone (specific non-location)\n    z: function(date, token, _localize) {\n        const timezoneOffset = date.getTimezoneOffset();\n        switch(token){\n            // Short\n            case \"z\":\n            case \"zz\":\n            case \"zzz\":\n                return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n            // Long\n            case \"zzzz\":\n            default:\n                return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n        }\n    },\n    // Seconds timestamp\n    t: function(date, token, _localize) {\n        const timestamp = Math.trunc(+date / 1000);\n        return (0,_addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(timestamp, token.length);\n    },\n    // Milliseconds timestamp\n    T: function(date, token, _localize) {\n        return (0,_addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(+date, token.length);\n    }\n};\nfunction formatTimezoneShort(offset) {\n    let delimiter = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n    const sign = offset > 0 ? \"-\" : \"+\";\n    const absOffset = Math.abs(offset);\n    const hours = Math.trunc(absOffset / 60);\n    const minutes = absOffset % 60;\n    if (minutes === 0) {\n        return sign + String(hours);\n    }\n    return sign + String(hours) + delimiter + (0,_addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(minutes, 2);\n}\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n    if (offset % 60 === 0) {\n        const sign = offset > 0 ? \"-\" : \"+\";\n        return sign + (0,_addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(Math.abs(offset) / 60, 2);\n    }\n    return formatTimezone(offset, delimiter);\n}\nfunction formatTimezone(offset) {\n    let delimiter = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n    const sign = offset > 0 ? \"-\" : \"+\";\n    const absOffset = Math.abs(offset);\n    const hours = (0,_addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(Math.trunc(absOffset / 60), 2);\n    const minutes = (0,_addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_2__.addLeadingZeros)(absOffset % 60, 2);\n    return sign + hours + delimiter + minutes;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/_lib/format/formatters.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/_lib/format/lightFormatters.js":
/*!**************************************************************!*\
  !*** ./node_modules/date-fns/_lib/format/lightFormatters.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   lightFormatters: function() { return /* binding */ lightFormatters; }\n/* harmony export */ });\n/* harmony import */ var _addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../addLeadingZeros.js */ \"(app-pages-browser)/./node_modules/date-fns/_lib/addLeadingZeros.js\");\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */ const lightFormatters = {\n    // Year\n    y (date, token) {\n        // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n        // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n        // |----------|-------|----|-------|-------|-------|\n        // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n        // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n        // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n        // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n        // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n        const signedYear = date.getFullYear();\n        // Returns 1 for 1 BC (which is year 0 in JavaScript)\n        const year = signedYear > 0 ? signedYear : 1 - signedYear;\n        return (0,_addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_0__.addLeadingZeros)(token === \"yy\" ? year % 100 : year, token.length);\n    },\n    // Month\n    M (date, token) {\n        const month = date.getMonth();\n        return token === \"M\" ? String(month + 1) : (0,_addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_0__.addLeadingZeros)(month + 1, 2);\n    },\n    // Day of the month\n    d (date, token) {\n        return (0,_addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_0__.addLeadingZeros)(date.getDate(), token.length);\n    },\n    // AM or PM\n    a (date, token) {\n        const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? \"pm\" : \"am\";\n        switch(token){\n            case \"a\":\n            case \"aa\":\n                return dayPeriodEnumValue.toUpperCase();\n            case \"aaa\":\n                return dayPeriodEnumValue;\n            case \"aaaaa\":\n                return dayPeriodEnumValue[0];\n            case \"aaaa\":\n            default:\n                return dayPeriodEnumValue === \"am\" ? \"a.m.\" : \"p.m.\";\n        }\n    },\n    // Hour [1-12]\n    h (date, token) {\n        return (0,_addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_0__.addLeadingZeros)(date.getHours() % 12 || 12, token.length);\n    },\n    // Hour [0-23]\n    H (date, token) {\n        return (0,_addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_0__.addLeadingZeros)(date.getHours(), token.length);\n    },\n    // Minute\n    m (date, token) {\n        return (0,_addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_0__.addLeadingZeros)(date.getMinutes(), token.length);\n    },\n    // Second\n    s (date, token) {\n        return (0,_addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_0__.addLeadingZeros)(date.getSeconds(), token.length);\n    },\n    // Fraction of second\n    S (date, token) {\n        const numberOfDigits = token.length;\n        const milliseconds = date.getMilliseconds();\n        const fractionalSeconds = Math.trunc(milliseconds * Math.pow(10, numberOfDigits - 3));\n        return (0,_addLeadingZeros_js__WEBPACK_IMPORTED_MODULE_0__.addLeadingZeros)(fractionalSeconds, token.length);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2Zvcm1hdC9saWdodEZvcm1hdHRlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBd0Q7QUFFeEQ7Ozs7Ozs7Ozs7O0NBV0MsR0FFTSxNQUFNQyxrQkFBa0I7SUFDN0IsT0FBTztJQUNQQyxHQUFFQyxJQUFJLEVBQUVDLEtBQUs7UUFDWCxzRkFBc0Y7UUFDdEYsb0RBQW9EO1FBQ3BELG9EQUFvRDtRQUNwRCxvREFBb0Q7UUFDcEQsb0RBQW9EO1FBQ3BELG9EQUFvRDtRQUNwRCxvREFBb0Q7UUFDcEQsb0RBQW9EO1FBRXBELE1BQU1DLGFBQWFGLEtBQUtHLFdBQVc7UUFDbkMscURBQXFEO1FBQ3JELE1BQU1DLE9BQU9GLGFBQWEsSUFBSUEsYUFBYSxJQUFJQTtRQUMvQyxPQUFPTCxvRUFBZUEsQ0FBQ0ksVUFBVSxPQUFPRyxPQUFPLE1BQU1BLE1BQU1ILE1BQU1JLE1BQU07SUFDekU7SUFFQSxRQUFRO0lBQ1JDLEdBQUVOLElBQUksRUFBRUMsS0FBSztRQUNYLE1BQU1NLFFBQVFQLEtBQUtRLFFBQVE7UUFDM0IsT0FBT1AsVUFBVSxNQUFNUSxPQUFPRixRQUFRLEtBQUtWLG9FQUFlQSxDQUFDVSxRQUFRLEdBQUc7SUFDeEU7SUFFQSxtQkFBbUI7SUFDbkJHLEdBQUVWLElBQUksRUFBRUMsS0FBSztRQUNYLE9BQU9KLG9FQUFlQSxDQUFDRyxLQUFLVyxPQUFPLElBQUlWLE1BQU1JLE1BQU07SUFDckQ7SUFFQSxXQUFXO0lBQ1hPLEdBQUVaLElBQUksRUFBRUMsS0FBSztRQUNYLE1BQU1ZLHFCQUFxQmIsS0FBS2MsUUFBUSxLQUFLLE1BQU0sSUFBSSxPQUFPO1FBRTlELE9BQVFiO1lBQ04sS0FBSztZQUNMLEtBQUs7Z0JBQ0gsT0FBT1ksbUJBQW1CRSxXQUFXO1lBQ3ZDLEtBQUs7Z0JBQ0gsT0FBT0Y7WUFDVCxLQUFLO2dCQUNILE9BQU9BLGtCQUFrQixDQUFDLEVBQUU7WUFDOUIsS0FBSztZQUNMO2dCQUNFLE9BQU9BLHVCQUF1QixPQUFPLFNBQVM7UUFDbEQ7SUFDRjtJQUVBLGNBQWM7SUFDZEcsR0FBRWhCLElBQUksRUFBRUMsS0FBSztRQUNYLE9BQU9KLG9FQUFlQSxDQUFDRyxLQUFLYyxRQUFRLEtBQUssTUFBTSxJQUFJYixNQUFNSSxNQUFNO0lBQ2pFO0lBRUEsY0FBYztJQUNkWSxHQUFFakIsSUFBSSxFQUFFQyxLQUFLO1FBQ1gsT0FBT0osb0VBQWVBLENBQUNHLEtBQUtjLFFBQVEsSUFBSWIsTUFBTUksTUFBTTtJQUN0RDtJQUVBLFNBQVM7SUFDVGEsR0FBRWxCLElBQUksRUFBRUMsS0FBSztRQUNYLE9BQU9KLG9FQUFlQSxDQUFDRyxLQUFLbUIsVUFBVSxJQUFJbEIsTUFBTUksTUFBTTtJQUN4RDtJQUVBLFNBQVM7SUFDVGUsR0FBRXBCLElBQUksRUFBRUMsS0FBSztRQUNYLE9BQU9KLG9FQUFlQSxDQUFDRyxLQUFLcUIsVUFBVSxJQUFJcEIsTUFBTUksTUFBTTtJQUN4RDtJQUVBLHFCQUFxQjtJQUNyQmlCLEdBQUV0QixJQUFJLEVBQUVDLEtBQUs7UUFDWCxNQUFNc0IsaUJBQWlCdEIsTUFBTUksTUFBTTtRQUNuQyxNQUFNbUIsZUFBZXhCLEtBQUt5QixlQUFlO1FBQ3pDLE1BQU1DLG9CQUFvQkMsS0FBS0MsS0FBSyxDQUNsQ0osZUFBZUcsS0FBS0UsR0FBRyxDQUFDLElBQUlOLGlCQUFpQjtRQUUvQyxPQUFPMUIsb0VBQWVBLENBQUM2QixtQkFBbUJ6QixNQUFNSSxNQUFNO0lBQ3hEO0FBQ0YsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvX2xpYi9mb3JtYXQvbGlnaHRGb3JtYXR0ZXJzLmpzP2YzZDUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYWRkTGVhZGluZ1plcm9zIH0gZnJvbSBcIi4uL2FkZExlYWRpbmdaZXJvcy5qc1wiO1xuXG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqL1xuXG5leHBvcnQgY29uc3QgbGlnaHRGb3JtYXR0ZXJzID0ge1xuICAvLyBZZWFyXG4gIHkoZGF0ZSwgdG9rZW4pIHtcbiAgICAvLyBGcm9tIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtMzEvdHIzNS1kYXRlcy5odG1sI0RhdGVfRm9ybWF0X3Rva2Vuc1xuICAgIC8vIHwgWWVhciAgICAgfCAgICAgeSB8IHl5IHwgICB5eXkgfCAgeXl5eSB8IHl5eXl5IHxcbiAgICAvLyB8LS0tLS0tLS0tLXwtLS0tLS0tfC0tLS18LS0tLS0tLXwtLS0tLS0tfC0tLS0tLS18XG4gICAgLy8gfCBBRCAxICAgICB8ICAgICAxIHwgMDEgfCAgIDAwMSB8ICAwMDAxIHwgMDAwMDEgfFxuICAgIC8vIHwgQUQgMTIgICAgfCAgICAxMiB8IDEyIHwgICAwMTIgfCAgMDAxMiB8IDAwMDEyIHxcbiAgICAvLyB8IEFEIDEyMyAgIHwgICAxMjMgfCAyMyB8ICAgMTIzIHwgIDAxMjMgfCAwMDEyMyB8XG4gICAgLy8gfCBBRCAxMjM0ICB8ICAxMjM0IHwgMzQgfCAgMTIzNCB8ICAxMjM0IHwgMDEyMzQgfFxuICAgIC8vIHwgQUQgMTIzNDUgfCAxMjM0NSB8IDQ1IHwgMTIzNDUgfCAxMjM0NSB8IDEyMzQ1IHxcblxuICAgIGNvbnN0IHNpZ25lZFllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcbiAgICBjb25zdCB5ZWFyID0gc2lnbmVkWWVhciA+IDAgPyBzaWduZWRZZWFyIDogMSAtIHNpZ25lZFllYXI7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0b2tlbiA9PT0gXCJ5eVwiID8geWVhciAlIDEwMCA6IHllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG5cbiAgLy8gTW9udGhcbiAgTShkYXRlLCB0b2tlbikge1xuICAgIGNvbnN0IG1vbnRoID0gZGF0ZS5nZXRNb250aCgpO1xuICAgIHJldHVybiB0b2tlbiA9PT0gXCJNXCIgPyBTdHJpbmcobW9udGggKyAxKSA6IGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICB9LFxuXG4gIC8vIERheSBvZiB0aGUgbW9udGhcbiAgZChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXREYXRlKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG5cbiAgLy8gQU0gb3IgUE1cbiAgYShkYXRlLCB0b2tlbikge1xuICAgIGNvbnN0IGRheVBlcmlvZEVudW1WYWx1ZSA9IGRhdGUuZ2V0SG91cnMoKSAvIDEyID49IDEgPyBcInBtXCIgOiBcImFtXCI7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlIFwiYVwiOlxuICAgICAgY2FzZSBcImFhXCI6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWUudG9VcHBlckNhc2UoKTtcbiAgICAgIGNhc2UgXCJhYWFcIjpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZTtcbiAgICAgIGNhc2UgXCJhYWFhYVwiOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlWzBdO1xuICAgICAgY2FzZSBcImFhYWFcIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWUgPT09IFwiYW1cIiA/IFwiYS5tLlwiIDogXCJwLm0uXCI7XG4gICAgfVxuICB9LFxuXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGgoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0SG91cnMoKSAlIDEyIHx8IDEyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuXG4gIC8vIEhvdXIgWzAtMjNdXG4gIEgoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0SG91cnMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBNaW51dGVcbiAgbShkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRNaW51dGVzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG5cbiAgLy8gU2Vjb25kXG4gIHMoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0U2Vjb25kcygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTKGRhdGUsIHRva2VuKSB7XG4gICAgY29uc3QgbnVtYmVyT2ZEaWdpdHMgPSB0b2tlbi5sZW5ndGg7XG4gICAgY29uc3QgbWlsbGlzZWNvbmRzID0gZGF0ZS5nZXRNaWxsaXNlY29uZHMoKTtcbiAgICBjb25zdCBmcmFjdGlvbmFsU2Vjb25kcyA9IE1hdGgudHJ1bmMoXG4gICAgICBtaWxsaXNlY29uZHMgKiBNYXRoLnBvdygxMCwgbnVtYmVyT2ZEaWdpdHMgLSAzKSxcbiAgICApO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZnJhY3Rpb25hbFNlY29uZHMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG59O1xuIl0sIm5hbWVzIjpbImFkZExlYWRpbmdaZXJvcyIsImxpZ2h0Rm9ybWF0dGVycyIsInkiLCJkYXRlIiwidG9rZW4iLCJzaWduZWRZZWFyIiwiZ2V0RnVsbFllYXIiLCJ5ZWFyIiwibGVuZ3RoIiwiTSIsIm1vbnRoIiwiZ2V0TW9udGgiLCJTdHJpbmciLCJkIiwiZ2V0RGF0ZSIsImEiLCJkYXlQZXJpb2RFbnVtVmFsdWUiLCJnZXRIb3VycyIsInRvVXBwZXJDYXNlIiwiaCIsIkgiLCJtIiwiZ2V0TWludXRlcyIsInMiLCJnZXRTZWNvbmRzIiwiUyIsIm51bWJlck9mRGlnaXRzIiwibWlsbGlzZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwiZnJhY3Rpb25hbFNlY29uZHMiLCJNYXRoIiwidHJ1bmMiLCJwb3ciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/_lib/format/lightFormatters.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/_lib/format/longFormatters.js":
/*!*************************************************************!*\
  !*** ./node_modules/date-fns/_lib/format/longFormatters.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   longFormatters: function() { return /* binding */ longFormatters; }\n/* harmony export */ });\nconst dateLongFormatter = (pattern, formatLong)=>{\n    switch(pattern){\n        case \"P\":\n            return formatLong.date({\n                width: \"short\"\n            });\n        case \"PP\":\n            return formatLong.date({\n                width: \"medium\"\n            });\n        case \"PPP\":\n            return formatLong.date({\n                width: \"long\"\n            });\n        case \"PPPP\":\n        default:\n            return formatLong.date({\n                width: \"full\"\n            });\n    }\n};\nconst timeLongFormatter = (pattern, formatLong)=>{\n    switch(pattern){\n        case \"p\":\n            return formatLong.time({\n                width: \"short\"\n            });\n        case \"pp\":\n            return formatLong.time({\n                width: \"medium\"\n            });\n        case \"ppp\":\n            return formatLong.time({\n                width: \"long\"\n            });\n        case \"pppp\":\n        default:\n            return formatLong.time({\n                width: \"full\"\n            });\n    }\n};\nconst dateTimeLongFormatter = (pattern, formatLong)=>{\n    const matchResult = pattern.match(/(P+)(p+)?/) || [];\n    const datePattern = matchResult[1];\n    const timePattern = matchResult[2];\n    if (!timePattern) {\n        return dateLongFormatter(pattern, formatLong);\n    }\n    let dateTimeFormat;\n    switch(datePattern){\n        case \"P\":\n            dateTimeFormat = formatLong.dateTime({\n                width: \"short\"\n            });\n            break;\n        case \"PP\":\n            dateTimeFormat = formatLong.dateTime({\n                width: \"medium\"\n            });\n            break;\n        case \"PPP\":\n            dateTimeFormat = formatLong.dateTime({\n                width: \"long\"\n            });\n            break;\n        case \"PPPP\":\n        default:\n            dateTimeFormat = formatLong.dateTime({\n                width: \"full\"\n            });\n            break;\n    }\n    return dateTimeFormat.replace(\"{{date}}\", dateLongFormatter(datePattern, formatLong)).replace(\"{{time}}\", timeLongFormatter(timePattern, formatLong));\n};\nconst longFormatters = {\n    p: timeLongFormatter,\n    P: dateTimeLongFormatter\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2Zvcm1hdC9sb25nRm9ybWF0dGVycy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsb0JBQW9CLENBQUNDLFNBQVNDO0lBQ2xDLE9BQVFEO1FBQ04sS0FBSztZQUNILE9BQU9DLFdBQVdDLElBQUksQ0FBQztnQkFBRUMsT0FBTztZQUFRO1FBQzFDLEtBQUs7WUFDSCxPQUFPRixXQUFXQyxJQUFJLENBQUM7Z0JBQUVDLE9BQU87WUFBUztRQUMzQyxLQUFLO1lBQ0gsT0FBT0YsV0FBV0MsSUFBSSxDQUFDO2dCQUFFQyxPQUFPO1lBQU87UUFDekMsS0FBSztRQUNMO1lBQ0UsT0FBT0YsV0FBV0MsSUFBSSxDQUFDO2dCQUFFQyxPQUFPO1lBQU87SUFDM0M7QUFDRjtBQUVBLE1BQU1DLG9CQUFvQixDQUFDSixTQUFTQztJQUNsQyxPQUFRRDtRQUNOLEtBQUs7WUFDSCxPQUFPQyxXQUFXSSxJQUFJLENBQUM7Z0JBQUVGLE9BQU87WUFBUTtRQUMxQyxLQUFLO1lBQ0gsT0FBT0YsV0FBV0ksSUFBSSxDQUFDO2dCQUFFRixPQUFPO1lBQVM7UUFDM0MsS0FBSztZQUNILE9BQU9GLFdBQVdJLElBQUksQ0FBQztnQkFBRUYsT0FBTztZQUFPO1FBQ3pDLEtBQUs7UUFDTDtZQUNFLE9BQU9GLFdBQVdJLElBQUksQ0FBQztnQkFBRUYsT0FBTztZQUFPO0lBQzNDO0FBQ0Y7QUFFQSxNQUFNRyx3QkFBd0IsQ0FBQ04sU0FBU0M7SUFDdEMsTUFBTU0sY0FBY1AsUUFBUVEsS0FBSyxDQUFDLGdCQUFnQixFQUFFO0lBQ3BELE1BQU1DLGNBQWNGLFdBQVcsQ0FBQyxFQUFFO0lBQ2xDLE1BQU1HLGNBQWNILFdBQVcsQ0FBQyxFQUFFO0lBRWxDLElBQUksQ0FBQ0csYUFBYTtRQUNoQixPQUFPWCxrQkFBa0JDLFNBQVNDO0lBQ3BDO0lBRUEsSUFBSVU7SUFFSixPQUFRRjtRQUNOLEtBQUs7WUFDSEUsaUJBQWlCVixXQUFXVyxRQUFRLENBQUM7Z0JBQUVULE9BQU87WUFBUTtZQUN0RDtRQUNGLEtBQUs7WUFDSFEsaUJBQWlCVixXQUFXVyxRQUFRLENBQUM7Z0JBQUVULE9BQU87WUFBUztZQUN2RDtRQUNGLEtBQUs7WUFDSFEsaUJBQWlCVixXQUFXVyxRQUFRLENBQUM7Z0JBQUVULE9BQU87WUFBTztZQUNyRDtRQUNGLEtBQUs7UUFDTDtZQUNFUSxpQkFBaUJWLFdBQVdXLFFBQVEsQ0FBQztnQkFBRVQsT0FBTztZQUFPO1lBQ3JEO0lBQ0o7SUFFQSxPQUFPUSxlQUNKRSxPQUFPLENBQUMsWUFBWWQsa0JBQWtCVSxhQUFhUixhQUNuRFksT0FBTyxDQUFDLFlBQVlULGtCQUFrQk0sYUFBYVQ7QUFDeEQ7QUFFTyxNQUFNYSxpQkFBaUI7SUFDNUJDLEdBQUdYO0lBQ0hZLEdBQUdWO0FBQ0wsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMuanM/MmIwZiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBkYXRlTG9uZ0Zvcm1hdHRlciA9IChwYXR0ZXJuLCBmb3JtYXRMb25nKSA9PiB7XG4gIHN3aXRjaCAocGF0dGVybikge1xuICAgIGNhc2UgXCJQXCI6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHsgd2lkdGg6IFwic2hvcnRcIiB9KTtcbiAgICBjYXNlIFwiUFBcIjpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoeyB3aWR0aDogXCJtZWRpdW1cIiB9KTtcbiAgICBjYXNlIFwiUFBQXCI6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHsgd2lkdGg6IFwibG9uZ1wiIH0pO1xuICAgIGNhc2UgXCJQUFBQXCI6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoeyB3aWR0aDogXCJmdWxsXCIgfSk7XG4gIH1cbn07XG5cbmNvbnN0IHRpbWVMb25nRm9ybWF0dGVyID0gKHBhdHRlcm4sIGZvcm1hdExvbmcpID0+IHtcbiAgc3dpdGNoIChwYXR0ZXJuKSB7XG4gICAgY2FzZSBcInBcIjpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoeyB3aWR0aDogXCJzaG9ydFwiIH0pO1xuICAgIGNhc2UgXCJwcFwiOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7IHdpZHRoOiBcIm1lZGl1bVwiIH0pO1xuICAgIGNhc2UgXCJwcHBcIjpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoeyB3aWR0aDogXCJsb25nXCIgfSk7XG4gICAgY2FzZSBcInBwcHBcIjpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7IHdpZHRoOiBcImZ1bGxcIiB9KTtcbiAgfVxufTtcblxuY29uc3QgZGF0ZVRpbWVMb25nRm9ybWF0dGVyID0gKHBhdHRlcm4sIGZvcm1hdExvbmcpID0+IHtcbiAgY29uc3QgbWF0Y2hSZXN1bHQgPSBwYXR0ZXJuLm1hdGNoKC8oUCspKHArKT8vKSB8fCBbXTtcbiAgY29uc3QgZGF0ZVBhdHRlcm4gPSBtYXRjaFJlc3VsdFsxXTtcbiAgY29uc3QgdGltZVBhdHRlcm4gPSBtYXRjaFJlc3VsdFsyXTtcblxuICBpZiAoIXRpbWVQYXR0ZXJuKSB7XG4gICAgcmV0dXJuIGRhdGVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpO1xuICB9XG5cbiAgbGV0IGRhdGVUaW1lRm9ybWF0O1xuXG4gIHN3aXRjaCAoZGF0ZVBhdHRlcm4pIHtcbiAgICBjYXNlIFwiUFwiOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHsgd2lkdGg6IFwic2hvcnRcIiB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJQUFwiOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHsgd2lkdGg6IFwibWVkaXVtXCIgfSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiUFBQXCI6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoeyB3aWR0aDogXCJsb25nXCIgfSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiUFBQUFwiOlxuICAgIGRlZmF1bHQ6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoeyB3aWR0aDogXCJmdWxsXCIgfSk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiBkYXRlVGltZUZvcm1hdFxuICAgIC5yZXBsYWNlKFwie3tkYXRlfX1cIiwgZGF0ZUxvbmdGb3JtYXR0ZXIoZGF0ZVBhdHRlcm4sIGZvcm1hdExvbmcpKVxuICAgIC5yZXBsYWNlKFwie3t0aW1lfX1cIiwgdGltZUxvbmdGb3JtYXR0ZXIodGltZVBhdHRlcm4sIGZvcm1hdExvbmcpKTtcbn07XG5cbmV4cG9ydCBjb25zdCBsb25nRm9ybWF0dGVycyA9IHtcbiAgcDogdGltZUxvbmdGb3JtYXR0ZXIsXG4gIFA6IGRhdGVUaW1lTG9uZ0Zvcm1hdHRlcixcbn07XG4iXSwibmFtZXMiOlsiZGF0ZUxvbmdGb3JtYXR0ZXIiLCJwYXR0ZXJuIiwiZm9ybWF0TG9uZyIsImRhdGUiLCJ3aWR0aCIsInRpbWVMb25nRm9ybWF0dGVyIiwidGltZSIsImRhdGVUaW1lTG9uZ0Zvcm1hdHRlciIsIm1hdGNoUmVzdWx0IiwibWF0Y2giLCJkYXRlUGF0dGVybiIsInRpbWVQYXR0ZXJuIiwiZGF0ZVRpbWVGb3JtYXQiLCJkYXRlVGltZSIsInJlcGxhY2UiLCJsb25nRm9ybWF0dGVycyIsInAiLCJQIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/_lib/format/longFormatters.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js":
/*!***********************************************************************!*\
  !*** ./node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getTimezoneOffsetInMilliseconds: function() { return /* binding */ getTimezoneOffsetInMilliseconds; }\n/* harmony export */ });\n/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../toDate.js */ \"(app-pages-browser)/./node_modules/date-fns/toDate.js\");\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */ function getTimezoneOffsetInMilliseconds(date) {\n    const _date = (0,_toDate_js__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);\n    const utcDate = new Date(Date.UTC(_date.getFullYear(), _date.getMonth(), _date.getDate(), _date.getHours(), _date.getMinutes(), _date.getSeconds(), _date.getMilliseconds()));\n    utcDate.setUTCFullYear(_date.getFullYear());\n    return +date - +utcDate;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBc0M7QUFFdEM7Ozs7Ozs7Ozs7Q0FVQyxHQUNNLFNBQVNDLGdDQUFnQ0MsSUFBSTtJQUNsRCxNQUFNQyxRQUFRSCxrREFBTUEsQ0FBQ0U7SUFDckIsTUFBTUUsVUFBVSxJQUFJQyxLQUNsQkEsS0FBS0MsR0FBRyxDQUNOSCxNQUFNSSxXQUFXLElBQ2pCSixNQUFNSyxRQUFRLElBQ2RMLE1BQU1NLE9BQU8sSUFDYk4sTUFBTU8sUUFBUSxJQUNkUCxNQUFNUSxVQUFVLElBQ2hCUixNQUFNUyxVQUFVLElBQ2hCVCxNQUFNVSxlQUFlO0lBR3pCVCxRQUFRVSxjQUFjLENBQUNYLE1BQU1JLFdBQVc7SUFDeEMsT0FBTyxDQUFDTCxPQUFPLENBQUNFO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMuanM/YWIzNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0b0RhdGUgfSBmcm9tIFwiLi4vdG9EYXRlLmpzXCI7XG5cbi8qKlxuICogR29vZ2xlIENocm9tZSBhcyBvZiA2Ny4wLjMzOTYuODcgaW50cm9kdWNlZCB0aW1lem9uZXMgd2l0aCBvZmZzZXQgdGhhdCBpbmNsdWRlcyBzZWNvbmRzLlxuICogVGhleSB1c3VhbGx5IGFwcGVhciBmb3IgZGF0ZXMgdGhhdCBkZW5vdGUgdGltZSBiZWZvcmUgdGhlIHRpbWV6b25lcyB3ZXJlIGludHJvZHVjZWRcbiAqIChlLmcuIGZvciAnRXVyb3BlL1ByYWd1ZScgdGltZXpvbmUgdGhlIG9mZnNldCBpcyBHTVQrMDA6NTc6NDQgYmVmb3JlIDEgT2N0b2JlciAxODkxXG4gKiBhbmQgR01UKzAxOjAwOjAwIGFmdGVyIHRoYXQgZGF0ZSlcbiAqXG4gKiBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgdGhlIG9mZnNldCBpbiBtaW51dGVzIGFuZCB3b3VsZCByZXR1cm4gNTcgZm9yIHRoZSBleGFtcGxlIGFib3ZlLFxuICogd2hpY2ggd291bGQgbGVhZCB0byBpbmNvcnJlY3QgY2FsY3VsYXRpb25zLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgdGltZXpvbmUgb2Zmc2V0IGluIG1pbGxpc2Vjb25kcyB0aGF0IHRha2VzIHNlY29uZHMgaW4gYWNjb3VudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoZGF0ZSkge1xuICBjb25zdCBfZGF0ZSA9IHRvRGF0ZShkYXRlKTtcbiAgY29uc3QgdXRjRGF0ZSA9IG5ldyBEYXRlKFxuICAgIERhdGUuVVRDKFxuICAgICAgX2RhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICAgIF9kYXRlLmdldE1vbnRoKCksXG4gICAgICBfZGF0ZS5nZXREYXRlKCksXG4gICAgICBfZGF0ZS5nZXRIb3VycygpLFxuICAgICAgX2RhdGUuZ2V0TWludXRlcygpLFxuICAgICAgX2RhdGUuZ2V0U2Vjb25kcygpLFxuICAgICAgX2RhdGUuZ2V0TWlsbGlzZWNvbmRzKCksXG4gICAgKSxcbiAgKTtcbiAgdXRjRGF0ZS5zZXRVVENGdWxsWWVhcihfZGF0ZS5nZXRGdWxsWWVhcigpKTtcbiAgcmV0dXJuICtkYXRlIC0gK3V0Y0RhdGU7XG59XG4iXSwibmFtZXMiOlsidG9EYXRlIiwiZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyIsImRhdGUiLCJfZGF0ZSIsInV0Y0RhdGUiLCJEYXRlIiwiVVRDIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwic2V0VVRDRnVsbFllYXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/_lib/normalizeDates.js":
/*!******************************************************!*\
  !*** ./node_modules/date-fns/_lib/normalizeDates.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   normalizeDates: function() { return /* binding */ normalizeDates; }\n/* harmony export */ });\n/* harmony import */ var _constructFrom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constructFrom.js */ \"(app-pages-browser)/./node_modules/date-fns/constructFrom.js\");\n\nfunction normalizeDates(context) {\n    for(var _len = arguments.length, dates = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        dates[_key - 1] = arguments[_key];\n    }\n    const normalize = _constructFrom_js__WEBPACK_IMPORTED_MODULE_0__.constructFrom.bind(null, context || dates.find((date)=>typeof date === \"object\"));\n    return dates.map(normalize);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL25vcm1hbGl6ZURhdGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW9EO0FBRTdDLFNBQVNDLGVBQWVDLE9BQU87SUFBRTtRQUFHQyxNQUFILDJCQUFROztJQUM5QyxNQUFNQyxZQUFZSiw0REFBYUEsQ0FBQ0ssSUFBSSxDQUNsQyxNQUNBSCxXQUFXQyxNQUFNRyxJQUFJLENBQUMsQ0FBQ0MsT0FBUyxPQUFPQSxTQUFTO0lBRWxELE9BQU9KLE1BQU1LLEdBQUcsQ0FBQ0o7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL19saWIvbm9ybWFsaXplRGF0ZXMuanM/OGM3MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb25zdHJ1Y3RGcm9tIH0gZnJvbSBcIi4uL2NvbnN0cnVjdEZyb20uanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZURhdGVzKGNvbnRleHQsIC4uLmRhdGVzKSB7XG4gIGNvbnN0IG5vcm1hbGl6ZSA9IGNvbnN0cnVjdEZyb20uYmluZChcbiAgICBudWxsLFxuICAgIGNvbnRleHQgfHwgZGF0ZXMuZmluZCgoZGF0ZSkgPT4gdHlwZW9mIGRhdGUgPT09IFwib2JqZWN0XCIpLFxuICApO1xuICByZXR1cm4gZGF0ZXMubWFwKG5vcm1hbGl6ZSk7XG59XG4iXSwibmFtZXMiOlsiY29uc3RydWN0RnJvbSIsIm5vcm1hbGl6ZURhdGVzIiwiY29udGV4dCIsImRhdGVzIiwibm9ybWFsaXplIiwiYmluZCIsImZpbmQiLCJkYXRlIiwibWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/_lib/normalizeDates.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/_lib/protectedTokens.js":
/*!*******************************************************!*\
  !*** ./node_modules/date-fns/_lib/protectedTokens.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isProtectedDayOfYearToken: function() { return /* binding */ isProtectedDayOfYearToken; },\n/* harmony export */   isProtectedWeekYearToken: function() { return /* binding */ isProtectedWeekYearToken; },\n/* harmony export */   warnOrThrowProtectedError: function() { return /* binding */ warnOrThrowProtectedError; }\n/* harmony export */ });\nconst dayOfYearTokenRE = /^D+$/;\nconst weekYearTokenRE = /^Y+$/;\nconst throwTokens = [\n    \"D\",\n    \"DD\",\n    \"YY\",\n    \"YYYY\"\n];\nfunction isProtectedDayOfYearToken(token) {\n    return dayOfYearTokenRE.test(token);\n}\nfunction isProtectedWeekYearToken(token) {\n    return weekYearTokenRE.test(token);\n}\nfunction warnOrThrowProtectedError(token, format, input) {\n    const _message = message(token, format, input);\n    console.warn(_message);\n    if (throwTokens.includes(token)) throw new RangeError(_message);\n}\nfunction message(token, format, input) {\n    const subject = token[0] === \"Y\" ? \"years\" : \"days of the month\";\n    return \"Use `\".concat(token.toLowerCase(), \"` instead of `\").concat(token, \"` (in `\").concat(format, \"`) for formatting \").concat(subject, \" to the input `\").concat(input, \"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL3Byb3RlY3RlZFRva2Vucy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxNQUFNQSxtQkFBbUI7QUFDekIsTUFBTUMsa0JBQWtCO0FBRXhCLE1BQU1DLGNBQWM7SUFBQztJQUFLO0lBQU07SUFBTTtDQUFPO0FBRXRDLFNBQVNDLDBCQUEwQkMsS0FBSztJQUM3QyxPQUFPSixpQkFBaUJLLElBQUksQ0FBQ0Q7QUFDL0I7QUFFTyxTQUFTRSx5QkFBeUJGLEtBQUs7SUFDNUMsT0FBT0gsZ0JBQWdCSSxJQUFJLENBQUNEO0FBQzlCO0FBRU8sU0FBU0csMEJBQTBCSCxLQUFLLEVBQUVJLE1BQU0sRUFBRUMsS0FBSztJQUM1RCxNQUFNQyxXQUFXQyxRQUFRUCxPQUFPSSxRQUFRQztJQUN4Q0csUUFBUUMsSUFBSSxDQUFDSDtJQUNiLElBQUlSLFlBQVlZLFFBQVEsQ0FBQ1YsUUFBUSxNQUFNLElBQUlXLFdBQVdMO0FBQ3hEO0FBRUEsU0FBU0MsUUFBUVAsS0FBSyxFQUFFSSxNQUFNLEVBQUVDLEtBQUs7SUFDbkMsTUFBTU8sVUFBVVosS0FBSyxDQUFDLEVBQUUsS0FBSyxNQUFNLFVBQVU7SUFDN0MsT0FBTyxRQUErQ0EsT0FBdENBLE1BQU1hLFdBQVcsSUFBRyxrQkFBbUNULE9BQWpCSixPQUFNLFdBQXVDWSxPQUE1QlIsUUFBTyxzQkFBK0NDLE9BQTFCTyxTQUFRLG1CQUF3QixPQUFOUCxPQUFNO0FBQ3JJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL3Byb3RlY3RlZFRva2Vucy5qcz9lYTcyIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGRheU9mWWVhclRva2VuUkUgPSAvXkQrJC87XG5jb25zdCB3ZWVrWWVhclRva2VuUkUgPSAvXlkrJC87XG5cbmNvbnN0IHRocm93VG9rZW5zID0gW1wiRFwiLCBcIkREXCIsIFwiWVlcIiwgXCJZWVlZXCJdO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gZGF5T2ZZZWFyVG9rZW5SRS50ZXN0KHRva2VuKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gd2Vla1llYXJUb2tlblJFLnRlc3QodG9rZW4pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2Fybk9yVGhyb3dQcm90ZWN0ZWRFcnJvcih0b2tlbiwgZm9ybWF0LCBpbnB1dCkge1xuICBjb25zdCBfbWVzc2FnZSA9IG1lc3NhZ2UodG9rZW4sIGZvcm1hdCwgaW5wdXQpO1xuICBjb25zb2xlLndhcm4oX21lc3NhZ2UpO1xuICBpZiAodGhyb3dUb2tlbnMuaW5jbHVkZXModG9rZW4pKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcihfbWVzc2FnZSk7XG59XG5cbmZ1bmN0aW9uIG1lc3NhZ2UodG9rZW4sIGZvcm1hdCwgaW5wdXQpIHtcbiAgY29uc3Qgc3ViamVjdCA9IHRva2VuWzBdID09PSBcIllcIiA/IFwieWVhcnNcIiA6IFwiZGF5cyBvZiB0aGUgbW9udGhcIjtcbiAgcmV0dXJuIGBVc2UgXFxgJHt0b2tlbi50b0xvd2VyQ2FzZSgpfVxcYCBpbnN0ZWFkIG9mIFxcYCR7dG9rZW59XFxgIChpbiBcXGAke2Zvcm1hdH1cXGApIGZvciBmb3JtYXR0aW5nICR7c3ViamVjdH0gdG8gdGhlIGlucHV0IFxcYCR7aW5wdXR9XFxgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRgO1xufVxuIl0sIm5hbWVzIjpbImRheU9mWWVhclRva2VuUkUiLCJ3ZWVrWWVhclRva2VuUkUiLCJ0aHJvd1Rva2VucyIsImlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4iLCJ0b2tlbiIsInRlc3QiLCJpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4iLCJ3YXJuT3JUaHJvd1Byb3RlY3RlZEVycm9yIiwiZm9ybWF0IiwiaW5wdXQiLCJfbWVzc2FnZSIsIm1lc3NhZ2UiLCJjb25zb2xlIiwid2FybiIsImluY2x1ZGVzIiwiUmFuZ2VFcnJvciIsInN1YmplY3QiLCJ0b0xvd2VyQ2FzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/_lib/protectedTokens.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/constants.js":
/*!********************************************!*\
  !*** ./node_modules/date-fns/constants.js ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   constructFromSymbol: function() { return /* binding */ constructFromSymbol; },\n/* harmony export */   daysInWeek: function() { return /* binding */ daysInWeek; },\n/* harmony export */   daysInYear: function() { return /* binding */ daysInYear; },\n/* harmony export */   maxTime: function() { return /* binding */ maxTime; },\n/* harmony export */   millisecondsInDay: function() { return /* binding */ millisecondsInDay; },\n/* harmony export */   millisecondsInHour: function() { return /* binding */ millisecondsInHour; },\n/* harmony export */   millisecondsInMinute: function() { return /* binding */ millisecondsInMinute; },\n/* harmony export */   millisecondsInSecond: function() { return /* binding */ millisecondsInSecond; },\n/* harmony export */   millisecondsInWeek: function() { return /* binding */ millisecondsInWeek; },\n/* harmony export */   minTime: function() { return /* binding */ minTime; },\n/* harmony export */   minutesInDay: function() { return /* binding */ minutesInDay; },\n/* harmony export */   minutesInHour: function() { return /* binding */ minutesInHour; },\n/* harmony export */   minutesInMonth: function() { return /* binding */ minutesInMonth; },\n/* harmony export */   minutesInYear: function() { return /* binding */ minutesInYear; },\n/* harmony export */   monthsInQuarter: function() { return /* binding */ monthsInQuarter; },\n/* harmony export */   monthsInYear: function() { return /* binding */ monthsInYear; },\n/* harmony export */   quartersInYear: function() { return /* binding */ quartersInYear; },\n/* harmony export */   secondsInDay: function() { return /* binding */ secondsInDay; },\n/* harmony export */   secondsInHour: function() { return /* binding */ secondsInHour; },\n/* harmony export */   secondsInMinute: function() { return /* binding */ secondsInMinute; },\n/* harmony export */   secondsInMonth: function() { return /* binding */ secondsInMonth; },\n/* harmony export */   secondsInQuarter: function() { return /* binding */ secondsInQuarter; },\n/* harmony export */   secondsInWeek: function() { return /* binding */ secondsInWeek; },\n/* harmony export */   secondsInYear: function() { return /* binding */ secondsInYear; }\n/* harmony export */ });\n/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */ /**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */ const daysInWeek = 7;\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */ const daysInYear = 365.2425;\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */ const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */ const minTime = -maxTime;\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */ const millisecondsInWeek = 604800000;\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */ const millisecondsInDay = 86400000;\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */ const millisecondsInMinute = 60000;\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */ const millisecondsInHour = 3600000;\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */ const millisecondsInSecond = 1000;\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */ const minutesInYear = 525600;\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */ const minutesInMonth = 43200;\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */ const minutesInDay = 1440;\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */ const minutesInHour = 60;\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */ const monthsInQuarter = 3;\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */ const monthsInYear = 12;\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */ const quartersInYear = 4;\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */ const secondsInHour = 3600;\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */ const secondsInMinute = 60;\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */ const secondsInDay = secondsInHour * 24;\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */ const secondsInWeek = secondsInDay * 7;\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */ const secondsInYear = secondsInDay * daysInYear;\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */ const secondsInMonth = secondsInYear / 12;\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */ const secondsInQuarter = secondsInMonth * 3;\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It's useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */ const constructFromSymbol = Symbol.for(\"constructDateFrom\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/constants.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/constructFrom.js":
/*!************************************************!*\
  !*** ./node_modules/date-fns/constructFrom.js ***!
  \************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   constructFrom: function() { return /* binding */ constructFrom; }\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"(app-pages-browser)/./node_modules/date-fns/constants.js\");\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from \"./constructFrom/date-fns\";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */ function constructFrom(date, value) {\n    if (typeof date === \"function\") return date(value);\n    if (date && typeof date === \"object\" && _constants_js__WEBPACK_IMPORTED_MODULE_0__.constructFromSymbol in date) return date[_constants_js__WEBPACK_IMPORTED_MODULE_0__.constructFromSymbol](value);\n    if (date instanceof Date) return new date.constructor(value);\n    return new Date(value);\n}\n// Fallback for modularized imports:\n/* harmony default export */ __webpack_exports__[\"default\"] = (constructFrom);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9jb25zdHJ1Y3RGcm9tLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXFEO0FBRXJEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBa0NDLEdBQ00sU0FBU0MsY0FBY0MsSUFBSSxFQUFFQyxLQUFLO0lBQ3ZDLElBQUksT0FBT0QsU0FBUyxZQUFZLE9BQU9BLEtBQUtDO0lBRTVDLElBQUlELFFBQVEsT0FBT0EsU0FBUyxZQUFZRiw4REFBbUJBLElBQUlFLE1BQzdELE9BQU9BLElBQUksQ0FBQ0YsOERBQW1CQSxDQUFDLENBQUNHO0lBRW5DLElBQUlELGdCQUFnQkUsTUFBTSxPQUFPLElBQUlGLEtBQUtHLFdBQVcsQ0FBQ0Y7SUFFdEQsT0FBTyxJQUFJQyxLQUFLRDtBQUNsQjtBQUVBLG9DQUFvQztBQUNwQywrREFBZUYsYUFBYUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvY29uc3RydWN0RnJvbS5qcz9kNjQ1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbnN0cnVjdEZyb21TeW1ib2wgfSBmcm9tIFwiLi9jb25zdGFudHMuanNcIjtcblxuLyoqXG4gKiBAbmFtZSBjb25zdHJ1Y3RGcm9tXG4gKiBAY2F0ZWdvcnkgR2VuZXJpYyBIZWxwZXJzXG4gKiBAc3VtbWFyeSBDb25zdHJ1Y3RzIGEgZGF0ZSB1c2luZyB0aGUgcmVmZXJlbmNlIGRhdGUgYW5kIHRoZSB2YWx1ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGZ1bmN0aW9uIGNvbnN0cnVjdHMgYSBuZXcgZGF0ZSB1c2luZyB0aGUgY29uc3RydWN0b3IgZnJvbSB0aGUgcmVmZXJlbmNlXG4gKiBkYXRlIGFuZCB0aGUgZ2l2ZW4gdmFsdWUuIEl0IGhlbHBzIHRvIGJ1aWxkIGdlbmVyaWMgZnVuY3Rpb25zIHRoYXQgYWNjZXB0XG4gKiBkYXRlIGV4dGVuc2lvbnMuXG4gKlxuICogSXQgZGVmYXVsdHMgdG8gYERhdGVgIGlmIHRoZSBwYXNzZWQgcmVmZXJlbmNlIGRhdGUgaXMgYSBudW1iZXIgb3IgYSBzdHJpbmcuXG4gKlxuICogU3RhcnRpbmcgZnJvbSB2My43LjAsIGl0IGFsbG93cyB0byBjb25zdHJ1Y3QgYSBkYXRlIHVzaW5nIGBbU3ltYm9sLmZvcihcImNvbnN0cnVjdERhdGVGcm9tXCIpXWBcbiAqIGVuYWJsaW5nIHRvIHRyYW5zZmVyIGV4dHJhIHByb3BlcnRpZXMgZnJvbSB0aGUgcmVmZXJlbmNlIGRhdGUgdG8gdGhlIG5ldyBkYXRlLlxuICogSXQncyB1c2VmdWwgZm9yIGV4dGVuc2lvbnMgbGlrZSBbYFRaRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy90eilcbiAqIHRoYXQgYWNjZXB0IGEgdGltZSB6b25lIGFzIGEgY29uc3RydWN0b3IgYXJndW1lbnQuXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgcmVmZXJlbmNlIGRhdGUgdG8gdGFrZSBjb25zdHJ1Y3RvciBmcm9tXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gY3JlYXRlIHRoZSBkYXRlXG4gKlxuICogQHJldHVybnMgRGF0ZSBpbml0aWFsaXplZCB1c2luZyB0aGUgZ2l2ZW4gZGF0ZSBhbmQgdmFsdWVcbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IHsgY29uc3RydWN0RnJvbSB9IGZyb20gXCIuL2NvbnN0cnVjdEZyb20vZGF0ZS1mbnNcIjtcbiAqXG4gKiAvLyBBIGZ1bmN0aW9uIHRoYXQgY2xvbmVzIGEgZGF0ZSBwcmVzZXJ2aW5nIHRoZSBvcmlnaW5hbCB0eXBlXG4gKiBmdW5jdGlvbiBjbG9uZURhdGU8RGF0ZVR5cGUgZXh0ZW5kcyBEYXRlPihkYXRlOiBEYXRlVHlwZSk6IERhdGVUeXBlIHtcbiAqICAgcmV0dXJuIGNvbnN0cnVjdEZyb20oXG4gKiAgICAgZGF0ZSwgLy8gVXNlIGNvbnN0cnVjdG9yIGZyb20gdGhlIGdpdmVuIGRhdGVcbiAqICAgICBkYXRlLmdldFRpbWUoKSAvLyBVc2UgdGhlIGRhdGUgdmFsdWUgdG8gY3JlYXRlIGEgbmV3IGRhdGVcbiAqICAgKTtcbiAqIH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnN0cnVjdEZyb20oZGF0ZSwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBkYXRlID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBkYXRlKHZhbHVlKTtcblxuICBpZiAoZGF0ZSAmJiB0eXBlb2YgZGF0ZSA9PT0gXCJvYmplY3RcIiAmJiBjb25zdHJ1Y3RGcm9tU3ltYm9sIGluIGRhdGUpXG4gICAgcmV0dXJuIGRhdGVbY29uc3RydWN0RnJvbVN5bWJvbF0odmFsdWUpO1xuXG4gIGlmIChkYXRlIGluc3RhbmNlb2YgRGF0ZSkgcmV0dXJuIG5ldyBkYXRlLmNvbnN0cnVjdG9yKHZhbHVlKTtcblxuICByZXR1cm4gbmV3IERhdGUodmFsdWUpO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGNvbnN0cnVjdEZyb207XG4iXSwibmFtZXMiOlsiY29uc3RydWN0RnJvbVN5bWJvbCIsImNvbnN0cnVjdEZyb20iLCJkYXRlIiwidmFsdWUiLCJEYXRlIiwiY29uc3RydWN0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/constructFrom.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/differenceInCalendarDays.js":
/*!***********************************************************!*\
  !*** ./node_modules/date-fns/differenceInCalendarDays.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   differenceInCalendarDays: function() { return /* binding */ differenceInCalendarDays; }\n/* harmony export */ });\n/* harmony import */ var _lib_getTimezoneOffsetInMilliseconds_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_lib/getTimezoneOffsetInMilliseconds.js */ \"(app-pages-browser)/./node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js\");\n/* harmony import */ var _lib_normalizeDates_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_lib/normalizeDates.js */ \"(app-pages-browser)/./node_modules/date-fns/_lib/normalizeDates.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants.js */ \"(app-pages-browser)/./node_modules/date-fns/constants.js\");\n/* harmony import */ var _startOfDay_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./startOfDay.js */ \"(app-pages-browser)/./node_modules/date-fns/startOfDay.js\");\n\n\n\n\n/**\n * The {@link differenceInCalendarDays} function options.\n */ /**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - The options object\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */ function differenceInCalendarDays(laterDate, earlierDate, options) {\n    const [laterDate_, earlierDate_] = (0,_lib_normalizeDates_js__WEBPACK_IMPORTED_MODULE_0__.normalizeDates)(options === null || options === void 0 ? void 0 : options.in, laterDate, earlierDate);\n    const laterStartOfDay = (0,_startOfDay_js__WEBPACK_IMPORTED_MODULE_1__.startOfDay)(laterDate_);\n    const earlierStartOfDay = (0,_startOfDay_js__WEBPACK_IMPORTED_MODULE_1__.startOfDay)(earlierDate_);\n    const laterTimestamp = +laterStartOfDay - (0,_lib_getTimezoneOffsetInMilliseconds_js__WEBPACK_IMPORTED_MODULE_2__.getTimezoneOffsetInMilliseconds)(laterStartOfDay);\n    const earlierTimestamp = +earlierStartOfDay - (0,_lib_getTimezoneOffsetInMilliseconds_js__WEBPACK_IMPORTED_MODULE_2__.getTimezoneOffsetInMilliseconds)(earlierStartOfDay);\n    // Round the number of days to the nearest integer because the number of\n    // milliseconds in a day is not constant (e.g. it's different in the week of\n    // the daylight saving time clock shift).\n    return Math.round((laterTimestamp - earlierTimestamp) / _constants_js__WEBPACK_IMPORTED_MODULE_3__.millisecondsInDay);\n}\n// Fallback for modularized imports:\n/* harmony default export */ __webpack_exports__[\"default\"] = (differenceInCalendarDays);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9kaWZmZXJlbmNlSW5DYWxlbmRhckRheXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBNEY7QUFDbEM7QUFDUDtBQUNOO0FBRTdDOztDQUVDLEdBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQThCQyxHQUNNLFNBQVNJLHlCQUF5QkMsU0FBUyxFQUFFQyxXQUFXLEVBQUVDLE9BQU87SUFDdEUsTUFBTSxDQUFDQyxZQUFZQyxhQUFhLEdBQUdSLHNFQUFjQSxDQUMvQ00sb0JBQUFBLDhCQUFBQSxRQUFTRyxFQUFFLEVBQ1hMLFdBQ0FDO0lBR0YsTUFBTUssa0JBQWtCUiwwREFBVUEsQ0FBQ0s7SUFDbkMsTUFBTUksb0JBQW9CVCwwREFBVUEsQ0FBQ007SUFFckMsTUFBTUksaUJBQ0osQ0FBQ0Ysa0JBQWtCWCx3R0FBK0JBLENBQUNXO0lBQ3JELE1BQU1HLG1CQUNKLENBQUNGLG9CQUFvQlosd0dBQStCQSxDQUFDWTtJQUV2RCx3RUFBd0U7SUFDeEUsNEVBQTRFO0lBQzVFLHlDQUF5QztJQUN6QyxPQUFPRyxLQUFLQyxLQUFLLENBQUMsQ0FBQ0gsaUJBQWlCQyxnQkFBZSxJQUFLWiw0REFBaUJBO0FBQzNFO0FBRUEsb0NBQW9DO0FBQ3BDLCtEQUFlRSx3QkFBd0JBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2RpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cy5qcz8zMDg2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMgfSBmcm9tIFwiLi9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMuanNcIjtcbmltcG9ydCB7IG5vcm1hbGl6ZURhdGVzIH0gZnJvbSBcIi4vX2xpYi9ub3JtYWxpemVEYXRlcy5qc1wiO1xuaW1wb3J0IHsgbWlsbGlzZWNvbmRzSW5EYXkgfSBmcm9tIFwiLi9jb25zdGFudHMuanNcIjtcbmltcG9ydCB7IHN0YXJ0T2ZEYXkgfSBmcm9tIFwiLi9zdGFydE9mRGF5LmpzXCI7XG5cbi8qKlxuICogVGhlIHtAbGluayBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXN9IGZ1bmN0aW9uIG9wdGlvbnMuXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXNcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBudW1iZXIgb2YgY2FsZW5kYXIgZGF5cyBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcy5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgbnVtYmVyIG9mIGNhbGVuZGFyIGRheXMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuIFRoaXMgbWVhbnMgdGhhdCB0aGUgdGltZXMgYXJlIHJlbW92ZWRcbiAqIGZyb20gdGhlIGRhdGVzIGFuZCB0aGVuIHRoZSBkaWZmZXJlbmNlIGluIGRheXMgaXMgY2FsY3VsYXRlZC5cbiAqXG4gKiBAcGFyYW0gbGF0ZXJEYXRlIC0gVGhlIGxhdGVyIGRhdGVcbiAqIEBwYXJhbSBlYXJsaWVyRGF0ZSAtIFRoZSBlYXJsaWVyIGRhdGVcbiAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgb2JqZWN0XG4gKlxuICogQHJldHVybnMgVGhlIG51bWJlciBvZiBjYWxlbmRhciBkYXlzXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEhvdyBtYW55IGNhbGVuZGFyIGRheXMgYXJlIGJldHdlZW5cbiAqIC8vIDIgSnVseSAyMDExIDIzOjAwOjAwIGFuZCAyIEp1bHkgMjAxMiAwMDowMDowMD9cbiAqIGNvbnN0IHJlc3VsdCA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhcbiAqICAgbmV3IERhdGUoMjAxMiwgNiwgMiwgMCwgMCksXG4gKiAgIG5ldyBEYXRlKDIwMTEsIDYsIDIsIDIzLCAwKVxuICogKVxuICogLy89PiAzNjZcbiAqIC8vIEhvdyBtYW55IGNhbGVuZGFyIGRheXMgYXJlIGJldHdlZW5cbiAqIC8vIDIgSnVseSAyMDExIDIzOjU5OjAwIGFuZCAzIEp1bHkgMjAxMSAwMDowMTowMD9cbiAqIGNvbnN0IHJlc3VsdCA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhcbiAqICAgbmV3IERhdGUoMjAxMSwgNiwgMywgMCwgMSksXG4gKiAgIG5ldyBEYXRlKDIwMTEsIDYsIDIsIDIzLCA1OSlcbiAqIClcbiAqIC8vPT4gMVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzKGxhdGVyRGF0ZSwgZWFybGllckRhdGUsIG9wdGlvbnMpIHtcbiAgY29uc3QgW2xhdGVyRGF0ZV8sIGVhcmxpZXJEYXRlX10gPSBub3JtYWxpemVEYXRlcyhcbiAgICBvcHRpb25zPy5pbixcbiAgICBsYXRlckRhdGUsXG4gICAgZWFybGllckRhdGUsXG4gICk7XG5cbiAgY29uc3QgbGF0ZXJTdGFydE9mRGF5ID0gc3RhcnRPZkRheShsYXRlckRhdGVfKTtcbiAgY29uc3QgZWFybGllclN0YXJ0T2ZEYXkgPSBzdGFydE9mRGF5KGVhcmxpZXJEYXRlXyk7XG5cbiAgY29uc3QgbGF0ZXJUaW1lc3RhbXAgPVxuICAgICtsYXRlclN0YXJ0T2ZEYXkgLSBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKGxhdGVyU3RhcnRPZkRheSk7XG4gIGNvbnN0IGVhcmxpZXJUaW1lc3RhbXAgPVxuICAgICtlYXJsaWVyU3RhcnRPZkRheSAtIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoZWFybGllclN0YXJ0T2ZEYXkpO1xuXG4gIC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyIGJlY2F1c2UgdGhlIG51bWJlciBvZlxuICAvLyBtaWxsaXNlY29uZHMgaW4gYSBkYXkgaXMgbm90IGNvbnN0YW50IChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mXG4gIC8vIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdCkuXG4gIHJldHVybiBNYXRoLnJvdW5kKChsYXRlclRpbWVzdGFtcCAtIGVhcmxpZXJUaW1lc3RhbXApIC8gbWlsbGlzZWNvbmRzSW5EYXkpO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cztcbiJdLCJuYW1lcyI6WyJnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIiwibm9ybWFsaXplRGF0ZXMiLCJtaWxsaXNlY29uZHNJbkRheSIsInN0YXJ0T2ZEYXkiLCJkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMiLCJsYXRlckRhdGUiLCJlYXJsaWVyRGF0ZSIsIm9wdGlvbnMiLCJsYXRlckRhdGVfIiwiZWFybGllckRhdGVfIiwiaW4iLCJsYXRlclN0YXJ0T2ZEYXkiLCJlYXJsaWVyU3RhcnRPZkRheSIsImxhdGVyVGltZXN0YW1wIiwiZWFybGllclRpbWVzdGFtcCIsIk1hdGgiLCJyb3VuZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/differenceInCalendarDays.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/format.js":
/*!*****************************************!*\
  !*** ./node_modules/date-fns/format.js ***!
  \*****************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   format: function() { return /* binding */ format; },\n/* harmony export */   formatDate: function() { return /* binding */ format; },\n/* harmony export */   formatters: function() { return /* reexport safe */ _lib_format_formatters_js__WEBPACK_IMPORTED_MODULE_0__.formatters; },\n/* harmony export */   longFormatters: function() { return /* reexport safe */ _lib_format_longFormatters_js__WEBPACK_IMPORTED_MODULE_1__.longFormatters; }\n/* harmony export */ });\n/* harmony import */ var _lib_defaultLocale_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_lib/defaultLocale.js */ \"(app-pages-browser)/./node_modules/date-fns/locale/en-US.js\");\n/* harmony import */ var _lib_defaultOptions_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_lib/defaultOptions.js */ \"(app-pages-browser)/./node_modules/date-fns/_lib/defaultOptions.js\");\n/* harmony import */ var _lib_format_formatters_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_lib/format/formatters.js */ \"(app-pages-browser)/./node_modules/date-fns/_lib/format/formatters.js\");\n/* harmony import */ var _lib_format_longFormatters_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_lib/format/longFormatters.js */ \"(app-pages-browser)/./node_modules/date-fns/_lib/format/longFormatters.js\");\n/* harmony import */ var _lib_protectedTokens_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./_lib/protectedTokens.js */ \"(app-pages-browser)/./node_modules/date-fns/_lib/protectedTokens.js\");\n/* harmony import */ var _isValid_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./isValid.js */ \"(app-pages-browser)/./node_modules/date-fns/isValid.js\");\n/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./toDate.js */ \"(app-pages-browser)/./node_modules/date-fns/toDate.js\");\n\n\n\n\n\n\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\n/**\n * The {@link format} function options.\n */ /**\n * @name format\n * @alias formatDate\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\n *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @param date - The original date\n * @param format - The string of tokens\n * @param options - An object with options\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */ function format(date, formatStr, options) {\n    var _options_locale_options, _options_locale, _defaultOptions_locale_options, _defaultOptions_locale, _options_locale_options1, _options_locale1, _defaultOptions_locale_options1, _defaultOptions_locale1;\n    const defaultOptions = (0,_lib_defaultOptions_js__WEBPACK_IMPORTED_MODULE_2__.getDefaultOptions)();\n    var _options_locale2, _ref;\n    const locale = (_ref = (_options_locale2 = options === null || options === void 0 ? void 0 : options.locale) !== null && _options_locale2 !== void 0 ? _options_locale2 : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : _lib_defaultLocale_js__WEBPACK_IMPORTED_MODULE_3__.enUS;\n    var _options_firstWeekContainsDate, _ref1, _ref2, _ref3;\n    const firstWeekContainsDate = (_ref3 = (_ref2 = (_ref1 = (_options_firstWeekContainsDate = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options_firstWeekContainsDate !== void 0 ? _options_firstWeekContainsDate : options === null || options === void 0 ? void 0 : (_options_locale = options.locale) === null || _options_locale === void 0 ? void 0 : (_options_locale_options = _options_locale.options) === null || _options_locale_options === void 0 ? void 0 : _options_locale_options.firstWeekContainsDate) !== null && _ref1 !== void 0 ? _ref1 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions_locale = defaultOptions.locale) === null || _defaultOptions_locale === void 0 ? void 0 : (_defaultOptions_locale_options = _defaultOptions_locale.options) === null || _defaultOptions_locale_options === void 0 ? void 0 : _defaultOptions_locale_options.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : 1;\n    var _options_weekStartsOn, _ref4, _ref5, _ref6;\n    const weekStartsOn = (_ref6 = (_ref5 = (_ref4 = (_options_weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options_weekStartsOn !== void 0 ? _options_weekStartsOn : options === null || options === void 0 ? void 0 : (_options_locale1 = options.locale) === null || _options_locale1 === void 0 ? void 0 : (_options_locale_options1 = _options_locale1.options) === null || _options_locale_options1 === void 0 ? void 0 : _options_locale_options1.weekStartsOn) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : (_defaultOptions_locale1 = defaultOptions.locale) === null || _defaultOptions_locale1 === void 0 ? void 0 : (_defaultOptions_locale_options1 = _defaultOptions_locale1.options) === null || _defaultOptions_locale_options1 === void 0 ? void 0 : _defaultOptions_locale_options1.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : 0;\n    const originalDate = (0,_toDate_js__WEBPACK_IMPORTED_MODULE_4__.toDate)(date, options === null || options === void 0 ? void 0 : options.in);\n    if (!(0,_isValid_js__WEBPACK_IMPORTED_MODULE_5__.isValid)(originalDate)) {\n        throw new RangeError(\"Invalid time value\");\n    }\n    let parts = formatStr.match(longFormattingTokensRegExp).map((substring)=>{\n        const firstCharacter = substring[0];\n        if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n            const longFormatter = _lib_format_longFormatters_js__WEBPACK_IMPORTED_MODULE_1__.longFormatters[firstCharacter];\n            return longFormatter(substring, locale.formatLong);\n        }\n        return substring;\n    }).join(\"\").match(formattingTokensRegExp).map((substring)=>{\n        // Replace two single quote characters with one single quote character\n        if (substring === \"''\") {\n            return {\n                isToken: false,\n                value: \"'\"\n            };\n        }\n        const firstCharacter = substring[0];\n        if (firstCharacter === \"'\") {\n            return {\n                isToken: false,\n                value: cleanEscapedString(substring)\n            };\n        }\n        if (_lib_format_formatters_js__WEBPACK_IMPORTED_MODULE_0__.formatters[firstCharacter]) {\n            return {\n                isToken: true,\n                value: substring\n            };\n        }\n        if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n            throw new RangeError(\"Format string contains an unescaped latin alphabet character `\" + firstCharacter + \"`\");\n        }\n        return {\n            isToken: false,\n            value: substring\n        };\n    });\n    // invoke localize preprocessor (only for french locales at the moment)\n    if (locale.localize.preprocessor) {\n        parts = locale.localize.preprocessor(originalDate, parts);\n    }\n    const formatterOptions = {\n        firstWeekContainsDate,\n        weekStartsOn,\n        locale\n    };\n    return parts.map((part)=>{\n        if (!part.isToken) return part.value;\n        const token = part.value;\n        if (!(options === null || options === void 0 ? void 0 : options.useAdditionalWeekYearTokens) && (0,_lib_protectedTokens_js__WEBPACK_IMPORTED_MODULE_6__.isProtectedWeekYearToken)(token) || !(options === null || options === void 0 ? void 0 : options.useAdditionalDayOfYearTokens) && (0,_lib_protectedTokens_js__WEBPACK_IMPORTED_MODULE_6__.isProtectedDayOfYearToken)(token)) {\n            (0,_lib_protectedTokens_js__WEBPACK_IMPORTED_MODULE_6__.warnOrThrowProtectedError)(token, formatStr, String(date));\n        }\n        const formatter = _lib_format_formatters_js__WEBPACK_IMPORTED_MODULE_0__.formatters[token[0]];\n        return formatter(originalDate, token, locale.localize, formatterOptions);\n    }).join(\"\");\n}\nfunction cleanEscapedString(input) {\n    const matched = input.match(escapedStringRegExp);\n    if (!matched) {\n        return input;\n    }\n    return matched[1].replace(doubleQuoteRegExp, \"'\");\n}\n// Fallback for modularized imports:\n/* harmony default export */ __webpack_exports__[\"default\"] = (format);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/format.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/getDayOfYear.js":
/*!***********************************************!*\
  !*** ./node_modules/date-fns/getDayOfYear.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDayOfYear: function() { return /* binding */ getDayOfYear; }\n/* harmony export */ });\n/* harmony import */ var _differenceInCalendarDays_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./differenceInCalendarDays.js */ \"(app-pages-browser)/./node_modules/date-fns/differenceInCalendarDays.js\");\n/* harmony import */ var _startOfYear_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./startOfYear.js */ \"(app-pages-browser)/./node_modules/date-fns/startOfYear.js\");\n/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.js */ \"(app-pages-browser)/./node_modules/date-fns/toDate.js\");\n\n\n\n/**\n * The {@link getDayOfYear} function options.\n */ /**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */ function getDayOfYear(date, options) {\n    const _date = (0,_toDate_js__WEBPACK_IMPORTED_MODULE_0__.toDate)(date, options === null || options === void 0 ? void 0 : options.in);\n    const diff = (0,_differenceInCalendarDays_js__WEBPACK_IMPORTED_MODULE_1__.differenceInCalendarDays)(_date, (0,_startOfYear_js__WEBPACK_IMPORTED_MODULE_2__.startOfYear)(_date));\n    const dayOfYear = diff + 1;\n    return dayOfYear;\n}\n// Fallback for modularized imports:\n/* harmony default export */ __webpack_exports__[\"default\"] = (getDayOfYear);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9nZXREYXlPZlllYXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF5RTtBQUMxQjtBQUNWO0FBRXJDOztDQUVDLEdBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBaUJDLEdBQ00sU0FBU0csYUFBYUMsSUFBSSxFQUFFQyxPQUFPO0lBQ3hDLE1BQU1DLFFBQVFKLGtEQUFNQSxDQUFDRSxNQUFNQyxvQkFBQUEsOEJBQUFBLFFBQVNFLEVBQUU7SUFDdEMsTUFBTUMsT0FBT1Isc0ZBQXdCQSxDQUFDTSxPQUFPTCw0REFBV0EsQ0FBQ0s7SUFDekQsTUFBTUcsWUFBWUQsT0FBTztJQUN6QixPQUFPQztBQUNUO0FBRUEsb0NBQW9DO0FBQ3BDLCtEQUFlTixZQUFZQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9nZXREYXlPZlllYXIuanM/N2U2YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMgfSBmcm9tIFwiLi9kaWZmZXJlbmNlSW5DYWxlbmRhckRheXMuanNcIjtcbmltcG9ydCB7IHN0YXJ0T2ZZZWFyIH0gZnJvbSBcIi4vc3RhcnRPZlllYXIuanNcIjtcbmltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5qc1wiO1xuXG4vKipcbiAqIFRoZSB7QGxpbmsgZ2V0RGF5T2ZZZWFyfSBmdW5jdGlvbiBvcHRpb25zLlxuICovXG5cbi8qKlxuICogQG5hbWUgZ2V0RGF5T2ZZZWFyXG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgZGF5IG9mIHRoZSB5ZWFyIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBkYXkgb2YgdGhlIHllYXIgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgZ2l2ZW4gZGF0ZVxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zIFRoZSBkYXkgb2YgeWVhclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCBkYXkgb2YgdGhlIHllYXIgaXMgMiBKdWx5IDIwMTQ/XG4gKiBjb25zdCByZXN1bHQgPSBnZXREYXlPZlllYXIobmV3IERhdGUoMjAxNCwgNiwgMikpXG4gKiAvLz0+IDE4M1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGF5T2ZZZWFyKGRhdGUsIG9wdGlvbnMpIHtcbiAgY29uc3QgX2RhdGUgPSB0b0RhdGUoZGF0ZSwgb3B0aW9ucz8uaW4pO1xuICBjb25zdCBkaWZmID0gZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzKF9kYXRlLCBzdGFydE9mWWVhcihfZGF0ZSkpO1xuICBjb25zdCBkYXlPZlllYXIgPSBkaWZmICsgMTtcbiAgcmV0dXJuIGRheU9mWWVhcjtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBnZXREYXlPZlllYXI7XG4iXSwibmFtZXMiOlsiZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzIiwic3RhcnRPZlllYXIiLCJ0b0RhdGUiLCJnZXREYXlPZlllYXIiLCJkYXRlIiwib3B0aW9ucyIsIl9kYXRlIiwiaW4iLCJkaWZmIiwiZGF5T2ZZZWFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/getDayOfYear.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/getISOWeek.js":
/*!*********************************************!*\
  !*** ./node_modules/date-fns/getISOWeek.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getISOWeek: function() { return /* binding */ getISOWeek; }\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants.js */ \"(app-pages-browser)/./node_modules/date-fns/constants.js\");\n/* harmony import */ var _startOfISOWeek_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./startOfISOWeek.js */ \"(app-pages-browser)/./node_modules/date-fns/startOfISOWeek.js\");\n/* harmony import */ var _startOfISOWeekYear_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./startOfISOWeekYear.js */ \"(app-pages-browser)/./node_modules/date-fns/startOfISOWeekYear.js\");\n/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.js */ \"(app-pages-browser)/./node_modules/date-fns/toDate.js\");\n\n\n\n\n/**\n * The {@link getISOWeek} function options.\n */ /**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */ function getISOWeek(date, options) {\n    const _date = (0,_toDate_js__WEBPACK_IMPORTED_MODULE_0__.toDate)(date, options === null || options === void 0 ? void 0 : options.in);\n    const diff = +(0,_startOfISOWeek_js__WEBPACK_IMPORTED_MODULE_1__.startOfISOWeek)(_date) - +(0,_startOfISOWeekYear_js__WEBPACK_IMPORTED_MODULE_2__.startOfISOWeekYear)(_date);\n    // Round the number of weeks to the nearest integer because the number of\n    // milliseconds in a week is not constant (e.g. it's different in the week of\n    // the daylight saving time clock shift).\n    return Math.round(diff / _constants_js__WEBPACK_IMPORTED_MODULE_3__.millisecondsInWeek) + 1;\n}\n// Fallback for modularized imports:\n/* harmony default export */ __webpack_exports__[\"default\"] = (getISOWeek);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9nZXRJU09XZWVrLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQW9EO0FBQ0M7QUFDUTtBQUN4QjtBQUVyQzs7Q0FFQyxHQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBbUJDLEdBQ00sU0FBU0ksV0FBV0MsSUFBSSxFQUFFQyxPQUFPO0lBQ3RDLE1BQU1DLFFBQVFKLGtEQUFNQSxDQUFDRSxNQUFNQyxvQkFBQUEsOEJBQUFBLFFBQVNFLEVBQUU7SUFDdEMsTUFBTUMsT0FBTyxDQUFDUixrRUFBY0EsQ0FBQ00sU0FBUyxDQUFDTCwwRUFBa0JBLENBQUNLO0lBRTFELHlFQUF5RTtJQUN6RSw2RUFBNkU7SUFDN0UseUNBQXlDO0lBQ3pDLE9BQU9HLEtBQUtDLEtBQUssQ0FBQ0YsT0FBT1QsNkRBQWtCQSxJQUFJO0FBQ2pEO0FBRUEsb0NBQW9DO0FBQ3BDLCtEQUFlSSxVQUFVQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9nZXRJU09XZWVrLmpzP2E2YTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWlsbGlzZWNvbmRzSW5XZWVrIH0gZnJvbSBcIi4vY29uc3RhbnRzLmpzXCI7XG5pbXBvcnQgeyBzdGFydE9mSVNPV2VlayB9IGZyb20gXCIuL3N0YXJ0T2ZJU09XZWVrLmpzXCI7XG5pbXBvcnQgeyBzdGFydE9mSVNPV2Vla1llYXIgfSBmcm9tIFwiLi9zdGFydE9mSVNPV2Vla1llYXIuanNcIjtcbmltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5qc1wiO1xuXG4vKipcbiAqIFRoZSB7QGxpbmsgZ2V0SVNPV2Vla30gZnVuY3Rpb24gb3B0aW9ucy5cbiAqL1xuXG4vKipcbiAqIEBuYW1lIGdldElTT1dlZWtcbiAqIEBjYXRlZ29yeSBJU08gV2VlayBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIElTTyB3ZWVrIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBJU08gd2VlayBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBJU08gd2Vlay1udW1iZXJpbmcgeWVhcjogaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgZ2l2ZW4gZGF0ZVxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zIFRoZSBJU08gd2Vla1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCB3ZWVrIG9mIHRoZSBJU08td2VlayBudW1iZXJpbmcgeWVhciBpcyAyIEphbnVhcnkgMjAwNT9cbiAqIGNvbnN0IHJlc3VsdCA9IGdldElTT1dlZWsobmV3IERhdGUoMjAwNSwgMCwgMikpXG4gKiAvLz0+IDUzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRJU09XZWVrKGRhdGUsIG9wdGlvbnMpIHtcbiAgY29uc3QgX2RhdGUgPSB0b0RhdGUoZGF0ZSwgb3B0aW9ucz8uaW4pO1xuICBjb25zdCBkaWZmID0gK3N0YXJ0T2ZJU09XZWVrKF9kYXRlKSAtICtzdGFydE9mSVNPV2Vla1llYXIoX2RhdGUpO1xuXG4gIC8vIFJvdW5kIHRoZSBudW1iZXIgb2Ygd2Vla3MgdG8gdGhlIG5lYXJlc3QgaW50ZWdlciBiZWNhdXNlIHRoZSBudW1iZXIgb2ZcbiAgLy8gbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnQgKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2ZcbiAgLy8gdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KS5cbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIG1pbGxpc2Vjb25kc0luV2VlaykgKyAxO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGdldElTT1dlZWs7XG4iXSwibmFtZXMiOlsibWlsbGlzZWNvbmRzSW5XZWVrIiwic3RhcnRPZklTT1dlZWsiLCJzdGFydE9mSVNPV2Vla1llYXIiLCJ0b0RhdGUiLCJnZXRJU09XZWVrIiwiZGF0ZSIsIm9wdGlvbnMiLCJfZGF0ZSIsImluIiwiZGlmZiIsIk1hdGgiLCJyb3VuZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/getISOWeek.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/getISOWeekYear.js":
/*!*************************************************!*\
  !*** ./node_modules/date-fns/getISOWeekYear.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getISOWeekYear: function() { return /* binding */ getISOWeekYear; }\n/* harmony export */ });\n/* harmony import */ var _constructFrom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constructFrom.js */ \"(app-pages-browser)/./node_modules/date-fns/constructFrom.js\");\n/* harmony import */ var _startOfISOWeek_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./startOfISOWeek.js */ \"(app-pages-browser)/./node_modules/date-fns/startOfISOWeek.js\");\n/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.js */ \"(app-pages-browser)/./node_modules/date-fns/toDate.js\");\n\n\n\n/**\n * The {@link getISOWeekYear} function options.\n */ /**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n *\n * @returns The ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */ function getISOWeekYear(date, options) {\n    const _date = (0,_toDate_js__WEBPACK_IMPORTED_MODULE_0__.toDate)(date, options === null || options === void 0 ? void 0 : options.in);\n    const year = _date.getFullYear();\n    const fourthOfJanuaryOfNextYear = (0,_constructFrom_js__WEBPACK_IMPORTED_MODULE_1__.constructFrom)(_date, 0);\n    fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n    fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n    const startOfNextYear = (0,_startOfISOWeek_js__WEBPACK_IMPORTED_MODULE_2__.startOfISOWeek)(fourthOfJanuaryOfNextYear);\n    const fourthOfJanuaryOfThisYear = (0,_constructFrom_js__WEBPACK_IMPORTED_MODULE_1__.constructFrom)(_date, 0);\n    fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n    fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n    const startOfThisYear = (0,_startOfISOWeek_js__WEBPACK_IMPORTED_MODULE_2__.startOfISOWeek)(fourthOfJanuaryOfThisYear);\n    if (_date.getTime() >= startOfNextYear.getTime()) {\n        return year + 1;\n    } else if (_date.getTime() >= startOfThisYear.getTime()) {\n        return year;\n    } else {\n        return year - 1;\n    }\n}\n// Fallback for modularized imports:\n/* harmony default export */ __webpack_exports__[\"default\"] = (getISOWeekYear);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9nZXRJU09XZWVrWWVhci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQW1EO0FBQ0U7QUFDaEI7QUFFckM7O0NBRUMsR0FFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQW1CQyxHQUNNLFNBQVNHLGVBQWVDLElBQUksRUFBRUMsT0FBTztJQUMxQyxNQUFNQyxRQUFRSixrREFBTUEsQ0FBQ0UsTUFBTUMsb0JBQUFBLDhCQUFBQSxRQUFTRSxFQUFFO0lBQ3RDLE1BQU1DLE9BQU9GLE1BQU1HLFdBQVc7SUFFOUIsTUFBTUMsNEJBQTRCVixnRUFBYUEsQ0FBQ00sT0FBTztJQUN2REksMEJBQTBCQyxXQUFXLENBQUNILE9BQU8sR0FBRyxHQUFHO0lBQ25ERSwwQkFBMEJFLFFBQVEsQ0FBQyxHQUFHLEdBQUcsR0FBRztJQUM1QyxNQUFNQyxrQkFBa0JaLGtFQUFjQSxDQUFDUztJQUV2QyxNQUFNSSw0QkFBNEJkLGdFQUFhQSxDQUFDTSxPQUFPO0lBQ3ZEUSwwQkFBMEJILFdBQVcsQ0FBQ0gsTUFBTSxHQUFHO0lBQy9DTSwwQkFBMEJGLFFBQVEsQ0FBQyxHQUFHLEdBQUcsR0FBRztJQUM1QyxNQUFNRyxrQkFBa0JkLGtFQUFjQSxDQUFDYTtJQUV2QyxJQUFJUixNQUFNVSxPQUFPLE1BQU1ILGdCQUFnQkcsT0FBTyxJQUFJO1FBQ2hELE9BQU9SLE9BQU87SUFDaEIsT0FBTyxJQUFJRixNQUFNVSxPQUFPLE1BQU1ELGdCQUFnQkMsT0FBTyxJQUFJO1FBQ3ZELE9BQU9SO0lBQ1QsT0FBTztRQUNMLE9BQU9BLE9BQU87SUFDaEI7QUFDRjtBQUVBLG9DQUFvQztBQUNwQywrREFBZUwsY0FBY0EsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZ2V0SVNPV2Vla1llYXIuanM/ZWIxNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb25zdHJ1Y3RGcm9tIH0gZnJvbSBcIi4vY29uc3RydWN0RnJvbS5qc1wiO1xuaW1wb3J0IHsgc3RhcnRPZklTT1dlZWsgfSBmcm9tIFwiLi9zdGFydE9mSVNPV2Vlay5qc1wiO1xuaW1wb3J0IHsgdG9EYXRlIH0gZnJvbSBcIi4vdG9EYXRlLmpzXCI7XG5cbi8qKlxuICogVGhlIHtAbGluayBnZXRJU09XZWVrWWVhcn0gZnVuY3Rpb24gb3B0aW9ucy5cbiAqL1xuXG4vKipcbiAqIEBuYW1lIGdldElTT1dlZWtZZWFyXG4gKiBAY2F0ZWdvcnkgSVNPIFdlZWstTnVtYmVyaW5nIFllYXIgSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBJU08gd2Vlay1udW1iZXJpbmcgeWVhciBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgb2YgdGhlIGdpdmVuIGRhdGUsXG4gKiB3aGljaCBhbHdheXMgc3RhcnRzIDMgZGF5cyBiZWZvcmUgdGhlIHllYXIncyBmaXJzdCBUaHVyc2RheS5cbiAqXG4gKiBJU08gd2Vlay1udW1iZXJpbmcgeWVhcjogaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgZ2l2ZW4gZGF0ZVxuICpcbiAqIEByZXR1cm5zIFRoZSBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCBJU08td2VlayBudW1iZXJpbmcgeWVhciBpcyAyIEphbnVhcnkgMjAwNT9cbiAqIGNvbnN0IHJlc3VsdCA9IGdldElTT1dlZWtZZWFyKG5ldyBEYXRlKDIwMDUsIDAsIDIpKVxuICogLy89PiAyMDA0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRJU09XZWVrWWVhcihkYXRlLCBvcHRpb25zKSB7XG4gIGNvbnN0IF9kYXRlID0gdG9EYXRlKGRhdGUsIG9wdGlvbnM/LmluKTtcbiAgY29uc3QgeWVhciA9IF9kYXRlLmdldEZ1bGxZZWFyKCk7XG5cbiAgY29uc3QgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhciA9IGNvbnN0cnVjdEZyb20oX2RhdGUsIDApO1xuICBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyLnNldEZ1bGxZZWFyKHllYXIgKyAxLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgY29uc3Qgc3RhcnRPZk5leHRZZWFyID0gc3RhcnRPZklTT1dlZWsoZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhcik7XG5cbiAgY29uc3QgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhciA9IGNvbnN0cnVjdEZyb20oX2RhdGUsIDApO1xuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldEZ1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICBjb25zdCBzdGFydE9mVGhpc1llYXIgPSBzdGFydE9mSVNPV2Vlayhmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyKTtcblxuICBpZiAoX2RhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZOZXh0WWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhciArIDE7XG4gIH0gZWxzZSBpZiAoX2RhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBnZXRJU09XZWVrWWVhcjtcbiJdLCJuYW1lcyI6WyJjb25zdHJ1Y3RGcm9tIiwic3RhcnRPZklTT1dlZWsiLCJ0b0RhdGUiLCJnZXRJU09XZWVrWWVhciIsImRhdGUiLCJvcHRpb25zIiwiX2RhdGUiLCJpbiIsInllYXIiLCJnZXRGdWxsWWVhciIsImZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIiLCJzZXRGdWxsWWVhciIsInNldEhvdXJzIiwic3RhcnRPZk5leHRZZWFyIiwiZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhciIsInN0YXJ0T2ZUaGlzWWVhciIsImdldFRpbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/getISOWeekYear.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/getWeek.js":
/*!******************************************!*\
  !*** ./node_modules/date-fns/getWeek.js ***!
  \******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getWeek: function() { return /* binding */ getWeek; }\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants.js */ \"(app-pages-browser)/./node_modules/date-fns/constants.js\");\n/* harmony import */ var _startOfWeek_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./startOfWeek.js */ \"(app-pages-browser)/./node_modules/date-fns/startOfWeek.js\");\n/* harmony import */ var _startOfWeekYear_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./startOfWeekYear.js */ \"(app-pages-browser)/./node_modules/date-fns/startOfWeekYear.js\");\n/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.js */ \"(app-pages-browser)/./node_modules/date-fns/toDate.js\");\n\n\n\n\n/**\n * The {@link getWeek} function options.\n */ /**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */ function getWeek(date, options) {\n    const _date = (0,_toDate_js__WEBPACK_IMPORTED_MODULE_0__.toDate)(date, options === null || options === void 0 ? void 0 : options.in);\n    const diff = +(0,_startOfWeek_js__WEBPACK_IMPORTED_MODULE_1__.startOfWeek)(_date, options) - +(0,_startOfWeekYear_js__WEBPACK_IMPORTED_MODULE_2__.startOfWeekYear)(_date, options);\n    // Round the number of weeks to the nearest integer because the number of\n    // milliseconds in a week is not constant (e.g. it's different in the week of\n    // the daylight saving time clock shift).\n    return Math.round(diff / _constants_js__WEBPACK_IMPORTED_MODULE_3__.millisecondsInWeek) + 1;\n}\n// Fallback for modularized imports:\n/* harmony default export */ __webpack_exports__[\"default\"] = (getWeek);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9nZXRXZWVrLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQW9EO0FBQ0w7QUFDUTtBQUNsQjtBQUVyQzs7Q0FFQyxHQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FpQ0MsR0FDTSxTQUFTSSxRQUFRQyxJQUFJLEVBQUVDLE9BQU87SUFDbkMsTUFBTUMsUUFBUUosa0RBQU1BLENBQUNFLE1BQU1DLG9CQUFBQSw4QkFBQUEsUUFBU0UsRUFBRTtJQUN0QyxNQUFNQyxPQUFPLENBQUNSLDREQUFXQSxDQUFDTSxPQUFPRCxXQUFXLENBQUNKLG9FQUFlQSxDQUFDSyxPQUFPRDtJQUVwRSx5RUFBeUU7SUFDekUsNkVBQTZFO0lBQzdFLHlDQUF5QztJQUN6QyxPQUFPSSxLQUFLQyxLQUFLLENBQUNGLE9BQU9ULDZEQUFrQkEsSUFBSTtBQUNqRDtBQUVBLG9DQUFvQztBQUNwQywrREFBZUksT0FBT0EsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZ2V0V2Vlay5qcz83MjM2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1pbGxpc2Vjb25kc0luV2VlayB9IGZyb20gXCIuL2NvbnN0YW50cy5qc1wiO1xuaW1wb3J0IHsgc3RhcnRPZldlZWsgfSBmcm9tIFwiLi9zdGFydE9mV2Vlay5qc1wiO1xuaW1wb3J0IHsgc3RhcnRPZldlZWtZZWFyIH0gZnJvbSBcIi4vc3RhcnRPZldlZWtZZWFyLmpzXCI7XG5pbXBvcnQgeyB0b0RhdGUgfSBmcm9tIFwiLi90b0RhdGUuanNcIjtcblxuLyoqXG4gKiBUaGUge0BsaW5rIGdldFdlZWt9IGZ1bmN0aW9uIG9wdGlvbnMuXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBnZXRXZWVrXG4gKiBAY2F0ZWdvcnkgV2VlayBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIGxvY2FsIHdlZWsgaW5kZXggb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIGxvY2FsIHdlZWsgaW5kZXggb2YgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgZXhhY3QgY2FsY3VsYXRpb24gZGVwZW5kcyBvbiB0aGUgdmFsdWVzIG9mXG4gKiBgb3B0aW9ucy53ZWVrU3RhcnRzT25gICh3aGljaCBpcyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlaylcbiAqIGFuZCBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgICh3aGljaCBpcyB0aGUgZGF5IG9mIEphbnVhcnksIHdoaWNoIGlzIGFsd2F5cyBpblxuICogdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHdlZWstbnVtYmVyaW5nIHllYXIpXG4gKlxuICogV2VlayBudW1iZXJpbmc6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1dlZWsjVGhlX0lTT193ZWVrX2RhdGVfc3lzdGVtXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgZ2l2ZW4gZGF0ZVxuICogQHBhcmFtIG9wdGlvbnMgLSBBbiBvYmplY3Qgd2l0aCBvcHRpb25zXG4gKlxuICogQHJldHVybnMgVGhlIHdlZWtcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggd2VlayBvZiB0aGUgbG9jYWwgd2VlayBudW1iZXJpbmcgeWVhciBpcyAyIEphbnVhcnkgMjAwNSB3aXRoIGRlZmF1bHQgb3B0aW9ucz9cbiAqIGNvbnN0IHJlc3VsdCA9IGdldFdlZWsobmV3IERhdGUoMjAwNSwgMCwgMikpXG4gKiAvLz0+IDJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggd2VlayBvZiB0aGUgbG9jYWwgd2VlayBudW1iZXJpbmcgeWVhciBpcyAyIEphbnVhcnkgMjAwNSxcbiAqIC8vIGlmIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLFxuICogLy8gYW5kIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyIGFsd2F5cyBjb250YWlucyA0IEphbnVhcnk/XG4gKiBjb25zdCByZXN1bHQgPSBnZXRXZWVrKG5ldyBEYXRlKDIwMDUsIDAsIDIpLCB7XG4gKiAgIHdlZWtTdGFydHNPbjogMSxcbiAqICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiA0XG4gKiB9KVxuICogLy89PiA1M1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0V2VlayhkYXRlLCBvcHRpb25zKSB7XG4gIGNvbnN0IF9kYXRlID0gdG9EYXRlKGRhdGUsIG9wdGlvbnM/LmluKTtcbiAgY29uc3QgZGlmZiA9ICtzdGFydE9mV2VlayhfZGF0ZSwgb3B0aW9ucykgLSArc3RhcnRPZldlZWtZZWFyKF9kYXRlLCBvcHRpb25zKTtcblxuICAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIHdlZWtzIHRvIHRoZSBuZWFyZXN0IGludGVnZXIgYmVjYXVzZSB0aGUgbnVtYmVyIG9mXG4gIC8vIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50IChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mXG4gIC8vIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdCkuXG4gIHJldHVybiBNYXRoLnJvdW5kKGRpZmYgLyBtaWxsaXNlY29uZHNJbldlZWspICsgMTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBnZXRXZWVrO1xuIl0sIm5hbWVzIjpbIm1pbGxpc2Vjb25kc0luV2VlayIsInN0YXJ0T2ZXZWVrIiwic3RhcnRPZldlZWtZZWFyIiwidG9EYXRlIiwiZ2V0V2VlayIsImRhdGUiLCJvcHRpb25zIiwiX2RhdGUiLCJpbiIsImRpZmYiLCJNYXRoIiwicm91bmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/getWeek.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/getWeekYear.js":
/*!**********************************************!*\
  !*** ./node_modules/date-fns/getWeekYear.js ***!
  \**********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getWeekYear: function() { return /* binding */ getWeekYear; }\n/* harmony export */ });\n/* harmony import */ var _lib_defaultOptions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_lib/defaultOptions.js */ \"(app-pages-browser)/./node_modules/date-fns/_lib/defaultOptions.js\");\n/* harmony import */ var _constructFrom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constructFrom.js */ \"(app-pages-browser)/./node_modules/date-fns/constructFrom.js\");\n/* harmony import */ var _startOfWeek_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./startOfWeek.js */ \"(app-pages-browser)/./node_modules/date-fns/startOfWeek.js\");\n/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.js */ \"(app-pages-browser)/./node_modules/date-fns/toDate.js\");\n\n\n\n\n/**\n * The {@link getWeekYear} function options.\n */ /**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */ function getWeekYear(date, options) {\n    var _options_locale_options, _options_locale, _defaultOptions_locale_options, _defaultOptions_locale;\n    const _date = (0,_toDate_js__WEBPACK_IMPORTED_MODULE_0__.toDate)(date, options === null || options === void 0 ? void 0 : options.in);\n    const year = _date.getFullYear();\n    const defaultOptions = (0,_lib_defaultOptions_js__WEBPACK_IMPORTED_MODULE_1__.getDefaultOptions)();\n    var _options_firstWeekContainsDate, _ref, _ref1, _ref2;\n    const firstWeekContainsDate = (_ref2 = (_ref1 = (_ref = (_options_firstWeekContainsDate = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options_firstWeekContainsDate !== void 0 ? _options_firstWeekContainsDate : options === null || options === void 0 ? void 0 : (_options_locale = options.locale) === null || _options_locale === void 0 ? void 0 : (_options_locale_options = _options_locale.options) === null || _options_locale_options === void 0 ? void 0 : _options_locale_options.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : defaultOptions.firstWeekContainsDate) !== null && _ref1 !== void 0 ? _ref1 : (_defaultOptions_locale = defaultOptions.locale) === null || _defaultOptions_locale === void 0 ? void 0 : (_defaultOptions_locale_options = _defaultOptions_locale.options) === null || _defaultOptions_locale_options === void 0 ? void 0 : _defaultOptions_locale_options.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1;\n    const firstWeekOfNextYear = (0,_constructFrom_js__WEBPACK_IMPORTED_MODULE_2__.constructFrom)((options === null || options === void 0 ? void 0 : options.in) || date, 0);\n    firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n    firstWeekOfNextYear.setHours(0, 0, 0, 0);\n    const startOfNextYear = (0,_startOfWeek_js__WEBPACK_IMPORTED_MODULE_3__.startOfWeek)(firstWeekOfNextYear, options);\n    const firstWeekOfThisYear = (0,_constructFrom_js__WEBPACK_IMPORTED_MODULE_2__.constructFrom)((options === null || options === void 0 ? void 0 : options.in) || date, 0);\n    firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n    firstWeekOfThisYear.setHours(0, 0, 0, 0);\n    const startOfThisYear = (0,_startOfWeek_js__WEBPACK_IMPORTED_MODULE_3__.startOfWeek)(firstWeekOfThisYear, options);\n    if (+_date >= +startOfNextYear) {\n        return year + 1;\n    } else if (+_date >= +startOfThisYear) {\n        return year;\n    } else {\n        return year - 1;\n    }\n}\n// Fallback for modularized imports:\n/* harmony default export */ __webpack_exports__[\"default\"] = (getWeekYear);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9nZXRXZWVrWWVhci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE2RDtBQUNWO0FBQ0o7QUFDVjtBQUVyQzs7Q0FFQyxHQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FpQ0MsR0FDTSxTQUFTSSxZQUFZQyxJQUFJLEVBQUVDLE9BQU87UUFPckNBLHlCQUFBQSxpQkFFQUMsZ0NBQUFBO0lBUkYsTUFBTUMsUUFBUUwsa0RBQU1BLENBQUNFLE1BQU1DLG9CQUFBQSw4QkFBQUEsUUFBU0csRUFBRTtJQUN0QyxNQUFNQyxPQUFPRixNQUFNRyxXQUFXO0lBRTlCLE1BQU1KLGlCQUFpQlAseUVBQWlCQTtRQUV0Q00sZ0NBQUFBLE1BQUFBLE9BQUFBO0lBREYsTUFBTU0sd0JBQ0pOLENBQUFBLFFBQUFBLENBQUFBLFFBQUFBLENBQUFBLE9BQUFBLENBQUFBLGlDQUFBQSxvQkFBQUEsOEJBQUFBLFFBQVNNLHFCQUFxQixjQUE5Qk4sNENBQUFBLGlDQUNBQSxvQkFBQUEsK0JBQUFBLGtCQUFBQSxRQUFTTyxNQUFNLGNBQWZQLHVDQUFBQSwwQkFBQUEsZ0JBQWlCQSxPQUFPLGNBQXhCQSw4Q0FBQUEsd0JBQTBCTSxxQkFBcUIsY0FEL0NOLGtCQUFBQSxPQUVBQyxlQUFlSyxxQkFBcUIsY0FGcENOLG1CQUFBQSxTQUdBQyx5QkFBQUEsZUFBZU0sTUFBTSxjQUFyQk4sOENBQUFBLGlDQUFBQSx1QkFBdUJELE9BQU8sY0FBOUJDLHFEQUFBQSwrQkFBZ0NLLHFCQUFxQixjQUhyRE4sbUJBQUFBLFFBSUE7SUFFRixNQUFNUSxzQkFBc0JiLGdFQUFhQSxDQUFDSyxDQUFBQSxvQkFBQUEsOEJBQUFBLFFBQVNHLEVBQUUsS0FBSUosTUFBTTtJQUMvRFMsb0JBQW9CQyxXQUFXLENBQUNMLE9BQU8sR0FBRyxHQUFHRTtJQUM3Q0Usb0JBQW9CRSxRQUFRLENBQUMsR0FBRyxHQUFHLEdBQUc7SUFDdEMsTUFBTUMsa0JBQWtCZiw0REFBV0EsQ0FBQ1kscUJBQXFCUjtJQUV6RCxNQUFNWSxzQkFBc0JqQixnRUFBYUEsQ0FBQ0ssQ0FBQUEsb0JBQUFBLDhCQUFBQSxRQUFTRyxFQUFFLEtBQUlKLE1BQU07SUFDL0RhLG9CQUFvQkgsV0FBVyxDQUFDTCxNQUFNLEdBQUdFO0lBQ3pDTSxvQkFBb0JGLFFBQVEsQ0FBQyxHQUFHLEdBQUcsR0FBRztJQUN0QyxNQUFNRyxrQkFBa0JqQiw0REFBV0EsQ0FBQ2dCLHFCQUFxQlo7SUFFekQsSUFBSSxDQUFDRSxTQUFTLENBQUNTLGlCQUFpQjtRQUM5QixPQUFPUCxPQUFPO0lBQ2hCLE9BQU8sSUFBSSxDQUFDRixTQUFTLENBQUNXLGlCQUFpQjtRQUNyQyxPQUFPVDtJQUNULE9BQU87UUFDTCxPQUFPQSxPQUFPO0lBQ2hCO0FBQ0Y7QUFFQSxvQ0FBb0M7QUFDcEMsK0RBQWVOLFdBQVdBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2dldFdlZWtZZWFyLmpzPzkyNDIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi9fbGliL2RlZmF1bHRPcHRpb25zLmpzXCI7XG5pbXBvcnQgeyBjb25zdHJ1Y3RGcm9tIH0gZnJvbSBcIi4vY29uc3RydWN0RnJvbS5qc1wiO1xuaW1wb3J0IHsgc3RhcnRPZldlZWsgfSBmcm9tIFwiLi9zdGFydE9mV2Vlay5qc1wiO1xuaW1wb3J0IHsgdG9EYXRlIH0gZnJvbSBcIi4vdG9EYXRlLmpzXCI7XG5cbi8qKlxuICogVGhlIHtAbGluayBnZXRXZWVrWWVhcn0gZnVuY3Rpb24gb3B0aW9ucy5cbiAqL1xuXG4vKipcbiAqIEBuYW1lIGdldFdlZWtZZWFyXG4gKiBAY2F0ZWdvcnkgV2Vlay1OdW1iZXJpbmcgWWVhciBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgZXhhY3QgY2FsY3VsYXRpb24gZGVwZW5kcyBvbiB0aGUgdmFsdWVzIG9mXG4gKiBgb3B0aW9ucy53ZWVrU3RhcnRzT25gICh3aGljaCBpcyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlaylcbiAqIGFuZCBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgICh3aGljaCBpcyB0aGUgZGF5IG9mIEphbnVhcnksIHdoaWNoIGlzIGFsd2F5cyBpblxuICogdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHdlZWstbnVtYmVyaW5nIHllYXIpXG4gKlxuICogV2VlayBudW1iZXJpbmc6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1dlZWsjVGhlX0lTT193ZWVrX2RhdGVfc3lzdGVtXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgZ2l2ZW4gZGF0ZVxuICogQHBhcmFtIG9wdGlvbnMgLSBBbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICpcbiAqIEByZXR1cm5zIFRoZSBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFdoaWNoIHdlZWsgbnVtYmVyaW5nIHllYXIgaXMgMjYgRGVjZW1iZXIgMjAwNCB3aXRoIHRoZSBkZWZhdWx0IHNldHRpbmdzP1xuICogY29uc3QgcmVzdWx0ID0gZ2V0V2Vla1llYXIobmV3IERhdGUoMjAwNCwgMTEsIDI2KSlcbiAqIC8vPT4gMjAwNVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCB3ZWVrIG51bWJlcmluZyB5ZWFyIGlzIDI2IERlY2VtYmVyIDIwMDQgaWYgd2VlayBzdGFydHMgb24gU2F0dXJkYXk/XG4gKiBjb25zdCByZXN1bHQgPSBnZXRXZWVrWWVhcihuZXcgRGF0ZSgyMDA0LCAxMSwgMjYpLCB7IHdlZWtTdGFydHNPbjogNiB9KVxuICogLy89PiAyMDA0XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFdoaWNoIHdlZWsgbnVtYmVyaW5nIHllYXIgaXMgMjYgRGVjZW1iZXIgMjAwNCBpZiB0aGUgZmlyc3Qgd2VlayBjb250YWlucyA0IEphbnVhcnk/XG4gKiBjb25zdCByZXN1bHQgPSBnZXRXZWVrWWVhcihuZXcgRGF0ZSgyMDA0LCAxMSwgMjYpLCB7IGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogNCB9KVxuICogLy89PiAyMDA0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRXZWVrWWVhcihkYXRlLCBvcHRpb25zKSB7XG4gIGNvbnN0IF9kYXRlID0gdG9EYXRlKGRhdGUsIG9wdGlvbnM/LmluKTtcbiAgY29uc3QgeWVhciA9IF9kYXRlLmdldEZ1bGxZZWFyKCk7XG5cbiAgY29uc3QgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICBjb25zdCBmaXJzdFdlZWtDb250YWluc0RhdGUgPVxuICAgIG9wdGlvbnM/LmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA/P1xuICAgIG9wdGlvbnM/LmxvY2FsZT8ub3B0aW9ucz8uZmlyc3RXZWVrQ29udGFpbnNEYXRlID8/XG4gICAgZGVmYXVsdE9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID8/XG4gICAgZGVmYXVsdE9wdGlvbnMubG9jYWxlPy5vcHRpb25zPy5maXJzdFdlZWtDb250YWluc0RhdGUgPz9cbiAgICAxO1xuXG4gIGNvbnN0IGZpcnN0V2Vla09mTmV4dFllYXIgPSBjb25zdHJ1Y3RGcm9tKG9wdGlvbnM/LmluIHx8IGRhdGUsIDApO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldEZ1bGxZZWFyKHllYXIgKyAxLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICBjb25zdCBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mV2VlayhmaXJzdFdlZWtPZk5leHRZZWFyLCBvcHRpb25zKTtcblxuICBjb25zdCBmaXJzdFdlZWtPZlRoaXNZZWFyID0gY29uc3RydWN0RnJvbShvcHRpb25zPy5pbiB8fCBkYXRlLCAwKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZlRoaXNZZWFyLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICBjb25zdCBzdGFydE9mVGhpc1llYXIgPSBzdGFydE9mV2VlayhmaXJzdFdlZWtPZlRoaXNZZWFyLCBvcHRpb25zKTtcblxuICBpZiAoK19kYXRlID49ICtzdGFydE9mTmV4dFllYXIpIHtcbiAgICByZXR1cm4geWVhciArIDE7XG4gIH0gZWxzZSBpZiAoK19kYXRlID49ICtzdGFydE9mVGhpc1llYXIpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBnZXRXZWVrWWVhcjtcbiJdLCJuYW1lcyI6WyJnZXREZWZhdWx0T3B0aW9ucyIsImNvbnN0cnVjdEZyb20iLCJzdGFydE9mV2VlayIsInRvRGF0ZSIsImdldFdlZWtZZWFyIiwiZGF0ZSIsIm9wdGlvbnMiLCJkZWZhdWx0T3B0aW9ucyIsIl9kYXRlIiwiaW4iLCJ5ZWFyIiwiZ2V0RnVsbFllYXIiLCJmaXJzdFdlZWtDb250YWluc0RhdGUiLCJsb2NhbGUiLCJmaXJzdFdlZWtPZk5leHRZZWFyIiwic2V0RnVsbFllYXIiLCJzZXRIb3VycyIsInN0YXJ0T2ZOZXh0WWVhciIsImZpcnN0V2Vla09mVGhpc1llYXIiLCJzdGFydE9mVGhpc1llYXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/getWeekYear.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/isDate.js":
/*!*****************************************!*\
  !*** ./node_modules/date-fns/isDate.js ***!
  \*****************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isDate: function() { return /* binding */ isDate; }\n/* harmony export */ });\n/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */ function isDate(value) {\n    return value instanceof Date || typeof value === \"object\" && Object.prototype.toString.call(value) === \"[object Date]\";\n}\n// Fallback for modularized imports:\n/* harmony default export */ __webpack_exports__[\"default\"] = (isDate);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9pc0RhdGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBK0JDLEdBQ00sU0FBU0EsT0FBT0MsS0FBSztJQUMxQixPQUNFQSxpQkFBaUJDLFFBQ2hCLE9BQU9ELFVBQVUsWUFDaEJFLE9BQU9DLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDQyxJQUFJLENBQUNMLFdBQVc7QUFFaEQ7QUFFQSxvQ0FBb0M7QUFDcEMsK0RBQWVELE1BQU1BLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2lzRGF0ZS5qcz9mYWJkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQG5hbWUgaXNEYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiB2YWx1ZSBhIGRhdGU/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGFuIGluc3RhbmNlIG9mIERhdGUuIFRoZSBmdW5jdGlvbiB3b3JrcyBmb3IgZGF0ZXMgdHJhbnNmZXJyZWQgYWNyb3NzIGlmcmFtZXMuXG4gKlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIGNoZWNrXG4gKlxuICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBkYXRlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhIHZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUobmV3IERhdGUoKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYW4gaW52YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKG5ldyBEYXRlKE5hTikpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHNvbWUgdmFsdWU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUoJzIwMTQtMDItMzEnKVxuICogLy89PiBmYWxzZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYW4gb2JqZWN0OlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKHt9KVxuICogLy89PiBmYWxzZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNEYXRlKHZhbHVlKSB7XG4gIHJldHVybiAoXG4gICAgdmFsdWUgaW5zdGFuY2VvZiBEYXRlIHx8XG4gICAgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gXCJbb2JqZWN0IERhdGVdXCIpXG4gICk7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgaXNEYXRlO1xuIl0sIm5hbWVzIjpbImlzRGF0ZSIsInZhbHVlIiwiRGF0ZSIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/isDate.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/isValid.js":
/*!******************************************!*\
  !*** ./node_modules/date-fns/isValid.js ***!
  \******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isValid: function() { return /* binding */ isValid; }\n/* harmony export */ });\n/* harmony import */ var _isDate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isDate.js */ \"(app-pages-browser)/./node_modules/date-fns/isDate.js\");\n/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toDate.js */ \"(app-pages-browser)/./node_modules/date-fns/toDate.js\");\n\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertible into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */ function isValid(date) {\n    return !(!(0,_isDate_js__WEBPACK_IMPORTED_MODULE_0__.isDate)(date) && typeof date !== \"number\" || isNaN(+(0,_toDate_js__WEBPACK_IMPORTED_MODULE_1__.toDate)(date)));\n}\n// Fallback for modularized imports:\n/* harmony default export */ __webpack_exports__[\"default\"] = (isValid);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9pc1ZhbGlkLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxQztBQUNBO0FBRXJDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0E4QkMsR0FDTSxTQUFTRSxRQUFRQyxJQUFJO0lBQzFCLE9BQU8sQ0FBRSxFQUFFSCxrREFBTUEsQ0FBQ0csU0FBUyxPQUFPQSxTQUFTLFlBQWFDLE1BQU0sQ0FBQ0gsa0RBQU1BLENBQUNFLE1BQUs7QUFDN0U7QUFFQSxvQ0FBb0M7QUFDcEMsK0RBQWVELE9BQU9BLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2lzVmFsaWQuanM/YTBiYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0RhdGUgfSBmcm9tIFwiLi9pc0RhdGUuanNcIjtcbmltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5qc1wiO1xuXG4vKipcbiAqIEBuYW1lIGlzVmFsaWRcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIGRhdGUgdmFsaWQ/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIGZhbHNlIGlmIGFyZ3VtZW50IGlzIEludmFsaWQgRGF0ZSBhbmQgdHJ1ZSBvdGhlcndpc2UuXG4gKiBBcmd1bWVudCBpcyBjb252ZXJ0ZWQgdG8gRGF0ZSB1c2luZyBgdG9EYXRlYC4gU2VlIFt0b0RhdGVdKGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvdG9EYXRlKVxuICogSW52YWxpZCBEYXRlIGlzIGEgRGF0ZSwgd2hvc2UgdGltZSB2YWx1ZSBpcyBOYU4uXG4gKlxuICogVGltZSB2YWx1ZSBvZiBEYXRlOiBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjkuMS4xXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgZGF0ZSB0byBjaGVja1xuICpcbiAqIEByZXR1cm5zIFRoZSBkYXRlIGlzIHZhbGlkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgdmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoMjAxNCwgMSwgMzEpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgdmFsdWUsIGNvbnZlcnRpYmxlIGludG8gYSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZCgxMzkzODA0ODAwMDAwKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgaW52YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZChuZXcgRGF0ZSgnJykpXG4gKiAvLz0+IGZhbHNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkKGRhdGUpIHtcbiAgcmV0dXJuICEoKCFpc0RhdGUoZGF0ZSkgJiYgdHlwZW9mIGRhdGUgIT09IFwibnVtYmVyXCIpIHx8IGlzTmFOKCt0b0RhdGUoZGF0ZSkpKTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBpc1ZhbGlkO1xuIl0sIm5hbWVzIjpbImlzRGF0ZSIsInRvRGF0ZSIsImlzVmFsaWQiLCJkYXRlIiwiaXNOYU4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/isValid.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/locale/_lib/buildFormatLongFn.js":
/*!****************************************************************!*\
  !*** ./node_modules/date-fns/locale/_lib/buildFormatLongFn.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildFormatLongFn: function() { return /* binding */ buildFormatLongFn; }\n/* harmony export */ });\nfunction buildFormatLongFn(args) {\n    return function() {\n        let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        // TODO: Remove String()\n        const width = options.width ? String(options.width) : args.defaultWidth;\n        const format = args.formats[width] || args.formats[args.defaultWidth];\n        return format;\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvX2xpYi9idWlsZEZvcm1hdExvbmdGbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0Esa0JBQWtCQyxJQUFJO0lBQ3BDLE9BQU87WUFBQ0MsMkVBQVUsQ0FBQztRQUNqQix3QkFBd0I7UUFDeEIsTUFBTUMsUUFBUUQsUUFBUUMsS0FBSyxHQUFHQyxPQUFPRixRQUFRQyxLQUFLLElBQUlGLEtBQUtJLFlBQVk7UUFDdkUsTUFBTUMsU0FBU0wsS0FBS00sT0FBTyxDQUFDSixNQUFNLElBQUlGLEtBQUtNLE9BQU8sQ0FBQ04sS0FBS0ksWUFBWSxDQUFDO1FBQ3JFLE9BQU9DO0lBQ1Q7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL19saWIvYnVpbGRGb3JtYXRMb25nRm4uanM/YzhmYSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gYnVpbGRGb3JtYXRMb25nRm4oYXJncykge1xuICByZXR1cm4gKG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIC8vIFRPRE86IFJlbW92ZSBTdHJpbmcoKVxuICAgIGNvbnN0IHdpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgIGNvbnN0IGZvcm1hdCA9IGFyZ3MuZm9ybWF0c1t3aWR0aF0gfHwgYXJncy5mb3JtYXRzW2FyZ3MuZGVmYXVsdFdpZHRoXTtcbiAgICByZXR1cm4gZm9ybWF0O1xuICB9O1xufVxuIl0sIm5hbWVzIjpbImJ1aWxkRm9ybWF0TG9uZ0ZuIiwiYXJncyIsIm9wdGlvbnMiLCJ3aWR0aCIsIlN0cmluZyIsImRlZmF1bHRXaWR0aCIsImZvcm1hdCIsImZvcm1hdHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/locale/_lib/buildFormatLongFn.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/locale/_lib/buildLocalizeFn.js":
/*!**************************************************************!*\
  !*** ./node_modules/date-fns/locale/_lib/buildLocalizeFn.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildLocalizeFn: function() { return /* binding */ buildLocalizeFn; }\n/* harmony export */ });\n/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */ /**\n * The map of localized values for each width.\n */ /**\n * The index type of the locale unit value. It types conversion of units of\n * values that don't start at 0 (i.e. quarters).\n */ /**\n * Converts the unit value to the tuple of values.\n */ /**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */ /**\n * The tuple of localized quarter values. The first element represents Q1.\n */ /**\n * The tuple of localized day values. The first element represents Sunday.\n */ /**\n * The tuple of localized month values. The first element represents January.\n */ function buildLocalizeFn(args) {\n    return (value, options)=>{\n        const context = (options === null || options === void 0 ? void 0 : options.context) ? String(options.context) : \"standalone\";\n        let valuesArray;\n        if (context === \"formatting\" && args.formattingValues) {\n            const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n            const width = (options === null || options === void 0 ? void 0 : options.width) ? String(options.width) : defaultWidth;\n            valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];\n        } else {\n            const defaultWidth = args.defaultWidth;\n            const width = (options === null || options === void 0 ? void 0 : options.width) ? String(options.width) : args.defaultWidth;\n            valuesArray = args.values[width] || args.values[defaultWidth];\n        }\n        const index = args.argumentCallback ? args.argumentCallback(value) : value;\n        // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n        return valuesArray[index];\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvX2xpYi9idWlsZExvY2FsaXplRm4uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7O0NBT0MsR0FFRDs7Q0FFQyxHQUVEOzs7Q0FHQyxHQUVEOztDQUVDLEdBRUQ7OztDQUdDLEdBRUQ7O0NBRUMsR0FFRDs7Q0FFQyxHQUVEOztDQUVDLEdBRU0sU0FBU0EsZ0JBQWdCQyxJQUFJO0lBQ2xDLE9BQU8sQ0FBQ0MsT0FBT0M7UUFDYixNQUFNQyxVQUFVRCxDQUFBQSxvQkFBQUEsOEJBQUFBLFFBQVNDLE9BQU8sSUFBR0MsT0FBT0YsUUFBUUMsT0FBTyxJQUFJO1FBRTdELElBQUlFO1FBQ0osSUFBSUYsWUFBWSxnQkFBZ0JILEtBQUtNLGdCQUFnQixFQUFFO1lBQ3JELE1BQU1DLGVBQWVQLEtBQUtRLHNCQUFzQixJQUFJUixLQUFLTyxZQUFZO1lBQ3JFLE1BQU1FLFFBQVFQLENBQUFBLG9CQUFBQSw4QkFBQUEsUUFBU08sS0FBSyxJQUFHTCxPQUFPRixRQUFRTyxLQUFLLElBQUlGO1lBRXZERixjQUNFTCxLQUFLTSxnQkFBZ0IsQ0FBQ0csTUFBTSxJQUFJVCxLQUFLTSxnQkFBZ0IsQ0FBQ0MsYUFBYTtRQUN2RSxPQUFPO1lBQ0wsTUFBTUEsZUFBZVAsS0FBS08sWUFBWTtZQUN0QyxNQUFNRSxRQUFRUCxDQUFBQSxvQkFBQUEsOEJBQUFBLFFBQVNPLEtBQUssSUFBR0wsT0FBT0YsUUFBUU8sS0FBSyxJQUFJVCxLQUFLTyxZQUFZO1lBRXhFRixjQUFjTCxLQUFLVSxNQUFNLENBQUNELE1BQU0sSUFBSVQsS0FBS1UsTUFBTSxDQUFDSCxhQUFhO1FBQy9EO1FBQ0EsTUFBTUksUUFBUVgsS0FBS1ksZ0JBQWdCLEdBQUdaLEtBQUtZLGdCQUFnQixDQUFDWCxTQUFTQTtRQUVyRSw2SUFBNkk7UUFDN0ksT0FBT0ksV0FBVyxDQUFDTSxNQUFNO0lBQzNCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9fbGliL2J1aWxkTG9jYWxpemVGbi5qcz82NzY1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIGxvY2FsaXplIGZ1bmN0aW9uIGFyZ3VtZW50IGNhbGxiYWNrIHdoaWNoIGFsbG93cyB0byBjb252ZXJ0IHJhdyB2YWx1ZSB0b1xuICogdGhlIGFjdHVhbCB0eXBlLlxuICpcbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKlxuICogQHJldHVybnMgVGhlIGNvbnZlcnRlZCB2YWx1ZVxuICovXG5cbi8qKlxuICogVGhlIG1hcCBvZiBsb2NhbGl6ZWQgdmFsdWVzIGZvciBlYWNoIHdpZHRoLlxuICovXG5cbi8qKlxuICogVGhlIGluZGV4IHR5cGUgb2YgdGhlIGxvY2FsZSB1bml0IHZhbHVlLiBJdCB0eXBlcyBjb252ZXJzaW9uIG9mIHVuaXRzIG9mXG4gKiB2YWx1ZXMgdGhhdCBkb24ndCBzdGFydCBhdCAwIChpLmUuIHF1YXJ0ZXJzKS5cbiAqL1xuXG4vKipcbiAqIENvbnZlcnRzIHRoZSB1bml0IHZhbHVlIHRvIHRoZSB0dXBsZSBvZiB2YWx1ZXMuXG4gKi9cblxuLyoqXG4gKiBUaGUgdHVwbGUgb2YgbG9jYWxpemVkIGVyYSB2YWx1ZXMuIFRoZSBmaXJzdCBlbGVtZW50IHJlcHJlc2VudHMgQkMsXG4gKiB0aGUgc2Vjb25kIGVsZW1lbnQgcmVwcmVzZW50cyBBRC5cbiAqL1xuXG4vKipcbiAqIFRoZSB0dXBsZSBvZiBsb2NhbGl6ZWQgcXVhcnRlciB2YWx1ZXMuIFRoZSBmaXJzdCBlbGVtZW50IHJlcHJlc2VudHMgUTEuXG4gKi9cblxuLyoqXG4gKiBUaGUgdHVwbGUgb2YgbG9jYWxpemVkIGRheSB2YWx1ZXMuIFRoZSBmaXJzdCBlbGVtZW50IHJlcHJlc2VudHMgU3VuZGF5LlxuICovXG5cbi8qKlxuICogVGhlIHR1cGxlIG9mIGxvY2FsaXplZCBtb250aCB2YWx1ZXMuIFRoZSBmaXJzdCBlbGVtZW50IHJlcHJlc2VudHMgSmFudWFyeS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRMb2NhbGl6ZUZuKGFyZ3MpIHtcbiAgcmV0dXJuICh2YWx1ZSwgb3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IGNvbnRleHQgPSBvcHRpb25zPy5jb250ZXh0ID8gU3RyaW5nKG9wdGlvbnMuY29udGV4dCkgOiBcInN0YW5kYWxvbmVcIjtcblxuICAgIGxldCB2YWx1ZXNBcnJheTtcbiAgICBpZiAoY29udGV4dCA9PT0gXCJmb3JtYXR0aW5nXCIgJiYgYXJncy5mb3JtYXR0aW5nVmFsdWVzKSB7XG4gICAgICBjb25zdCBkZWZhdWx0V2lkdGggPSBhcmdzLmRlZmF1bHRGb3JtYXR0aW5nV2lkdGggfHwgYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgICBjb25zdCB3aWR0aCA9IG9wdGlvbnM/LndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogZGVmYXVsdFdpZHRoO1xuXG4gICAgICB2YWx1ZXNBcnJheSA9XG4gICAgICAgIGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1t3aWR0aF0gfHwgYXJncy5mb3JtYXR0aW5nVmFsdWVzW2RlZmF1bHRXaWR0aF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGRlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgICAgY29uc3Qgd2lkdGggPSBvcHRpb25zPy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuXG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MudmFsdWVzW3dpZHRoXSB8fCBhcmdzLnZhbHVlc1tkZWZhdWx0V2lkdGhdO1xuICAgIH1cbiAgICBjb25zdCBpbmRleCA9IGFyZ3MuYXJndW1lbnRDYWxsYmFjayA/IGFyZ3MuYXJndW1lbnRDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBGb3Igc29tZSByZWFzb24gVHlwZVNjcmlwdCBqdXN0IGRvbid0IHdhbnQgdG8gbWF0Y2ggaXQsIG5vIG1hdHRlciBob3cgaGFyZCB3ZSB0cnkuIEkgY2hhbGxlbmdlIHlvdSB0byB0cnkgdG8gcmVtb3ZlIGl0IVxuICAgIHJldHVybiB2YWx1ZXNBcnJheVtpbmRleF07XG4gIH07XG59XG4iXSwibmFtZXMiOlsiYnVpbGRMb2NhbGl6ZUZuIiwiYXJncyIsInZhbHVlIiwib3B0aW9ucyIsImNvbnRleHQiLCJTdHJpbmciLCJ2YWx1ZXNBcnJheSIsImZvcm1hdHRpbmdWYWx1ZXMiLCJkZWZhdWx0V2lkdGgiLCJkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoIiwid2lkdGgiLCJ2YWx1ZXMiLCJpbmRleCIsImFyZ3VtZW50Q2FsbGJhY2siXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/locale/_lib/buildLocalizeFn.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/locale/_lib/buildMatchFn.js":
/*!***********************************************************!*\
  !*** ./node_modules/date-fns/locale/_lib/buildMatchFn.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildMatchFn: function() { return /* binding */ buildMatchFn; }\n/* harmony export */ });\nfunction buildMatchFn(args) {\n    return function(string) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const width = options.width;\n        const matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n        const matchResult = string.match(matchPattern);\n        if (!matchResult) {\n            return null;\n        }\n        const matchedString = matchResult[0];\n        const parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n        const key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, (pattern)=>pattern.test(matchedString)) : findKey(parsePatterns, (pattern)=>pattern.test(matchedString));\n        let value;\n        value = args.valueCallback ? args.valueCallback(key) : key;\n        value = options.valueCallback ? options.valueCallback(value) : value;\n        const rest = string.slice(matchedString.length);\n        return {\n            value,\n            rest\n        };\n    };\n}\nfunction findKey(object, predicate) {\n    for(const key in object){\n        if (Object.prototype.hasOwnProperty.call(object, key) && predicate(object[key])) {\n            return key;\n        }\n    }\n    return undefined;\n}\nfunction findIndex(array, predicate) {\n    for(let key = 0; key < array.length; key++){\n        if (predicate(array[key])) {\n            return key;\n        }\n    }\n    return undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvX2xpYi9idWlsZE1hdGNoRm4uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLGFBQWFDLElBQUk7SUFDL0IsT0FBTyxTQUFDQztZQUFRQywyRUFBVSxDQUFDO1FBQ3pCLE1BQU1DLFFBQVFELFFBQVFDLEtBQUs7UUFFM0IsTUFBTUMsZUFDSixTQUFVSixLQUFLSyxhQUFhLENBQUNGLE1BQU0sSUFDbkNILEtBQUtLLGFBQWEsQ0FBQ0wsS0FBS00saUJBQWlCLENBQUM7UUFDNUMsTUFBTUMsY0FBY04sT0FBT08sS0FBSyxDQUFDSjtRQUVqQyxJQUFJLENBQUNHLGFBQWE7WUFDaEIsT0FBTztRQUNUO1FBQ0EsTUFBTUUsZ0JBQWdCRixXQUFXLENBQUMsRUFBRTtRQUVwQyxNQUFNRyxnQkFDSixTQUFVVixLQUFLVSxhQUFhLENBQUNQLE1BQU0sSUFDbkNILEtBQUtVLGFBQWEsQ0FBQ1YsS0FBS1csaUJBQWlCLENBQUM7UUFFNUMsTUFBTUMsTUFBTUMsTUFBTUMsT0FBTyxDQUFDSixpQkFDdEJLLFVBQVVMLGVBQWUsQ0FBQ00sVUFBWUEsUUFBUUMsSUFBSSxDQUFDUixrQkFFbkRTLFFBQVFSLGVBQWUsQ0FBQ00sVUFBWUEsUUFBUUMsSUFBSSxDQUFDUjtRQUVyRCxJQUFJVTtRQUVKQSxRQUFRbkIsS0FBS29CLGFBQWEsR0FBR3BCLEtBQUtvQixhQUFhLENBQUNSLE9BQU9BO1FBQ3ZETyxRQUFRakIsUUFBUWtCLGFBQWEsR0FFekJsQixRQUFRa0IsYUFBYSxDQUFDRCxTQUN0QkE7UUFFSixNQUFNRSxPQUFPcEIsT0FBT3FCLEtBQUssQ0FBQ2IsY0FBY2MsTUFBTTtRQUU5QyxPQUFPO1lBQUVKO1lBQU9FO1FBQUs7SUFDdkI7QUFDRjtBQUVBLFNBQVNILFFBQVFNLE1BQU0sRUFBRUMsU0FBUztJQUNoQyxJQUFLLE1BQU1iLE9BQU9ZLE9BQVE7UUFDeEIsSUFDRUUsT0FBT0MsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ0wsUUFBUVosUUFDN0NhLFVBQVVELE1BQU0sQ0FBQ1osSUFBSSxHQUNyQjtZQUNBLE9BQU9BO1FBQ1Q7SUFDRjtJQUNBLE9BQU9rQjtBQUNUO0FBRUEsU0FBU2YsVUFBVWdCLEtBQUssRUFBRU4sU0FBUztJQUNqQyxJQUFLLElBQUliLE1BQU0sR0FBR0EsTUFBTW1CLE1BQU1SLE1BQU0sRUFBRVgsTUFBTztRQUMzQyxJQUFJYSxVQUFVTSxLQUFLLENBQUNuQixJQUFJLEdBQUc7WUFDekIsT0FBT0E7UUFDVDtJQUNGO0lBQ0EsT0FBT2tCO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hGbi5qcz9mMGZjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBidWlsZE1hdGNoRm4oYXJncykge1xuICByZXR1cm4gKHN0cmluZywgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgY29uc3Qgd2lkdGggPSBvcHRpb25zLndpZHRoO1xuXG4gICAgY29uc3QgbWF0Y2hQYXR0ZXJuID1cbiAgICAgICh3aWR0aCAmJiBhcmdzLm1hdGNoUGF0dGVybnNbd2lkdGhdKSB8fFxuICAgICAgYXJncy5tYXRjaFBhdHRlcm5zW2FyZ3MuZGVmYXVsdE1hdGNoV2lkdGhdO1xuICAgIGNvbnN0IG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKG1hdGNoUGF0dGVybik7XG5cbiAgICBpZiAoIW1hdGNoUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuXG4gICAgY29uc3QgcGFyc2VQYXR0ZXJucyA9XG4gICAgICAod2lkdGggJiYgYXJncy5wYXJzZVBhdHRlcm5zW3dpZHRoXSkgfHxcbiAgICAgIGFyZ3MucGFyc2VQYXR0ZXJuc1thcmdzLmRlZmF1bHRQYXJzZVdpZHRoXTtcblxuICAgIGNvbnN0IGtleSA9IEFycmF5LmlzQXJyYXkocGFyc2VQYXR0ZXJucylcbiAgICAgID8gZmluZEluZGV4KHBhcnNlUGF0dGVybnMsIChwYXR0ZXJuKSA9PiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZykpXG4gICAgICA6IC8vIFtUT0RPXSAtLSBJIGNoYWxsZW5nZSB5b3UgdG8gZml4IHRoZSB0eXBlXG4gICAgICAgIGZpbmRLZXkocGFyc2VQYXR0ZXJucywgKHBhdHRlcm4pID0+IHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKSk7XG5cbiAgICBsZXQgdmFsdWU7XG5cbiAgICB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayhrZXkpIDoga2V5O1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrXG4gICAgICA/IC8vIFtUT0RPXSAtLSBJIGNoYWxsZW5nZSB5b3UgdG8gZml4IHRoZSB0eXBlXG4gICAgICAgIG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSlcbiAgICAgIDogdmFsdWU7XG5cbiAgICBjb25zdCByZXN0ID0gc3RyaW5nLnNsaWNlKG1hdGNoZWRTdHJpbmcubGVuZ3RoKTtcblxuICAgIHJldHVybiB7IHZhbHVlLCByZXN0IH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZpbmRLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgZm9yIChjb25zdCBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKFxuICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJlxuICAgICAgcHJlZGljYXRlKG9iamVjdFtrZXldKVxuICAgICkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgZm9yIChsZXQga2V5ID0gMDsga2V5IDwgYXJyYXkubGVuZ3RoOyBrZXkrKykge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlba2V5XSkpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG4iXSwibmFtZXMiOlsiYnVpbGRNYXRjaEZuIiwiYXJncyIsInN0cmluZyIsIm9wdGlvbnMiLCJ3aWR0aCIsIm1hdGNoUGF0dGVybiIsIm1hdGNoUGF0dGVybnMiLCJkZWZhdWx0TWF0Y2hXaWR0aCIsIm1hdGNoUmVzdWx0IiwibWF0Y2giLCJtYXRjaGVkU3RyaW5nIiwicGFyc2VQYXR0ZXJucyIsImRlZmF1bHRQYXJzZVdpZHRoIiwia2V5IiwiQXJyYXkiLCJpc0FycmF5IiwiZmluZEluZGV4IiwicGF0dGVybiIsInRlc3QiLCJmaW5kS2V5IiwidmFsdWUiLCJ2YWx1ZUNhbGxiYWNrIiwicmVzdCIsInNsaWNlIiwibGVuZ3RoIiwib2JqZWN0IiwicHJlZGljYXRlIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwidW5kZWZpbmVkIiwiYXJyYXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/locale/_lib/buildMatchFn.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/locale/_lib/buildMatchPatternFn.js":
/*!******************************************************************!*\
  !*** ./node_modules/date-fns/locale/_lib/buildMatchPatternFn.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildMatchPatternFn: function() { return /* binding */ buildMatchPatternFn; }\n/* harmony export */ });\nfunction buildMatchPatternFn(args) {\n    return function(string) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const matchResult = string.match(args.matchPattern);\n        if (!matchResult) return null;\n        const matchedString = matchResult[0];\n        const parseResult = string.match(args.parsePattern);\n        if (!parseResult) return null;\n        let value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\n        // [TODO] I challenge you to fix the type\n        value = options.valueCallback ? options.valueCallback(value) : value;\n        const rest = string.slice(matchedString.length);\n        return {\n            value,\n            rest\n        };\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxTQUFTQSxvQkFBb0JDLElBQUk7SUFDdEMsT0FBTyxTQUFDQztZQUFRQywyRUFBVSxDQUFDO1FBQ3pCLE1BQU1DLGNBQWNGLE9BQU9HLEtBQUssQ0FBQ0osS0FBS0ssWUFBWTtRQUNsRCxJQUFJLENBQUNGLGFBQWEsT0FBTztRQUN6QixNQUFNRyxnQkFBZ0JILFdBQVcsQ0FBQyxFQUFFO1FBRXBDLE1BQU1JLGNBQWNOLE9BQU9HLEtBQUssQ0FBQ0osS0FBS1EsWUFBWTtRQUNsRCxJQUFJLENBQUNELGFBQWEsT0FBTztRQUN6QixJQUFJRSxRQUFRVCxLQUFLVSxhQUFhLEdBQzFCVixLQUFLVSxhQUFhLENBQUNILFdBQVcsQ0FBQyxFQUFFLElBQ2pDQSxXQUFXLENBQUMsRUFBRTtRQUVsQix5Q0FBeUM7UUFDekNFLFFBQVFQLFFBQVFRLGFBQWEsR0FBR1IsUUFBUVEsYUFBYSxDQUFDRCxTQUFTQTtRQUUvRCxNQUFNRSxPQUFPVixPQUFPVyxLQUFLLENBQUNOLGNBQWNPLE1BQU07UUFFOUMsT0FBTztZQUFFSjtZQUFPRTtRQUFLO0lBQ3ZCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4uanM/ZjlkYyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gYnVpbGRNYXRjaFBhdHRlcm5GbihhcmdzKSB7XG4gIHJldHVybiAoc3RyaW5nLCBvcHRpb25zID0ge30pID0+IHtcbiAgICBjb25zdCBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLm1hdGNoUGF0dGVybik7XG4gICAgaWYgKCFtYXRjaFJlc3VsdCkgcmV0dXJuIG51bGw7XG4gICAgY29uc3QgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuXG4gICAgY29uc3QgcGFyc2VSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5wYXJzZVBhdHRlcm4pO1xuICAgIGlmICghcGFyc2VSZXN1bHQpIHJldHVybiBudWxsO1xuICAgIGxldCB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFja1xuICAgICAgPyBhcmdzLnZhbHVlQ2FsbGJhY2socGFyc2VSZXN1bHRbMF0pXG4gICAgICA6IHBhcnNlUmVzdWx0WzBdO1xuXG4gICAgLy8gW1RPRE9dIEkgY2hhbGxlbmdlIHlvdSB0byBmaXggdGhlIHR5cGVcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgIGNvbnN0IHJlc3QgPSBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpO1xuXG4gICAgcmV0dXJuIHsgdmFsdWUsIHJlc3QgfTtcbiAgfTtcbn1cbiJdLCJuYW1lcyI6WyJidWlsZE1hdGNoUGF0dGVybkZuIiwiYXJncyIsInN0cmluZyIsIm9wdGlvbnMiLCJtYXRjaFJlc3VsdCIsIm1hdGNoIiwibWF0Y2hQYXR0ZXJuIiwibWF0Y2hlZFN0cmluZyIsInBhcnNlUmVzdWx0IiwicGFyc2VQYXR0ZXJuIiwidmFsdWUiLCJ2YWx1ZUNhbGxiYWNrIiwicmVzdCIsInNsaWNlIiwibGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/locale/_lib/buildMatchPatternFn.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/locale/en-US.js":
/*!***********************************************!*\
  !*** ./node_modules/date-fns/locale/en-US.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   enUS: function() { return /* binding */ enUS; }\n/* harmony export */ });\n/* harmony import */ var _en_US_lib_formatDistance_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./en-US/_lib/formatDistance.js */ \"(app-pages-browser)/./node_modules/date-fns/locale/en-US/_lib/formatDistance.js\");\n/* harmony import */ var _en_US_lib_formatLong_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./en-US/_lib/formatLong.js */ \"(app-pages-browser)/./node_modules/date-fns/locale/en-US/_lib/formatLong.js\");\n/* harmony import */ var _en_US_lib_formatRelative_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./en-US/_lib/formatRelative.js */ \"(app-pages-browser)/./node_modules/date-fns/locale/en-US/_lib/formatRelative.js\");\n/* harmony import */ var _en_US_lib_localize_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./en-US/_lib/localize.js */ \"(app-pages-browser)/./node_modules/date-fns/locale/en-US/_lib/localize.js\");\n/* harmony import */ var _en_US_lib_match_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./en-US/_lib/match.js */ \"(app-pages-browser)/./node_modules/date-fns/locale/en-US/_lib/match.js\");\n\n\n\n\n\n/**\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */ const enUS = {\n    code: \"en-US\",\n    formatDistance: _en_US_lib_formatDistance_js__WEBPACK_IMPORTED_MODULE_0__.formatDistance,\n    formatLong: _en_US_lib_formatLong_js__WEBPACK_IMPORTED_MODULE_1__.formatLong,\n    formatRelative: _en_US_lib_formatRelative_js__WEBPACK_IMPORTED_MODULE_2__.formatRelative,\n    localize: _en_US_lib_localize_js__WEBPACK_IMPORTED_MODULE_3__.localize,\n    match: _en_US_lib_match_js__WEBPACK_IMPORTED_MODULE_4__.match,\n    options: {\n        weekStartsOn: 0 /* Sunday */ ,\n        firstWeekContainsDate: 1\n    }\n};\n// Fallback for modularized imports:\n/* harmony default export */ __webpack_exports__[\"default\"] = (enUS);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvZW4tVVMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWdFO0FBQ1I7QUFDUTtBQUNaO0FBQ047QUFFOUM7Ozs7Ozs7Q0FPQyxHQUNNLE1BQU1LLE9BQU87SUFDbEJDLE1BQU07SUFDTk4sZ0JBQWdCQSx3RUFBY0E7SUFDOUJDLFlBQVlBLGdFQUFVQTtJQUN0QkMsZ0JBQWdCQSx3RUFBY0E7SUFDOUJDLFVBQVVBLDREQUFRQTtJQUNsQkMsT0FBT0Esc0RBQUtBO0lBQ1pHLFNBQVM7UUFDUEMsY0FBYyxFQUFFLFVBQVU7UUFDMUJDLHVCQUF1QjtJQUN6QjtBQUNGLEVBQUU7QUFFRixvQ0FBb0M7QUFDcEMsK0RBQWVKLElBQUlBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9lbi1VUy5qcz8xYjNmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZvcm1hdERpc3RhbmNlIH0gZnJvbSBcIi4vZW4tVVMvX2xpYi9mb3JtYXREaXN0YW5jZS5qc1wiO1xuaW1wb3J0IHsgZm9ybWF0TG9uZyB9IGZyb20gXCIuL2VuLVVTL19saWIvZm9ybWF0TG9uZy5qc1wiO1xuaW1wb3J0IHsgZm9ybWF0UmVsYXRpdmUgfSBmcm9tIFwiLi9lbi1VUy9fbGliL2Zvcm1hdFJlbGF0aXZlLmpzXCI7XG5pbXBvcnQgeyBsb2NhbGl6ZSB9IGZyb20gXCIuL2VuLVVTL19saWIvbG9jYWxpemUuanNcIjtcbmltcG9ydCB7IG1hdGNoIH0gZnJvbSBcIi4vZW4tVVMvX2xpYi9tYXRjaC5qc1wiO1xuXG4vKipcbiAqIEBjYXRlZ29yeSBMb2NhbGVzXG4gKiBAc3VtbWFyeSBFbmdsaXNoIGxvY2FsZSAoVW5pdGVkIFN0YXRlcykuXG4gKiBAbGFuZ3VhZ2UgRW5nbGlzaFxuICogQGlzby02MzktMiBlbmdcbiAqIEBhdXRob3IgU2FzaGEgS29zcyBbQGtvc3Nub2NvcnBdKGh0dHBzOi8vZ2l0aHViLmNvbS9rb3Nzbm9jb3JwKVxuICogQGF1dGhvciBMZXNoYSBLb3NzIFtAbGVzaGFrb3NzXShodHRwczovL2dpdGh1Yi5jb20vbGVzaGFrb3NzKVxuICovXG5leHBvcnQgY29uc3QgZW5VUyA9IHtcbiAgY29kZTogXCJlbi1VU1wiLFxuICBmb3JtYXREaXN0YW5jZTogZm9ybWF0RGlzdGFuY2UsXG4gIGZvcm1hdExvbmc6IGZvcm1hdExvbmcsXG4gIGZvcm1hdFJlbGF0aXZlOiBmb3JtYXRSZWxhdGl2ZSxcbiAgbG9jYWxpemU6IGxvY2FsaXplLFxuICBtYXRjaDogbWF0Y2gsXG4gIG9wdGlvbnM6IHtcbiAgICB3ZWVrU3RhcnRzT246IDAgLyogU3VuZGF5ICovLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogMSxcbiAgfSxcbn07XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgZW5VUztcbiJdLCJuYW1lcyI6WyJmb3JtYXREaXN0YW5jZSIsImZvcm1hdExvbmciLCJmb3JtYXRSZWxhdGl2ZSIsImxvY2FsaXplIiwibWF0Y2giLCJlblVTIiwiY29kZSIsIm9wdGlvbnMiLCJ3ZWVrU3RhcnRzT24iLCJmaXJzdFdlZWtDb250YWluc0RhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/locale/en-US.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/locale/en-US/_lib/formatDistance.js":
/*!*******************************************************************!*\
  !*** ./node_modules/date-fns/locale/en-US/_lib/formatDistance.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatDistance: function() { return /* binding */ formatDistance; }\n/* harmony export */ });\nconst formatDistanceLocale = {\n    lessThanXSeconds: {\n        one: \"less than a second\",\n        other: \"less than {{count}} seconds\"\n    },\n    xSeconds: {\n        one: \"1 second\",\n        other: \"{{count}} seconds\"\n    },\n    halfAMinute: \"half a minute\",\n    lessThanXMinutes: {\n        one: \"less than a minute\",\n        other: \"less than {{count}} minutes\"\n    },\n    xMinutes: {\n        one: \"1 minute\",\n        other: \"{{count}} minutes\"\n    },\n    aboutXHours: {\n        one: \"about 1 hour\",\n        other: \"about {{count}} hours\"\n    },\n    xHours: {\n        one: \"1 hour\",\n        other: \"{{count}} hours\"\n    },\n    xDays: {\n        one: \"1 day\",\n        other: \"{{count}} days\"\n    },\n    aboutXWeeks: {\n        one: \"about 1 week\",\n        other: \"about {{count}} weeks\"\n    },\n    xWeeks: {\n        one: \"1 week\",\n        other: \"{{count}} weeks\"\n    },\n    aboutXMonths: {\n        one: \"about 1 month\",\n        other: \"about {{count}} months\"\n    },\n    xMonths: {\n        one: \"1 month\",\n        other: \"{{count}} months\"\n    },\n    aboutXYears: {\n        one: \"about 1 year\",\n        other: \"about {{count}} years\"\n    },\n    xYears: {\n        one: \"1 year\",\n        other: \"{{count}} years\"\n    },\n    overXYears: {\n        one: \"over 1 year\",\n        other: \"over {{count}} years\"\n    },\n    almostXYears: {\n        one: \"almost 1 year\",\n        other: \"almost {{count}} years\"\n    }\n};\nconst formatDistance = (token, count, options)=>{\n    let result;\n    const tokenValue = formatDistanceLocale[token];\n    if (typeof tokenValue === \"string\") {\n        result = tokenValue;\n    } else if (count === 1) {\n        result = tokenValue.one;\n    } else {\n        result = tokenValue.other.replace(\"{{count}}\", count.toString());\n    }\n    if (options === null || options === void 0 ? void 0 : options.addSuffix) {\n        if (options.comparison && options.comparison > 0) {\n            return \"in \" + result;\n        } else {\n            return result + \" ago\";\n        }\n    }\n    return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXREaXN0YW5jZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsdUJBQXVCO0lBQzNCQyxrQkFBa0I7UUFDaEJDLEtBQUs7UUFDTEMsT0FBTztJQUNUO0lBRUFDLFVBQVU7UUFDUkYsS0FBSztRQUNMQyxPQUFPO0lBQ1Q7SUFFQUUsYUFBYTtJQUViQyxrQkFBa0I7UUFDaEJKLEtBQUs7UUFDTEMsT0FBTztJQUNUO0lBRUFJLFVBQVU7UUFDUkwsS0FBSztRQUNMQyxPQUFPO0lBQ1Q7SUFFQUssYUFBYTtRQUNYTixLQUFLO1FBQ0xDLE9BQU87SUFDVDtJQUVBTSxRQUFRO1FBQ05QLEtBQUs7UUFDTEMsT0FBTztJQUNUO0lBRUFPLE9BQU87UUFDTFIsS0FBSztRQUNMQyxPQUFPO0lBQ1Q7SUFFQVEsYUFBYTtRQUNYVCxLQUFLO1FBQ0xDLE9BQU87SUFDVDtJQUVBUyxRQUFRO1FBQ05WLEtBQUs7UUFDTEMsT0FBTztJQUNUO0lBRUFVLGNBQWM7UUFDWlgsS0FBSztRQUNMQyxPQUFPO0lBQ1Q7SUFFQVcsU0FBUztRQUNQWixLQUFLO1FBQ0xDLE9BQU87SUFDVDtJQUVBWSxhQUFhO1FBQ1hiLEtBQUs7UUFDTEMsT0FBTztJQUNUO0lBRUFhLFFBQVE7UUFDTmQsS0FBSztRQUNMQyxPQUFPO0lBQ1Q7SUFFQWMsWUFBWTtRQUNWZixLQUFLO1FBQ0xDLE9BQU87SUFDVDtJQUVBZSxjQUFjO1FBQ1poQixLQUFLO1FBQ0xDLE9BQU87SUFDVDtBQUNGO0FBRU8sTUFBTWdCLGlCQUFpQixDQUFDQyxPQUFPQyxPQUFPQztJQUMzQyxJQUFJQztJQUVKLE1BQU1DLGFBQWF4QixvQkFBb0IsQ0FBQ29CLE1BQU07SUFDOUMsSUFBSSxPQUFPSSxlQUFlLFVBQVU7UUFDbENELFNBQVNDO0lBQ1gsT0FBTyxJQUFJSCxVQUFVLEdBQUc7UUFDdEJFLFNBQVNDLFdBQVd0QixHQUFHO0lBQ3pCLE9BQU87UUFDTHFCLFNBQVNDLFdBQVdyQixLQUFLLENBQUNzQixPQUFPLENBQUMsYUFBYUosTUFBTUssUUFBUTtJQUMvRDtJQUVBLElBQUlKLG9CQUFBQSw4QkFBQUEsUUFBU0ssU0FBUyxFQUFFO1FBQ3RCLElBQUlMLFFBQVFNLFVBQVUsSUFBSU4sUUFBUU0sVUFBVSxHQUFHLEdBQUc7WUFDaEQsT0FBTyxRQUFRTDtRQUNqQixPQUFPO1lBQ0wsT0FBT0EsU0FBUztRQUNsQjtJQUNGO0lBRUEsT0FBT0E7QUFDVCxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXREaXN0YW5jZS5qcz85ODc2Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGZvcm1hdERpc3RhbmNlTG9jYWxlID0ge1xuICBsZXNzVGhhblhTZWNvbmRzOiB7XG4gICAgb25lOiBcImxlc3MgdGhhbiBhIHNlY29uZFwiLFxuICAgIG90aGVyOiBcImxlc3MgdGhhbiB7e2NvdW50fX0gc2Vjb25kc1wiLFxuICB9LFxuXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiBcIjEgc2Vjb25kXCIsXG4gICAgb3RoZXI6IFwie3tjb3VudH19IHNlY29uZHNcIixcbiAgfSxcblxuICBoYWxmQU1pbnV0ZTogXCJoYWxmIGEgbWludXRlXCIsXG5cbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZTogXCJsZXNzIHRoYW4gYSBtaW51dGVcIixcbiAgICBvdGhlcjogXCJsZXNzIHRoYW4ge3tjb3VudH19IG1pbnV0ZXNcIixcbiAgfSxcblxuICB4TWludXRlczoge1xuICAgIG9uZTogXCIxIG1pbnV0ZVwiLFxuICAgIG90aGVyOiBcInt7Y291bnR9fSBtaW51dGVzXCIsXG4gIH0sXG5cbiAgYWJvdXRYSG91cnM6IHtcbiAgICBvbmU6IFwiYWJvdXQgMSBob3VyXCIsXG4gICAgb3RoZXI6IFwiYWJvdXQge3tjb3VudH19IGhvdXJzXCIsXG4gIH0sXG5cbiAgeEhvdXJzOiB7XG4gICAgb25lOiBcIjEgaG91clwiLFxuICAgIG90aGVyOiBcInt7Y291bnR9fSBob3Vyc1wiLFxuICB9LFxuXG4gIHhEYXlzOiB7XG4gICAgb25lOiBcIjEgZGF5XCIsXG4gICAgb3RoZXI6IFwie3tjb3VudH19IGRheXNcIixcbiAgfSxcblxuICBhYm91dFhXZWVrczoge1xuICAgIG9uZTogXCJhYm91dCAxIHdlZWtcIixcbiAgICBvdGhlcjogXCJhYm91dCB7e2NvdW50fX0gd2Vla3NcIixcbiAgfSxcblxuICB4V2Vla3M6IHtcbiAgICBvbmU6IFwiMSB3ZWVrXCIsXG4gICAgb3RoZXI6IFwie3tjb3VudH19IHdlZWtzXCIsXG4gIH0sXG5cbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgb25lOiBcImFib3V0IDEgbW9udGhcIixcbiAgICBvdGhlcjogXCJhYm91dCB7e2NvdW50fX0gbW9udGhzXCIsXG4gIH0sXG5cbiAgeE1vbnRoczoge1xuICAgIG9uZTogXCIxIG1vbnRoXCIsXG4gICAgb3RoZXI6IFwie3tjb3VudH19IG1vbnRoc1wiLFxuICB9LFxuXG4gIGFib3V0WFllYXJzOiB7XG4gICAgb25lOiBcImFib3V0IDEgeWVhclwiLFxuICAgIG90aGVyOiBcImFib3V0IHt7Y291bnR9fSB5ZWFyc1wiLFxuICB9LFxuXG4gIHhZZWFyczoge1xuICAgIG9uZTogXCIxIHllYXJcIixcbiAgICBvdGhlcjogXCJ7e2NvdW50fX0geWVhcnNcIixcbiAgfSxcblxuICBvdmVyWFllYXJzOiB7XG4gICAgb25lOiBcIm92ZXIgMSB5ZWFyXCIsXG4gICAgb3RoZXI6IFwib3ZlciB7e2NvdW50fX0geWVhcnNcIixcbiAgfSxcblxuICBhbG1vc3RYWWVhcnM6IHtcbiAgICBvbmU6IFwiYWxtb3N0IDEgeWVhclwiLFxuICAgIG90aGVyOiBcImFsbW9zdCB7e2NvdW50fX0geWVhcnNcIixcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBmb3JtYXREaXN0YW5jZSA9ICh0b2tlbiwgY291bnQsIG9wdGlvbnMpID0+IHtcbiAgbGV0IHJlc3VsdDtcblxuICBjb25zdCB0b2tlblZhbHVlID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuICBpZiAodHlwZW9mIHRva2VuVmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlO1xuICB9IGVsc2UgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vbmU7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vdGhlci5yZXBsYWNlKFwie3tjb3VudH19XCIsIGNvdW50LnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnM/LmFkZFN1ZmZpeCkge1xuICAgIGlmIChvcHRpb25zLmNvbXBhcmlzb24gJiYgb3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuIFwiaW4gXCIgKyByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyBcIiBhZ29cIjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcbiJdLCJuYW1lcyI6WyJmb3JtYXREaXN0YW5jZUxvY2FsZSIsImxlc3NUaGFuWFNlY29uZHMiLCJvbmUiLCJvdGhlciIsInhTZWNvbmRzIiwiaGFsZkFNaW51dGUiLCJsZXNzVGhhblhNaW51dGVzIiwieE1pbnV0ZXMiLCJhYm91dFhIb3VycyIsInhIb3VycyIsInhEYXlzIiwiYWJvdXRYV2Vla3MiLCJ4V2Vla3MiLCJhYm91dFhNb250aHMiLCJ4TW9udGhzIiwiYWJvdXRYWWVhcnMiLCJ4WWVhcnMiLCJvdmVyWFllYXJzIiwiYWxtb3N0WFllYXJzIiwiZm9ybWF0RGlzdGFuY2UiLCJ0b2tlbiIsImNvdW50Iiwib3B0aW9ucyIsInJlc3VsdCIsInRva2VuVmFsdWUiLCJyZXBsYWNlIiwidG9TdHJpbmciLCJhZGRTdWZmaXgiLCJjb21wYXJpc29uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/locale/en-US/_lib/formatDistance.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/locale/en-US/_lib/formatLong.js":
/*!***************************************************************!*\
  !*** ./node_modules/date-fns/locale/en-US/_lib/formatLong.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatLong: function() { return /* binding */ formatLong; }\n/* harmony export */ });\n/* harmony import */ var _lib_buildFormatLongFn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../_lib/buildFormatLongFn.js */ \"(app-pages-browser)/./node_modules/date-fns/locale/_lib/buildFormatLongFn.js\");\n\nconst dateFormats = {\n    full: \"EEEE, MMMM do, y\",\n    long: \"MMMM do, y\",\n    medium: \"MMM d, y\",\n    short: \"MM/dd/yyyy\"\n};\nconst timeFormats = {\n    full: \"h:mm:ss a zzzz\",\n    long: \"h:mm:ss a z\",\n    medium: \"h:mm:ss a\",\n    short: \"h:mm a\"\n};\nconst dateTimeFormats = {\n    full: \"{{date}} 'at' {{time}}\",\n    long: \"{{date}} 'at' {{time}}\",\n    medium: \"{{date}}, {{time}}\",\n    short: \"{{date}}, {{time}}\"\n};\nconst formatLong = {\n    date: (0,_lib_buildFormatLongFn_js__WEBPACK_IMPORTED_MODULE_0__.buildFormatLongFn)({\n        formats: dateFormats,\n        defaultWidth: \"full\"\n    }),\n    time: (0,_lib_buildFormatLongFn_js__WEBPACK_IMPORTED_MODULE_0__.buildFormatLongFn)({\n        formats: timeFormats,\n        defaultWidth: \"full\"\n    }),\n    dateTime: (0,_lib_buildFormatLongFn_js__WEBPACK_IMPORTED_MODULE_0__.buildFormatLongFn)({\n        formats: dateTimeFormats,\n        defaultWidth: \"full\"\n    })\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRMb25nLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW9FO0FBRXBFLE1BQU1DLGNBQWM7SUFDbEJDLE1BQU07SUFDTkMsTUFBTTtJQUNOQyxRQUFRO0lBQ1JDLE9BQU87QUFDVDtBQUVBLE1BQU1DLGNBQWM7SUFDbEJKLE1BQU07SUFDTkMsTUFBTTtJQUNOQyxRQUFRO0lBQ1JDLE9BQU87QUFDVDtBQUVBLE1BQU1FLGtCQUFrQjtJQUN0QkwsTUFBTTtJQUNOQyxNQUFNO0lBQ05DLFFBQVE7SUFDUkMsT0FBTztBQUNUO0FBRU8sTUFBTUcsYUFBYTtJQUN4QkMsTUFBTVQsNEVBQWlCQSxDQUFDO1FBQ3RCVSxTQUFTVDtRQUNUVSxjQUFjO0lBQ2hCO0lBRUFDLE1BQU1aLDRFQUFpQkEsQ0FBQztRQUN0QlUsU0FBU0o7UUFDVEssY0FBYztJQUNoQjtJQUVBRSxVQUFVYiw0RUFBaUJBLENBQUM7UUFDMUJVLFNBQVNIO1FBQ1RJLGNBQWM7SUFDaEI7QUFDRixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRMb25nLmpzPzUyNTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnVpbGRGb3JtYXRMb25nRm4gfSBmcm9tIFwiLi4vLi4vX2xpYi9idWlsZEZvcm1hdExvbmdGbi5qc1wiO1xuXG5jb25zdCBkYXRlRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJFRUVFLCBNTU1NIGRvLCB5XCIsXG4gIGxvbmc6IFwiTU1NTSBkbywgeVwiLFxuICBtZWRpdW06IFwiTU1NIGQsIHlcIixcbiAgc2hvcnQ6IFwiTU0vZGQveXl5eVwiLFxufTtcblxuY29uc3QgdGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwiaDptbTpzcyBhIHp6enpcIixcbiAgbG9uZzogXCJoOm1tOnNzIGEgelwiLFxuICBtZWRpdW06IFwiaDptbTpzcyBhXCIsXG4gIHNob3J0OiBcImg6bW0gYVwiLFxufTtcblxuY29uc3QgZGF0ZVRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiBcInt7ZGF0ZX19ICdhdCcge3t0aW1lfX1cIixcbiAgbG9uZzogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIG1lZGl1bTogXCJ7e2RhdGV9fSwge3t0aW1lfX1cIixcbiAgc2hvcnQ6IFwie3tkYXRlfX0sIHt7dGltZX19XCIsXG59O1xuXG5leHBvcnQgY29uc3QgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogXCJmdWxsXCIsXG4gIH0pLFxuXG4gIHRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiB0aW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6IFwiZnVsbFwiLFxuICB9KSxcblxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6IFwiZnVsbFwiLFxuICB9KSxcbn07XG4iXSwibmFtZXMiOlsiYnVpbGRGb3JtYXRMb25nRm4iLCJkYXRlRm9ybWF0cyIsImZ1bGwiLCJsb25nIiwibWVkaXVtIiwic2hvcnQiLCJ0aW1lRm9ybWF0cyIsImRhdGVUaW1lRm9ybWF0cyIsImZvcm1hdExvbmciLCJkYXRlIiwiZm9ybWF0cyIsImRlZmF1bHRXaWR0aCIsInRpbWUiLCJkYXRlVGltZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/locale/en-US/_lib/formatLong.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/locale/en-US/_lib/formatRelative.js":
/*!*******************************************************************!*\
  !*** ./node_modules/date-fns/locale/en-US/_lib/formatRelative.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatRelative: function() { return /* binding */ formatRelative; }\n/* harmony export */ });\nconst formatRelativeLocale = {\n    lastWeek: \"'last' eeee 'at' p\",\n    yesterday: \"'yesterday at' p\",\n    today: \"'today at' p\",\n    tomorrow: \"'tomorrow at' p\",\n    nextWeek: \"eeee 'at' p\",\n    other: \"P\"\n};\nconst formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRSZWxhdGl2ZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsdUJBQXVCO0lBQzNCQyxVQUFVO0lBQ1ZDLFdBQVc7SUFDWEMsT0FBTztJQUNQQyxVQUFVO0lBQ1ZDLFVBQVU7SUFDVkMsT0FBTztBQUNUO0FBRU8sTUFBTUMsaUJBQWlCLENBQUNDLE9BQU9DLE9BQU9DLFdBQVdDLFdBQ3REWCxvQkFBb0IsQ0FBQ1EsTUFBTSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRSZWxhdGl2ZS5qcz84NjVmIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGZvcm1hdFJlbGF0aXZlTG9jYWxlID0ge1xuICBsYXN0V2VlazogXCInbGFzdCcgZWVlZSAnYXQnIHBcIixcbiAgeWVzdGVyZGF5OiBcIid5ZXN0ZXJkYXkgYXQnIHBcIixcbiAgdG9kYXk6IFwiJ3RvZGF5IGF0JyBwXCIsXG4gIHRvbW9ycm93OiBcIid0b21vcnJvdyBhdCcgcFwiLFxuICBuZXh0V2VlazogXCJlZWVlICdhdCcgcFwiLFxuICBvdGhlcjogXCJQXCIsXG59O1xuXG5leHBvcnQgY29uc3QgZm9ybWF0UmVsYXRpdmUgPSAodG9rZW4sIF9kYXRlLCBfYmFzZURhdGUsIF9vcHRpb25zKSA9PlxuICBmb3JtYXRSZWxhdGl2ZUxvY2FsZVt0b2tlbl07XG4iXSwibmFtZXMiOlsiZm9ybWF0UmVsYXRpdmVMb2NhbGUiLCJsYXN0V2VlayIsInllc3RlcmRheSIsInRvZGF5IiwidG9tb3Jyb3ciLCJuZXh0V2VlayIsIm90aGVyIiwiZm9ybWF0UmVsYXRpdmUiLCJ0b2tlbiIsIl9kYXRlIiwiX2Jhc2VEYXRlIiwiX29wdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/locale/en-US/_lib/formatRelative.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/locale/en-US/_lib/localize.js":
/*!*************************************************************!*\
  !*** ./node_modules/date-fns/locale/en-US/_lib/localize.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   localize: function() { return /* binding */ localize; }\n/* harmony export */ });\n/* harmony import */ var _lib_buildLocalizeFn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../_lib/buildLocalizeFn.js */ \"(app-pages-browser)/./node_modules/date-fns/locale/_lib/buildLocalizeFn.js\");\n\nconst eraValues = {\n    narrow: [\n        \"B\",\n        \"A\"\n    ],\n    abbreviated: [\n        \"BC\",\n        \"AD\"\n    ],\n    wide: [\n        \"Before Christ\",\n        \"Anno Domini\"\n    ]\n};\nconst quarterValues = {\n    narrow: [\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\"\n    ],\n    abbreviated: [\n        \"Q1\",\n        \"Q2\",\n        \"Q3\",\n        \"Q4\"\n    ],\n    wide: [\n        \"1st quarter\",\n        \"2nd quarter\",\n        \"3rd quarter\",\n        \"4th quarter\"\n    ]\n};\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n    narrow: [\n        \"J\",\n        \"F\",\n        \"M\",\n        \"A\",\n        \"M\",\n        \"J\",\n        \"J\",\n        \"A\",\n        \"S\",\n        \"O\",\n        \"N\",\n        \"D\"\n    ],\n    abbreviated: [\n        \"Jan\",\n        \"Feb\",\n        \"Mar\",\n        \"Apr\",\n        \"May\",\n        \"Jun\",\n        \"Jul\",\n        \"Aug\",\n        \"Sep\",\n        \"Oct\",\n        \"Nov\",\n        \"Dec\"\n    ],\n    wide: [\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\"\n    ]\n};\nconst dayValues = {\n    narrow: [\n        \"S\",\n        \"M\",\n        \"T\",\n        \"W\",\n        \"T\",\n        \"F\",\n        \"S\"\n    ],\n    short: [\n        \"Su\",\n        \"Mo\",\n        \"Tu\",\n        \"We\",\n        \"Th\",\n        \"Fr\",\n        \"Sa\"\n    ],\n    abbreviated: [\n        \"Sun\",\n        \"Mon\",\n        \"Tue\",\n        \"Wed\",\n        \"Thu\",\n        \"Fri\",\n        \"Sat\"\n    ],\n    wide: [\n        \"Sunday\",\n        \"Monday\",\n        \"Tuesday\",\n        \"Wednesday\",\n        \"Thursday\",\n        \"Friday\",\n        \"Saturday\"\n    ]\n};\nconst dayPeriodValues = {\n    narrow: {\n        am: \"a\",\n        pm: \"p\",\n        midnight: \"mi\",\n        noon: \"n\",\n        morning: \"morning\",\n        afternoon: \"afternoon\",\n        evening: \"evening\",\n        night: \"night\"\n    },\n    abbreviated: {\n        am: \"AM\",\n        pm: \"PM\",\n        midnight: \"midnight\",\n        noon: \"noon\",\n        morning: \"morning\",\n        afternoon: \"afternoon\",\n        evening: \"evening\",\n        night: \"night\"\n    },\n    wide: {\n        am: \"a.m.\",\n        pm: \"p.m.\",\n        midnight: \"midnight\",\n        noon: \"noon\",\n        morning: \"morning\",\n        afternoon: \"afternoon\",\n        evening: \"evening\",\n        night: \"night\"\n    }\n};\nconst formattingDayPeriodValues = {\n    narrow: {\n        am: \"a\",\n        pm: \"p\",\n        midnight: \"mi\",\n        noon: \"n\",\n        morning: \"in the morning\",\n        afternoon: \"in the afternoon\",\n        evening: \"in the evening\",\n        night: \"at night\"\n    },\n    abbreviated: {\n        am: \"AM\",\n        pm: \"PM\",\n        midnight: \"midnight\",\n        noon: \"noon\",\n        morning: \"in the morning\",\n        afternoon: \"in the afternoon\",\n        evening: \"in the evening\",\n        night: \"at night\"\n    },\n    wide: {\n        am: \"a.m.\",\n        pm: \"p.m.\",\n        midnight: \"midnight\",\n        noon: \"noon\",\n        morning: \"in the morning\",\n        afternoon: \"in the afternoon\",\n        evening: \"in the evening\",\n        night: \"at night\"\n    }\n};\nconst ordinalNumber = (dirtyNumber, _options)=>{\n    const number = Number(dirtyNumber);\n    // If ordinal numbers depend on context, for example,\n    // if they are different for different grammatical genders,\n    // use `options.unit`.\n    //\n    // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n    // 'day', 'hour', 'minute', 'second'.\n    const rem100 = number % 100;\n    if (rem100 > 20 || rem100 < 10) {\n        switch(rem100 % 10){\n            case 1:\n                return number + \"st\";\n            case 2:\n                return number + \"nd\";\n            case 3:\n                return number + \"rd\";\n        }\n    }\n    return number + \"th\";\n};\nconst localize = {\n    ordinalNumber,\n    era: (0,_lib_buildLocalizeFn_js__WEBPACK_IMPORTED_MODULE_0__.buildLocalizeFn)({\n        values: eraValues,\n        defaultWidth: \"wide\"\n    }),\n    quarter: (0,_lib_buildLocalizeFn_js__WEBPACK_IMPORTED_MODULE_0__.buildLocalizeFn)({\n        values: quarterValues,\n        defaultWidth: \"wide\",\n        argumentCallback: (quarter)=>quarter - 1\n    }),\n    month: (0,_lib_buildLocalizeFn_js__WEBPACK_IMPORTED_MODULE_0__.buildLocalizeFn)({\n        values: monthValues,\n        defaultWidth: \"wide\"\n    }),\n    day: (0,_lib_buildLocalizeFn_js__WEBPACK_IMPORTED_MODULE_0__.buildLocalizeFn)({\n        values: dayValues,\n        defaultWidth: \"wide\"\n    }),\n    dayPeriod: (0,_lib_buildLocalizeFn_js__WEBPACK_IMPORTED_MODULE_0__.buildLocalizeFn)({\n        values: dayPeriodValues,\n        defaultWidth: \"wide\",\n        formattingValues: formattingDayPeriodValues,\n        defaultFormattingWidth: \"wide\"\n    })\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvZW4tVVMvX2xpYi9sb2NhbGl6ZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFnRTtBQUVoRSxNQUFNQyxZQUFZO0lBQ2hCQyxRQUFRO1FBQUM7UUFBSztLQUFJO0lBQ2xCQyxhQUFhO1FBQUM7UUFBTTtLQUFLO0lBQ3pCQyxNQUFNO1FBQUM7UUFBaUI7S0FBYztBQUN4QztBQUVBLE1BQU1DLGdCQUFnQjtJQUNwQkgsUUFBUTtRQUFDO1FBQUs7UUFBSztRQUFLO0tBQUk7SUFDNUJDLGFBQWE7UUFBQztRQUFNO1FBQU07UUFBTTtLQUFLO0lBQ3JDQyxNQUFNO1FBQUM7UUFBZTtRQUFlO1FBQWU7S0FBYztBQUNwRTtBQUVBLDhFQUE4RTtBQUM5RSxrSEFBa0g7QUFDbEgsb0ZBQW9GO0FBQ3BGLCtFQUErRTtBQUMvRSxNQUFNRSxjQUFjO0lBQ2xCSixRQUFRO1FBQUM7UUFBSztRQUFLO1FBQUs7UUFBSztRQUFLO1FBQUs7UUFBSztRQUFLO1FBQUs7UUFBSztRQUFLO0tBQUk7SUFDcEVDLGFBQWE7UUFDWDtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDRDtJQUVEQyxNQUFNO1FBQ0o7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO0tBQ0Q7QUFDSDtBQUVBLE1BQU1HLFlBQVk7SUFDaEJMLFFBQVE7UUFBQztRQUFLO1FBQUs7UUFBSztRQUFLO1FBQUs7UUFBSztLQUFJO0lBQzNDTSxPQUFPO1FBQUM7UUFBTTtRQUFNO1FBQU07UUFBTTtRQUFNO1FBQU07S0FBSztJQUNqREwsYUFBYTtRQUFDO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO0tBQU07SUFDOURDLE1BQU07UUFDSjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtLQUNEO0FBQ0g7QUFFQSxNQUFNSyxrQkFBa0I7SUFDdEJQLFFBQVE7UUFDTlEsSUFBSTtRQUNKQyxJQUFJO1FBQ0pDLFVBQVU7UUFDVkMsTUFBTTtRQUNOQyxTQUFTO1FBQ1RDLFdBQVc7UUFDWEMsU0FBUztRQUNUQyxPQUFPO0lBQ1Q7SUFDQWQsYUFBYTtRQUNYTyxJQUFJO1FBQ0pDLElBQUk7UUFDSkMsVUFBVTtRQUNWQyxNQUFNO1FBQ05DLFNBQVM7UUFDVEMsV0FBVztRQUNYQyxTQUFTO1FBQ1RDLE9BQU87SUFDVDtJQUNBYixNQUFNO1FBQ0pNLElBQUk7UUFDSkMsSUFBSTtRQUNKQyxVQUFVO1FBQ1ZDLE1BQU07UUFDTkMsU0FBUztRQUNUQyxXQUFXO1FBQ1hDLFNBQVM7UUFDVEMsT0FBTztJQUNUO0FBQ0Y7QUFFQSxNQUFNQyw0QkFBNEI7SUFDaENoQixRQUFRO1FBQ05RLElBQUk7UUFDSkMsSUFBSTtRQUNKQyxVQUFVO1FBQ1ZDLE1BQU07UUFDTkMsU0FBUztRQUNUQyxXQUFXO1FBQ1hDLFNBQVM7UUFDVEMsT0FBTztJQUNUO0lBQ0FkLGFBQWE7UUFDWE8sSUFBSTtRQUNKQyxJQUFJO1FBQ0pDLFVBQVU7UUFDVkMsTUFBTTtRQUNOQyxTQUFTO1FBQ1RDLFdBQVc7UUFDWEMsU0FBUztRQUNUQyxPQUFPO0lBQ1Q7SUFDQWIsTUFBTTtRQUNKTSxJQUFJO1FBQ0pDLElBQUk7UUFDSkMsVUFBVTtRQUNWQyxNQUFNO1FBQ05DLFNBQVM7UUFDVEMsV0FBVztRQUNYQyxTQUFTO1FBQ1RDLE9BQU87SUFDVDtBQUNGO0FBRUEsTUFBTUUsZ0JBQWdCLENBQUNDLGFBQWFDO0lBQ2xDLE1BQU1DLFNBQVNDLE9BQU9IO0lBRXRCLHFEQUFxRDtJQUNyRCwyREFBMkQ7SUFDM0Qsc0JBQXNCO0lBQ3RCLEVBQUU7SUFDRix5RUFBeUU7SUFDekUscUNBQXFDO0lBRXJDLE1BQU1JLFNBQVNGLFNBQVM7SUFDeEIsSUFBSUUsU0FBUyxNQUFNQSxTQUFTLElBQUk7UUFDOUIsT0FBUUEsU0FBUztZQUNmLEtBQUs7Z0JBQ0gsT0FBT0YsU0FBUztZQUNsQixLQUFLO2dCQUNILE9BQU9BLFNBQVM7WUFDbEIsS0FBSztnQkFDSCxPQUFPQSxTQUFTO1FBQ3BCO0lBQ0Y7SUFDQSxPQUFPQSxTQUFTO0FBQ2xCO0FBRU8sTUFBTUcsV0FBVztJQUN0Qk47SUFFQU8sS0FBSzFCLHdFQUFlQSxDQUFDO1FBQ25CMkIsUUFBUTFCO1FBQ1IyQixjQUFjO0lBQ2hCO0lBRUFDLFNBQVM3Qix3RUFBZUEsQ0FBQztRQUN2QjJCLFFBQVF0QjtRQUNSdUIsY0FBYztRQUNkRSxrQkFBa0IsQ0FBQ0QsVUFBWUEsVUFBVTtJQUMzQztJQUVBRSxPQUFPL0Isd0VBQWVBLENBQUM7UUFDckIyQixRQUFRckI7UUFDUnNCLGNBQWM7SUFDaEI7SUFFQUksS0FBS2hDLHdFQUFlQSxDQUFDO1FBQ25CMkIsUUFBUXBCO1FBQ1JxQixjQUFjO0lBQ2hCO0lBRUFLLFdBQVdqQyx3RUFBZUEsQ0FBQztRQUN6QjJCLFFBQVFsQjtRQUNSbUIsY0FBYztRQUNkTSxrQkFBa0JoQjtRQUNsQmlCLHdCQUF3QjtJQUMxQjtBQUNGLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9lbi1VUy9fbGliL2xvY2FsaXplLmpzPzc5NDciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnVpbGRMb2NhbGl6ZUZuIH0gZnJvbSBcIi4uLy4uL19saWIvYnVpbGRMb2NhbGl6ZUZuLmpzXCI7XG5cbmNvbnN0IGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbXCJCXCIsIFwiQVwiXSxcbiAgYWJicmV2aWF0ZWQ6IFtcIkJDXCIsIFwiQURcIl0sXG4gIHdpZGU6IFtcIkJlZm9yZSBDaHJpc3RcIiwgXCJBbm5vIERvbWluaVwiXSxcbn07XG5cbmNvbnN0IHF1YXJ0ZXJWYWx1ZXMgPSB7XG4gIG5hcnJvdzogW1wiMVwiLCBcIjJcIiwgXCIzXCIsIFwiNFwiXSxcbiAgYWJicmV2aWF0ZWQ6IFtcIlExXCIsIFwiUTJcIiwgXCJRM1wiLCBcIlE0XCJdLFxuICB3aWRlOiBbXCIxc3QgcXVhcnRlclwiLCBcIjJuZCBxdWFydGVyXCIsIFwiM3JkIHF1YXJ0ZXJcIiwgXCI0dGggcXVhcnRlclwiXSxcbn07XG5cbi8vIE5vdGU6IGluIEVuZ2xpc2gsIHRoZSBuYW1lcyBvZiBkYXlzIG9mIHRoZSB3ZWVrIGFuZCBtb250aHMgYXJlIGNhcGl0YWxpemVkLlxuLy8gSWYgeW91IGFyZSBtYWtpbmcgYSBuZXcgbG9jYWxlIGJhc2VkIG9uIHRoaXMgb25lLCBjaGVjayBpZiB0aGUgc2FtZSBpcyB0cnVlIGZvciB0aGUgbGFuZ3VhZ2UgeW91J3JlIHdvcmtpbmcgb24uXG4vLyBHZW5lcmFsbHksIGZvcm1hdHRlZCBkYXRlcyBzaG91bGQgbG9vayBsaWtlIHRoZXkgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSBzZW50ZW5jZSxcbi8vIGUuZy4gaW4gU3BhbmlzaCBsYW5ndWFnZSB0aGUgd2Vla2RheXMgYW5kIG1vbnRocyBzaG91bGQgYmUgaW4gdGhlIGxvd2VyY2FzZS5cbmNvbnN0IG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFtcIkpcIiwgXCJGXCIsIFwiTVwiLCBcIkFcIiwgXCJNXCIsIFwiSlwiLCBcIkpcIiwgXCJBXCIsIFwiU1wiLCBcIk9cIiwgXCJOXCIsIFwiRFwiXSxcbiAgYWJicmV2aWF0ZWQ6IFtcbiAgICBcIkphblwiLFxuICAgIFwiRmViXCIsXG4gICAgXCJNYXJcIixcbiAgICBcIkFwclwiLFxuICAgIFwiTWF5XCIsXG4gICAgXCJKdW5cIixcbiAgICBcIkp1bFwiLFxuICAgIFwiQXVnXCIsXG4gICAgXCJTZXBcIixcbiAgICBcIk9jdFwiLFxuICAgIFwiTm92XCIsXG4gICAgXCJEZWNcIixcbiAgXSxcblxuICB3aWRlOiBbXG4gICAgXCJKYW51YXJ5XCIsXG4gICAgXCJGZWJydWFyeVwiLFxuICAgIFwiTWFyY2hcIixcbiAgICBcIkFwcmlsXCIsXG4gICAgXCJNYXlcIixcbiAgICBcIkp1bmVcIixcbiAgICBcIkp1bHlcIixcbiAgICBcIkF1Z3VzdFwiLFxuICAgIFwiU2VwdGVtYmVyXCIsXG4gICAgXCJPY3RvYmVyXCIsXG4gICAgXCJOb3ZlbWJlclwiLFxuICAgIFwiRGVjZW1iZXJcIixcbiAgXSxcbn07XG5cbmNvbnN0IGRheVZhbHVlcyA9IHtcbiAgbmFycm93OiBbXCJTXCIsIFwiTVwiLCBcIlRcIiwgXCJXXCIsIFwiVFwiLCBcIkZcIiwgXCJTXCJdLFxuICBzaG9ydDogW1wiU3VcIiwgXCJNb1wiLCBcIlR1XCIsIFwiV2VcIiwgXCJUaFwiLCBcIkZyXCIsIFwiU2FcIl0sXG4gIGFiYnJldmlhdGVkOiBbXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIl0sXG4gIHdpZGU6IFtcbiAgICBcIlN1bmRheVwiLFxuICAgIFwiTW9uZGF5XCIsXG4gICAgXCJUdWVzZGF5XCIsXG4gICAgXCJXZWRuZXNkYXlcIixcbiAgICBcIlRodXJzZGF5XCIsXG4gICAgXCJGcmlkYXlcIixcbiAgICBcIlNhdHVyZGF5XCIsXG4gIF0sXG59O1xuXG5jb25zdCBkYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiBcImFcIixcbiAgICBwbTogXCJwXCIsXG4gICAgbWlkbmlnaHQ6IFwibWlcIixcbiAgICBub29uOiBcIm5cIixcbiAgICBtb3JuaW5nOiBcIm1vcm5pbmdcIixcbiAgICBhZnRlcm5vb246IFwiYWZ0ZXJub29uXCIsXG4gICAgZXZlbmluZzogXCJldmVuaW5nXCIsXG4gICAgbmlnaHQ6IFwibmlnaHRcIixcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogXCJBTVwiLFxuICAgIHBtOiBcIlBNXCIsXG4gICAgbWlkbmlnaHQ6IFwibWlkbmlnaHRcIixcbiAgICBub29uOiBcIm5vb25cIixcbiAgICBtb3JuaW5nOiBcIm1vcm5pbmdcIixcbiAgICBhZnRlcm5vb246IFwiYWZ0ZXJub29uXCIsXG4gICAgZXZlbmluZzogXCJldmVuaW5nXCIsXG4gICAgbmlnaHQ6IFwibmlnaHRcIixcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiBcImEubS5cIixcbiAgICBwbTogXCJwLm0uXCIsXG4gICAgbWlkbmlnaHQ6IFwibWlkbmlnaHRcIixcbiAgICBub29uOiBcIm5vb25cIixcbiAgICBtb3JuaW5nOiBcIm1vcm5pbmdcIixcbiAgICBhZnRlcm5vb246IFwiYWZ0ZXJub29uXCIsXG4gICAgZXZlbmluZzogXCJldmVuaW5nXCIsXG4gICAgbmlnaHQ6IFwibmlnaHRcIixcbiAgfSxcbn07XG5cbmNvbnN0IGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiBcImFcIixcbiAgICBwbTogXCJwXCIsXG4gICAgbWlkbmlnaHQ6IFwibWlcIixcbiAgICBub29uOiBcIm5cIixcbiAgICBtb3JuaW5nOiBcImluIHRoZSBtb3JuaW5nXCIsXG4gICAgYWZ0ZXJub29uOiBcImluIHRoZSBhZnRlcm5vb25cIixcbiAgICBldmVuaW5nOiBcImluIHRoZSBldmVuaW5nXCIsXG4gICAgbmlnaHQ6IFwiYXQgbmlnaHRcIixcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogXCJBTVwiLFxuICAgIHBtOiBcIlBNXCIsXG4gICAgbWlkbmlnaHQ6IFwibWlkbmlnaHRcIixcbiAgICBub29uOiBcIm5vb25cIixcbiAgICBtb3JuaW5nOiBcImluIHRoZSBtb3JuaW5nXCIsXG4gICAgYWZ0ZXJub29uOiBcImluIHRoZSBhZnRlcm5vb25cIixcbiAgICBldmVuaW5nOiBcImluIHRoZSBldmVuaW5nXCIsXG4gICAgbmlnaHQ6IFwiYXQgbmlnaHRcIixcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiBcImEubS5cIixcbiAgICBwbTogXCJwLm0uXCIsXG4gICAgbWlkbmlnaHQ6IFwibWlkbmlnaHRcIixcbiAgICBub29uOiBcIm5vb25cIixcbiAgICBtb3JuaW5nOiBcImluIHRoZSBtb3JuaW5nXCIsXG4gICAgYWZ0ZXJub29uOiBcImluIHRoZSBhZnRlcm5vb25cIixcbiAgICBldmVuaW5nOiBcImluIHRoZSBldmVuaW5nXCIsXG4gICAgbmlnaHQ6IFwiYXQgbmlnaHRcIixcbiAgfSxcbn07XG5cbmNvbnN0IG9yZGluYWxOdW1iZXIgPSAoZGlydHlOdW1iZXIsIF9vcHRpb25zKSA9PiB7XG4gIGNvbnN0IG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7XG5cbiAgLy8gSWYgb3JkaW5hbCBudW1iZXJzIGRlcGVuZCBvbiBjb250ZXh0LCBmb3IgZXhhbXBsZSxcbiAgLy8gaWYgdGhleSBhcmUgZGlmZmVyZW50IGZvciBkaWZmZXJlbnQgZ3JhbW1hdGljYWwgZ2VuZGVycyxcbiAgLy8gdXNlIGBvcHRpb25zLnVuaXRgLlxuICAvL1xuICAvLyBgdW5pdGAgY2FuIGJlICd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnLCAnd2VlaycsICdkYXRlJywgJ2RheU9mWWVhcicsXG4gIC8vICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJy5cblxuICBjb25zdCByZW0xMDAgPSBudW1iZXIgJSAxMDA7XG4gIGlmIChyZW0xMDAgPiAyMCB8fCByZW0xMDAgPCAxMCkge1xuICAgIHN3aXRjaCAocmVtMTAwICUgMTApIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIG51bWJlciArIFwic3RcIjtcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuIG51bWJlciArIFwibmRcIjtcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIG51bWJlciArIFwicmRcIjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bWJlciArIFwidGhcIjtcbn07XG5cbmV4cG9ydCBjb25zdCBsb2NhbGl6ZSA9IHtcbiAgb3JkaW5hbE51bWJlcixcblxuICBlcmE6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBlcmFWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiBcIndpZGVcIixcbiAgfSksXG5cbiAgcXVhcnRlcjogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IHF1YXJ0ZXJWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiBcIndpZGVcIixcbiAgICBhcmd1bWVudENhbGxiYWNrOiAocXVhcnRlcikgPT4gcXVhcnRlciAtIDEsXG4gIH0pLFxuXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiBcIndpZGVcIixcbiAgfSksXG5cbiAgZGF5OiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5VmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogXCJ3aWRlXCIsXG4gIH0pLFxuXG4gIGRheVBlcmlvZDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6IFwid2lkZVwiLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdEZvcm1hdHRpbmdXaWR0aDogXCJ3aWRlXCIsXG4gIH0pLFxufTtcbiJdLCJuYW1lcyI6WyJidWlsZExvY2FsaXplRm4iLCJlcmFWYWx1ZXMiLCJuYXJyb3ciLCJhYmJyZXZpYXRlZCIsIndpZGUiLCJxdWFydGVyVmFsdWVzIiwibW9udGhWYWx1ZXMiLCJkYXlWYWx1ZXMiLCJzaG9ydCIsImRheVBlcmlvZFZhbHVlcyIsImFtIiwicG0iLCJtaWRuaWdodCIsIm5vb24iLCJtb3JuaW5nIiwiYWZ0ZXJub29uIiwiZXZlbmluZyIsIm5pZ2h0IiwiZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyIsIm9yZGluYWxOdW1iZXIiLCJkaXJ0eU51bWJlciIsIl9vcHRpb25zIiwibnVtYmVyIiwiTnVtYmVyIiwicmVtMTAwIiwibG9jYWxpemUiLCJlcmEiLCJ2YWx1ZXMiLCJkZWZhdWx0V2lkdGgiLCJxdWFydGVyIiwiYXJndW1lbnRDYWxsYmFjayIsIm1vbnRoIiwiZGF5IiwiZGF5UGVyaW9kIiwiZm9ybWF0dGluZ1ZhbHVlcyIsImRlZmF1bHRGb3JtYXR0aW5nV2lkdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/locale/en-US/_lib/localize.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/locale/en-US/_lib/match.js":
/*!**********************************************************!*\
  !*** ./node_modules/date-fns/locale/en-US/_lib/match.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   match: function() { return /* binding */ match; }\n/* harmony export */ });\n/* harmony import */ var _lib_buildMatchFn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../_lib/buildMatchFn.js */ \"(app-pages-browser)/./node_modules/date-fns/locale/_lib/buildMatchFn.js\");\n/* harmony import */ var _lib_buildMatchPatternFn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../_lib/buildMatchPatternFn.js */ \"(app-pages-browser)/./node_modules/date-fns/locale/_lib/buildMatchPatternFn.js\");\n\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\nconst matchEraPatterns = {\n    narrow: /^(b|a)/i,\n    abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n    wide: /^(before christ|before common era|anno domini|common era)/i\n};\nconst parseEraPatterns = {\n    any: [\n        /^b/i,\n        /^(a|c)/i\n    ]\n};\nconst matchQuarterPatterns = {\n    narrow: /^[1234]/i,\n    abbreviated: /^q[1234]/i,\n    wide: /^[1234](th|st|nd|rd)? quarter/i\n};\nconst parseQuarterPatterns = {\n    any: [\n        /1/i,\n        /2/i,\n        /3/i,\n        /4/i\n    ]\n};\nconst matchMonthPatterns = {\n    narrow: /^[jfmasond]/i,\n    abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n    wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n};\nconst parseMonthPatterns = {\n    narrow: [\n        /^j/i,\n        /^f/i,\n        /^m/i,\n        /^a/i,\n        /^m/i,\n        /^j/i,\n        /^j/i,\n        /^a/i,\n        /^s/i,\n        /^o/i,\n        /^n/i,\n        /^d/i\n    ],\n    any: [\n        /^ja/i,\n        /^f/i,\n        /^mar/i,\n        /^ap/i,\n        /^may/i,\n        /^jun/i,\n        /^jul/i,\n        /^au/i,\n        /^s/i,\n        /^o/i,\n        /^n/i,\n        /^d/i\n    ]\n};\nconst matchDayPatterns = {\n    narrow: /^[smtwf]/i,\n    short: /^(su|mo|tu|we|th|fr|sa)/i,\n    abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n    wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n};\nconst parseDayPatterns = {\n    narrow: [\n        /^s/i,\n        /^m/i,\n        /^t/i,\n        /^w/i,\n        /^t/i,\n        /^f/i,\n        /^s/i\n    ],\n    any: [\n        /^su/i,\n        /^m/i,\n        /^tu/i,\n        /^w/i,\n        /^th/i,\n        /^f/i,\n        /^sa/i\n    ]\n};\nconst matchDayPeriodPatterns = {\n    narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n    any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n};\nconst parseDayPeriodPatterns = {\n    any: {\n        am: /^a/i,\n        pm: /^p/i,\n        midnight: /^mi/i,\n        noon: /^no/i,\n        morning: /morning/i,\n        afternoon: /afternoon/i,\n        evening: /evening/i,\n        night: /night/i\n    }\n};\nconst match = {\n    ordinalNumber: (0,_lib_buildMatchPatternFn_js__WEBPACK_IMPORTED_MODULE_0__.buildMatchPatternFn)({\n        matchPattern: matchOrdinalNumberPattern,\n        parsePattern: parseOrdinalNumberPattern,\n        valueCallback: (value)=>parseInt(value, 10)\n    }),\n    era: (0,_lib_buildMatchFn_js__WEBPACK_IMPORTED_MODULE_1__.buildMatchFn)({\n        matchPatterns: matchEraPatterns,\n        defaultMatchWidth: \"wide\",\n        parsePatterns: parseEraPatterns,\n        defaultParseWidth: \"any\"\n    }),\n    quarter: (0,_lib_buildMatchFn_js__WEBPACK_IMPORTED_MODULE_1__.buildMatchFn)({\n        matchPatterns: matchQuarterPatterns,\n        defaultMatchWidth: \"wide\",\n        parsePatterns: parseQuarterPatterns,\n        defaultParseWidth: \"any\",\n        valueCallback: (index)=>index + 1\n    }),\n    month: (0,_lib_buildMatchFn_js__WEBPACK_IMPORTED_MODULE_1__.buildMatchFn)({\n        matchPatterns: matchMonthPatterns,\n        defaultMatchWidth: \"wide\",\n        parsePatterns: parseMonthPatterns,\n        defaultParseWidth: \"any\"\n    }),\n    day: (0,_lib_buildMatchFn_js__WEBPACK_IMPORTED_MODULE_1__.buildMatchFn)({\n        matchPatterns: matchDayPatterns,\n        defaultMatchWidth: \"wide\",\n        parsePatterns: parseDayPatterns,\n        defaultParseWidth: \"any\"\n    }),\n    dayPeriod: (0,_lib_buildMatchFn_js__WEBPACK_IMPORTED_MODULE_1__.buildMatchFn)({\n        matchPatterns: matchDayPeriodPatterns,\n        defaultMatchWidth: \"any\",\n        parsePatterns: parseDayPeriodPatterns,\n        defaultParseWidth: \"any\"\n    })\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvZW4tVVMvX2xpYi9tYXRjaC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMEQ7QUFDYztBQUV4RSxNQUFNRSw0QkFBNEI7QUFDbEMsTUFBTUMsNEJBQTRCO0FBRWxDLE1BQU1DLG1CQUFtQjtJQUN2QkMsUUFBUTtJQUNSQyxhQUFhO0lBQ2JDLE1BQU07QUFDUjtBQUNBLE1BQU1DLG1CQUFtQjtJQUN2QkMsS0FBSztRQUFDO1FBQU87S0FBVTtBQUN6QjtBQUVBLE1BQU1DLHVCQUF1QjtJQUMzQkwsUUFBUTtJQUNSQyxhQUFhO0lBQ2JDLE1BQU07QUFDUjtBQUNBLE1BQU1JLHVCQUF1QjtJQUMzQkYsS0FBSztRQUFDO1FBQU07UUFBTTtRQUFNO0tBQUs7QUFDL0I7QUFFQSxNQUFNRyxxQkFBcUI7SUFDekJQLFFBQVE7SUFDUkMsYUFBYTtJQUNiQyxNQUFNO0FBQ1I7QUFDQSxNQUFNTSxxQkFBcUI7SUFDekJSLFFBQVE7UUFDTjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDRDtJQUVESSxLQUFLO1FBQ0g7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO0tBQ0Q7QUFDSDtBQUVBLE1BQU1LLG1CQUFtQjtJQUN2QlQsUUFBUTtJQUNSVSxPQUFPO0lBQ1BULGFBQWE7SUFDYkMsTUFBTTtBQUNSO0FBQ0EsTUFBTVMsbUJBQW1CO0lBQ3ZCWCxRQUFRO1FBQUM7UUFBTztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87S0FBTTtJQUN6REksS0FBSztRQUFDO1FBQVE7UUFBTztRQUFRO1FBQU87UUFBUTtRQUFPO0tBQU87QUFDNUQ7QUFFQSxNQUFNUSx5QkFBeUI7SUFDN0JaLFFBQVE7SUFDUkksS0FBSztBQUNQO0FBQ0EsTUFBTVMseUJBQXlCO0lBQzdCVCxLQUFLO1FBQ0hVLElBQUk7UUFDSkMsSUFBSTtRQUNKQyxVQUFVO1FBQ1ZDLE1BQU07UUFDTkMsU0FBUztRQUNUQyxXQUFXO1FBQ1hDLFNBQVM7UUFDVEMsT0FBTztJQUNUO0FBQ0Y7QUFFTyxNQUFNQyxRQUFRO0lBQ25CQyxlQUFlM0IsZ0ZBQW1CQSxDQUFDO1FBQ2pDNEIsY0FBYzNCO1FBQ2Q0QixjQUFjM0I7UUFDZDRCLGVBQWUsQ0FBQ0MsUUFBVUMsU0FBU0QsT0FBTztJQUM1QztJQUVBRSxLQUFLbEMsa0VBQVlBLENBQUM7UUFDaEJtQyxlQUFlL0I7UUFDZmdDLG1CQUFtQjtRQUNuQkMsZUFBZTdCO1FBQ2Y4QixtQkFBbUI7SUFDckI7SUFFQUMsU0FBU3ZDLGtFQUFZQSxDQUFDO1FBQ3BCbUMsZUFBZXpCO1FBQ2YwQixtQkFBbUI7UUFDbkJDLGVBQWUxQjtRQUNmMkIsbUJBQW1CO1FBQ25CUCxlQUFlLENBQUNTLFFBQVVBLFFBQVE7SUFDcEM7SUFFQUMsT0FBT3pDLGtFQUFZQSxDQUFDO1FBQ2xCbUMsZUFBZXZCO1FBQ2Z3QixtQkFBbUI7UUFDbkJDLGVBQWV4QjtRQUNmeUIsbUJBQW1CO0lBQ3JCO0lBRUFJLEtBQUsxQyxrRUFBWUEsQ0FBQztRQUNoQm1DLGVBQWVyQjtRQUNmc0IsbUJBQW1CO1FBQ25CQyxlQUFlckI7UUFDZnNCLG1CQUFtQjtJQUNyQjtJQUVBSyxXQUFXM0Msa0VBQVlBLENBQUM7UUFDdEJtQyxlQUFlbEI7UUFDZm1CLG1CQUFtQjtRQUNuQkMsZUFBZW5CO1FBQ2ZvQixtQkFBbUI7SUFDckI7QUFDRixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvZW4tVVMvX2xpYi9tYXRjaC5qcz8wNjk0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJ1aWxkTWF0Y2hGbiB9IGZyb20gXCIuLi8uLi9fbGliL2J1aWxkTWF0Y2hGbi5qc1wiO1xuaW1wb3J0IHsgYnVpbGRNYXRjaFBhdHRlcm5GbiB9IGZyb20gXCIuLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4uanNcIjtcblxuY29uc3QgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspKHRofHN0fG5kfHJkKT8vaTtcbmNvbnN0IHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXFxkKy9pO1xuXG5jb25zdCBtYXRjaEVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGJ8YSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGJcXC4/XFxzP2NcXC4/fGJcXC4/XFxzP2NcXC4/XFxzP2VcXC4/fGFcXC4/XFxzP2RcXC4/fGNcXC4/XFxzP2VcXC4/KS9pLFxuICB3aWRlOiAvXihiZWZvcmUgY2hyaXN0fGJlZm9yZSBjb21tb24gZXJhfGFubm8gZG9taW5pfGNvbW1vbiBlcmEpL2ksXG59O1xuY29uc3QgcGFyc2VFcmFQYXR0ZXJucyA9IHtcbiAgYW55OiBbL15iL2ksIC9eKGF8YykvaV0sXG59O1xuXG5jb25zdCBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlsxMjM0XS9pLFxuICBhYmJyZXZpYXRlZDogL15xWzEyMzRdL2ksXG4gIHdpZGU6IC9eWzEyMzRdKHRofHN0fG5kfHJkKT8gcXVhcnRlci9pLFxufTtcbmNvbnN0IHBhcnNlUXVhcnRlclBhdHRlcm5zID0ge1xuICBhbnk6IFsvMS9pLCAvMi9pLCAvMy9pLCAvNC9pXSxcbn07XG5cbmNvbnN0IG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltqZm1hc29uZF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGphbnxmZWJ8bWFyfGFwcnxtYXl8anVufGp1bHxhdWd8c2VwfG9jdHxub3Z8ZGVjKS9pLFxuICB3aWRlOiAvXihqYW51YXJ5fGZlYnJ1YXJ5fG1hcmNofGFwcmlsfG1heXxqdW5lfGp1bHl8YXVndXN0fHNlcHRlbWJlcnxvY3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyKS9pLFxufTtcbmNvbnN0IHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbXG4gICAgL15qL2ksXG4gICAgL15mL2ksXG4gICAgL15tL2ksXG4gICAgL15hL2ksXG4gICAgL15tL2ksXG4gICAgL15qL2ksXG4gICAgL15qL2ksXG4gICAgL15hL2ksXG4gICAgL15zL2ksXG4gICAgL15vL2ksXG4gICAgL15uL2ksXG4gICAgL15kL2ksXG4gIF0sXG5cbiAgYW55OiBbXG4gICAgL15qYS9pLFxuICAgIC9eZi9pLFxuICAgIC9ebWFyL2ksXG4gICAgL15hcC9pLFxuICAgIC9ebWF5L2ksXG4gICAgL15qdW4vaSxcbiAgICAvXmp1bC9pLFxuICAgIC9eYXUvaSxcbiAgICAvXnMvaSxcbiAgICAvXm8vaSxcbiAgICAvXm4vaSxcbiAgICAvXmQvaSxcbiAgXSxcbn07XG5cbmNvbnN0IG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bc210d2ZdL2ksXG4gIHNob3J0OiAvXihzdXxtb3x0dXx3ZXx0aHxmcnxzYSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKHN1bnxtb258dHVlfHdlZHx0aHV8ZnJpfHNhdCkvaSxcbiAgd2lkZTogL14oc3VuZGF5fG1vbmRheXx0dWVzZGF5fHdlZG5lc2RheXx0aHVyc2RheXxmcmlkYXl8c2F0dXJkYXkpL2ksXG59O1xuY29uc3QgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15zL2ksIC9ebS9pLCAvXnQvaSwgL153L2ksIC9edC9pLCAvXmYvaSwgL15zL2ldLFxuICBhbnk6IFsvXnN1L2ksIC9ebS9pLCAvXnR1L2ksIC9edy9pLCAvXnRoL2ksIC9eZi9pLCAvXnNhL2ldLFxufTtcblxuY29uc3QgbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihhfHB8bWl8bnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2ksXG4gIGFueTogL14oW2FwXVxcLj9cXHM/bVxcLj98bWlkbmlnaHR8bm9vbnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2ksXG59O1xuY29uc3QgcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiB7XG4gICAgYW06IC9eYS9pLFxuICAgIHBtOiAvXnAvaSxcbiAgICBtaWRuaWdodDogL15taS9pLFxuICAgIG5vb246IC9ebm8vaSxcbiAgICBtb3JuaW5nOiAvbW9ybmluZy9pLFxuICAgIGFmdGVybm9vbjogL2FmdGVybm9vbi9pLFxuICAgIGV2ZW5pbmc6IC9ldmVuaW5nL2ksXG4gICAgbmlnaHQ6IC9uaWdodC9pLFxuICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IG1hdGNoID0ge1xuICBvcmRpbmFsTnVtYmVyOiBidWlsZE1hdGNoUGF0dGVybkZuKHtcbiAgICBtYXRjaFBhdHRlcm46IG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgcGFyc2VQYXR0ZXJuOiBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHZhbHVlQ2FsbGJhY2s6ICh2YWx1ZSkgPT4gcGFyc2VJbnQodmFsdWUsIDEwKSxcbiAgfSksXG5cbiAgZXJhOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6IFwid2lkZVwiLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6IFwiYW55XCIsXG4gIH0pLFxuXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6IFwid2lkZVwiLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiBcImFueVwiLFxuICAgIHZhbHVlQ2FsbGJhY2s6IChpbmRleCkgPT4gaW5kZXggKyAxLFxuICB9KSxcblxuICBtb250aDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaE1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6IFwid2lkZVwiLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogXCJhbnlcIixcbiAgfSksXG5cbiAgZGF5OiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6IFwid2lkZVwiLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6IFwiYW55XCIsXG4gIH0pLFxuXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiBcImFueVwiLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6IFwiYW55XCIsXG4gIH0pLFxufTtcbiJdLCJuYW1lcyI6WyJidWlsZE1hdGNoRm4iLCJidWlsZE1hdGNoUGF0dGVybkZuIiwibWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiIsInBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4iLCJtYXRjaEVyYVBhdHRlcm5zIiwibmFycm93IiwiYWJicmV2aWF0ZWQiLCJ3aWRlIiwicGFyc2VFcmFQYXR0ZXJucyIsImFueSIsIm1hdGNoUXVhcnRlclBhdHRlcm5zIiwicGFyc2VRdWFydGVyUGF0dGVybnMiLCJtYXRjaE1vbnRoUGF0dGVybnMiLCJwYXJzZU1vbnRoUGF0dGVybnMiLCJtYXRjaERheVBhdHRlcm5zIiwic2hvcnQiLCJwYXJzZURheVBhdHRlcm5zIiwibWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyIsInBhcnNlRGF5UGVyaW9kUGF0dGVybnMiLCJhbSIsInBtIiwibWlkbmlnaHQiLCJub29uIiwibW9ybmluZyIsImFmdGVybm9vbiIsImV2ZW5pbmciLCJuaWdodCIsIm1hdGNoIiwib3JkaW5hbE51bWJlciIsIm1hdGNoUGF0dGVybiIsInBhcnNlUGF0dGVybiIsInZhbHVlQ2FsbGJhY2siLCJ2YWx1ZSIsInBhcnNlSW50IiwiZXJhIiwibWF0Y2hQYXR0ZXJucyIsImRlZmF1bHRNYXRjaFdpZHRoIiwicGFyc2VQYXR0ZXJucyIsImRlZmF1bHRQYXJzZVdpZHRoIiwicXVhcnRlciIsImluZGV4IiwibW9udGgiLCJkYXkiLCJkYXlQZXJpb2QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/locale/en-US/_lib/match.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/startOfDay.js":
/*!*********************************************!*\
  !*** ./node_modules/date-fns/startOfDay.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   startOfDay: function() { return /* binding */ startOfDay; }\n/* harmony export */ });\n/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.js */ \"(app-pages-browser)/./node_modules/date-fns/toDate.js\");\n\n/**\n * The {@link startOfDay} function options.\n */ /**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */ function startOfDay(date, options) {\n    const _date = (0,_toDate_js__WEBPACK_IMPORTED_MODULE_0__.toDate)(date, options === null || options === void 0 ? void 0 : options.in);\n    _date.setHours(0, 0, 0, 0);\n    return _date;\n}\n// Fallback for modularized imports:\n/* harmony default export */ __webpack_exports__[\"default\"] = (startOfDay);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdGFydE9mRGF5LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXFDO0FBRXJDOztDQUVDLEdBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXFCQyxHQUNNLFNBQVNDLFdBQVdDLElBQUksRUFBRUMsT0FBTztJQUN0QyxNQUFNQyxRQUFRSixrREFBTUEsQ0FBQ0UsTUFBTUMsb0JBQUFBLDhCQUFBQSxRQUFTRSxFQUFFO0lBQ3RDRCxNQUFNRSxRQUFRLENBQUMsR0FBRyxHQUFHLEdBQUc7SUFDeEIsT0FBT0Y7QUFDVDtBQUVBLG9DQUFvQztBQUNwQywrREFBZUgsVUFBVUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvc3RhcnRPZkRheS5qcz8zNmVhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5qc1wiO1xuXG4vKipcbiAqIFRoZSB7QGxpbmsgc3RhcnRPZkRheX0gZnVuY3Rpb24gb3B0aW9ucy5cbiAqL1xuXG4vKipcbiAqIEBuYW1lIHN0YXJ0T2ZEYXlcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBzdGFydCBvZiBhIGRheSBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgZGF5IGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSByZXN1bHQgd2lsbCBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKiBAdHlwZVBhcmFtIFJlc3VsdERhdGUgLSBUaGUgcmVzdWx0IGBEYXRlYCB0eXBlLCBpdCBpcyB0aGUgdHlwZSByZXR1cm5lZCBmcm9tIHRoZSBjb250ZXh0IGZ1bmN0aW9uIGlmIGl0IGlzIHBhc3NlZCwgb3IgaW5mZXJyZWQgZnJvbSB0aGUgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIG9yaWdpbmFsIGRhdGVcbiAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJucyBUaGUgc3RhcnQgb2YgYSBkYXlcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgZGF5IGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZkRheShuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApKVxuICogLy89PiBUdWUgU2VwIDAyIDIwMTQgMDA6MDA6MDBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0T2ZEYXkoZGF0ZSwgb3B0aW9ucykge1xuICBjb25zdCBfZGF0ZSA9IHRvRGF0ZShkYXRlLCBvcHRpb25zPy5pbik7XG4gIF9kYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gX2RhdGU7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgc3RhcnRPZkRheTtcbiJdLCJuYW1lcyI6WyJ0b0RhdGUiLCJzdGFydE9mRGF5IiwiZGF0ZSIsIm9wdGlvbnMiLCJfZGF0ZSIsImluIiwic2V0SG91cnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/startOfDay.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/startOfISOWeek.js":
/*!*************************************************!*\
  !*** ./node_modules/date-fns/startOfISOWeek.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   startOfISOWeek: function() { return /* binding */ startOfISOWeek; }\n/* harmony export */ });\n/* harmony import */ var _startOfWeek_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./startOfWeek.js */ \"(app-pages-browser)/./node_modules/date-fns/startOfWeek.js\");\n\n/**\n * The {@link startOfISOWeek} function options.\n */ /**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */ function startOfISOWeek(date, options) {\n    return (0,_startOfWeek_js__WEBPACK_IMPORTED_MODULE_0__.startOfWeek)(date, {\n        ...options,\n        weekStartsOn: 1\n    });\n}\n// Fallback for modularized imports:\n/* harmony default export */ __webpack_exports__[\"default\"] = (startOfISOWeek);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdGFydE9mSVNPV2Vlay5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUErQztBQUUvQzs7Q0FFQyxHQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXVCQyxHQUNNLFNBQVNDLGVBQWVDLElBQUksRUFBRUMsT0FBTztJQUMxQyxPQUFPSCw0REFBV0EsQ0FBQ0UsTUFBTTtRQUFFLEdBQUdDLE9BQU87UUFBRUMsY0FBYztJQUFFO0FBQ3pEO0FBRUEsb0NBQW9DO0FBQ3BDLCtEQUFlSCxjQUFjQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdGFydE9mSVNPV2Vlay5qcz80OWYwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHN0YXJ0T2ZXZWVrIH0gZnJvbSBcIi4vc3RhcnRPZldlZWsuanNcIjtcblxuLyoqXG4gKiBUaGUge0BsaW5rIHN0YXJ0T2ZJU09XZWVrfSBmdW5jdGlvbiBvcHRpb25zLlxuICovXG5cbi8qKlxuICogQG5hbWUgc3RhcnRPZklTT1dlZWtcbiAqIEBjYXRlZ29yeSBJU08gV2VlayBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIHN0YXJ0IG9mIGFuIElTTyB3ZWVrIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgc3RhcnQgb2YgYW4gSVNPIHdlZWsgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiBJU08gd2Vlay1udW1iZXJpbmcgeWVhcjogaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKiBAdHlwZVBhcmFtIFJlc3VsdERhdGUgLSBUaGUgcmVzdWx0IGBEYXRlYCB0eXBlLCBpdCBpcyB0aGUgdHlwZSByZXR1cm5lZCBmcm9tIHRoZSBjb250ZXh0IGZ1bmN0aW9uIGlmIGl0IGlzIHBhc3NlZCwgb3IgaW5mZXJyZWQgZnJvbSB0aGUgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIG9yaWdpbmFsIGRhdGVcbiAqIEBwYXJhbSBvcHRpb25zIC0gQW4gb2JqZWN0IHdpdGggb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zIFRoZSBzdGFydCBvZiBhbiBJU08gd2Vla1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgc3RhcnQgb2YgYW4gSVNPIHdlZWsgZm9yIDIgU2VwdGVtYmVyIDIwMTQgMTE6NTU6MDA6XG4gKiBjb25zdCByZXN1bHQgPSBzdGFydE9mSVNPV2VlayhuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApKVxuICogLy89PiBNb24gU2VwIDAxIDIwMTQgMDA6MDA6MDBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0T2ZJU09XZWVrKGRhdGUsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHN0YXJ0T2ZXZWVrKGRhdGUsIHsgLi4ub3B0aW9ucywgd2Vla1N0YXJ0c09uOiAxIH0pO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IHN0YXJ0T2ZJU09XZWVrO1xuIl0sIm5hbWVzIjpbInN0YXJ0T2ZXZWVrIiwic3RhcnRPZklTT1dlZWsiLCJkYXRlIiwib3B0aW9ucyIsIndlZWtTdGFydHNPbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/startOfISOWeek.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/startOfISOWeekYear.js":
/*!*****************************************************!*\
  !*** ./node_modules/date-fns/startOfISOWeekYear.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   startOfISOWeekYear: function() { return /* binding */ startOfISOWeekYear; }\n/* harmony export */ });\n/* harmony import */ var _constructFrom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constructFrom.js */ \"(app-pages-browser)/./node_modules/date-fns/constructFrom.js\");\n/* harmony import */ var _getISOWeekYear_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getISOWeekYear.js */ \"(app-pages-browser)/./node_modules/date-fns/getISOWeekYear.js\");\n/* harmony import */ var _startOfISOWeek_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./startOfISOWeek.js */ \"(app-pages-browser)/./node_modules/date-fns/startOfISOWeek.js\");\n\n\n\n/**\n * The {@link startOfISOWeekYear} function options.\n */ /**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week-numbering year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */ function startOfISOWeekYear(date, options) {\n    const year = (0,_getISOWeekYear_js__WEBPACK_IMPORTED_MODULE_0__.getISOWeekYear)(date, options);\n    const fourthOfJanuary = (0,_constructFrom_js__WEBPACK_IMPORTED_MODULE_1__.constructFrom)((options === null || options === void 0 ? void 0 : options.in) || date, 0);\n    fourthOfJanuary.setFullYear(year, 0, 4);\n    fourthOfJanuary.setHours(0, 0, 0, 0);\n    return (0,_startOfISOWeek_js__WEBPACK_IMPORTED_MODULE_2__.startOfISOWeek)(fourthOfJanuary);\n}\n// Fallback for modularized imports:\n/* harmony default export */ __webpack_exports__[\"default\"] = (startOfISOWeekYear);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdGFydE9mSVNPV2Vla1llYXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFtRDtBQUNFO0FBQ0E7QUFFckQ7O0NBRUMsR0FFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBd0JDLEdBQ00sU0FBU0csbUJBQW1CQyxJQUFJLEVBQUVDLE9BQU87SUFDOUMsTUFBTUMsT0FBT0wsa0VBQWNBLENBQUNHLE1BQU1DO0lBQ2xDLE1BQU1FLGtCQUFrQlAsZ0VBQWFBLENBQUNLLENBQUFBLG9CQUFBQSw4QkFBQUEsUUFBU0csRUFBRSxLQUFJSixNQUFNO0lBQzNERyxnQkFBZ0JFLFdBQVcsQ0FBQ0gsTUFBTSxHQUFHO0lBQ3JDQyxnQkFBZ0JHLFFBQVEsQ0FBQyxHQUFHLEdBQUcsR0FBRztJQUNsQyxPQUFPUixrRUFBY0EsQ0FBQ0s7QUFDeEI7QUFFQSxvQ0FBb0M7QUFDcEMsK0RBQWVKLGtCQUFrQkEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvc3RhcnRPZklTT1dlZWtZZWFyLmpzP2Q4NDciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29uc3RydWN0RnJvbSB9IGZyb20gXCIuL2NvbnN0cnVjdEZyb20uanNcIjtcbmltcG9ydCB7IGdldElTT1dlZWtZZWFyIH0gZnJvbSBcIi4vZ2V0SVNPV2Vla1llYXIuanNcIjtcbmltcG9ydCB7IHN0YXJ0T2ZJU09XZWVrIH0gZnJvbSBcIi4vc3RhcnRPZklTT1dlZWsuanNcIjtcblxuLyoqXG4gKiBUaGUge0BsaW5rIHN0YXJ0T2ZJU09XZWVrWWVhcn0gZnVuY3Rpb24gb3B0aW9ucy5cbiAqL1xuXG4vKipcbiAqIEBuYW1lIHN0YXJ0T2ZJU09XZWVrWWVhclxuICogQGNhdGVnb3J5IElTTyBXZWVrLU51bWJlcmluZyBZZWFyIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYW4gSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhbiBJU08gd2Vlay1udW1iZXJpbmcgeWVhcixcbiAqIHdoaWNoIGFsd2F5cyBzdGFydHMgMyBkYXlzIGJlZm9yZSB0aGUgeWVhcidzIGZpcnN0IFRodXJzZGF5LlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiBJU08gd2Vlay1udW1iZXJpbmcgeWVhcjogaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKiBAdHlwZVBhcmFtIFJlc3VsdERhdGUgLSBUaGUgcmVzdWx0IGBEYXRlYCB0eXBlLCBpdCBpcyB0aGUgdHlwZSByZXR1cm5lZCBmcm9tIHRoZSBjb250ZXh0IGZ1bmN0aW9uIGlmIGl0IGlzIHBhc3NlZCwgb3IgaW5mZXJyZWQgZnJvbSB0aGUgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIG9yaWdpbmFsIGRhdGVcbiAqIEBwYXJhbSBvcHRpb25zIC0gQW4gb2JqZWN0IHdpdGggb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zIFRoZSBzdGFydCBvZiBhbiBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgc3RhcnQgb2YgYW4gSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgZm9yIDIgSnVseSAyMDA1OlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZklTT1dlZWtZZWFyKG5ldyBEYXRlKDIwMDUsIDYsIDIpKVxuICogLy89PiBNb24gSmFuIDAzIDIwMDUgMDA6MDA6MDBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0T2ZJU09XZWVrWWVhcihkYXRlLCBvcHRpb25zKSB7XG4gIGNvbnN0IHllYXIgPSBnZXRJU09XZWVrWWVhcihkYXRlLCBvcHRpb25zKTtcbiAgY29uc3QgZm91cnRoT2ZKYW51YXJ5ID0gY29uc3RydWN0RnJvbShvcHRpb25zPy5pbiB8fCBkYXRlLCAwKTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldEZ1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnkuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBzdGFydE9mSVNPV2Vlayhmb3VydGhPZkphbnVhcnkpO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IHN0YXJ0T2ZJU09XZWVrWWVhcjtcbiJdLCJuYW1lcyI6WyJjb25zdHJ1Y3RGcm9tIiwiZ2V0SVNPV2Vla1llYXIiLCJzdGFydE9mSVNPV2VlayIsInN0YXJ0T2ZJU09XZWVrWWVhciIsImRhdGUiLCJvcHRpb25zIiwieWVhciIsImZvdXJ0aE9mSmFudWFyeSIsImluIiwic2V0RnVsbFllYXIiLCJzZXRIb3VycyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/startOfISOWeekYear.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/startOfWeek.js":
/*!**********************************************!*\
  !*** ./node_modules/date-fns/startOfWeek.js ***!
  \**********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   startOfWeek: function() { return /* binding */ startOfWeek; }\n/* harmony export */ });\n/* harmony import */ var _lib_defaultOptions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_lib/defaultOptions.js */ \"(app-pages-browser)/./node_modules/date-fns/_lib/defaultOptions.js\");\n/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toDate.js */ \"(app-pages-browser)/./node_modules/date-fns/toDate.js\");\n\n\n/**\n * The {@link startOfWeek} function options.\n */ /**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */ function startOfWeek(date, options) {\n    var _options_locale_options, _options_locale, _defaultOptions_locale_options, _defaultOptions_locale;\n    const defaultOptions = (0,_lib_defaultOptions_js__WEBPACK_IMPORTED_MODULE_0__.getDefaultOptions)();\n    var _options_weekStartsOn, _ref, _ref1, _ref2;\n    const weekStartsOn = (_ref2 = (_ref1 = (_ref = (_options_weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options_weekStartsOn !== void 0 ? _options_weekStartsOn : options === null || options === void 0 ? void 0 : (_options_locale = options.locale) === null || _options_locale === void 0 ? void 0 : (_options_locale_options = _options_locale.options) === null || _options_locale_options === void 0 ? void 0 : _options_locale_options.weekStartsOn) !== null && _ref !== void 0 ? _ref : defaultOptions.weekStartsOn) !== null && _ref1 !== void 0 ? _ref1 : (_defaultOptions_locale = defaultOptions.locale) === null || _defaultOptions_locale === void 0 ? void 0 : (_defaultOptions_locale_options = _defaultOptions_locale.options) === null || _defaultOptions_locale_options === void 0 ? void 0 : _defaultOptions_locale_options.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : 0;\n    const _date = (0,_toDate_js__WEBPACK_IMPORTED_MODULE_1__.toDate)(date, options === null || options === void 0 ? void 0 : options.in);\n    const day = _date.getDay();\n    const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n    _date.setDate(_date.getDate() - diff);\n    _date.setHours(0, 0, 0, 0);\n    return _date;\n}\n// Fallback for modularized imports:\n/* harmony default export */ __webpack_exports__[\"default\"] = (startOfWeek);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdGFydE9mV2Vlay5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNkQ7QUFDeEI7QUFFckM7O0NBRUMsR0FFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0EwQkMsR0FDTSxTQUFTRSxZQUFZQyxJQUFJLEVBQUVDLE9BQU87UUFJckNBLHlCQUFBQSxpQkFFQUMsZ0NBQUFBO0lBTEYsTUFBTUEsaUJBQWlCTCx5RUFBaUJBO1FBRXRDSSx1QkFBQUEsTUFBQUEsT0FBQUE7SUFERixNQUFNRSxlQUNKRixDQUFBQSxRQUFBQSxDQUFBQSxRQUFBQSxDQUFBQSxPQUFBQSxDQUFBQSx3QkFBQUEsb0JBQUFBLDhCQUFBQSxRQUFTRSxZQUFZLGNBQXJCRixtQ0FBQUEsd0JBQ0FBLG9CQUFBQSwrQkFBQUEsa0JBQUFBLFFBQVNHLE1BQU0sY0FBZkgsdUNBQUFBLDBCQUFBQSxnQkFBaUJBLE9BQU8sY0FBeEJBLDhDQUFBQSx3QkFBMEJFLFlBQVksY0FEdENGLGtCQUFBQSxPQUVBQyxlQUFlQyxZQUFZLGNBRjNCRixtQkFBQUEsU0FHQUMseUJBQUFBLGVBQWVFLE1BQU0sY0FBckJGLDhDQUFBQSxpQ0FBQUEsdUJBQXVCRCxPQUFPLGNBQTlCQyxxREFBQUEsK0JBQWdDQyxZQUFZLGNBSDVDRixtQkFBQUEsUUFJQTtJQUVGLE1BQU1JLFFBQVFQLGtEQUFNQSxDQUFDRSxNQUFNQyxvQkFBQUEsOEJBQUFBLFFBQVNLLEVBQUU7SUFDdEMsTUFBTUMsTUFBTUYsTUFBTUcsTUFBTTtJQUN4QixNQUFNQyxPQUFPLENBQUNGLE1BQU1KLGVBQWUsSUFBSSxLQUFLSSxNQUFNSjtJQUVsREUsTUFBTUssT0FBTyxDQUFDTCxNQUFNTSxPQUFPLEtBQUtGO0lBQ2hDSixNQUFNTyxRQUFRLENBQUMsR0FBRyxHQUFHLEdBQUc7SUFDeEIsT0FBT1A7QUFDVDtBQUVBLG9DQUFvQztBQUNwQywrREFBZU4sV0FBV0EsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvc3RhcnRPZldlZWsuanM/NmY1MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuL19saWIvZGVmYXVsdE9wdGlvbnMuanNcIjtcbmltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5qc1wiO1xuXG4vKipcbiAqIFRoZSB7QGxpbmsgc3RhcnRPZldlZWt9IGZ1bmN0aW9uIG9wdGlvbnMuXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBzdGFydE9mV2Vla1xuICogQGNhdGVnb3J5IFdlZWsgSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBzdGFydCBvZiBhIHdlZWsgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhIHdlZWsgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqIEB0eXBlUGFyYW0gUmVzdWx0RGF0ZSAtIFRoZSByZXN1bHQgYERhdGVgIHR5cGUsIGl0IGlzIHRoZSB0eXBlIHJldHVybmVkIGZyb20gdGhlIGNvbnRleHQgZnVuY3Rpb24gaWYgaXQgaXMgcGFzc2VkLCBvciBpbmZlcnJlZCBmcm9tIHRoZSBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgb3JpZ2luYWwgZGF0ZVxuICogQHBhcmFtIG9wdGlvbnMgLSBBbiBvYmplY3Qgd2l0aCBvcHRpb25zXG4gKlxuICogQHJldHVybnMgVGhlIHN0YXJ0IG9mIGEgd2Vla1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgc3RhcnQgb2YgYSB3ZWVrIGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZldlZWsobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gU3VuIEF1ZyAzMSAyMDE0IDAwOjAwOjAwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElmIHRoZSB3ZWVrIHN0YXJ0cyBvbiBNb25kYXksIHRoZSBzdGFydCBvZiB0aGUgd2VlayBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZXZWVrKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCksIHsgd2Vla1N0YXJ0c09uOiAxIH0pXG4gKiAvLz0+IE1vbiBTZXAgMDEgMjAxNCAwMDowMDowMFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRPZldlZWsoZGF0ZSwgb3B0aW9ucykge1xuICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIGNvbnN0IHdlZWtTdGFydHNPbiA9XG4gICAgb3B0aW9ucz8ud2Vla1N0YXJ0c09uID8/XG4gICAgb3B0aW9ucz8ubG9jYWxlPy5vcHRpb25zPy53ZWVrU3RhcnRzT24gPz9cbiAgICBkZWZhdWx0T3B0aW9ucy53ZWVrU3RhcnRzT24gPz9cbiAgICBkZWZhdWx0T3B0aW9ucy5sb2NhbGU/Lm9wdGlvbnM/LndlZWtTdGFydHNPbiA/P1xuICAgIDA7XG5cbiAgY29uc3QgX2RhdGUgPSB0b0RhdGUoZGF0ZSwgb3B0aW9ucz8uaW4pO1xuICBjb25zdCBkYXkgPSBfZGF0ZS5nZXREYXkoKTtcbiAgY29uc3QgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSB3ZWVrU3RhcnRzT247XG5cbiAgX2RhdGUuc2V0RGF0ZShfZGF0ZS5nZXREYXRlKCkgLSBkaWZmKTtcbiAgX2RhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBfZGF0ZTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBzdGFydE9mV2VlaztcbiJdLCJuYW1lcyI6WyJnZXREZWZhdWx0T3B0aW9ucyIsInRvRGF0ZSIsInN0YXJ0T2ZXZWVrIiwiZGF0ZSIsIm9wdGlvbnMiLCJkZWZhdWx0T3B0aW9ucyIsIndlZWtTdGFydHNPbiIsImxvY2FsZSIsIl9kYXRlIiwiaW4iLCJkYXkiLCJnZXREYXkiLCJkaWZmIiwic2V0RGF0ZSIsImdldERhdGUiLCJzZXRIb3VycyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/startOfWeek.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/startOfWeekYear.js":
/*!**************************************************!*\
  !*** ./node_modules/date-fns/startOfWeekYear.js ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   startOfWeekYear: function() { return /* binding */ startOfWeekYear; }\n/* harmony export */ });\n/* harmony import */ var _lib_defaultOptions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_lib/defaultOptions.js */ \"(app-pages-browser)/./node_modules/date-fns/_lib/defaultOptions.js\");\n/* harmony import */ var _constructFrom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constructFrom.js */ \"(app-pages-browser)/./node_modules/date-fns/constructFrom.js\");\n/* harmony import */ var _getWeekYear_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getWeekYear.js */ \"(app-pages-browser)/./node_modules/date-fns/getWeekYear.js\");\n/* harmony import */ var _startOfWeek_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./startOfWeek.js */ \"(app-pages-browser)/./node_modules/date-fns/startOfWeek.js\");\n\n\n\n\n/**\n * The {@link startOfWeekYear} function options.\n */ /**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week-numbering year\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */ function startOfWeekYear(date, options) {\n    var _options_locale_options, _options_locale, _defaultOptions_locale_options, _defaultOptions_locale;\n    const defaultOptions = (0,_lib_defaultOptions_js__WEBPACK_IMPORTED_MODULE_0__.getDefaultOptions)();\n    var _options_firstWeekContainsDate, _ref, _ref1, _ref2;\n    const firstWeekContainsDate = (_ref2 = (_ref1 = (_ref = (_options_firstWeekContainsDate = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options_firstWeekContainsDate !== void 0 ? _options_firstWeekContainsDate : options === null || options === void 0 ? void 0 : (_options_locale = options.locale) === null || _options_locale === void 0 ? void 0 : (_options_locale_options = _options_locale.options) === null || _options_locale_options === void 0 ? void 0 : _options_locale_options.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : defaultOptions.firstWeekContainsDate) !== null && _ref1 !== void 0 ? _ref1 : (_defaultOptions_locale = defaultOptions.locale) === null || _defaultOptions_locale === void 0 ? void 0 : (_defaultOptions_locale_options = _defaultOptions_locale.options) === null || _defaultOptions_locale_options === void 0 ? void 0 : _defaultOptions_locale_options.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1;\n    const year = (0,_getWeekYear_js__WEBPACK_IMPORTED_MODULE_1__.getWeekYear)(date, options);\n    const firstWeek = (0,_constructFrom_js__WEBPACK_IMPORTED_MODULE_2__.constructFrom)((options === null || options === void 0 ? void 0 : options.in) || date, 0);\n    firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n    firstWeek.setHours(0, 0, 0, 0);\n    const _date = (0,_startOfWeek_js__WEBPACK_IMPORTED_MODULE_3__.startOfWeek)(firstWeek, options);\n    return _date;\n}\n// Fallback for modularized imports:\n/* harmony default export */ __webpack_exports__[\"default\"] = (startOfWeekYear);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdGFydE9mV2Vla1llYXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBNkQ7QUFDVjtBQUNKO0FBQ0E7QUFFL0M7O0NBRUMsR0FFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBb0NDLEdBQ00sU0FBU0ksZ0JBQWdCQyxJQUFJLEVBQUVDLE9BQU87UUFJekNBLHlCQUFBQSxpQkFFQUMsZ0NBQUFBO0lBTEYsTUFBTUEsaUJBQWlCUCx5RUFBaUJBO1FBRXRDTSxnQ0FBQUEsTUFBQUEsT0FBQUE7SUFERixNQUFNRSx3QkFDSkYsQ0FBQUEsUUFBQUEsQ0FBQUEsUUFBQUEsQ0FBQUEsT0FBQUEsQ0FBQUEsaUNBQUFBLG9CQUFBQSw4QkFBQUEsUUFBU0UscUJBQXFCLGNBQTlCRiw0Q0FBQUEsaUNBQ0FBLG9CQUFBQSwrQkFBQUEsa0JBQUFBLFFBQVNHLE1BQU0sY0FBZkgsdUNBQUFBLDBCQUFBQSxnQkFBaUJBLE9BQU8sY0FBeEJBLDhDQUFBQSx3QkFBMEJFLHFCQUFxQixjQUQvQ0Ysa0JBQUFBLE9BRUFDLGVBQWVDLHFCQUFxQixjQUZwQ0YsbUJBQUFBLFNBR0FDLHlCQUFBQSxlQUFlRSxNQUFNLGNBQXJCRiw4Q0FBQUEsaUNBQUFBLHVCQUF1QkQsT0FBTyxjQUE5QkMscURBQUFBLCtCQUFnQ0MscUJBQXFCLGNBSHJERixtQkFBQUEsUUFJQTtJQUVGLE1BQU1JLE9BQU9SLDREQUFXQSxDQUFDRyxNQUFNQztJQUMvQixNQUFNSyxZQUFZVixnRUFBYUEsQ0FBQ0ssQ0FBQUEsb0JBQUFBLDhCQUFBQSxRQUFTTSxFQUFFLEtBQUlQLE1BQU07SUFDckRNLFVBQVVFLFdBQVcsQ0FBQ0gsTUFBTSxHQUFHRjtJQUMvQkcsVUFBVUcsUUFBUSxDQUFDLEdBQUcsR0FBRyxHQUFHO0lBQzVCLE1BQU1DLFFBQVFaLDREQUFXQSxDQUFDUSxXQUFXTDtJQUNyQyxPQUFPUztBQUNUO0FBRUEsb0NBQW9DO0FBQ3BDLCtEQUFlWCxlQUFlQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdGFydE9mV2Vla1llYXIuanM/NDI5NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuL19saWIvZGVmYXVsdE9wdGlvbnMuanNcIjtcbmltcG9ydCB7IGNvbnN0cnVjdEZyb20gfSBmcm9tIFwiLi9jb25zdHJ1Y3RGcm9tLmpzXCI7XG5pbXBvcnQgeyBnZXRXZWVrWWVhciB9IGZyb20gXCIuL2dldFdlZWtZZWFyLmpzXCI7XG5pbXBvcnQgeyBzdGFydE9mV2VlayB9IGZyb20gXCIuL3N0YXJ0T2ZXZWVrLmpzXCI7XG5cbi8qKlxuICogVGhlIHtAbGluayBzdGFydE9mV2Vla1llYXJ9IGZ1bmN0aW9uIG9wdGlvbnMuXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBzdGFydE9mV2Vla1llYXJcbiAqIEBjYXRlZ29yeSBXZWVrLU51bWJlcmluZyBZZWFyIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYSBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgc3RhcnQgb2YgYSBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyLlxuICogVGhlIGV4YWN0IGNhbGN1bGF0aW9uIGRlcGVuZHMgb24gdGhlIHZhbHVlcyBvZlxuICogYG9wdGlvbnMud2Vla1N0YXJ0c09uYCAod2hpY2ggaXMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWspXG4gKiBhbmQgYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCAod2hpY2ggaXMgdGhlIGRheSBvZiBKYW51YXJ5LCB3aGljaCBpcyBhbHdheXMgaW5cbiAqIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB3ZWVrLW51bWJlcmluZyB5ZWFyKVxuICpcbiAqIFdlZWsgbnVtYmVyaW5nOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9XZWVrI1RoZV9JU09fd2Vla19kYXRlX3N5c3RlbVxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICogQHR5cGVQYXJhbSBSZXN1bHREYXRlIC0gVGhlIHJlc3VsdCBgRGF0ZWAgdHlwZS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0gb3B0aW9ucyAtIEFuIG9iamVjdCB3aXRoIG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJucyBUaGUgc3RhcnQgb2YgYSB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhbiBhIHdlZWstbnVtYmVyaW5nIHllYXIgZm9yIDIgSnVseSAyMDA1IHdpdGggZGVmYXVsdCBzZXR0aW5nczpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZXZWVrWWVhcihuZXcgRGF0ZSgyMDA1LCA2LCAyKSlcbiAqIC8vPT4gU3VuIERlYyAyNiAyMDA0IDAwOjAwOjAwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhIHdlZWstbnVtYmVyaW5nIHllYXIgZm9yIDIgSnVseSAyMDA1XG4gKiAvLyBpZiBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB3ZWVrXG4gKiAvLyBhbmQgNCBKYW51YXJ5IGlzIGFsd2F5cyBpbiB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhcjpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZXZWVrWWVhcihuZXcgRGF0ZSgyMDA1LCA2LCAyKSwge1xuICogICB3ZWVrU3RhcnRzT246IDEsXG4gKiAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogNFxuICogfSlcbiAqIC8vPT4gTW9uIEphbiAwMyAyMDA1IDAwOjAwOjAwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdGFydE9mV2Vla1llYXIoZGF0ZSwgb3B0aW9ucykge1xuICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIGNvbnN0IGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9XG4gICAgb3B0aW9ucz8uZmlyc3RXZWVrQ29udGFpbnNEYXRlID8/XG4gICAgb3B0aW9ucz8ubG9jYWxlPy5vcHRpb25zPy5maXJzdFdlZWtDb250YWluc0RhdGUgPz9cbiAgICBkZWZhdWx0T3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUgPz9cbiAgICBkZWZhdWx0T3B0aW9ucy5sb2NhbGU/Lm9wdGlvbnM/LmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA/P1xuICAgIDE7XG5cbiAgY29uc3QgeWVhciA9IGdldFdlZWtZZWFyKGRhdGUsIG9wdGlvbnMpO1xuICBjb25zdCBmaXJzdFdlZWsgPSBjb25zdHJ1Y3RGcm9tKG9wdGlvbnM/LmluIHx8IGRhdGUsIDApO1xuICBmaXJzdFdlZWsuc2V0RnVsbFllYXIoeWVhciwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICBjb25zdCBfZGF0ZSA9IHN0YXJ0T2ZXZWVrKGZpcnN0V2Vlaywgb3B0aW9ucyk7XG4gIHJldHVybiBfZGF0ZTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBzdGFydE9mV2Vla1llYXI7XG4iXSwibmFtZXMiOlsiZ2V0RGVmYXVsdE9wdGlvbnMiLCJjb25zdHJ1Y3RGcm9tIiwiZ2V0V2Vla1llYXIiLCJzdGFydE9mV2VlayIsInN0YXJ0T2ZXZWVrWWVhciIsImRhdGUiLCJvcHRpb25zIiwiZGVmYXVsdE9wdGlvbnMiLCJmaXJzdFdlZWtDb250YWluc0RhdGUiLCJsb2NhbGUiLCJ5ZWFyIiwiZmlyc3RXZWVrIiwiaW4iLCJzZXRGdWxsWWVhciIsInNldEhvdXJzIiwiX2RhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/startOfWeekYear.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/startOfYear.js":
/*!**********************************************!*\
  !*** ./node_modules/date-fns/startOfYear.js ***!
  \**********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   startOfYear: function() { return /* binding */ startOfYear; }\n/* harmony export */ });\n/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.js */ \"(app-pages-browser)/./node_modules/date-fns/toDate.js\");\n\n/**\n * The {@link startOfYear} function options.\n */ /**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */ function startOfYear(date, options) {\n    const date_ = (0,_toDate_js__WEBPACK_IMPORTED_MODULE_0__.toDate)(date, options === null || options === void 0 ? void 0 : options.in);\n    date_.setFullYear(date_.getFullYear(), 0, 1);\n    date_.setHours(0, 0, 0, 0);\n    return date_;\n}\n// Fallback for modularized imports:\n/* harmony default export */ __webpack_exports__[\"default\"] = (startOfYear);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdGFydE9mWWVhci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxQztBQUVyQzs7Q0FFQyxHQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FxQkMsR0FDTSxTQUFTQyxZQUFZQyxJQUFJLEVBQUVDLE9BQU87SUFDdkMsTUFBTUMsUUFBUUosa0RBQU1BLENBQUNFLE1BQU1DLG9CQUFBQSw4QkFBQUEsUUFBU0UsRUFBRTtJQUN0Q0QsTUFBTUUsV0FBVyxDQUFDRixNQUFNRyxXQUFXLElBQUksR0FBRztJQUMxQ0gsTUFBTUksUUFBUSxDQUFDLEdBQUcsR0FBRyxHQUFHO0lBQ3hCLE9BQU9KO0FBQ1Q7QUFFQSxvQ0FBb0M7QUFDcEMsK0RBQWVILFdBQVdBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3N0YXJ0T2ZZZWFyLmpzP2NhNmQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdG9EYXRlIH0gZnJvbSBcIi4vdG9EYXRlLmpzXCI7XG5cbi8qKlxuICogVGhlIHtAbGluayBzdGFydE9mWWVhcn0gZnVuY3Rpb24gb3B0aW9ucy5cbiAqL1xuXG4vKipcbiAqIEBuYW1lIHN0YXJ0T2ZZZWFyXG4gKiBAY2F0ZWdvcnkgWWVhciBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgeWVhciBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgeWVhciBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICogQHR5cGVQYXJhbSBSZXN1bHREYXRlIC0gVGhlIHJlc3VsdCBgRGF0ZWAgdHlwZSwgaXQgaXMgdGhlIHR5cGUgcmV0dXJuZWQgZnJvbSB0aGUgY29udGV4dCBmdW5jdGlvbiBpZiBpdCBpcyBwYXNzZWQsIG9yIGluZmVycmVkIGZyb20gdGhlIGFyZ3VtZW50cy5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zXG4gKlxuICogQHJldHVybnMgVGhlIHN0YXJ0IG9mIGEgeWVhclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgc3RhcnQgb2YgYSB5ZWFyIGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZlllYXIobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwMCkpXG4gKiAvLz0+IFdlZCBKYW4gMDEgMjAxNCAwMDowMDowMFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRPZlllYXIoZGF0ZSwgb3B0aW9ucykge1xuICBjb25zdCBkYXRlXyA9IHRvRGF0ZShkYXRlLCBvcHRpb25zPy5pbik7XG4gIGRhdGVfLnNldEZ1bGxZZWFyKGRhdGVfLmdldEZ1bGxZZWFyKCksIDAsIDEpO1xuICBkYXRlXy5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGVfO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IHN0YXJ0T2ZZZWFyO1xuIl0sIm5hbWVzIjpbInRvRGF0ZSIsInN0YXJ0T2ZZZWFyIiwiZGF0ZSIsIm9wdGlvbnMiLCJkYXRlXyIsImluIiwic2V0RnVsbFllYXIiLCJnZXRGdWxsWWVhciIsInNldEhvdXJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/startOfYear.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/date-fns/toDate.js":
/*!*****************************************!*\
  !*** ./node_modules/date-fns/toDate.js ***!
  \*****************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toDate: function() { return /* binding */ toDate; }\n/* harmony export */ });\n/* harmony import */ var _constructFrom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constructFrom.js */ \"(app-pages-browser)/./node_modules/date-fns/constructFrom.js\");\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */ function toDate(argument, context) {\n    // [TODO] Get rid of `toDate` or `constructFrom`?\n    return (0,_constructFrom_js__WEBPACK_IMPORTED_MODULE_0__.constructFrom)(context || argument, argument);\n}\n// Fallback for modularized imports:\n/* harmony default export */ __webpack_exports__[\"default\"] = (toDate);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy90b0RhdGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBbUQ7QUFFbkQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FxQ0MsR0FDTSxTQUFTQyxPQUFPQyxRQUFRLEVBQUVDLE9BQU87SUFDdEMsaURBQWlEO0lBQ2pELE9BQU9ILGdFQUFhQSxDQUFDRyxXQUFXRCxVQUFVQTtBQUM1QztBQUVBLG9DQUFvQztBQUNwQywrREFBZUQsTUFBTUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvdG9EYXRlLmpzPzQwY2UiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29uc3RydWN0RnJvbSB9IGZyb20gXCIuL2NvbnN0cnVjdEZyb20uanNcIjtcblxuLyoqXG4gKiBAbmFtZSB0b0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGFuIGluc3RhbmNlIG9mIERhdGUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIGl0cyBjbG9uZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYSBudW1iZXIsIGl0IGlzIHRyZWF0ZWQgYXMgYSB0aW1lc3RhbXAuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIG5vbmUgb2YgdGhlIGFib3ZlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBJbnZhbGlkIERhdGUuXG4gKlxuICogU3RhcnRpbmcgZnJvbSB2My43LjAsIGl0IGNsb25lcyBhIGRhdGUgdXNpbmcgYFtTeW1ib2wuZm9yKFwiY29uc3RydWN0RGF0ZUZyb21cIildYFxuICogZW5hYmxpbmcgdG8gdHJhbnNmZXIgZXh0cmEgcHJvcGVydGllcyBmcm9tIHRoZSByZWZlcmVuY2UgZGF0ZSB0byB0aGUgbmV3IGRhdGUuXG4gKiBJdCdzIHVzZWZ1bCBmb3IgZXh0ZW5zaW9ucyBsaWtlIFtgVFpEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3R6KVxuICogdGhhdCBhY2NlcHQgYSB0aW1lIHpvbmUgYXMgYSBjb25zdHJ1Y3RvciBhcmd1bWVudC5cbiAqXG4gKiAqKk5vdGUqKjogKmFsbCogRGF0ZSBhcmd1bWVudHMgcGFzc2VkIHRvIGFueSAqZGF0ZS1mbnMqIGZ1bmN0aW9uIGlzIHByb2Nlc3NlZCBieSBgdG9EYXRlYC5cbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqIEB0eXBlUGFyYW0gUmVzdWx0RGF0ZSAtIFRoZSByZXN1bHQgYERhdGVgIHR5cGUsIGl0IGlzIHRoZSB0eXBlIHJldHVybmVkIGZyb20gdGhlIGNvbnRleHQgZnVuY3Rpb24gaWYgaXQgaXMgcGFzc2VkLCBvciBpbmZlcnJlZCBmcm9tIHRoZSBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIGFyZ3VtZW50IC0gVGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqXG4gKiBAcmV0dXJucyBUaGUgcGFyc2VkIGRhdGUgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDbG9uZSB0aGUgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZShuZXcgRGF0ZSgyMDE0LCAxLCAxMSwgMTEsIDMwLCAzMCkpXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb252ZXJ0IHRoZSB0aW1lc3RhbXAgdG8gZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZSgxMzkyMDk4NDMwMDAwKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvRGF0ZShhcmd1bWVudCwgY29udGV4dCkge1xuICAvLyBbVE9ET10gR2V0IHJpZCBvZiBgdG9EYXRlYCBvciBgY29uc3RydWN0RnJvbWA/XG4gIHJldHVybiBjb25zdHJ1Y3RGcm9tKGNvbnRleHQgfHwgYXJndW1lbnQsIGFyZ3VtZW50KTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCB0b0RhdGU7XG4iXSwibmFtZXMiOlsiY29uc3RydWN0RnJvbSIsInRvRGF0ZSIsImFyZ3VtZW50IiwiY29udGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/date-fns/toDate.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/pako/dist/pako.esm.mjs":
/*!*********************************************!*\
  !*** ./node_modules/pako/dist/pako.esm.mjs ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Deflate: function() { return /* binding */ Deflate_1; },\n/* harmony export */   Inflate: function() { return /* binding */ Inflate_1; },\n/* harmony export */   constants: function() { return /* binding */ constants_1; },\n/* harmony export */   \"default\": function() { return /* binding */ pako; },\n/* harmony export */   deflate: function() { return /* binding */ deflate_1; },\n/* harmony export */   deflateRaw: function() { return /* binding */ deflateRaw_1; },\n/* harmony export */   gzip: function() { return /* binding */ gzip_1; },\n/* harmony export */   inflate: function() { return /* binding */ inflate_1; },\n/* harmony export */   inflateRaw: function() { return /* binding */ inflateRaw_1; },\n/* harmony export */   ungzip: function() { return /* binding */ ungzip_1; }\n/* harmony export */ });\n/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */ // (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n/* eslint-disable space-unary-ops */ /* Public constants ==========================================================*/ /* ===========================================================================*/ //const Z_FILTERED          = 1;\n//const Z_HUFFMAN_ONLY      = 2;\n//const Z_RLE               = 3;\nconst Z_FIXED$1 = 4;\n//const Z_DEFAULT_STRATEGY  = 0;\n/* Possible values of the data_type field (though see inflate()) */ const Z_BINARY = 0;\nconst Z_TEXT = 1;\n//const Z_ASCII             = 1; // = Z_TEXT\nconst Z_UNKNOWN$1 = 2;\n/*============================================================================*/ function zero$1(buf) {\n    let len = buf.length;\n    while(--len >= 0){\n        buf[len] = 0;\n    }\n}\n// From zutil.h\nconst STORED_BLOCK = 0;\nconst STATIC_TREES = 1;\nconst DYN_TREES = 2;\n/* The three kinds of block type */ const MIN_MATCH$1 = 3;\nconst MAX_MATCH$1 = 258;\n/* The minimum and maximum match lengths */ // From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */ const LENGTH_CODES$1 = 29;\n/* number of length codes, not counting the special END_BLOCK code */ const LITERALS$1 = 256;\n/* number of literal bytes 0..255 */ const L_CODES$1 = LITERALS$1 + 1 + LENGTH_CODES$1;\n/* number of Literal or Length codes, including the END_BLOCK code */ const D_CODES$1 = 30;\n/* number of distance codes */ const BL_CODES$1 = 19;\n/* number of codes used to transfer the bit lengths */ const HEAP_SIZE$1 = 2 * L_CODES$1 + 1;\n/* maximum heap size */ const MAX_BITS$1 = 15;\n/* All codes must not exceed MAX_BITS bits */ const Buf_size = 16;\n/* size of bit buffer in bi_buf */ /* ===========================================================================\n * Constants\n */ const MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */ const END_BLOCK = 256;\n/* end of block literal code */ const REP_3_6 = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */ const REPZ_3_10 = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */ const REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */ /* eslint-disable comma-spacing,array-bracket-spacing */ const extra_lbits = /* extra bits for each length code */ new Uint8Array([\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    1,\n    1,\n    2,\n    2,\n    2,\n    2,\n    3,\n    3,\n    3,\n    3,\n    4,\n    4,\n    4,\n    4,\n    5,\n    5,\n    5,\n    5,\n    0\n]);\nconst extra_dbits = /* extra bits for each distance code */ new Uint8Array([\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    2,\n    2,\n    3,\n    3,\n    4,\n    4,\n    5,\n    5,\n    6,\n    6,\n    7,\n    7,\n    8,\n    8,\n    9,\n    9,\n    10,\n    10,\n    11,\n    11,\n    12,\n    12,\n    13,\n    13\n]);\nconst extra_blbits = /* extra bits for each bit length code */ new Uint8Array([\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    2,\n    3,\n    7\n]);\nconst bl_order = new Uint8Array([\n    16,\n    17,\n    18,\n    0,\n    8,\n    7,\n    9,\n    6,\n    10,\n    5,\n    11,\n    4,\n    12,\n    3,\n    13,\n    2,\n    14,\n    1,\n    15\n]);\n/* eslint-enable comma-spacing,array-bracket-spacing */ /* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */ /* ===========================================================================\n * Local data. These are initialized only once.\n */ // We pre-fill arrays with 0 to avoid uninitialized gaps\nconst DIST_CODE_LEN = 512; /* see definition of array dist_code below */ \n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nconst static_ltree = new Array((L_CODES$1 + 2) * 2);\nzero$1(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */ const static_dtree = new Array(D_CODES$1 * 2);\nzero$1(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */ const _dist_code = new Array(DIST_CODE_LEN);\nzero$1(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */ const _length_code = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);\nzero$1(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */ const base_length = new Array(LENGTH_CODES$1);\nzero$1(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */ const base_dist = new Array(D_CODES$1);\nzero$1(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */ function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n    this.static_tree = static_tree; /* static tree or NULL */ \n    this.extra_bits = extra_bits; /* extra bits for each code or NULL */ \n    this.extra_base = extra_base; /* base index for extra_bits */ \n    this.elems = elems; /* max number of elements in the tree */ \n    this.max_length = max_length; /* max bit length for the codes */ \n    // show if `static_tree` has data or dummy - needed for monomorphic objects\n    this.has_stree = static_tree && static_tree.length;\n}\n_c = StaticTreeDesc;\nlet static_l_desc;\nlet static_d_desc;\nlet static_bl_desc;\nfunction TreeDesc(dyn_tree, stat_desc) {\n    this.dyn_tree = dyn_tree; /* the dynamic tree */ \n    this.max_code = 0; /* largest code with non zero frequency */ \n    this.stat_desc = stat_desc; /* the corresponding static tree */ \n}\n_c1 = TreeDesc;\nconst d_code = (dist)=>{\n    return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n};\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */ const put_short = (s, w)=>{\n    //    put_byte(s, (uch)((w) & 0xff));\n    //    put_byte(s, (uch)((ush)(w) >> 8));\n    s.pending_buf[s.pending++] = w & 0xff;\n    s.pending_buf[s.pending++] = w >>> 8 & 0xff;\n};\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */ const send_bits = (s, value, length)=>{\n    if (s.bi_valid > Buf_size - length) {\n        s.bi_buf |= value << s.bi_valid & 0xffff;\n        put_short(s, s.bi_buf);\n        s.bi_buf = value >> Buf_size - s.bi_valid;\n        s.bi_valid += length - Buf_size;\n    } else {\n        s.bi_buf |= value << s.bi_valid & 0xffff;\n        s.bi_valid += length;\n    }\n};\nconst send_code = (s, c, tree)=>{\n    send_bits(s, tree[c * 2], tree[c * 2 + 1]);\n};\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */ const bi_reverse = (code, len)=>{\n    let res = 0;\n    do {\n        res |= code & 1;\n        code >>>= 1;\n        res <<= 1;\n    }while (--len > 0);\n    return res >>> 1;\n};\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */ const bi_flush = (s)=>{\n    if (s.bi_valid === 16) {\n        put_short(s, s.bi_buf);\n        s.bi_buf = 0;\n        s.bi_valid = 0;\n    } else if (s.bi_valid >= 8) {\n        s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n        s.bi_buf >>= 8;\n        s.bi_valid -= 8;\n    }\n};\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */ const gen_bitlen = (s, desc)=>{\n    //    deflate_state *s;\n    //    tree_desc *desc;    /* the tree descriptor */\n    const tree = desc.dyn_tree;\n    const max_code = desc.max_code;\n    const stree = desc.stat_desc.static_tree;\n    const has_stree = desc.stat_desc.has_stree;\n    const extra = desc.stat_desc.extra_bits;\n    const base = desc.stat_desc.extra_base;\n    const max_length = desc.stat_desc.max_length;\n    let h; /* heap index */ \n    let n, m; /* iterate over the tree elements */ \n    let bits; /* bit length */ \n    let xbits; /* extra bits */ \n    let f; /* frequency */ \n    let overflow = 0; /* number of elements with bit length too large */ \n    for(bits = 0; bits <= MAX_BITS$1; bits++){\n        s.bl_count[bits] = 0;\n    }\n    /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */ tree[s.heap[s.heap_max] * 2 + 1] = 0; /* root of the heap */ \n    for(h = s.heap_max + 1; h < HEAP_SIZE$1; h++){\n        n = s.heap[h];\n        bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;\n        if (bits > max_length) {\n            bits = max_length;\n            overflow++;\n        }\n        tree[n * 2 + 1] = bits;\n        /* We overwrite tree[n].Dad which is no longer needed */ if (n > max_code) {\n            continue;\n        } /* not a leaf node */ \n        s.bl_count[bits]++;\n        xbits = 0;\n        if (n >= base) {\n            xbits = extra[n - base];\n        }\n        f = tree[n * 2] /*.Freq*/ ;\n        s.opt_len += f * (bits + xbits);\n        if (has_stree) {\n            s.static_len += f * (stree[n * 2 + 1] + xbits);\n        }\n    }\n    if (overflow === 0) {\n        return;\n    }\n    // Tracev((stderr,\"\\nbit length overflow\\n\"));\n    /* This happens for example on obj2 and pic of the Calgary corpus */ /* Find the first bit length which could increase: */ do {\n        bits = max_length - 1;\n        while(s.bl_count[bits] === 0){\n            bits--;\n        }\n        s.bl_count[bits]--; /* move one leaf down the tree */ \n        s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */ \n        s.bl_count[max_length]--;\n        /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */ overflow -= 2;\n    }while (overflow > 0);\n    /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */ for(bits = max_length; bits !== 0; bits--){\n        n = s.bl_count[bits];\n        while(n !== 0){\n            m = s.heap[--h];\n            if (m > max_code) {\n                continue;\n            }\n            if (tree[m * 2 + 1] !== bits) {\n                // Tracev((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n                s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2] /*.Freq*/ ;\n                tree[m * 2 + 1] = bits;\n            }\n            n--;\n        }\n    }\n};\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */ const gen_codes = (tree, max_code, bl_count)=>{\n    //    ct_data *tree;             /* the tree to decorate */\n    //    int max_code;              /* largest code with non zero frequency */\n    //    ushf *bl_count;            /* number of codes at each bit length */\n    const next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */ \n    let code = 0; /* running code value */ \n    let bits; /* bit index */ \n    let n; /* code index */ \n    /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */ for(bits = 1; bits <= MAX_BITS$1; bits++){\n        code = code + bl_count[bits - 1] << 1;\n        next_code[bits] = code;\n    }\n    /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */ //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n    //        \"inconsistent bit counts\");\n    //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n    for(n = 0; n <= max_code; n++){\n        let len = tree[n * 2 + 1] /*.Len*/ ;\n        if (len === 0) {\n            continue;\n        }\n        /* Now reverse the bits */ tree[n * 2] = bi_reverse(next_code[len]++, len);\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n    }\n};\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */ const tr_static_init = ()=>{\n    let n; /* iterates over tree elements */ \n    let bits; /* bit counter */ \n    let length; /* length value */ \n    let code; /* code value */ \n    let dist; /* distance index */ \n    const bl_count = new Array(MAX_BITS$1 + 1);\n    /* number of codes at each bit length for an optimal tree */ // do check in _tr_init()\n    //if (static_init_done) return;\n    /* For some embedded targets, global variables are not initialized: */ /*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/ /* Initialize the mapping length (0..255) -> length code (0..28) */ length = 0;\n    for(code = 0; code < LENGTH_CODES$1 - 1; code++){\n        base_length[code] = length;\n        for(n = 0; n < 1 << extra_lbits[code]; n++){\n            _length_code[length++] = code;\n        }\n    }\n    //Assert (length == 256, \"tr_static_init: length != 256\");\n    /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */ _length_code[length - 1] = code;\n    /* Initialize the mapping dist (0..32K) -> dist code (0..29) */ dist = 0;\n    for(code = 0; code < 16; code++){\n        base_dist[code] = dist;\n        for(n = 0; n < 1 << extra_dbits[code]; n++){\n            _dist_code[dist++] = code;\n        }\n    }\n    //Assert (dist == 256, \"tr_static_init: dist != 256\");\n    dist >>= 7; /* from now on, all distances are divided by 128 */ \n    for(; code < D_CODES$1; code++){\n        base_dist[code] = dist << 7;\n        for(n = 0; n < 1 << extra_dbits[code] - 7; n++){\n            _dist_code[256 + dist++] = code;\n        }\n    }\n    //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n    /* Construct the codes of the static literal tree */ for(bits = 0; bits <= MAX_BITS$1; bits++){\n        bl_count[bits] = 0;\n    }\n    n = 0;\n    while(n <= 143){\n        static_ltree[n * 2 + 1] = 8;\n        n++;\n        bl_count[8]++;\n    }\n    while(n <= 255){\n        static_ltree[n * 2 + 1] = 9;\n        n++;\n        bl_count[9]++;\n    }\n    while(n <= 279){\n        static_ltree[n * 2 + 1] = 7;\n        n++;\n        bl_count[7]++;\n    }\n    while(n <= 287){\n        static_ltree[n * 2 + 1] = 8;\n        n++;\n        bl_count[8]++;\n    }\n    /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */ gen_codes(static_ltree, L_CODES$1 + 1, bl_count);\n    /* The static distance tree is trivial: */ for(n = 0; n < D_CODES$1; n++){\n        static_dtree[n * 2 + 1] = 5;\n        static_dtree[n * 2] = bi_reverse(n, 5);\n    }\n    // Now data ready and we can init static trees\n    static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);\n    static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES$1, MAX_BITS$1);\n    static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES$1, MAX_BL_BITS);\n//static_init_done = true;\n};\n/* ===========================================================================\n * Initialize a new block.\n */ const init_block = (s)=>{\n    let n; /* iterates over tree elements */ \n    /* Initialize the trees. */ for(n = 0; n < L_CODES$1; n++){\n        s.dyn_ltree[n * 2] = 0;\n    }\n    for(n = 0; n < D_CODES$1; n++){\n        s.dyn_dtree[n * 2] = 0;\n    }\n    for(n = 0; n < BL_CODES$1; n++){\n        s.bl_tree[n * 2] = 0;\n    }\n    s.dyn_ltree[END_BLOCK * 2] = 1;\n    s.opt_len = s.static_len = 0;\n    s.sym_next = s.matches = 0;\n};\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */ const bi_windup = (s)=>{\n    if (s.bi_valid > 8) {\n        put_short(s, s.bi_buf);\n    } else if (s.bi_valid > 0) {\n        //put_byte(s, (Byte)s->bi_buf);\n        s.pending_buf[s.pending++] = s.bi_buf;\n    }\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n};\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */ const smaller = (tree, n, m, depth)=>{\n    const _n2 = n * 2;\n    const _m2 = m * 2;\n    return tree[_n2] < tree[_m2] || tree[_n2] === tree[_m2] && depth[n] <= depth[m];\n};\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */ const pqdownheap = (s, tree, k)=>{\n    //    deflate_state *s;\n    //    ct_data *tree;  /* the tree to restore */\n    //    int k;               /* node to move down */\n    const v = s.heap[k];\n    let j = k << 1; /* left son of k */ \n    while(j <= s.heap_len){\n        /* Set j to the smallest of the two sons: */ if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n            j++;\n        }\n        /* Exit if v is smaller than both sons */ if (smaller(tree, v, s.heap[j], s.depth)) {\n            break;\n        }\n        /* Exchange v with the smallest son */ s.heap[k] = s.heap[j];\n        k = j;\n        /* And continue down the tree, setting j to the left son of k */ j <<= 1;\n    }\n    s.heap[k] = v;\n};\n// inlined manually\n// const SMALLEST = 1;\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */ const compress_block = (s, ltree, dtree)=>{\n    //    deflate_state *s;\n    //    const ct_data *ltree; /* literal tree */\n    //    const ct_data *dtree; /* distance tree */\n    let dist; /* distance of matched string */ \n    let lc; /* match length or unmatched char (if dist == 0) */ \n    let sx = 0; /* running index in sym_buf */ \n    let code; /* the code to send */ \n    let extra; /* number of extra bits to send */ \n    if (s.sym_next !== 0) {\n        do {\n            dist = s.pending_buf[s.sym_buf + sx++] & 0xff;\n            dist += (s.pending_buf[s.sym_buf + sx++] & 0xff) << 8;\n            lc = s.pending_buf[s.sym_buf + sx++];\n            if (dist === 0) {\n                send_code(s, lc, ltree); /* send a literal byte */ \n            //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n            } else {\n                /* Here, lc is the match length - MIN_MATCH */ code = _length_code[lc];\n                send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */ \n                extra = extra_lbits[code];\n                if (extra !== 0) {\n                    lc -= base_length[code];\n                    send_bits(s, lc, extra); /* send the extra length bits */ \n                }\n                dist--; /* dist is now the match distance - 1 */ \n                code = d_code(dist);\n                //Assert (code < D_CODES, \"bad d_code\");\n                send_code(s, code, dtree); /* send the distance code */ \n                extra = extra_dbits[code];\n                if (extra !== 0) {\n                    dist -= base_dist[code];\n                    send_bits(s, dist, extra); /* send the extra distance bits */ \n                }\n            } /* literal or match pair ? */ \n        /* Check that the overlay between pending_buf and sym_buf is ok: */ //Assert(s->pending < s->lit_bufsize + sx, \"pendingBuf overflow\");\n        }while (sx < s.sym_next);\n    }\n    send_code(s, END_BLOCK, ltree);\n};\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */ const build_tree = (s, desc)=>{\n    //    deflate_state *s;\n    //    tree_desc *desc; /* the tree descriptor */\n    const tree = desc.dyn_tree;\n    const stree = desc.stat_desc.static_tree;\n    const has_stree = desc.stat_desc.has_stree;\n    const elems = desc.stat_desc.elems;\n    let n, m; /* iterate over heap elements */ \n    let max_code = -1; /* largest code with non zero frequency */ \n    let node; /* new node being created */ \n    /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */ s.heap_len = 0;\n    s.heap_max = HEAP_SIZE$1;\n    for(n = 0; n < elems; n++){\n        if (tree[n * 2] !== 0) {\n            s.heap[++s.heap_len] = max_code = n;\n            s.depth[n] = 0;\n        } else {\n            tree[n * 2 + 1] = 0;\n        }\n    }\n    /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */ while(s.heap_len < 2){\n        node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;\n        tree[node * 2] = 1;\n        s.depth[node] = 0;\n        s.opt_len--;\n        if (has_stree) {\n            s.static_len -= stree[node * 2 + 1] /*.Len*/ ;\n        }\n    /* node is 0 or 1 so it does not have extra bits */ }\n    desc.max_code = max_code;\n    /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */ for(n = s.heap_len >> 1 /*int /2*/ ; n >= 1; n--){\n        pqdownheap(s, tree, n);\n    }\n    /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */ node = elems; /* next internal node of the tree */ \n    do {\n        //pqremove(s, tree, n);  /* n = node of least frequency */\n        /*** pqremove ***/ n = s.heap[1 /*SMALLEST*/ ];\n        s.heap[1 /*SMALLEST*/ ] = s.heap[s.heap_len--];\n        pqdownheap(s, tree, 1 /*SMALLEST*/ );\n        /***/ m = s.heap[1 /*SMALLEST*/ ]; /* m = node of next least frequency */ \n        s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */ \n        s.heap[--s.heap_max] = m;\n        /* Create a new node father of n and m */ tree[node * 2] = tree[n * 2] + tree[m * 2] /*.Freq*/ ;\n        s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n        tree[n * 2 + 1] = tree[m * 2 + 1] = node;\n        /* and insert the new node in the heap */ s.heap[1 /*SMALLEST*/ ] = node++;\n        pqdownheap(s, tree, 1 /*SMALLEST*/ );\n    }while (s.heap_len >= 2);\n    s.heap[--s.heap_max] = s.heap[1 /*SMALLEST*/ ];\n    /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */ gen_bitlen(s, desc);\n    /* The field len is now set, we can generate the bit codes */ gen_codes(tree, max_code, s.bl_count);\n};\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */ const scan_tree = (s, tree, max_code)=>{\n    //    deflate_state *s;\n    //    ct_data *tree;   /* the tree to be scanned */\n    //    int max_code;    /* and its largest code of non zero frequency */\n    let n; /* iterates over all tree elements */ \n    let prevlen = -1; /* last emitted length */ \n    let curlen; /* length of current code */ \n    let nextlen = tree[0 * 2 + 1] /*.Len*/ ; /* length of next code */ \n    let count = 0; /* repeat count of the current code */ \n    let max_count = 7; /* max repeat count */ \n    let min_count = 4; /* min repeat count */ \n    if (nextlen === 0) {\n        max_count = 138;\n        min_count = 3;\n    }\n    tree[(max_code + 1) * 2 + 1] = 0xffff; /* guard */ \n    for(n = 0; n <= max_code; n++){\n        curlen = nextlen;\n        nextlen = tree[(n + 1) * 2 + 1] /*.Len*/ ;\n        if (++count < max_count && curlen === nextlen) {\n            continue;\n        } else if (count < min_count) {\n            s.bl_tree[curlen * 2] += count;\n        } else if (curlen !== 0) {\n            if (curlen !== prevlen) {\n                s.bl_tree[curlen * 2]++;\n            }\n            s.bl_tree[REP_3_6 * 2]++;\n        } else if (count <= 10) {\n            s.bl_tree[REPZ_3_10 * 2]++;\n        } else {\n            s.bl_tree[REPZ_11_138 * 2]++;\n        }\n        count = 0;\n        prevlen = curlen;\n        if (nextlen === 0) {\n            max_count = 138;\n            min_count = 3;\n        } else if (curlen === nextlen) {\n            max_count = 6;\n            min_count = 3;\n        } else {\n            max_count = 7;\n            min_count = 4;\n        }\n    }\n};\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */ const send_tree = (s, tree, max_code)=>{\n    //    deflate_state *s;\n    //    ct_data *tree; /* the tree to be scanned */\n    //    int max_code;       /* and its largest code of non zero frequency */\n    let n; /* iterates over all tree elements */ \n    let prevlen = -1; /* last emitted length */ \n    let curlen; /* length of current code */ \n    let nextlen = tree[0 * 2 + 1] /*.Len*/ ; /* length of next code */ \n    let count = 0; /* repeat count of the current code */ \n    let max_count = 7; /* max repeat count */ \n    let min_count = 4; /* min repeat count */ \n    /* tree[max_code+1].Len = -1; */ /* guard already set */ if (nextlen === 0) {\n        max_count = 138;\n        min_count = 3;\n    }\n    for(n = 0; n <= max_code; n++){\n        curlen = nextlen;\n        nextlen = tree[(n + 1) * 2 + 1] /*.Len*/ ;\n        if (++count < max_count && curlen === nextlen) {\n            continue;\n        } else if (count < min_count) {\n            do {\n                send_code(s, curlen, s.bl_tree);\n            }while (--count !== 0);\n        } else if (curlen !== 0) {\n            if (curlen !== prevlen) {\n                send_code(s, curlen, s.bl_tree);\n                count--;\n            }\n            //Assert(count >= 3 && count <= 6, \" 3_6?\");\n            send_code(s, REP_3_6, s.bl_tree);\n            send_bits(s, count - 3, 2);\n        } else if (count <= 10) {\n            send_code(s, REPZ_3_10, s.bl_tree);\n            send_bits(s, count - 3, 3);\n        } else {\n            send_code(s, REPZ_11_138, s.bl_tree);\n            send_bits(s, count - 11, 7);\n        }\n        count = 0;\n        prevlen = curlen;\n        if (nextlen === 0) {\n            max_count = 138;\n            min_count = 3;\n        } else if (curlen === nextlen) {\n            max_count = 6;\n            min_count = 3;\n        } else {\n            max_count = 7;\n            min_count = 4;\n        }\n    }\n};\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */ const build_bl_tree = (s)=>{\n    let max_blindex; /* index of last bit length code of non zero freq */ \n    /* Determine the bit length frequencies for literal and distance trees */ scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n    scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n    /* Build the bit length tree: */ build_tree(s, s.bl_desc);\n    /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */ /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */ for(max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--){\n        if (s.bl_tree[bl_order[max_blindex] * 2 + 1] !== 0) {\n            break;\n        }\n    }\n    /* Update opt_len to include the bit length tree and counts */ s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n    //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n    //        s->opt_len, s->static_len));\n    return max_blindex;\n};\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */ const send_all_trees = (s, lcodes, dcodes, blcodes)=>{\n    //    deflate_state *s;\n    //    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n    let rank; /* index in bl_order */ \n    //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n    //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n    //        \"too many codes\");\n    //Tracev((stderr, \"\\nbl counts: \"));\n    send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */ \n    send_bits(s, dcodes - 1, 5);\n    send_bits(s, blcodes - 4, 4); /* not -3 as stated in appnote.txt */ \n    for(rank = 0; rank < blcodes; rank++){\n        //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n        send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1], 3);\n    }\n    //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n    send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */ \n    //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n    send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */ \n//Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n};\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"block list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"allow list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */ const detect_data_type = (s)=>{\n    /* block_mask is the bit mask of block-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */ let block_mask = 0xf3ffc07f;\n    let n;\n    /* Check for non-textual (\"block-listed\") bytes. */ for(n = 0; n <= 31; n++, block_mask >>>= 1){\n        if (block_mask & 1 && s.dyn_ltree[n * 2] !== 0) {\n            return Z_BINARY;\n        }\n    }\n    /* Check for textual (\"allow-listed\") bytes. */ if (s.dyn_ltree[9 * 2] !== 0 || s.dyn_ltree[10 * 2] !== 0 || s.dyn_ltree[13 * 2] !== 0) {\n        return Z_TEXT;\n    }\n    for(n = 32; n < LITERALS$1; n++){\n        if (s.dyn_ltree[n * 2] !== 0) {\n            return Z_TEXT;\n        }\n    }\n    /* There are no \"block-listed\" or \"allow-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */ return Z_BINARY;\n};\nlet static_init_done = false;\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */ const _tr_init$1 = (s)=>{\n    if (!static_init_done) {\n        tr_static_init();\n        static_init_done = true;\n    }\n    s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);\n    s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);\n    s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n    /* Initialize the first block of the first file: */ init_block(s);\n};\n/* ===========================================================================\n * Send a stored block\n */ const _tr_stored_block$1 = (s, buf, stored_len, last)=>{\n    //DeflateState *s;\n    //charf *buf;       /* input block */\n    //ulg stored_len;   /* length of input block */\n    //int last;         /* one if this is the last block for a file */\n    send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3); /* send block type */ \n    bi_windup(s); /* align on byte boundary */ \n    put_short(s, stored_len);\n    put_short(s, ~stored_len);\n    if (stored_len) {\n        s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);\n    }\n    s.pending += stored_len;\n};\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */ const _tr_align$1 = (s)=>{\n    send_bits(s, STATIC_TREES << 1, 3);\n    send_code(s, END_BLOCK, static_ltree);\n    bi_flush(s);\n};\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and write out the encoded block.\n */ const _tr_flush_block$1 = (s, buf, stored_len, last)=>{\n    //DeflateState *s;\n    //charf *buf;       /* input block, or NULL if too old */\n    //ulg stored_len;   /* length of input block */\n    //int last;         /* one if this is the last block for a file */\n    let opt_lenb, static_lenb; /* opt_len and static_len in bytes */ \n    let max_blindex = 0; /* index of last bit length code of non zero freq */ \n    /* Build the Huffman trees unless a stored block is forced */ if (s.level > 0) {\n        /* Check if the file is binary or text */ if (s.strm.data_type === Z_UNKNOWN$1) {\n            s.strm.data_type = detect_data_type(s);\n        }\n        /* Construct the literal and distance trees */ build_tree(s, s.l_desc);\n        // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n        //        s->static_len));\n        build_tree(s, s.d_desc);\n        // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n        //        s->static_len));\n        /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */ /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */ max_blindex = build_bl_tree(s);\n        /* Determine the best encoding. Compute the block lengths in bytes. */ opt_lenb = s.opt_len + 3 + 7 >>> 3;\n        static_lenb = s.static_len + 3 + 7 >>> 3;\n        // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n        //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n        //        s->sym_next / 3));\n        if (static_lenb <= opt_lenb) {\n            opt_lenb = static_lenb;\n        }\n    } else {\n        // Assert(buf != (char*)0, \"lost buf\");\n        opt_lenb = static_lenb = stored_len + 5; /* force a stored block */ \n    }\n    if (stored_len + 4 <= opt_lenb && buf !== -1) {\n        /* 4: two words for the lengths */ /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */ _tr_stored_block$1(s, buf, stored_len, last);\n    } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {\n        send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n        compress_block(s, static_ltree, static_dtree);\n    } else {\n        send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n        send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n        compress_block(s, s.dyn_ltree, s.dyn_dtree);\n    }\n    // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n    /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */ init_block(s);\n    if (last) {\n        bi_windup(s);\n    }\n// Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n//       s->compressed_len-7*last));\n};\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */ const _tr_tally$1 = (s, dist, lc)=>{\n    //    deflate_state *s;\n    //    unsigned dist;  /* distance of matched string */\n    //    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n    s.pending_buf[s.sym_buf + s.sym_next++] = dist;\n    s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;\n    s.pending_buf[s.sym_buf + s.sym_next++] = lc;\n    if (dist === 0) {\n        /* lc is the unmatched char */ s.dyn_ltree[lc * 2]++;\n    } else {\n        s.matches++;\n        /* Here, lc is the match length - MIN_MATCH */ dist--; /* dist = match distance - 1 */ \n        //Assert((ush)dist < (ush)MAX_DIST(s) &&\n        //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n        //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n        s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]++;\n        s.dyn_dtree[d_code(dist) * 2]++;\n    }\n    return s.sym_next === s.sym_end;\n};\nvar _tr_init_1 = _tr_init$1;\nvar _tr_stored_block_1 = _tr_stored_block$1;\nvar _tr_flush_block_1 = _tr_flush_block$1;\nvar _tr_tally_1 = _tr_tally$1;\nvar _tr_align_1 = _tr_align$1;\nvar trees = {\n    _tr_init: _tr_init_1,\n    _tr_stored_block: _tr_stored_block_1,\n    _tr_flush_block: _tr_flush_block_1,\n    _tr_tally: _tr_tally_1,\n    _tr_align: _tr_align_1\n};\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nconst adler32 = (adler, buf, len, pos)=>{\n    let s1 = adler & 0xffff | 0, s2 = adler >>> 16 & 0xffff | 0, n = 0;\n    while(len !== 0){\n        // Set limit ~ twice less than 5552, to keep\n        // s2 in 31-bits, because we force signed ints.\n        // in other case %= will fail.\n        n = len > 2000 ? 2000 : len;\n        len -= n;\n        do {\n            s1 = s1 + buf[pos++] | 0;\n            s2 = s2 + s1 | 0;\n        }while (--n);\n        s1 %= 65521;\n        s2 %= 65521;\n    }\n    return s1 | s2 << 16 | 0;\n};\nvar adler32_1 = adler32;\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n// Use ordinary array, since untyped makes no boost here\nconst makeTable = ()=>{\n    let c, table = [];\n    for(var n = 0; n < 256; n++){\n        c = n;\n        for(var k = 0; k < 8; k++){\n            c = c & 1 ? 0xEDB88320 ^ c >>> 1 : c >>> 1;\n        }\n        table[n] = c;\n    }\n    return table;\n};\n// Create table on load. Just 255 signed longs. Not a problem.\nconst crcTable = new Uint32Array(makeTable());\nconst crc32 = (crc, buf, len, pos)=>{\n    const t = crcTable;\n    const end = pos + len;\n    crc ^= -1;\n    for(let i = pos; i < end; i++){\n        crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 0xFF];\n    }\n    return crc ^ -1; // >>> 0;\n};\nvar crc32_1 = crc32;\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nvar messages = {\n    2: \"need dictionary\",\n    /* Z_NEED_DICT       2  */ 1: \"stream end\",\n    /* Z_STREAM_END      1  */ 0: \"\",\n    /* Z_OK              0  */ \"-1\": \"file error\",\n    /* Z_ERRNO         (-1) */ \"-2\": \"stream error\",\n    /* Z_STREAM_ERROR  (-2) */ \"-3\": \"data error\",\n    /* Z_DATA_ERROR    (-3) */ \"-4\": \"insufficient memory\",\n    /* Z_MEM_ERROR     (-4) */ \"-5\": \"buffer error\",\n    /* Z_BUF_ERROR     (-5) */ \"-6\": \"incompatible version\" /* Z_VERSION_ERROR (-6) */ \n};\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nvar constants$2 = {\n    /* Allowed flush values; see deflate() and inflate() below for details */ Z_NO_FLUSH: 0,\n    Z_PARTIAL_FLUSH: 1,\n    Z_SYNC_FLUSH: 2,\n    Z_FULL_FLUSH: 3,\n    Z_FINISH: 4,\n    Z_BLOCK: 5,\n    Z_TREES: 6,\n    /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */ Z_OK: 0,\n    Z_STREAM_END: 1,\n    Z_NEED_DICT: 2,\n    Z_ERRNO: -1,\n    Z_STREAM_ERROR: -2,\n    Z_DATA_ERROR: -3,\n    Z_MEM_ERROR: -4,\n    Z_BUF_ERROR: -5,\n    //Z_VERSION_ERROR: -6,\n    /* compression levels */ Z_NO_COMPRESSION: 0,\n    Z_BEST_SPEED: 1,\n    Z_BEST_COMPRESSION: 9,\n    Z_DEFAULT_COMPRESSION: -1,\n    Z_FILTERED: 1,\n    Z_HUFFMAN_ONLY: 2,\n    Z_RLE: 3,\n    Z_FIXED: 4,\n    Z_DEFAULT_STRATEGY: 0,\n    /* Possible values of the data_type field (though see inflate()) */ Z_BINARY: 0,\n    Z_TEXT: 1,\n    //Z_ASCII:                1, // = Z_TEXT (deprecated)\n    Z_UNKNOWN: 2,\n    /* The deflate compression method */ Z_DEFLATED: 8\n};\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nconst { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = trees;\n/* Public constants ==========================================================*/ /* ===========================================================================*/ const { Z_NO_FLUSH: Z_NO_FLUSH$2, Z_PARTIAL_FLUSH, Z_FULL_FLUSH: Z_FULL_FLUSH$1, Z_FINISH: Z_FINISH$3, Z_BLOCK: Z_BLOCK$1, Z_OK: Z_OK$3, Z_STREAM_END: Z_STREAM_END$3, Z_STREAM_ERROR: Z_STREAM_ERROR$2, Z_DATA_ERROR: Z_DATA_ERROR$2, Z_BUF_ERROR: Z_BUF_ERROR$1, Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1, Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1, Z_UNKNOWN, Z_DEFLATED: Z_DEFLATED$2 } = constants$2;\n/*============================================================================*/ const MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */ const MAX_WBITS$1 = 15;\n/* 32K LZ77 window */ const DEF_MEM_LEVEL = 8;\nconst LENGTH_CODES = 29;\n/* number of length codes, not counting the special END_BLOCK code */ const LITERALS = 256;\n/* number of literal bytes 0..255 */ const L_CODES = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */ const D_CODES = 30;\n/* number of distance codes */ const BL_CODES = 19;\n/* number of codes used to transfer the bit lengths */ const HEAP_SIZE = 2 * L_CODES + 1;\n/* maximum heap size */ const MAX_BITS = 15;\n/* All codes must not exceed MAX_BITS bits */ const MIN_MATCH = 3;\nconst MAX_MATCH = 258;\nconst MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;\nconst PRESET_DICT = 0x20;\nconst INIT_STATE = 42; /* zlib header -> BUSY_STATE */ \n//#ifdef GZIP\nconst GZIP_STATE = 57; /* gzip header -> BUSY_STATE | EXTRA_STATE */ \n//#endif\nconst EXTRA_STATE = 69; /* gzip extra block -> NAME_STATE */ \nconst NAME_STATE = 73; /* gzip file name -> COMMENT_STATE */ \nconst COMMENT_STATE = 91; /* gzip comment -> HCRC_STATE */ \nconst HCRC_STATE = 103; /* gzip header CRC -> BUSY_STATE */ \nconst BUSY_STATE = 113; /* deflate -> FINISH_STATE */ \nconst FINISH_STATE = 666; /* stream complete */ \nconst BS_NEED_MORE = 1; /* block not completed, need more input or more output */ \nconst BS_BLOCK_DONE = 2; /* block flush performed */ \nconst BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */ \nconst BS_FINISH_DONE = 4; /* finish done, accept no more input or output */ \nconst OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\nconst err = (strm, errorCode)=>{\n    strm.msg = messages[errorCode];\n    return errorCode;\n};\nconst rank = (f)=>{\n    return f * 2 - (f > 4 ? 9 : 0);\n};\nconst zero = (buf)=>{\n    let len = buf.length;\n    while(--len >= 0){\n        buf[len] = 0;\n    }\n};\n/* ===========================================================================\n * Slide the hash table when sliding the window down (could be avoided with 32\n * bit values at the expense of memory usage). We slide even when level == 0 to\n * keep the hash table consistent if we switch back to level > 0 later.\n */ const slide_hash = (s)=>{\n    let n, m;\n    let p;\n    let wsize = s.w_size;\n    n = s.hash_size;\n    p = n;\n    do {\n        m = s.head[--p];\n        s.head[p] = m >= wsize ? m - wsize : 0;\n    }while (--n);\n    n = wsize;\n    //#ifndef FASTEST\n    p = n;\n    do {\n        m = s.prev[--p];\n        s.prev[p] = m >= wsize ? m - wsize : 0;\n    /* If n is not on any hash chain, prev[n] is garbage but\n     * its value will never be used.\n     */ }while (--n);\n//#endif\n};\n/* eslint-disable new-cap */ let HASH_ZLIB = (s, prev, data)=>(prev << s.hash_shift ^ data) & s.hash_mask;\n_c2 = HASH_ZLIB;\n// This hash causes less collisions, https://github.com/nodeca/pako/issues/135\n// But breaks binary compatibility\n//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;\nlet HASH = HASH_ZLIB;\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output, except for\n * some deflate_stored() output, goes through this function so some\n * applications may wish to modify it to avoid allocating a large\n * strm->next_out buffer and copying into it. (See also read_buf()).\n */ const flush_pending = (strm)=>{\n    const s = strm.state;\n    //_tr_flush_bits(s);\n    let len = s.pending;\n    if (len > strm.avail_out) {\n        len = strm.avail_out;\n    }\n    if (len === 0) {\n        return;\n    }\n    strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);\n    strm.next_out += len;\n    s.pending_out += len;\n    strm.total_out += len;\n    strm.avail_out -= len;\n    s.pending -= len;\n    if (s.pending === 0) {\n        s.pending_out = 0;\n    }\n};\nconst flush_block_only = (s, last)=>{\n    _tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);\n    s.block_start = s.strstart;\n    flush_pending(s.strm);\n};\nconst put_byte = (s, b)=>{\n    s.pending_buf[s.pending++] = b;\n};\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */ const putShortMSB = (s, b)=>{\n    //  put_byte(s, (Byte)(b >> 8));\n    //  put_byte(s, (Byte)(b & 0xff));\n    s.pending_buf[s.pending++] = b >>> 8 & 0xff;\n    s.pending_buf[s.pending++] = b & 0xff;\n};\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */ const read_buf = (strm, buf, start, size)=>{\n    let len = strm.avail_in;\n    if (len > size) {\n        len = size;\n    }\n    if (len === 0) {\n        return 0;\n    }\n    strm.avail_in -= len;\n    // zmemcpy(buf, strm->next_in, len);\n    buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);\n    if (strm.state.wrap === 1) {\n        strm.adler = adler32_1(strm.adler, buf, len, start);\n    } else if (strm.state.wrap === 2) {\n        strm.adler = crc32_1(strm.adler, buf, len, start);\n    }\n    strm.next_in += len;\n    strm.total_in += len;\n    return len;\n};\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */ const longest_match = (s, cur_match)=>{\n    let chain_length = s.max_chain_length; /* max hash chain length */ \n    let scan = s.strstart; /* current string */ \n    let match; /* matched string */ \n    let len; /* length of current match */ \n    let best_len = s.prev_length; /* best match length so far */ \n    let nice_match = s.nice_match; /* stop if match long enough */ \n    const limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0 /*NIL*/ ;\n    const _win = s.window; // shortcut\n    const wmask = s.w_mask;\n    const prev = s.prev;\n    /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */ const strend = s.strstart + MAX_MATCH;\n    let scan_end1 = _win[scan + best_len - 1];\n    let scan_end = _win[scan + best_len];\n    /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */ // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n    /* Do not waste too much time if we already have a good match: */ if (s.prev_length >= s.good_match) {\n        chain_length >>= 2;\n    }\n    /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */ if (nice_match > s.lookahead) {\n        nice_match = s.lookahead;\n    }\n    // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n    do {\n        // Assert(cur_match < s->strstart, \"no future\");\n        match = cur_match;\n        /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */ if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {\n            continue;\n        }\n        /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */ scan += 2;\n        match++;\n        // Assert(*scan == *match, \"match[2]?\");\n        /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */ do {\n        /*jshint noempty:false*/ }while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);\n        // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n        len = MAX_MATCH - (strend - scan);\n        scan = strend - MAX_MATCH;\n        if (len > best_len) {\n            s.match_start = cur_match;\n            best_len = len;\n            if (len >= nice_match) {\n                break;\n            }\n            scan_end1 = _win[scan + best_len - 1];\n            scan_end = _win[scan + best_len];\n        }\n    }while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n    if (best_len <= s.lookahead) {\n        return best_len;\n    }\n    return s.lookahead;\n};\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */ const fill_window = (s)=>{\n    const _w_size = s.w_size;\n    let n, more, str;\n    //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n    do {\n        more = s.window_size - s.lookahead - s.strstart;\n        // JS ints have 32 bit, block below not needed\n        /* Deal with !@#$% 64K limit: */ //if (sizeof(int) <= 2) {\n        //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n        //        more = wsize;\n        //\n        //  } else if (more == (unsigned)(-1)) {\n        //        /* Very unlikely, but possible on 16 bit machine if\n        //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n        //         */\n        //        more--;\n        //    }\n        //}\n        /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */ if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n            s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);\n            s.match_start -= _w_size;\n            s.strstart -= _w_size;\n            /* we now have strstart >= MAX_DIST */ s.block_start -= _w_size;\n            if (s.insert > s.strstart) {\n                s.insert = s.strstart;\n            }\n            slide_hash(s);\n            more += _w_size;\n        }\n        if (s.strm.avail_in === 0) {\n            break;\n        }\n        /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */ //Assert(more >= 2, \"more < 2\");\n        n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n        s.lookahead += n;\n        /* Initialize the hash value now that we have some input: */ if (s.lookahead + s.insert >= MIN_MATCH) {\n            str = s.strstart - s.insert;\n            s.ins_h = s.window[str];\n            /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */ s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);\n            //#if MIN_MATCH != 3\n            //        Call update_hash() MIN_MATCH-3 more times\n            //#endif\n            while(s.insert){\n                /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */ s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n                s.prev[str & s.w_mask] = s.head[s.ins_h];\n                s.head[s.ins_h] = str;\n                str++;\n                s.insert--;\n                if (s.lookahead + s.insert < MIN_MATCH) {\n                    break;\n                }\n            }\n        }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */ }while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n/* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */ //  if (s.high_water < s.window_size) {\n//    const curr = s.strstart + s.lookahead;\n//    let init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n};\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n *\n * In case deflateParams() is used to later switch to a non-zero compression\n * level, s->matches (otherwise unused when storing) keeps track of the number\n * of hash table slides to perform. If s->matches is 1, then one hash table\n * slide will be done when switching. If s->matches is 2, the maximum value\n * allowed here, then the hash table will be cleared, since two or more slides\n * is the same as a clear.\n *\n * deflate_stored() is written to minimize the number of times an input byte is\n * copied. It is most efficient with large input and output buffers, which\n * maximizes the opportunites to have a single copy from next_in to next_out.\n */ const deflate_stored = (s, flush)=>{\n    /* Smallest worthy block size when not flushing or finishing. By default\n   * this is 32K. This can be as small as 507 bytes for memLevel == 1. For\n   * large input and output buffers, the stored block size will be larger.\n   */ let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;\n    /* Copy as many min_block or larger stored blocks directly to next_out as\n   * possible. If flushing, copy the remaining available input to next_out as\n   * stored blocks, if there is enough space.\n   */ let len, left, have, last = 0;\n    let used = s.strm.avail_in;\n    do {\n        /* Set len to the maximum size block that we can copy directly with the\n     * available input data and output space. Set left to how much of that\n     * would be copied from what's left in the window.\n     */ len = 65535 /* MAX_STORED */ ; /* maximum deflate stored block length */ \n        have = s.bi_valid + 42 >> 3; /* number of header bytes */ \n        if (s.strm.avail_out < have) {\n            break;\n        }\n        /* maximum stored block length that will fit in avail_out: */ have = s.strm.avail_out - have;\n        left = s.strstart - s.block_start; /* bytes left in window */ \n        if (len > left + s.strm.avail_in) {\n            len = left + s.strm.avail_in; /* limit len to the input */ \n        }\n        if (len > have) {\n            len = have; /* limit len to the output */ \n        }\n        /* If the stored block would be less than min_block in length, or if\n     * unable to copy all of the available input when flushing, then try\n     * copying to the window and the pending buffer instead. Also don't\n     * write an empty block when flushing -- deflate() does that.\n     */ if (len < min_block && (len === 0 && flush !== Z_FINISH$3 || flush === Z_NO_FLUSH$2 || len !== left + s.strm.avail_in)) {\n            break;\n        }\n        /* Make a dummy stored block in pending to get the header bytes,\n     * including any pending bits. This also updates the debugging counts.\n     */ last = flush === Z_FINISH$3 && len === left + s.strm.avail_in ? 1 : 0;\n        _tr_stored_block(s, 0, 0, last);\n        /* Replace the lengths in the dummy stored block with len. */ s.pending_buf[s.pending - 4] = len;\n        s.pending_buf[s.pending - 3] = len >> 8;\n        s.pending_buf[s.pending - 2] = ~len;\n        s.pending_buf[s.pending - 1] = ~len >> 8;\n        /* Write the stored block header bytes. */ flush_pending(s.strm);\n        //#ifdef ZLIB_DEBUG\n        //    /* Update debugging counts for the data about to be copied. */\n        //    s->compressed_len += len << 3;\n        //    s->bits_sent += len << 3;\n        //#endif\n        /* Copy uncompressed bytes from the window to next_out. */ if (left) {\n            if (left > len) {\n                left = len;\n            }\n            //zmemcpy(s->strm->next_out, s->window + s->block_start, left);\n            s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);\n            s.strm.next_out += left;\n            s.strm.avail_out -= left;\n            s.strm.total_out += left;\n            s.block_start += left;\n            len -= left;\n        }\n        /* Copy uncompressed bytes directly from next_in to next_out, updating\n     * the check value.\n     */ if (len) {\n            read_buf(s.strm, s.strm.output, s.strm.next_out, len);\n            s.strm.next_out += len;\n            s.strm.avail_out -= len;\n            s.strm.total_out += len;\n        }\n    }while (last === 0);\n    /* Update the sliding window with the last s->w_size bytes of the copied\n   * data, or append all of the copied data to the existing window if less\n   * than s->w_size bytes were copied. Also update the number of bytes to\n   * insert in the hash tables, in the event that deflateParams() switches to\n   * a non-zero compression level.\n   */ used -= s.strm.avail_in; /* number of input bytes directly copied */ \n    if (used) {\n        /* If any input was used, then no unused input remains in the window,\n     * therefore s->block_start == s->strstart.\n     */ if (used >= s.w_size) {\n            s.matches = 2; /* clear hash */ \n            //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);\n            s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);\n            s.strstart = s.w_size;\n            s.insert = s.strstart;\n        } else {\n            if (s.window_size - s.strstart <= used) {\n                /* Slide the window down. */ s.strstart -= s.w_size;\n                //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n                s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n                if (s.matches < 2) {\n                    s.matches++; /* add a pending slide_hash() */ \n                }\n                if (s.insert > s.strstart) {\n                    s.insert = s.strstart;\n                }\n            }\n            //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);\n            s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);\n            s.strstart += used;\n            s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;\n        }\n        s.block_start = s.strstart;\n    }\n    if (s.high_water < s.strstart) {\n        s.high_water = s.strstart;\n    }\n    /* If the last block was written to next_out, then done. */ if (last) {\n        return BS_FINISH_DONE;\n    }\n    /* If flushing and all input has been consumed, then done. */ if (flush !== Z_NO_FLUSH$2 && flush !== Z_FINISH$3 && s.strm.avail_in === 0 && s.strstart === s.block_start) {\n        return BS_BLOCK_DONE;\n    }\n    /* Fill the window with any remaining input. */ have = s.window_size - s.strstart;\n    if (s.strm.avail_in > have && s.block_start >= s.w_size) {\n        /* Slide the window down. */ s.block_start -= s.w_size;\n        s.strstart -= s.w_size;\n        //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n        if (s.matches < 2) {\n            s.matches++; /* add a pending slide_hash() */ \n        }\n        have += s.w_size; /* more space now */ \n        if (s.insert > s.strstart) {\n            s.insert = s.strstart;\n        }\n    }\n    if (have > s.strm.avail_in) {\n        have = s.strm.avail_in;\n    }\n    if (have) {\n        read_buf(s.strm, s.window, s.strstart, have);\n        s.strstart += have;\n        s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;\n    }\n    if (s.high_water < s.strstart) {\n        s.high_water = s.strstart;\n    }\n    /* There was not enough avail_out to write a complete worthy or flushed\n   * stored block to next_out. Write a stored block to pending instead, if we\n   * have enough input for a worthy block, or if flushing and there is enough\n   * room for the remaining input as a stored block in the pending buffer.\n   */ have = s.bi_valid + 42 >> 3; /* number of header bytes */ \n    /* maximum stored block length that will fit in pending: */ have = s.pending_buf_size - have > 65535 /* MAX_STORED */  ? 65535 /* MAX_STORED */  : s.pending_buf_size - have;\n    min_block = have > s.w_size ? s.w_size : have;\n    left = s.strstart - s.block_start;\n    if (left >= min_block || (left || flush === Z_FINISH$3) && flush !== Z_NO_FLUSH$2 && s.strm.avail_in === 0 && left <= have) {\n        len = left > have ? have : left;\n        last = flush === Z_FINISH$3 && s.strm.avail_in === 0 && len === left ? 1 : 0;\n        _tr_stored_block(s, s.block_start, len, last);\n        s.block_start += len;\n        flush_pending(s.strm);\n    }\n    /* We've done all we can with the available input and output. */ return last ? BS_FINISH_STARTED : BS_NEED_MORE;\n};\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */ const deflate_fast = (s, flush)=>{\n    let hash_head; /* head of the hash chain */ \n    let bflush; /* set if current block must be flushed */ \n    for(;;){\n        /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */ if (s.lookahead < MIN_LOOKAHEAD) {\n            fill_window(s);\n            if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n                return BS_NEED_MORE;\n            }\n            if (s.lookahead === 0) {\n                break; /* flush the current block */ \n            }\n        }\n        /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */ hash_head = 0 /*NIL*/ ;\n        if (s.lookahead >= MIN_MATCH) {\n            /*** INSERT_STRING(s, s.strstart, hash_head); ***/ s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n            s.head[s.ins_h] = s.strstart;\n        /***/ }\n        /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */ if (hash_head !== 0 /*NIL*/  && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {\n            /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */ s.match_length = longest_match(s, hash_head);\n        /* longest_match() sets match_start */ }\n        if (s.match_length >= MIN_MATCH) {\n            // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n            /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/ bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n            s.lookahead -= s.match_length;\n            /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */ if (s.match_length <= s.max_lazy_match /*max_insert_length*/  && s.lookahead >= MIN_MATCH) {\n                s.match_length--; /* string at strstart already in table */ \n                do {\n                    s.strstart++;\n                    /*** INSERT_STRING(s, s.strstart, hash_head); ***/ s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n                    hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n                    s.head[s.ins_h] = s.strstart;\n                /***/ /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */ }while (--s.match_length !== 0);\n                s.strstart++;\n            } else {\n                s.strstart += s.match_length;\n                s.match_length = 0;\n                s.ins_h = s.window[s.strstart];\n                /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */ s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);\n            //#if MIN_MATCH != 3\n            //                Call UPDATE_HASH() MIN_MATCH-3 more times\n            //#endif\n            /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */ }\n        } else {\n            /* No match, output a literal byte */ //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n            /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/ bflush = _tr_tally(s, 0, s.window[s.strstart]);\n            s.lookahead--;\n            s.strstart++;\n        }\n        if (bflush) {\n            /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);\n            if (s.strm.avail_out === 0) {\n                return BS_NEED_MORE;\n            }\n        /***/ }\n    }\n    s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n    if (flush === Z_FINISH$3) {\n        /*** FLUSH_BLOCK(s, 1); ***/ flush_block_only(s, true);\n        if (s.strm.avail_out === 0) {\n            return BS_FINISH_STARTED;\n        }\n        /***/ return BS_FINISH_DONE;\n    }\n    if (s.sym_next) {\n        /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n            return BS_NEED_MORE;\n        }\n    /***/ }\n    return BS_BLOCK_DONE;\n};\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */ const deflate_slow = (s, flush)=>{\n    let hash_head; /* head of hash chain */ \n    let bflush; /* set if current block must be flushed */ \n    let max_insert;\n    /* Process the input block. */ for(;;){\n        /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */ if (s.lookahead < MIN_LOOKAHEAD) {\n            fill_window(s);\n            if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n                return BS_NEED_MORE;\n            }\n            if (s.lookahead === 0) {\n                break;\n            } /* flush the current block */ \n        }\n        /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */ hash_head = 0 /*NIL*/ ;\n        if (s.lookahead >= MIN_MATCH) {\n            /*** INSERT_STRING(s, s.strstart, hash_head); ***/ s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n            s.head[s.ins_h] = s.strstart;\n        /***/ }\n        /* Find the longest match, discarding those <= prev_length.\n     */ s.prev_length = s.match_length;\n        s.prev_match = s.match_start;\n        s.match_length = MIN_MATCH - 1;\n        if (hash_head !== 0 /*NIL*/  && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {\n            /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */ s.match_length = longest_match(s, hash_head);\n            /* longest_match() sets match_start */ if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096 /*TOO_FAR*/ )) {\n                /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */ s.match_length = MIN_MATCH - 1;\n            }\n        }\n        /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */ if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n            max_insert = s.strstart + s.lookahead - MIN_MATCH;\n            /* Do not insert strings in hash table beyond this. */ //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n            /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/ bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n            /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */ s.lookahead -= s.prev_length - 1;\n            s.prev_length -= 2;\n            do {\n                if (++s.strstart <= max_insert) {\n                    /*** INSERT_STRING(s, s.strstart, hash_head); ***/ s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n                    hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n                    s.head[s.ins_h] = s.strstart;\n                /***/ }\n            }while (--s.prev_length !== 0);\n            s.match_available = 0;\n            s.match_length = MIN_MATCH - 1;\n            s.strstart++;\n            if (bflush) {\n                /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);\n                if (s.strm.avail_out === 0) {\n                    return BS_NEED_MORE;\n                }\n            /***/ }\n        } else if (s.match_available) {\n            /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */ //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n            /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/ bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n            if (bflush) {\n                /*** FLUSH_BLOCK_ONLY(s, 0) ***/ flush_block_only(s, false);\n            /***/ }\n            s.strstart++;\n            s.lookahead--;\n            if (s.strm.avail_out === 0) {\n                return BS_NEED_MORE;\n            }\n        } else {\n            /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */ s.match_available = 1;\n            s.strstart++;\n            s.lookahead--;\n        }\n    }\n    //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n    if (s.match_available) {\n        //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n        /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/ bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n        s.match_available = 0;\n    }\n    s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n    if (flush === Z_FINISH$3) {\n        /*** FLUSH_BLOCK(s, 1); ***/ flush_block_only(s, true);\n        if (s.strm.avail_out === 0) {\n            return BS_FINISH_STARTED;\n        }\n        /***/ return BS_FINISH_DONE;\n    }\n    if (s.sym_next) {\n        /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n            return BS_NEED_MORE;\n        }\n    /***/ }\n    return BS_BLOCK_DONE;\n};\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */ const deflate_rle = (s, flush)=>{\n    let bflush; /* set if current block must be flushed */ \n    let prev; /* byte at distance one to match */ \n    let scan, strend; /* scan goes up to strend for length of run */ \n    const _win = s.window;\n    for(;;){\n        /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */ if (s.lookahead <= MAX_MATCH) {\n            fill_window(s);\n            if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$2) {\n                return BS_NEED_MORE;\n            }\n            if (s.lookahead === 0) {\n                break;\n            } /* flush the current block */ \n        }\n        /* See how many times the previous byte repeats */ s.match_length = 0;\n        if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n            scan = s.strstart - 1;\n            prev = _win[scan];\n            if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n                strend = s.strstart + MAX_MATCH;\n                do {\n                /*jshint noempty:false*/ }while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);\n                s.match_length = MAX_MATCH - (strend - scan);\n                if (s.match_length > s.lookahead) {\n                    s.match_length = s.lookahead;\n                }\n            }\n        //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n        }\n        /* Emit match if have run of MIN_MATCH or longer, else emit literal */ if (s.match_length >= MIN_MATCH) {\n            //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n            /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/ bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);\n            s.lookahead -= s.match_length;\n            s.strstart += s.match_length;\n            s.match_length = 0;\n        } else {\n            /* No match, output a literal byte */ //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n            /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/ bflush = _tr_tally(s, 0, s.window[s.strstart]);\n            s.lookahead--;\n            s.strstart++;\n        }\n        if (bflush) {\n            /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);\n            if (s.strm.avail_out === 0) {\n                return BS_NEED_MORE;\n            }\n        /***/ }\n    }\n    s.insert = 0;\n    if (flush === Z_FINISH$3) {\n        /*** FLUSH_BLOCK(s, 1); ***/ flush_block_only(s, true);\n        if (s.strm.avail_out === 0) {\n            return BS_FINISH_STARTED;\n        }\n        /***/ return BS_FINISH_DONE;\n    }\n    if (s.sym_next) {\n        /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n            return BS_NEED_MORE;\n        }\n    /***/ }\n    return BS_BLOCK_DONE;\n};\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */ const deflate_huff = (s, flush)=>{\n    let bflush; /* set if current block must be flushed */ \n    for(;;){\n        /* Make sure that we have a literal to write. */ if (s.lookahead === 0) {\n            fill_window(s);\n            if (s.lookahead === 0) {\n                if (flush === Z_NO_FLUSH$2) {\n                    return BS_NEED_MORE;\n                }\n                break; /* flush the current block */ \n            }\n        }\n        /* Output a literal byte */ s.match_length = 0;\n        //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/ bflush = _tr_tally(s, 0, s.window[s.strstart]);\n        s.lookahead--;\n        s.strstart++;\n        if (bflush) {\n            /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);\n            if (s.strm.avail_out === 0) {\n                return BS_NEED_MORE;\n            }\n        /***/ }\n    }\n    s.insert = 0;\n    if (flush === Z_FINISH$3) {\n        /*** FLUSH_BLOCK(s, 1); ***/ flush_block_only(s, true);\n        if (s.strm.avail_out === 0) {\n            return BS_FINISH_STARTED;\n        }\n        /***/ return BS_FINISH_DONE;\n    }\n    if (s.sym_next) {\n        /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n            return BS_NEED_MORE;\n        }\n    /***/ }\n    return BS_BLOCK_DONE;\n};\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */ function Config(good_length, max_lazy, nice_length, max_chain, func) {\n    this.good_length = good_length;\n    this.max_lazy = max_lazy;\n    this.nice_length = nice_length;\n    this.max_chain = max_chain;\n    this.func = func;\n}\n_c3 = Config;\nconst configuration_table = [\n    /*      good lazy nice chain */ new Config(0, 0, 0, 0, deflate_stored),\n    /* 0 store only */ new Config(4, 4, 8, 4, deflate_fast),\n    /* 1 max speed, no lazy matches */ new Config(4, 5, 16, 8, deflate_fast),\n    /* 2 */ new Config(4, 6, 32, 32, deflate_fast),\n    /* 3 */ new Config(4, 4, 16, 16, deflate_slow),\n    /* 4 lazy matches */ new Config(8, 16, 32, 32, deflate_slow),\n    /* 5 */ new Config(8, 16, 128, 128, deflate_slow),\n    /* 6 */ new Config(8, 32, 128, 256, deflate_slow),\n    /* 7 */ new Config(32, 128, 258, 1024, deflate_slow),\n    /* 8 */ new Config(32, 258, 258, 4096, deflate_slow)\n];\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */ const lm_init = (s)=>{\n    s.window_size = 2 * s.w_size;\n    /*** CLEAR_HASH(s); ***/ zero(s.head); // Fill with NIL (= 0);\n    /* Set the default configuration parameters:\n   */ s.max_lazy_match = configuration_table[s.level].max_lazy;\n    s.good_match = configuration_table[s.level].good_length;\n    s.nice_match = configuration_table[s.level].nice_length;\n    s.max_chain_length = configuration_table[s.level].max_chain;\n    s.strstart = 0;\n    s.block_start = 0;\n    s.lookahead = 0;\n    s.insert = 0;\n    s.match_length = s.prev_length = MIN_MATCH - 1;\n    s.match_available = 0;\n    s.ins_h = 0;\n};\nfunction DeflateState() {\n    this.strm = null; /* pointer back to this zlib stream */ \n    this.status = 0; /* as the name implies */ \n    this.pending_buf = null; /* output still pending */ \n    this.pending_buf_size = 0; /* size of pending_buf */ \n    this.pending_out = 0; /* next pending byte to output to the stream */ \n    this.pending = 0; /* nb of bytes in the pending buffer */ \n    this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */ \n    this.gzhead = null; /* gzip header information to write */ \n    this.gzindex = 0; /* where in extra, name, or comment */ \n    this.method = Z_DEFLATED$2; /* can only be DEFLATED */ \n    this.last_flush = -1; /* value of flush param for previous deflate call */ \n    this.w_size = 0; /* LZ77 window size (32K by default) */ \n    this.w_bits = 0; /* log2(w_size)  (8..16) */ \n    this.w_mask = 0; /* w_size - 1 */ \n    this.window = null;\n    /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */ this.window_size = 0;\n    /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */ this.prev = null;\n    /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */ this.head = null; /* Heads of the hash chains or NIL. */ \n    this.ins_h = 0; /* hash index of string to be inserted */ \n    this.hash_size = 0; /* number of elements in hash table */ \n    this.hash_bits = 0; /* log2(hash_size) */ \n    this.hash_mask = 0; /* hash_size-1 */ \n    this.hash_shift = 0;\n    /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */ this.block_start = 0;\n    /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */ this.match_length = 0; /* length of best match */ \n    this.prev_match = 0; /* previous match */ \n    this.match_available = 0; /* set if previous match exists */ \n    this.strstart = 0; /* start of string to insert */ \n    this.match_start = 0; /* start of matching string */ \n    this.lookahead = 0; /* number of valid bytes ahead in window */ \n    this.prev_length = 0;\n    /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */ this.max_chain_length = 0;\n    /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */ this.max_lazy_match = 0;\n    /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */ // That's alias to max_lazy_match, don't use directly\n    //this.max_insert_length = 0;\n    /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */ this.level = 0; /* compression level (1..9) */ \n    this.strategy = 0; /* favor or force Huffman coding*/ \n    this.good_match = 0;\n    /* Use a faster search when the previous match is longer than this */ this.nice_match = 0; /* Stop searching when current match exceeds this */ \n    /* used by trees.c: */ /* Didn't use ct_data typedef below to suppress compiler warning */ // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n    // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n    // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n    // Use flat array of DOUBLE size, with interleaved fata,\n    // because JS does not support effective\n    this.dyn_ltree = new Uint16Array(HEAP_SIZE * 2);\n    this.dyn_dtree = new Uint16Array((2 * D_CODES + 1) * 2);\n    this.bl_tree = new Uint16Array((2 * BL_CODES + 1) * 2);\n    zero(this.dyn_ltree);\n    zero(this.dyn_dtree);\n    zero(this.bl_tree);\n    this.l_desc = null; /* desc. for literal tree */ \n    this.d_desc = null; /* desc. for distance tree */ \n    this.bl_desc = null; /* desc. for bit length tree */ \n    //ush bl_count[MAX_BITS+1];\n    this.bl_count = new Uint16Array(MAX_BITS + 1);\n    /* number of codes at each bit length for an optimal tree */ //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n    this.heap = new Uint16Array(2 * L_CODES + 1); /* heap used to build the Huffman trees */ \n    zero(this.heap);\n    this.heap_len = 0; /* number of elements in the heap */ \n    this.heap_max = 0; /* element of largest frequency */ \n    /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */ this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n    zero(this.depth);\n    /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */ this.sym_buf = 0; /* buffer for distances and literals/lengths */ \n    this.lit_bufsize = 0;\n    /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */ this.sym_next = 0; /* running index in sym_buf */ \n    this.sym_end = 0; /* symbol table full when sym_next reaches this */ \n    this.opt_len = 0; /* bit length of current block with optimal trees */ \n    this.static_len = 0; /* bit length of current block with static trees */ \n    this.matches = 0; /* number of string matches in current block */ \n    this.insert = 0; /* bytes at end of window left to insert */ \n    this.bi_buf = 0;\n    /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */ this.bi_valid = 0;\n/* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */ // Used for window memory init. We safely ignore it for JS. That makes\n// sense only for pointers and memory check tools.\n//this.high_water = 0;\n/* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */ }\n_c4 = DeflateState;\n/* =========================================================================\n * Check for a valid deflate stream state. Return 0 if ok, 1 if not.\n */ const deflateStateCheck = (strm)=>{\n    if (!strm) {\n        return 1;\n    }\n    const s = strm.state;\n    if (!s || s.strm !== strm || s.status !== INIT_STATE && //#ifdef GZIP\n    s.status !== GZIP_STATE && //#endif\n    s.status !== EXTRA_STATE && s.status !== NAME_STATE && s.status !== COMMENT_STATE && s.status !== HCRC_STATE && s.status !== BUSY_STATE && s.status !== FINISH_STATE) {\n        return 1;\n    }\n    return 0;\n};\nconst deflateResetKeep = (strm)=>{\n    if (deflateStateCheck(strm)) {\n        return err(strm, Z_STREAM_ERROR$2);\n    }\n    strm.total_in = strm.total_out = 0;\n    strm.data_type = Z_UNKNOWN;\n    const s = strm.state;\n    s.pending = 0;\n    s.pending_out = 0;\n    if (s.wrap < 0) {\n        s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */ }\n    s.status = //#ifdef GZIP\n    s.wrap === 2 ? GZIP_STATE : //#endif\n    s.wrap ? INIT_STATE : BUSY_STATE;\n    strm.adler = s.wrap === 2 ? 0 // crc32(0, Z_NULL, 0)\n     : 1; // adler32(0, Z_NULL, 0)\n    s.last_flush = -2;\n    _tr_init(s);\n    return Z_OK$3;\n};\nconst deflateReset = (strm)=>{\n    const ret = deflateResetKeep(strm);\n    if (ret === Z_OK$3) {\n        lm_init(strm.state);\n    }\n    return ret;\n};\nconst deflateSetHeader = (strm, head)=>{\n    if (deflateStateCheck(strm) || strm.state.wrap !== 2) {\n        return Z_STREAM_ERROR$2;\n    }\n    strm.state.gzhead = head;\n    return Z_OK$3;\n};\nconst deflateInit2 = (strm, level, method, windowBits, memLevel, strategy)=>{\n    if (!strm) {\n        return Z_STREAM_ERROR$2;\n    }\n    let wrap = 1;\n    if (level === Z_DEFAULT_COMPRESSION$1) {\n        level = 6;\n    }\n    if (windowBits < 0) {\n        wrap = 0;\n        windowBits = -windowBits;\n    } else if (windowBits > 15) {\n        wrap = 2; /* write gzip wrapper instead */ \n        windowBits -= 16;\n    }\n    if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED || windowBits === 8 && wrap !== 1) {\n        return err(strm, Z_STREAM_ERROR$2);\n    }\n    if (windowBits === 8) {\n        windowBits = 9;\n    }\n    /* until 256-byte window bug fixed */ const s = new DeflateState();\n    strm.state = s;\n    s.strm = strm;\n    s.status = INIT_STATE; /* to pass state test in deflateReset() */ \n    s.wrap = wrap;\n    s.gzhead = null;\n    s.w_bits = windowBits;\n    s.w_size = 1 << s.w_bits;\n    s.w_mask = s.w_size - 1;\n    s.hash_bits = memLevel + 7;\n    s.hash_size = 1 << s.hash_bits;\n    s.hash_mask = s.hash_size - 1;\n    s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n    s.window = new Uint8Array(s.w_size * 2);\n    s.head = new Uint16Array(s.hash_size);\n    s.prev = new Uint16Array(s.w_size);\n    // Don't need mem init magic for JS.\n    //s.high_water = 0;  /* nothing written to s->window yet */\n    s.lit_bufsize = 1 << memLevel + 6; /* 16K elements by default */ \n    /* We overlay pending_buf and sym_buf. This works since the average size\n   * for length/distance pairs over any compressed block is assured to be 31\n   * bits or less.\n   *\n   * Analysis: The longest fixed codes are a length code of 8 bits plus 5\n   * extra bits, for lengths 131 to 257. The longest fixed distance codes are\n   * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest\n   * possible fixed-codes length/distance pair is then 31 bits total.\n   *\n   * sym_buf starts one-fourth of the way into pending_buf. So there are\n   * three bytes in sym_buf for every four bytes in pending_buf. Each symbol\n   * in sym_buf is three bytes -- two for the distance and one for the\n   * literal/length. As each symbol is consumed, the pointer to the next\n   * sym_buf value to read moves forward three bytes. From that symbol, up to\n   * 31 bits are written to pending_buf. The closest the written pending_buf\n   * bits gets to the next sym_buf symbol to read is just before the last\n   * code is written. At that time, 31*(n-2) bits have been written, just\n   * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at\n   * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1\n   * symbols are written.) The closest the writing gets to what is unread is\n   * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and\n   * can range from 128 to 32768.\n   *\n   * Therefore, at a minimum, there are 142 bits of space between what is\n   * written and what is read in the overlain buffers, so the symbols cannot\n   * be overwritten by the compressed data. That space is actually 139 bits,\n   * due to the three-bit fixed-code block header.\n   *\n   * That covers the case where either Z_FIXED is specified, forcing fixed\n   * codes, or when the use of fixed codes is chosen, because that choice\n   * results in a smaller compressed block than dynamic codes. That latter\n   * condition then assures that the above analysis also covers all dynamic\n   * blocks. A dynamic-code block will only be chosen to be emitted if it has\n   * fewer bits than a fixed-code block would for the same set of symbols.\n   * Therefore its average symbol length is assured to be less than 31. So\n   * the compressed data for a dynamic block also cannot overwrite the\n   * symbols from which it is being constructed.\n   */ s.pending_buf_size = s.lit_bufsize * 4;\n    s.pending_buf = new Uint8Array(s.pending_buf_size);\n    // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n    //s->sym_buf = s->pending_buf + s->lit_bufsize;\n    s.sym_buf = s.lit_bufsize;\n    //s->sym_end = (s->lit_bufsize - 1) * 3;\n    s.sym_end = (s.lit_bufsize - 1) * 3;\n    /* We avoid equality with lit_bufsize*3 because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */ s.level = level;\n    s.strategy = strategy;\n    s.method = method;\n    return deflateReset(strm);\n};\nconst deflateInit = (strm, level)=>{\n    return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);\n};\n/* ========================================================================= */ const deflate$2 = (strm, flush)=>{\n    if (deflateStateCheck(strm) || flush > Z_BLOCK$1 || flush < 0) {\n        return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;\n    }\n    const s = strm.state;\n    if (!strm.output || strm.avail_in !== 0 && !strm.input || s.status === FINISH_STATE && flush !== Z_FINISH$3) {\n        return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$2);\n    }\n    const old_flush = s.last_flush;\n    s.last_flush = flush;\n    /* Flush as much pending output as possible */ if (s.pending !== 0) {\n        flush_pending(strm);\n        if (strm.avail_out === 0) {\n            /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */ s.last_flush = -1;\n            return Z_OK$3;\n        }\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */ } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH$3) {\n        return err(strm, Z_BUF_ERROR$1);\n    }\n    /* User must not provide more input after the first FINISH: */ if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n        return err(strm, Z_BUF_ERROR$1);\n    }\n    /* Write the header */ if (s.status === INIT_STATE && s.wrap === 0) {\n        s.status = BUSY_STATE;\n    }\n    if (s.status === INIT_STATE) {\n        /* zlib header */ let header = Z_DEFLATED$2 + (s.w_bits - 8 << 4) << 8;\n        let level_flags = -1;\n        if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n            level_flags = 0;\n        } else if (s.level < 6) {\n            level_flags = 1;\n        } else if (s.level === 6) {\n            level_flags = 2;\n        } else {\n            level_flags = 3;\n        }\n        header |= level_flags << 6;\n        if (s.strstart !== 0) {\n            header |= PRESET_DICT;\n        }\n        header += 31 - header % 31;\n        putShortMSB(s, header);\n        /* Save the adler32 of the preset dictionary: */ if (s.strstart !== 0) {\n            putShortMSB(s, strm.adler >>> 16);\n            putShortMSB(s, strm.adler & 0xffff);\n        }\n        strm.adler = 1; // adler32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n        /* Compression must start with an empty pending buffer */ flush_pending(strm);\n        if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK$3;\n        }\n    }\n    //#ifdef GZIP\n    if (s.status === GZIP_STATE) {\n        /* gzip header */ strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        put_byte(s, 31);\n        put_byte(s, 139);\n        put_byte(s, 8);\n        if (!s.gzhead) {\n            put_byte(s, 0);\n            put_byte(s, 0);\n            put_byte(s, 0);\n            put_byte(s, 0);\n            put_byte(s, 0);\n            put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);\n            put_byte(s, OS_CODE);\n            s.status = BUSY_STATE;\n            /* Compression must start with an empty pending buffer */ flush_pending(strm);\n            if (s.pending !== 0) {\n                s.last_flush = -1;\n                return Z_OK$3;\n            }\n        } else {\n            put_byte(s, (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16));\n            put_byte(s, s.gzhead.time & 0xff);\n            put_byte(s, s.gzhead.time >> 8 & 0xff);\n            put_byte(s, s.gzhead.time >> 16 & 0xff);\n            put_byte(s, s.gzhead.time >> 24 & 0xff);\n            put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);\n            put_byte(s, s.gzhead.os & 0xff);\n            if (s.gzhead.extra && s.gzhead.extra.length) {\n                put_byte(s, s.gzhead.extra.length & 0xff);\n                put_byte(s, s.gzhead.extra.length >> 8 & 0xff);\n            }\n            if (s.gzhead.hcrc) {\n                strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);\n            }\n            s.gzindex = 0;\n            s.status = EXTRA_STATE;\n        }\n    }\n    if (s.status === EXTRA_STATE) {\n        if (s.gzhead.extra /* != Z_NULL*/ ) {\n            let beg = s.pending; /* start of bytes to update crc */ \n            let left = (s.gzhead.extra.length & 0xffff) - s.gzindex;\n            while(s.pending + left > s.pending_buf_size){\n                let copy = s.pending_buf_size - s.pending;\n                // zmemcpy(s.pending_buf + s.pending,\n                //    s.gzhead.extra + s.gzindex, copy);\n                s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);\n                s.pending = s.pending_buf_size;\n                //--- HCRC_UPDATE(beg) ---//\n                if (s.gzhead.hcrc && s.pending > beg) {\n                    strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n                }\n                //---//\n                s.gzindex += copy;\n                flush_pending(strm);\n                if (s.pending !== 0) {\n                    s.last_flush = -1;\n                    return Z_OK$3;\n                }\n                beg = 0;\n                left -= copy;\n            }\n            // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility\n            //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11\n            let gzhead_extra = new Uint8Array(s.gzhead.extra);\n            // zmemcpy(s->pending_buf + s->pending,\n            //     s->gzhead->extra + s->gzindex, left);\n            s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);\n            s.pending += left;\n            //--- HCRC_UPDATE(beg) ---//\n            if (s.gzhead.hcrc && s.pending > beg) {\n                strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n            }\n            //---//\n            s.gzindex = 0;\n        }\n        s.status = NAME_STATE;\n    }\n    if (s.status === NAME_STATE) {\n        if (s.gzhead.name /* != Z_NULL*/ ) {\n            let beg = s.pending; /* start of bytes to update crc */ \n            let val;\n            do {\n                if (s.pending === s.pending_buf_size) {\n                    //--- HCRC_UPDATE(beg) ---//\n                    if (s.gzhead.hcrc && s.pending > beg) {\n                        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n                    }\n                    //---//\n                    flush_pending(strm);\n                    if (s.pending !== 0) {\n                        s.last_flush = -1;\n                        return Z_OK$3;\n                    }\n                    beg = 0;\n                }\n                // JS specific: little magic to add zero terminator to end of string\n                if (s.gzindex < s.gzhead.name.length) {\n                    val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n                } else {\n                    val = 0;\n                }\n                put_byte(s, val);\n            }while (val !== 0);\n            //--- HCRC_UPDATE(beg) ---//\n            if (s.gzhead.hcrc && s.pending > beg) {\n                strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n            }\n            //---//\n            s.gzindex = 0;\n        }\n        s.status = COMMENT_STATE;\n    }\n    if (s.status === COMMENT_STATE) {\n        if (s.gzhead.comment /* != Z_NULL*/ ) {\n            let beg = s.pending; /* start of bytes to update crc */ \n            let val;\n            do {\n                if (s.pending === s.pending_buf_size) {\n                    //--- HCRC_UPDATE(beg) ---//\n                    if (s.gzhead.hcrc && s.pending > beg) {\n                        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n                    }\n                    //---//\n                    flush_pending(strm);\n                    if (s.pending !== 0) {\n                        s.last_flush = -1;\n                        return Z_OK$3;\n                    }\n                    beg = 0;\n                }\n                // JS specific: little magic to add zero terminator to end of string\n                if (s.gzindex < s.gzhead.comment.length) {\n                    val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n                } else {\n                    val = 0;\n                }\n                put_byte(s, val);\n            }while (val !== 0);\n            //--- HCRC_UPDATE(beg) ---//\n            if (s.gzhead.hcrc && s.pending > beg) {\n                strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n            }\n        //---//\n        }\n        s.status = HCRC_STATE;\n    }\n    if (s.status === HCRC_STATE) {\n        if (s.gzhead.hcrc) {\n            if (s.pending + 2 > s.pending_buf_size) {\n                flush_pending(strm);\n                if (s.pending !== 0) {\n                    s.last_flush = -1;\n                    return Z_OK$3;\n                }\n            }\n            put_byte(s, strm.adler & 0xff);\n            put_byte(s, strm.adler >> 8 & 0xff);\n            strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        }\n        s.status = BUSY_STATE;\n        /* Compression must start with an empty pending buffer */ flush_pending(strm);\n        if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK$3;\n        }\n    }\n    //#endif\n    /* Start a new block or continue the current one.\n   */ if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH$2 && s.status !== FINISH_STATE) {\n        let bstate = s.level === 0 ? deflate_stored(s, flush) : s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);\n        if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n            s.status = FINISH_STATE;\n        }\n        if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n            if (strm.avail_out === 0) {\n                s.last_flush = -1;\n            /* avoid BUF_ERROR next call, see above */ }\n            return Z_OK$3;\n        /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */ }\n        if (bstate === BS_BLOCK_DONE) {\n            if (flush === Z_PARTIAL_FLUSH) {\n                _tr_align(s);\n            } else if (flush !== Z_BLOCK$1) {\n                _tr_stored_block(s, 0, 0, false);\n                /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */ if (flush === Z_FULL_FLUSH$1) {\n                    /*** CLEAR_HASH(s); ***/ /* forget history */ zero(s.head); // Fill with NIL (= 0);\n                    if (s.lookahead === 0) {\n                        s.strstart = 0;\n                        s.block_start = 0;\n                        s.insert = 0;\n                    }\n                }\n            }\n            flush_pending(strm);\n            if (strm.avail_out === 0) {\n                s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */ \n                return Z_OK$3;\n            }\n        }\n    }\n    if (flush !== Z_FINISH$3) {\n        return Z_OK$3;\n    }\n    if (s.wrap <= 0) {\n        return Z_STREAM_END$3;\n    }\n    /* Write the trailer */ if (s.wrap === 2) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, strm.adler >> 8 & 0xff);\n        put_byte(s, strm.adler >> 16 & 0xff);\n        put_byte(s, strm.adler >> 24 & 0xff);\n        put_byte(s, strm.total_in & 0xff);\n        put_byte(s, strm.total_in >> 8 & 0xff);\n        put_byte(s, strm.total_in >> 16 & 0xff);\n        put_byte(s, strm.total_in >> 24 & 0xff);\n    } else {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n    }\n    flush_pending(strm);\n    /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */ if (s.wrap > 0) {\n        s.wrap = -s.wrap;\n    }\n    /* write the trailer only once! */ return s.pending !== 0 ? Z_OK$3 : Z_STREAM_END$3;\n};\nconst deflateEnd = (strm)=>{\n    if (deflateStateCheck(strm)) {\n        return Z_STREAM_ERROR$2;\n    }\n    const status = strm.state.status;\n    strm.state = null;\n    return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$3;\n};\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */ const deflateSetDictionary = (strm, dictionary)=>{\n    let dictLength = dictionary.length;\n    if (deflateStateCheck(strm)) {\n        return Z_STREAM_ERROR$2;\n    }\n    const s = strm.state;\n    const wrap = s.wrap;\n    if (wrap === 2 || wrap === 1 && s.status !== INIT_STATE || s.lookahead) {\n        return Z_STREAM_ERROR$2;\n    }\n    /* when using zlib wrappers, compute Adler-32 for provided dictionary */ if (wrap === 1) {\n        /* adler32(strm->adler, dictionary, dictLength); */ strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);\n    }\n    s.wrap = 0; /* avoid computing Adler-32 in read_buf */ \n    /* if dictionary would fill window, just replace the history */ if (dictLength >= s.w_size) {\n        if (wrap === 0) {\n            /*** CLEAR_HASH(s); ***/ zero(s.head); // Fill with NIL (= 0);\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n        }\n        /* use the tail */ // dictionary = dictionary.slice(dictLength - s.w_size);\n        let tmpDict = new Uint8Array(s.w_size);\n        tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);\n        dictionary = tmpDict;\n        dictLength = s.w_size;\n    }\n    /* insert dictionary into window and hash */ const avail = strm.avail_in;\n    const next = strm.next_in;\n    const input = strm.input;\n    strm.avail_in = dictLength;\n    strm.next_in = 0;\n    strm.input = dictionary;\n    fill_window(s);\n    while(s.lookahead >= MIN_MATCH){\n        let str = s.strstart;\n        let n = s.lookahead - (MIN_MATCH - 1);\n        do {\n            /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */ s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n            s.prev[str & s.w_mask] = s.head[s.ins_h];\n            s.head[s.ins_h] = str;\n            str++;\n        }while (--n);\n        s.strstart = str;\n        s.lookahead = MIN_MATCH - 1;\n        fill_window(s);\n    }\n    s.strstart += s.lookahead;\n    s.block_start = s.strstart;\n    s.insert = s.lookahead;\n    s.lookahead = 0;\n    s.match_length = s.prev_length = MIN_MATCH - 1;\n    s.match_available = 0;\n    strm.next_in = next;\n    strm.input = input;\n    strm.avail_in = avail;\n    s.wrap = wrap;\n    return Z_OK$3;\n};\nvar deflateInit_1 = deflateInit;\nvar deflateInit2_1 = deflateInit2;\nvar deflateReset_1 = deflateReset;\nvar deflateResetKeep_1 = deflateResetKeep;\nvar deflateSetHeader_1 = deflateSetHeader;\nvar deflate_2$1 = deflate$2;\nvar deflateEnd_1 = deflateEnd;\nvar deflateSetDictionary_1 = deflateSetDictionary;\nvar deflateInfo = \"pako deflate (from Nodeca project)\";\n/* Not implemented\nmodule.exports.deflateBound = deflateBound;\nmodule.exports.deflateCopy = deflateCopy;\nmodule.exports.deflateGetDictionary = deflateGetDictionary;\nmodule.exports.deflateParams = deflateParams;\nmodule.exports.deflatePending = deflatePending;\nmodule.exports.deflatePrime = deflatePrime;\nmodule.exports.deflateTune = deflateTune;\n*/ var deflate_1$2 = {\n    deflateInit: deflateInit_1,\n    deflateInit2: deflateInit2_1,\n    deflateReset: deflateReset_1,\n    deflateResetKeep: deflateResetKeep_1,\n    deflateSetHeader: deflateSetHeader_1,\n    deflate: deflate_2$1,\n    deflateEnd: deflateEnd_1,\n    deflateSetDictionary: deflateSetDictionary_1,\n    deflateInfo: deflateInfo\n};\nconst _has = (obj, key)=>{\n    return Object.prototype.hasOwnProperty.call(obj, key);\n};\nvar assign = function(obj /*from1, from2, from3, ...*/ ) {\n    const sources = Array.prototype.slice.call(arguments, 1);\n    while(sources.length){\n        const source = sources.shift();\n        if (!source) {\n            continue;\n        }\n        if (typeof source !== \"object\") {\n            throw new TypeError(source + \"must be non-object\");\n        }\n        for(const p in source){\n            if (_has(source, p)) {\n                obj[p] = source[p];\n            }\n        }\n    }\n    return obj;\n};\n// Join array of chunks to single array.\nvar flattenChunks = (chunks)=>{\n    // calculate data length\n    let len = 0;\n    for(let i = 0, l = chunks.length; i < l; i++){\n        len += chunks[i].length;\n    }\n    // join chunks\n    const result = new Uint8Array(len);\n    for(let i = 0, pos = 0, l = chunks.length; i < l; i++){\n        let chunk = chunks[i];\n        result.set(chunk, pos);\n        pos += chunk.length;\n    }\n    return result;\n};\nvar common = {\n    assign: assign,\n    flattenChunks: flattenChunks\n};\n// String encode/decode helpers\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nlet STR_APPLY_UIA_OK = true;\ntry {\n    String.fromCharCode.apply(null, new Uint8Array(1));\n} catch (__) {\n    STR_APPLY_UIA_OK = false;\n}\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nconst _utf8len = new Uint8Array(256);\nfor(let q = 0; q < 256; q++){\n    _utf8len[q] = q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1;\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n// convert string to array (typed, when possible)\nvar string2buf = (str)=>{\n    if (typeof TextEncoder === \"function\" && TextEncoder.prototype.encode) {\n        return new TextEncoder().encode(str);\n    }\n    let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n    // count binary size\n    for(m_pos = 0; m_pos < str_len; m_pos++){\n        c = str.charCodeAt(m_pos);\n        if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {\n            c2 = str.charCodeAt(m_pos + 1);\n            if ((c2 & 0xfc00) === 0xdc00) {\n                c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);\n                m_pos++;\n            }\n        }\n        buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n    }\n    // allocate buffer\n    buf = new Uint8Array(buf_len);\n    // convert\n    for(i = 0, m_pos = 0; i < buf_len; m_pos++){\n        c = str.charCodeAt(m_pos);\n        if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {\n            c2 = str.charCodeAt(m_pos + 1);\n            if ((c2 & 0xfc00) === 0xdc00) {\n                c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);\n                m_pos++;\n            }\n        }\n        if (c < 0x80) {\n            /* one byte */ buf[i++] = c;\n        } else if (c < 0x800) {\n            /* two bytes */ buf[i++] = 0xC0 | c >>> 6;\n            buf[i++] = 0x80 | c & 0x3f;\n        } else if (c < 0x10000) {\n            /* three bytes */ buf[i++] = 0xE0 | c >>> 12;\n            buf[i++] = 0x80 | c >>> 6 & 0x3f;\n            buf[i++] = 0x80 | c & 0x3f;\n        } else {\n            /* four bytes */ buf[i++] = 0xf0 | c >>> 18;\n            buf[i++] = 0x80 | c >>> 12 & 0x3f;\n            buf[i++] = 0x80 | c >>> 6 & 0x3f;\n            buf[i++] = 0x80 | c & 0x3f;\n        }\n    }\n    return buf;\n};\n// Helper\nconst buf2binstring = (buf, len)=>{\n    // On Chrome, the arguments in a function call that are allowed is `65534`.\n    // If the length of the buffer is smaller than that, we can use this optimization,\n    // otherwise we will take a slower path.\n    if (len < 65534) {\n        if (buf.subarray && STR_APPLY_UIA_OK) {\n            return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n        }\n    }\n    let result = \"\";\n    for(let i = 0; i < len; i++){\n        result += String.fromCharCode(buf[i]);\n    }\n    return result;\n};\n// convert array to string\nvar buf2string = (buf, max)=>{\n    const len = max || buf.length;\n    if (typeof TextDecoder === \"function\" && TextDecoder.prototype.decode) {\n        return new TextDecoder().decode(buf.subarray(0, max));\n    }\n    let i, out;\n    // Reserve max possible length (2 words per char)\n    // NB: by unknown reasons, Array is significantly faster for\n    //     String.fromCharCode.apply than Uint16Array.\n    const utf16buf = new Array(len * 2);\n    for(out = 0, i = 0; i < len;){\n        let c = buf[i++];\n        // quick process ascii\n        if (c < 0x80) {\n            utf16buf[out++] = c;\n            continue;\n        }\n        let c_len = _utf8len[c];\n        // skip 5 & 6 byte codes\n        if (c_len > 4) {\n            utf16buf[out++] = 0xfffd;\n            i += c_len - 1;\n            continue;\n        }\n        // apply mask on first byte\n        c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n        // join the rest\n        while(c_len > 1 && i < len){\n            c = c << 6 | buf[i++] & 0x3f;\n            c_len--;\n        }\n        // terminated by end of string?\n        if (c_len > 1) {\n            utf16buf[out++] = 0xfffd;\n            continue;\n        }\n        if (c < 0x10000) {\n            utf16buf[out++] = c;\n        } else {\n            c -= 0x10000;\n            utf16buf[out++] = 0xd800 | c >> 10 & 0x3ff;\n            utf16buf[out++] = 0xdc00 | c & 0x3ff;\n        }\n    }\n    return buf2binstring(utf16buf, out);\n};\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nvar utf8border = (buf, max)=>{\n    max = max || buf.length;\n    if (max > buf.length) {\n        max = buf.length;\n    }\n    // go back from last position, until start of sequence found\n    let pos = max - 1;\n    while(pos >= 0 && (buf[pos] & 0xC0) === 0x80){\n        pos--;\n    }\n    // Very small and broken sequence,\n    // return max, because we should return something anyway.\n    if (pos < 0) {\n        return max;\n    }\n    // If we came to start of buffer - that means buffer is too small,\n    // return max too.\n    if (pos === 0) {\n        return max;\n    }\n    return pos + _utf8len[buf[pos]] > max ? pos : max;\n};\nvar strings = {\n    string2buf: string2buf,\n    buf2string: buf2string,\n    utf8border: utf8border\n};\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nfunction ZStream() {\n    /* next input byte */ this.input = null; // JS specific, because we have no pointers\n    this.next_in = 0;\n    /* number of bytes available at input */ this.avail_in = 0;\n    /* total number of input bytes read so far */ this.total_in = 0;\n    /* next output byte should be put there */ this.output = null; // JS specific, because we have no pointers\n    this.next_out = 0;\n    /* remaining free space at output */ this.avail_out = 0;\n    /* total number of bytes output so far */ this.total_out = 0;\n    /* last error message, NULL if no error */ this.msg = \"\" /*Z_NULL*/ ;\n    /* not visible by applications */ this.state = null;\n    /* best guess about the data type: binary or text */ this.data_type = 2 /*Z_UNKNOWN*/ ;\n    /* adler32 value of the uncompressed data */ this.adler = 0;\n}\n_c5 = ZStream;\nvar zstream = ZStream;\nconst toString$1 = Object.prototype.toString;\n/* Public constants ==========================================================*/ /* ===========================================================================*/ const { Z_NO_FLUSH: Z_NO_FLUSH$1, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH: Z_FINISH$2, Z_OK: Z_OK$2, Z_STREAM_END: Z_STREAM_END$2, Z_DEFAULT_COMPRESSION, Z_DEFAULT_STRATEGY, Z_DEFLATED: Z_DEFLATED$1 } = constants$2;\n/* ===========================================================================*/ /**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/ /* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/ /**\n * Deflate.result -> Uint8Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param).\n **/ /**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/ /**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/ /**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/ function Deflate$1(options) {\n    this.options = common.assign({\n        level: Z_DEFAULT_COMPRESSION,\n        method: Z_DEFLATED$1,\n        chunkSize: 16384,\n        windowBits: 15,\n        memLevel: 8,\n        strategy: Z_DEFAULT_STRATEGY\n    }, options || {});\n    let opt = this.options;\n    if (opt.raw && opt.windowBits > 0) {\n        opt.windowBits = -opt.windowBits;\n    } else if (opt.gzip && opt.windowBits > 0 && opt.windowBits < 16) {\n        opt.windowBits += 16;\n    }\n    this.err = 0; // error code, if happens (0 = Z_OK)\n    this.msg = \"\"; // error message\n    this.ended = false; // used to avoid multiple onEnd() calls\n    this.chunks = []; // chunks of compressed data\n    this.strm = new zstream();\n    this.strm.avail_out = 0;\n    let status = deflate_1$2.deflateInit2(this.strm, opt.level, opt.method, opt.windowBits, opt.memLevel, opt.strategy);\n    if (status !== Z_OK$2) {\n        throw new Error(messages[status]);\n    }\n    if (opt.header) {\n        deflate_1$2.deflateSetHeader(this.strm, opt.header);\n    }\n    if (opt.dictionary) {\n        let dict;\n        // Convert data if needed\n        if (typeof opt.dictionary === \"string\") {\n            // If we need to compress text, change encoding to utf8.\n            dict = strings.string2buf(opt.dictionary);\n        } else if (toString$1.call(opt.dictionary) === \"[object ArrayBuffer]\") {\n            dict = new Uint8Array(opt.dictionary);\n        } else {\n            dict = opt.dictionary;\n        }\n        status = deflate_1$2.deflateSetDictionary(this.strm, dict);\n        if (status !== Z_OK$2) {\n            throw new Error(messages[status]);\n        }\n        this._dict_set = true;\n    }\n}\n_c6 = Deflate$1;\n/**\n * Deflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must\n * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending\n * buffers and call [[Deflate#onEnd]].\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/ Deflate$1.prototype.push = function(data, flush_mode) {\n    const strm = this.strm;\n    const chunkSize = this.options.chunkSize;\n    let status, _flush_mode;\n    if (this.ended) {\n        return false;\n    }\n    if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n    else _flush_mode = flush_mode === true ? Z_FINISH$2 : Z_NO_FLUSH$1;\n    // Convert data if needed\n    if (typeof data === \"string\") {\n        // If we need to compress text, change encoding to utf8.\n        strm.input = strings.string2buf(data);\n    } else if (toString$1.call(data) === \"[object ArrayBuffer]\") {\n        strm.input = new Uint8Array(data);\n    } else {\n        strm.input = data;\n    }\n    strm.next_in = 0;\n    strm.avail_in = strm.input.length;\n    for(;;){\n        if (strm.avail_out === 0) {\n            strm.output = new Uint8Array(chunkSize);\n            strm.next_out = 0;\n            strm.avail_out = chunkSize;\n        }\n        // Make sure avail_out > 6 to avoid repeating markers\n        if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {\n            this.onData(strm.output.subarray(0, strm.next_out));\n            strm.avail_out = 0;\n            continue;\n        }\n        status = deflate_1$2.deflate(strm, _flush_mode);\n        // Ended => flush and finish\n        if (status === Z_STREAM_END$2) {\n            if (strm.next_out > 0) {\n                this.onData(strm.output.subarray(0, strm.next_out));\n            }\n            status = deflate_1$2.deflateEnd(this.strm);\n            this.onEnd(status);\n            this.ended = true;\n            return status === Z_OK$2;\n        }\n        // Flush if out buffer full\n        if (strm.avail_out === 0) {\n            this.onData(strm.output);\n            continue;\n        }\n        // Flush if requested and has data\n        if (_flush_mode > 0 && strm.next_out > 0) {\n            this.onData(strm.output.subarray(0, strm.next_out));\n            strm.avail_out = 0;\n            continue;\n        }\n        if (strm.avail_in === 0) break;\n    }\n    return true;\n};\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array): output data.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/ Deflate$1.prototype.onData = function(chunk) {\n    this.chunks.push(chunk);\n};\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/ Deflate$1.prototype.onEnd = function(status) {\n    // On success - join\n    if (status === Z_OK$2) {\n        this.result = common.flattenChunks(this.chunks);\n    }\n    this.chunks = [];\n    this.err = status;\n    this.msg = this.strm.msg;\n};\n/**\n * deflate(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/ function deflate$1(input, options) {\n    const deflator = new Deflate$1(options);\n    deflator.push(input, true);\n    // That will never happens, if you don't cheat with options :)\n    if (deflator.err) {\n        throw deflator.msg || messages[deflator.err];\n    }\n    return deflator.result;\n}\n/**\n * deflateRaw(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/ function deflateRaw$1(input, options) {\n    options = options || {};\n    options.raw = true;\n    return deflate$1(input, options);\n}\n/**\n * gzip(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/ function gzip$1(input, options) {\n    options = options || {};\n    options.gzip = true;\n    return deflate$1(input, options);\n}\nvar Deflate_1$1 = Deflate$1;\nvar deflate_2 = deflate$1;\nvar deflateRaw_1$1 = deflateRaw$1;\nvar gzip_1$1 = gzip$1;\nvar constants$1 = constants$2;\nvar deflate_1$1 = {\n    Deflate: Deflate_1$1,\n    deflate: deflate_2,\n    deflateRaw: deflateRaw_1$1,\n    gzip: gzip_1$1,\n    constants: constants$1\n};\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n// See state defs from inflate.js\nconst BAD$1 = 16209; /* got a data error -- remain here until reset */ \nconst TYPE$1 = 16191; /* i: waiting for type bits, including last-flag bit */ \n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */ var inffast = function inflate_fast(strm, start) {\n    let _in; /* local strm.input */ \n    let last; /* have enough input while in < last */ \n    let _out; /* local strm.output */ \n    let beg; /* inflate()'s initial strm.output */ \n    let end; /* while out < end, enough space available */ \n    //#ifdef INFLATE_STRICT\n    let dmax; /* maximum distance from zlib header */ \n    //#endif\n    let wsize; /* window size or zero if not using window */ \n    let whave; /* valid bytes in the window */ \n    let wnext; /* window write index */ \n    // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n    let s_window; /* allocated sliding window, if wsize != 0 */ \n    let hold; /* local strm.hold */ \n    let bits; /* local strm.bits */ \n    let lcode; /* local strm.lencode */ \n    let dcode; /* local strm.distcode */ \n    let lmask; /* mask for first level of length codes */ \n    let dmask; /* mask for first level of distance codes */ \n    let here; /* retrieved table entry */ \n    let op; /* code bits, operation, extra bits, or */ \n    /*  window position, window bytes to copy */ let len; /* match length, unused bytes */ \n    let dist; /* match distance */ \n    let from; /* where to copy match from */ \n    let from_source;\n    let input, output; // JS specific, because we have no pointers\n    /* copy state to local variables */ const state = strm.state;\n    //here = state.here;\n    _in = strm.next_in;\n    input = strm.input;\n    last = _in + (strm.avail_in - 5);\n    _out = strm.next_out;\n    output = strm.output;\n    beg = _out - (start - strm.avail_out);\n    end = _out + (strm.avail_out - 257);\n    //#ifdef INFLATE_STRICT\n    dmax = state.dmax;\n    //#endif\n    wsize = state.wsize;\n    whave = state.whave;\n    wnext = state.wnext;\n    s_window = state.window;\n    hold = state.hold;\n    bits = state.bits;\n    lcode = state.lencode;\n    dcode = state.distcode;\n    lmask = (1 << state.lenbits) - 1;\n    dmask = (1 << state.distbits) - 1;\n    /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */ top: do {\n        if (bits < 15) {\n            hold += input[_in++] << bits;\n            bits += 8;\n            hold += input[_in++] << bits;\n            bits += 8;\n        }\n        here = lcode[hold & lmask];\n        dolen: for(;;){\n            op = here >>> 24 /*here.bits*/ ;\n            hold >>>= op;\n            bits -= op;\n            op = here >>> 16 & 0xff /*here.op*/ ;\n            if (op === 0) {\n                //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n                //        \"inflate:         literal '%c'\\n\" :\n                //        \"inflate:         literal 0x%02x\\n\", here.val));\n                output[_out++] = here & 0xffff /*here.val*/ ;\n            } else if (op & 16) {\n                len = here & 0xffff /*here.val*/ ;\n                op &= 15; /* number of extra bits */ \n                if (op) {\n                    if (bits < op) {\n                        hold += input[_in++] << bits;\n                        bits += 8;\n                    }\n                    len += hold & (1 << op) - 1;\n                    hold >>>= op;\n                    bits -= op;\n                }\n                //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n                if (bits < 15) {\n                    hold += input[_in++] << bits;\n                    bits += 8;\n                    hold += input[_in++] << bits;\n                    bits += 8;\n                }\n                here = dcode[hold & dmask];\n                dodist: for(;;){\n                    op = here >>> 24 /*here.bits*/ ;\n                    hold >>>= op;\n                    bits -= op;\n                    op = here >>> 16 & 0xff /*here.op*/ ;\n                    if (op & 16) {\n                        dist = here & 0xffff /*here.val*/ ;\n                        op &= 15; /* number of extra bits */ \n                        if (bits < op) {\n                            hold += input[_in++] << bits;\n                            bits += 8;\n                            if (bits < op) {\n                                hold += input[_in++] << bits;\n                                bits += 8;\n                            }\n                        }\n                        dist += hold & (1 << op) - 1;\n                        //#ifdef INFLATE_STRICT\n                        if (dist > dmax) {\n                            strm.msg = \"invalid distance too far back\";\n                            state.mode = BAD$1;\n                            break top;\n                        }\n                        //#endif\n                        hold >>>= op;\n                        bits -= op;\n                        //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n                        op = _out - beg; /* max distance in output */ \n                        if (dist > op) {\n                            op = dist - op; /* distance back in window */ \n                            if (op > whave) {\n                                if (state.sane) {\n                                    strm.msg = \"invalid distance too far back\";\n                                    state.mode = BAD$1;\n                                    break top;\n                                }\n                            // (!) This block is disabled in zlib defaults,\n                            // don't enable it for binary compatibility\n                            //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n                            //                if (len <= op - whave) {\n                            //                  do {\n                            //                    output[_out++] = 0;\n                            //                  } while (--len);\n                            //                  continue top;\n                            //                }\n                            //                len -= op - whave;\n                            //                do {\n                            //                  output[_out++] = 0;\n                            //                } while (--op > whave);\n                            //                if (op === 0) {\n                            //                  from = _out - dist;\n                            //                  do {\n                            //                    output[_out++] = output[from++];\n                            //                  } while (--len);\n                            //                  continue top;\n                            //                }\n                            //#endif\n                            }\n                            from = 0; // window index\n                            from_source = s_window;\n                            if (wnext === 0) {\n                                from += wsize - op;\n                                if (op < len) {\n                                    len -= op;\n                                    do {\n                                        output[_out++] = s_window[from++];\n                                    }while (--op);\n                                    from = _out - dist; /* rest from output */ \n                                    from_source = output;\n                                }\n                            } else if (wnext < op) {\n                                from += wsize + wnext - op;\n                                op -= wnext;\n                                if (op < len) {\n                                    len -= op;\n                                    do {\n                                        output[_out++] = s_window[from++];\n                                    }while (--op);\n                                    from = 0;\n                                    if (wnext < len) {\n                                        op = wnext;\n                                        len -= op;\n                                        do {\n                                            output[_out++] = s_window[from++];\n                                        }while (--op);\n                                        from = _out - dist; /* rest from output */ \n                                        from_source = output;\n                                    }\n                                }\n                            } else {\n                                from += wnext - op;\n                                if (op < len) {\n                                    len -= op;\n                                    do {\n                                        output[_out++] = s_window[from++];\n                                    }while (--op);\n                                    from = _out - dist; /* rest from output */ \n                                    from_source = output;\n                                }\n                            }\n                            while(len > 2){\n                                output[_out++] = from_source[from++];\n                                output[_out++] = from_source[from++];\n                                output[_out++] = from_source[from++];\n                                len -= 3;\n                            }\n                            if (len) {\n                                output[_out++] = from_source[from++];\n                                if (len > 1) {\n                                    output[_out++] = from_source[from++];\n                                }\n                            }\n                        } else {\n                            from = _out - dist; /* copy direct from output */ \n                            do {\n                                output[_out++] = output[from++];\n                                output[_out++] = output[from++];\n                                output[_out++] = output[from++];\n                                len -= 3;\n                            }while (len > 2);\n                            if (len) {\n                                output[_out++] = output[from++];\n                                if (len > 1) {\n                                    output[_out++] = output[from++];\n                                }\n                            }\n                        }\n                    } else if ((op & 64) === 0) {\n                        here = dcode[(here & 0xffff) + (hold & (1 << op) - 1)];\n                        continue dodist;\n                    } else {\n                        strm.msg = \"invalid distance code\";\n                        state.mode = BAD$1;\n                        break top;\n                    }\n                    break; // need to emulate goto via \"continue\"\n                }\n            } else if ((op & 64) === 0) {\n                here = lcode[(here & 0xffff) + (hold & (1 << op) - 1)];\n                continue dolen;\n            } else if (op & 32) {\n                //Tracevv((stderr, \"inflate:         end of block\\n\"));\n                state.mode = TYPE$1;\n                break top;\n            } else {\n                strm.msg = \"invalid literal/length code\";\n                state.mode = BAD$1;\n                break top;\n            }\n            break; // need to emulate goto via \"continue\"\n        }\n    }while (_in < last && _out < end);\n    /* return unused bytes (on entry, bits < 8, so in won't go too far back) */ len = bits >> 3;\n    _in -= len;\n    bits -= len << 3;\n    hold &= (1 << bits) - 1;\n    /* update state and return */ strm.next_in = _in;\n    strm.next_out = _out;\n    strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);\n    strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);\n    state.hold = hold;\n    state.bits = bits;\n    return;\n};\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nconst MAXBITS = 15;\nconst ENOUGH_LENS$1 = 852;\nconst ENOUGH_DISTS$1 = 592;\n//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\nconst CODES$1 = 0;\nconst LENS$1 = 1;\nconst DISTS$1 = 2;\nconst lbase = new Uint16Array([\n    /* Length codes 257..285 base */ 3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    13,\n    15,\n    17,\n    19,\n    23,\n    27,\n    31,\n    35,\n    43,\n    51,\n    59,\n    67,\n    83,\n    99,\n    115,\n    131,\n    163,\n    195,\n    227,\n    258,\n    0,\n    0\n]);\nconst lext = new Uint8Array([\n    /* Length codes 257..285 extra */ 16,\n    16,\n    16,\n    16,\n    16,\n    16,\n    16,\n    16,\n    17,\n    17,\n    17,\n    17,\n    18,\n    18,\n    18,\n    18,\n    19,\n    19,\n    19,\n    19,\n    20,\n    20,\n    20,\n    20,\n    21,\n    21,\n    21,\n    21,\n    16,\n    72,\n    78\n]);\nconst dbase = new Uint16Array([\n    /* Distance codes 0..29 base */ 1,\n    2,\n    3,\n    4,\n    5,\n    7,\n    9,\n    13,\n    17,\n    25,\n    33,\n    49,\n    65,\n    97,\n    129,\n    193,\n    257,\n    385,\n    513,\n    769,\n    1025,\n    1537,\n    2049,\n    3073,\n    4097,\n    6145,\n    8193,\n    12289,\n    16385,\n    24577,\n    0,\n    0\n]);\nconst dext = new Uint8Array([\n    /* Distance codes 0..29 extra */ 16,\n    16,\n    16,\n    16,\n    17,\n    17,\n    18,\n    18,\n    19,\n    19,\n    20,\n    20,\n    21,\n    21,\n    22,\n    22,\n    23,\n    23,\n    24,\n    24,\n    25,\n    25,\n    26,\n    26,\n    27,\n    27,\n    28,\n    28,\n    29,\n    29,\n    64,\n    64\n]);\nconst inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts)=>{\n    const bits = opts.bits;\n    //here = opts.here; /* table entry for duplication */\n    let len = 0; /* a code's length in bits */ \n    let sym = 0; /* index of code symbols */ \n    let min = 0, max = 0; /* minimum and maximum code lengths */ \n    let root = 0; /* number of index bits for root table */ \n    let curr = 0; /* number of index bits for current table */ \n    let drop = 0; /* code bits to drop for sub-table */ \n    let left = 0; /* number of prefix codes available */ \n    let used = 0; /* code entries in table used */ \n    let huff = 0; /* Huffman code */ \n    let incr; /* for incrementing code, index */ \n    let fill; /* index for replicating entries */ \n    let low; /* low bits for current root entry */ \n    let mask; /* mask for low root bits */ \n    let next; /* next available space in table */ \n    let base = null; /* base value table to use */ \n    //  let shoextra;    /* extra bits table to use */\n    let match; /* use base and extra for symbol >= match */ \n    const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n    const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n    let extra = null;\n    let here_bits, here_op, here_val;\n    /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */ /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */ for(len = 0; len <= MAXBITS; len++){\n        count[len] = 0;\n    }\n    for(sym = 0; sym < codes; sym++){\n        count[lens[lens_index + sym]]++;\n    }\n    /* bound code lengths, force root to be within code lengths */ root = bits;\n    for(max = MAXBITS; max >= 1; max--){\n        if (count[max] !== 0) {\n            break;\n        }\n    }\n    if (root > max) {\n        root = max;\n    }\n    if (max === 0) {\n        //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n        //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n        //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n        table[table_index++] = 1 << 24 | 64 << 16 | 0;\n        //table.op[opts.table_index] = 64;\n        //table.bits[opts.table_index] = 1;\n        //table.val[opts.table_index++] = 0;\n        table[table_index++] = 1 << 24 | 64 << 16 | 0;\n        opts.bits = 1;\n        return 0; /* no symbols, but wait for decoding to report error */ \n    }\n    for(min = 1; min < max; min++){\n        if (count[min] !== 0) {\n            break;\n        }\n    }\n    if (root < min) {\n        root = min;\n    }\n    /* check for an over-subscribed or incomplete set of lengths */ left = 1;\n    for(len = 1; len <= MAXBITS; len++){\n        left <<= 1;\n        left -= count[len];\n        if (left < 0) {\n            return -1;\n        } /* over-subscribed */ \n    }\n    if (left > 0 && (type === CODES$1 || max !== 1)) {\n        return -1; /* incomplete set */ \n    }\n    /* generate offsets into symbol table for each length for sorting */ offs[1] = 0;\n    for(len = 1; len < MAXBITS; len++){\n        offs[len + 1] = offs[len] + count[len];\n    }\n    /* sort symbols by length, by symbol order within each length */ for(sym = 0; sym < codes; sym++){\n        if (lens[lens_index + sym] !== 0) {\n            work[offs[lens[lens_index + sym]]++] = sym;\n        }\n    }\n    /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */ /* set up for code type */ // poor man optimization - use if-else instead of switch,\n    // to avoid deopts in old v8\n    if (type === CODES$1) {\n        base = extra = work; /* dummy value--not used */ \n        match = 20;\n    } else if (type === LENS$1) {\n        base = lbase;\n        extra = lext;\n        match = 257;\n    } else {\n        base = dbase;\n        extra = dext;\n        match = 0;\n    }\n    /* initialize opts for loop */ huff = 0; /* starting code */ \n    sym = 0; /* starting code symbol */ \n    len = min; /* starting code length */ \n    next = table_index; /* current table to fill in */ \n    curr = root; /* current table index bits */ \n    drop = 0; /* current bits to drop from code for index */ \n    low = -1; /* trigger new sub-table when len > root */ \n    used = 1 << root; /* use root table entries */ \n    mask = used - 1; /* mask for comparing low */ \n    /* check available table space */ if (type === LENS$1 && used > ENOUGH_LENS$1 || type === DISTS$1 && used > ENOUGH_DISTS$1) {\n        return 1;\n    }\n    /* process all codes and make table entries */ for(;;){\n        /* create table entry */ here_bits = len - drop;\n        if (work[sym] + 1 < match) {\n            here_op = 0;\n            here_val = work[sym];\n        } else if (work[sym] >= match) {\n            here_op = extra[work[sym] - match];\n            here_val = base[work[sym] - match];\n        } else {\n            here_op = 32 + 64; /* end of block */ \n            here_val = 0;\n        }\n        /* replicate for those indices with low len bits equal to huff */ incr = 1 << len - drop;\n        fill = 1 << curr;\n        min = fill; /* save offset to next table */ \n        do {\n            fill -= incr;\n            table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;\n        }while (fill !== 0);\n        /* backwards increment the len-bit code huff */ incr = 1 << len - 1;\n        while(huff & incr){\n            incr >>= 1;\n        }\n        if (incr !== 0) {\n            huff &= incr - 1;\n            huff += incr;\n        } else {\n            huff = 0;\n        }\n        /* go to next symbol, update count, len */ sym++;\n        if (--count[len] === 0) {\n            if (len === max) {\n                break;\n            }\n            len = lens[lens_index + work[sym]];\n        }\n        /* create new sub-table if needed */ if (len > root && (huff & mask) !== low) {\n            /* if first time, transition to sub-tables */ if (drop === 0) {\n                drop = root;\n            }\n            /* increment past last table */ next += min; /* here min is 1 << curr */ \n            /* determine length of next table */ curr = len - drop;\n            left = 1 << curr;\n            while(curr + drop < max){\n                left -= count[curr + drop];\n                if (left <= 0) {\n                    break;\n                }\n                curr++;\n                left <<= 1;\n            }\n            /* check for enough space */ used += 1 << curr;\n            if (type === LENS$1 && used > ENOUGH_LENS$1 || type === DISTS$1 && used > ENOUGH_DISTS$1) {\n                return 1;\n            }\n            /* point entry in root table to sub-table */ low = huff & mask;\n            /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/ table[low] = root << 24 | curr << 16 | next - table_index | 0;\n        }\n    }\n    /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */ if (huff !== 0) {\n        //table.op[next + huff] = 64;            /* invalid code marker */\n        //table.bits[next + huff] = len - drop;\n        //table.val[next + huff] = 0;\n        table[next + huff] = len - drop << 24 | 64 << 16 | 0;\n    }\n    /* set return parameters */ //opts.table_index += used;\n    opts.bits = root;\n    return 0;\n};\nvar inftrees = inflate_table;\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n/* Public constants ==========================================================*/ /* ===========================================================================*/ const { Z_FINISH: Z_FINISH$1, Z_BLOCK, Z_TREES, Z_OK: Z_OK$1, Z_STREAM_END: Z_STREAM_END$1, Z_NEED_DICT: Z_NEED_DICT$1, Z_STREAM_ERROR: Z_STREAM_ERROR$1, Z_DATA_ERROR: Z_DATA_ERROR$1, Z_MEM_ERROR: Z_MEM_ERROR$1, Z_BUF_ERROR, Z_DEFLATED } = constants$2;\n/* STATES ====================================================================*/ /* ===========================================================================*/ const HEAD = 16180; /* i: waiting for magic header */ \nconst FLAGS = 16181; /* i: waiting for method and flags (gzip) */ \nconst TIME = 16182; /* i: waiting for modification time (gzip) */ \nconst OS = 16183; /* i: waiting for extra flags and operating system (gzip) */ \nconst EXLEN = 16184; /* i: waiting for extra length (gzip) */ \nconst EXTRA = 16185; /* i: waiting for extra bytes (gzip) */ \nconst NAME = 16186; /* i: waiting for end of file name (gzip) */ \nconst COMMENT = 16187; /* i: waiting for end of comment (gzip) */ \nconst HCRC = 16188; /* i: waiting for header crc (gzip) */ \nconst DICTID = 16189; /* i: waiting for dictionary check value */ \nconst DICT = 16190; /* waiting for inflateSetDictionary() call */ \nconst TYPE = 16191; /* i: waiting for type bits, including last-flag bit */ \nconst TYPEDO = 16192; /* i: same, but skip check to exit inflate on new block */ \nconst STORED = 16193; /* i: waiting for stored size (length and complement) */ \nconst COPY_ = 16194; /* i/o: same as COPY below, but only first time in */ \nconst COPY = 16195; /* i/o: waiting for input or output to copy stored block */ \nconst TABLE = 16196; /* i: waiting for dynamic block table lengths */ \nconst LENLENS = 16197; /* i: waiting for code length code lengths */ \nconst CODELENS = 16198; /* i: waiting for length/lit and distance code lengths */ \nconst LEN_ = 16199; /* i: same as LEN below, but only first time in */ \nconst LEN = 16200; /* i: waiting for length/lit/eob code */ \nconst LENEXT = 16201; /* i: waiting for length extra bits */ \nconst DIST = 16202; /* i: waiting for distance code */ \nconst DISTEXT = 16203; /* i: waiting for distance extra bits */ \nconst MATCH = 16204; /* o: waiting for output space to copy string */ \nconst LIT = 16205; /* o: waiting for output space to write literal */ \nconst CHECK = 16206; /* i: waiting for 32-bit check value */ \nconst LENGTH = 16207; /* i: waiting for 32-bit length (gzip) */ \nconst DONE = 16208; /* finished check, done -- remain here until reset */ \nconst BAD = 16209; /* got a data error -- remain here until reset */ \nconst MEM = 16210; /* got an inflate() memory error -- remain here until reset */ \nconst SYNC = 16211; /* looking for synchronization bytes to restart inflate() */ \n/* ===========================================================================*/ const ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */ const DEF_WBITS = MAX_WBITS;\nconst zswap32 = (q)=>{\n    return (q >>> 24 & 0xff) + (q >>> 8 & 0xff00) + ((q & 0xff00) << 8) + ((q & 0xff) << 24);\n};\nfunction InflateState() {\n    this.strm = null; /* pointer back to this zlib stream */ \n    this.mode = 0; /* current inflate mode */ \n    this.last = false; /* true if processing last block */ \n    this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip,\n                                 bit 2 true to validate check value */ \n    this.havedict = false; /* true if dictionary provided */ \n    this.flags = 0; /* gzip header method and flags (0 if zlib), or\n                                 -1 if raw or no header yet */ \n    this.dmax = 0; /* zlib header max distance (INFLATE_STRICT) */ \n    this.check = 0; /* protected copy of check value */ \n    this.total = 0; /* protected copy of output count */ \n    // TODO: may be {}\n    this.head = null; /* where to save gzip header information */ \n    /* sliding window */ this.wbits = 0; /* log base 2 of requested window size */ \n    this.wsize = 0; /* window size or zero if not using window */ \n    this.whave = 0; /* valid bytes in the window */ \n    this.wnext = 0; /* window write index */ \n    this.window = null; /* allocated sliding window, if needed */ \n    /* bit accumulator */ this.hold = 0; /* input bit accumulator */ \n    this.bits = 0; /* number of bits in \"in\" */ \n    /* for string and stored block copying */ this.length = 0; /* literal or length of data to copy */ \n    this.offset = 0; /* distance back to copy string from */ \n    /* for table and code decoding */ this.extra = 0; /* extra bits needed */ \n    /* fixed and dynamic code tables */ this.lencode = null; /* starting table for length/literal codes */ \n    this.distcode = null; /* starting table for distance codes */ \n    this.lenbits = 0; /* index bits for lencode */ \n    this.distbits = 0; /* index bits for distcode */ \n    /* dynamic table building */ this.ncode = 0; /* number of code length code lengths */ \n    this.nlen = 0; /* number of length code lengths */ \n    this.ndist = 0; /* number of distance code lengths */ \n    this.have = 0; /* number of code lengths in lens[] */ \n    this.next = null; /* next available space in codes[] */ \n    this.lens = new Uint16Array(320); /* temporary storage for code lengths */ \n    this.work = new Uint16Array(288); /* work area for code table building */ \n    /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */ //this.codes = new Int32Array(ENOUGH);       /* space for code tables */\n    this.lendyn = null; /* dynamic table for length/literal codes (JS specific) */ \n    this.distdyn = null; /* dynamic table for distance codes (JS specific) */ \n    this.sane = 0; /* if false, allow invalid distance too far */ \n    this.back = 0; /* bits back of last unprocessed length/lit */ \n    this.was = 0; /* initial length of match */ \n}\n_c7 = InflateState;\nconst inflateStateCheck = (strm)=>{\n    if (!strm) {\n        return 1;\n    }\n    const state = strm.state;\n    if (!state || state.strm !== strm || state.mode < HEAD || state.mode > SYNC) {\n        return 1;\n    }\n    return 0;\n};\nconst inflateResetKeep = (strm)=>{\n    if (inflateStateCheck(strm)) {\n        return Z_STREAM_ERROR$1;\n    }\n    const state = strm.state;\n    strm.total_in = strm.total_out = state.total = 0;\n    strm.msg = \"\"; /*Z_NULL*/ \n    if (state.wrap) {\n        strm.adler = state.wrap & 1;\n    }\n    state.mode = HEAD;\n    state.last = 0;\n    state.havedict = 0;\n    state.flags = -1;\n    state.dmax = 32768;\n    state.head = null /*Z_NULL*/ ;\n    state.hold = 0;\n    state.bits = 0;\n    //state.lencode = state.distcode = state.next = state.codes;\n    state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);\n    state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);\n    state.sane = 1;\n    state.back = -1;\n    //Tracev((stderr, \"inflate: reset\\n\"));\n    return Z_OK$1;\n};\nconst inflateReset = (strm)=>{\n    if (inflateStateCheck(strm)) {\n        return Z_STREAM_ERROR$1;\n    }\n    const state = strm.state;\n    state.wsize = 0;\n    state.whave = 0;\n    state.wnext = 0;\n    return inflateResetKeep(strm);\n};\nconst inflateReset2 = (strm, windowBits)=>{\n    let wrap;\n    /* get the state */ if (inflateStateCheck(strm)) {\n        return Z_STREAM_ERROR$1;\n    }\n    const state = strm.state;\n    /* extract wrap request from windowBits parameter */ if (windowBits < 0) {\n        wrap = 0;\n        windowBits = -windowBits;\n    } else {\n        wrap = (windowBits >> 4) + 5;\n        if (windowBits < 48) {\n            windowBits &= 15;\n        }\n    }\n    /* set number of window bits, free window if different */ if (windowBits && (windowBits < 8 || windowBits > 15)) {\n        return Z_STREAM_ERROR$1;\n    }\n    if (state.window !== null && state.wbits !== windowBits) {\n        state.window = null;\n    }\n    /* update state and reset the rest of it */ state.wrap = wrap;\n    state.wbits = windowBits;\n    return inflateReset(strm);\n};\nconst inflateInit2 = (strm, windowBits)=>{\n    if (!strm) {\n        return Z_STREAM_ERROR$1;\n    }\n    //strm.msg = Z_NULL;                 /* in case we return an error */\n    const state = new InflateState();\n    //if (state === Z_NULL) return Z_MEM_ERROR;\n    //Tracev((stderr, \"inflate: allocated\\n\"));\n    strm.state = state;\n    state.strm = strm;\n    state.window = null /*Z_NULL*/ ;\n    state.mode = HEAD; /* to pass state test in inflateReset2() */ \n    const ret = inflateReset2(strm, windowBits);\n    if (ret !== Z_OK$1) {\n        strm.state = null /*Z_NULL*/ ;\n    }\n    return ret;\n};\nconst inflateInit = (strm)=>{\n    return inflateInit2(strm, DEF_WBITS);\n};\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */ let virgin = true;\nlet lenfix, distfix; // We have no pointers in JS, so keep tables separate\nconst fixedtables = (state)=>{\n    /* build fixed huffman tables if first call (may not be thread safe) */ if (virgin) {\n        lenfix = new Int32Array(512);\n        distfix = new Int32Array(32);\n        /* literal/length table */ let sym = 0;\n        while(sym < 144){\n            state.lens[sym++] = 8;\n        }\n        while(sym < 256){\n            state.lens[sym++] = 9;\n        }\n        while(sym < 280){\n            state.lens[sym++] = 7;\n        }\n        while(sym < 288){\n            state.lens[sym++] = 8;\n        }\n        inftrees(LENS, state.lens, 0, 288, lenfix, 0, state.work, {\n            bits: 9\n        });\n        /* distance table */ sym = 0;\n        while(sym < 32){\n            state.lens[sym++] = 5;\n        }\n        inftrees(DISTS, state.lens, 0, 32, distfix, 0, state.work, {\n            bits: 5\n        });\n        /* do this just once */ virgin = false;\n    }\n    state.lencode = lenfix;\n    state.lenbits = 9;\n    state.distcode = distfix;\n    state.distbits = 5;\n};\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */ const updatewindow = (strm, src, end, copy)=>{\n    let dist;\n    const state = strm.state;\n    /* if it hasn't been done already, allocate space for the window */ if (state.window === null) {\n        state.wsize = 1 << state.wbits;\n        state.wnext = 0;\n        state.whave = 0;\n        state.window = new Uint8Array(state.wsize);\n    }\n    /* copy state->wsize or less output bytes into the circular window */ if (copy >= state.wsize) {\n        state.window.set(src.subarray(end - state.wsize, end), 0);\n        state.wnext = 0;\n        state.whave = state.wsize;\n    } else {\n        dist = state.wsize - state.wnext;\n        if (dist > copy) {\n            dist = copy;\n        }\n        //zmemcpy(state->window + state->wnext, end - copy, dist);\n        state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);\n        copy -= dist;\n        if (copy) {\n            //zmemcpy(state->window, end - copy, copy);\n            state.window.set(src.subarray(end - copy, end), 0);\n            state.wnext = copy;\n            state.whave = state.wsize;\n        } else {\n            state.wnext += dist;\n            if (state.wnext === state.wsize) {\n                state.wnext = 0;\n            }\n            if (state.whave < state.wsize) {\n                state.whave += dist;\n            }\n        }\n    }\n    return 0;\n};\nconst inflate$2 = (strm, flush)=>{\n    let state;\n    let input, output; // input/output buffers\n    let next; /* next input INDEX */ \n    let put; /* next output INDEX */ \n    let have, left; /* available input and output */ \n    let hold; /* bit buffer */ \n    let bits; /* bits in bit buffer */ \n    let _in, _out; /* save starting available input and output */ \n    let copy; /* number of stored or match bytes to copy */ \n    let from; /* where to copy match bytes from */ \n    let from_source;\n    let here = 0; /* current decoding table entry */ \n    let here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n    //let last;                   /* parent table entry */\n    let last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n    let len; /* length to copy for repeats, bits to drop */ \n    let ret; /* return code */ \n    const hbuf = new Uint8Array(4); /* buffer for gzip header crc calculation */ \n    let opts;\n    let n; // temporary variable for NEED_BITS\n    const order = /* permutation of code lengths */ new Uint8Array([\n        16,\n        17,\n        18,\n        0,\n        8,\n        7,\n        9,\n        6,\n        10,\n        5,\n        11,\n        4,\n        12,\n        3,\n        13,\n        2,\n        14,\n        1,\n        15\n    ]);\n    if (inflateStateCheck(strm) || !strm.output || !strm.input && strm.avail_in !== 0) {\n        return Z_STREAM_ERROR$1;\n    }\n    state = strm.state;\n    if (state.mode === TYPE) {\n        state.mode = TYPEDO;\n    } /* skip check */ \n    //--- LOAD() ---\n    put = strm.next_out;\n    output = strm.output;\n    left = strm.avail_out;\n    next = strm.next_in;\n    input = strm.input;\n    have = strm.avail_in;\n    hold = state.hold;\n    bits = state.bits;\n    //---\n    _in = have;\n    _out = left;\n    ret = Z_OK$1;\n    inf_leave: for(;;){\n        switch(state.mode){\n            case HEAD:\n                if (state.wrap === 0) {\n                    state.mode = TYPEDO;\n                    break;\n                }\n                //=== NEEDBITS(16);\n                while(bits < 16){\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                if (state.wrap & 2 && hold === 0x8b1f) {\n                    if (state.wbits === 0) {\n                        state.wbits = 15;\n                    }\n                    state.check = 0 /*crc32(0L, Z_NULL, 0)*/ ;\n                    //=== CRC2(state.check, hold);\n                    hbuf[0] = hold & 0xff;\n                    hbuf[1] = hold >>> 8 & 0xff;\n                    state.check = crc32_1(state.check, hbuf, 2, 0);\n                    //===//\n                    //=== INITBITS();\n                    hold = 0;\n                    bits = 0;\n                    //===//\n                    state.mode = FLAGS;\n                    break;\n                }\n                if (state.head) {\n                    state.head.done = false;\n                }\n                if (!(state.wrap & 1) || /* check if zlib header allowed */ (((hold & 0xff) << 8) + (hold >> 8)) % 31) {\n                    strm.msg = \"incorrect header check\";\n                    state.mode = BAD;\n                    break;\n                }\n                if ((hold & 0x0f) !== Z_DEFLATED) {\n                    strm.msg = \"unknown compression method\";\n                    state.mode = BAD;\n                    break;\n                }\n                //--- DROPBITS(4) ---//\n                hold >>>= 4;\n                bits -= 4;\n                //---//\n                len = (hold & 0x0f) + 8;\n                if (state.wbits === 0) {\n                    state.wbits = len;\n                }\n                if (len > 15 || len > state.wbits) {\n                    strm.msg = \"invalid window size\";\n                    state.mode = BAD;\n                    break;\n                }\n                // !!! pako patch. Force use `options.windowBits` if passed.\n                // Required to always use max window size by default.\n                state.dmax = 1 << state.wbits;\n                //state.dmax = 1 << len;\n                state.flags = 0; /* indicate zlib header */ \n                //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n                strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/ ;\n                state.mode = hold & 0x200 ? DICTID : TYPE;\n                //=== INITBITS();\n                hold = 0;\n                bits = 0;\n                break;\n            case FLAGS:\n                //=== NEEDBITS(16); */\n                while(bits < 16){\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                state.flags = hold;\n                if ((state.flags & 0xff) !== Z_DEFLATED) {\n                    strm.msg = \"unknown compression method\";\n                    state.mode = BAD;\n                    break;\n                }\n                if (state.flags & 0xe000) {\n                    strm.msg = \"unknown header flags set\";\n                    state.mode = BAD;\n                    break;\n                }\n                if (state.head) {\n                    state.head.text = hold >> 8 & 1;\n                }\n                if (state.flags & 0x0200 && state.wrap & 4) {\n                    //=== CRC2(state.check, hold);\n                    hbuf[0] = hold & 0xff;\n                    hbuf[1] = hold >>> 8 & 0xff;\n                    state.check = crc32_1(state.check, hbuf, 2, 0);\n                //===//\n                }\n                //=== INITBITS();\n                hold = 0;\n                bits = 0;\n                //===//\n                state.mode = TIME;\n            /* falls through */ case TIME:\n                //=== NEEDBITS(32); */\n                while(bits < 32){\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                if (state.head) {\n                    state.head.time = hold;\n                }\n                if (state.flags & 0x0200 && state.wrap & 4) {\n                    //=== CRC4(state.check, hold)\n                    hbuf[0] = hold & 0xff;\n                    hbuf[1] = hold >>> 8 & 0xff;\n                    hbuf[2] = hold >>> 16 & 0xff;\n                    hbuf[3] = hold >>> 24 & 0xff;\n                    state.check = crc32_1(state.check, hbuf, 4, 0);\n                //===\n                }\n                //=== INITBITS();\n                hold = 0;\n                bits = 0;\n                //===//\n                state.mode = OS;\n            /* falls through */ case OS:\n                //=== NEEDBITS(16); */\n                while(bits < 16){\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                if (state.head) {\n                    state.head.xflags = hold & 0xff;\n                    state.head.os = hold >> 8;\n                }\n                if (state.flags & 0x0200 && state.wrap & 4) {\n                    //=== CRC2(state.check, hold);\n                    hbuf[0] = hold & 0xff;\n                    hbuf[1] = hold >>> 8 & 0xff;\n                    state.check = crc32_1(state.check, hbuf, 2, 0);\n                //===//\n                }\n                //=== INITBITS();\n                hold = 0;\n                bits = 0;\n                //===//\n                state.mode = EXLEN;\n            /* falls through */ case EXLEN:\n                if (state.flags & 0x0400) {\n                    //=== NEEDBITS(16); */\n                    while(bits < 16){\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    //===//\n                    state.length = hold;\n                    if (state.head) {\n                        state.head.extra_len = hold;\n                    }\n                    if (state.flags & 0x0200 && state.wrap & 4) {\n                        //=== CRC2(state.check, hold);\n                        hbuf[0] = hold & 0xff;\n                        hbuf[1] = hold >>> 8 & 0xff;\n                        state.check = crc32_1(state.check, hbuf, 2, 0);\n                    //===//\n                    }\n                    //=== INITBITS();\n                    hold = 0;\n                    bits = 0;\n                //===//\n                } else if (state.head) {\n                    state.head.extra = null /*Z_NULL*/ ;\n                }\n                state.mode = EXTRA;\n            /* falls through */ case EXTRA:\n                if (state.flags & 0x0400) {\n                    copy = state.length;\n                    if (copy > have) {\n                        copy = have;\n                    }\n                    if (copy) {\n                        if (state.head) {\n                            len = state.head.extra_len - state.length;\n                            if (!state.head.extra) {\n                                // Use untyped array for more convenient processing later\n                                state.head.extra = new Uint8Array(state.head.extra_len);\n                            }\n                            state.head.extra.set(input.subarray(next, // extra field is limited to 65536 bytes\n                            // - no need for additional size check\n                            next + copy), /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/ len);\n                        //zmemcpy(state.head.extra + len, next,\n                        //        len + copy > state.head.extra_max ?\n                        //        state.head.extra_max - len : copy);\n                        }\n                        if (state.flags & 0x0200 && state.wrap & 4) {\n                            state.check = crc32_1(state.check, input, copy, next);\n                        }\n                        have -= copy;\n                        next += copy;\n                        state.length -= copy;\n                    }\n                    if (state.length) {\n                        break inf_leave;\n                    }\n                }\n                state.length = 0;\n                state.mode = NAME;\n            /* falls through */ case NAME:\n                if (state.flags & 0x0800) {\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    copy = 0;\n                    do {\n                        // TODO: 2 or 1 bytes?\n                        len = input[next + copy++];\n                        /* use constant limit because in js we should not preallocate memory */ if (state.head && len && state.length < 65536 /*state.head.name_max*/ ) {\n                            state.head.name += String.fromCharCode(len);\n                        }\n                    }while (len && copy < have);\n                    if (state.flags & 0x0200 && state.wrap & 4) {\n                        state.check = crc32_1(state.check, input, copy, next);\n                    }\n                    have -= copy;\n                    next += copy;\n                    if (len) {\n                        break inf_leave;\n                    }\n                } else if (state.head) {\n                    state.head.name = null;\n                }\n                state.length = 0;\n                state.mode = COMMENT;\n            /* falls through */ case COMMENT:\n                if (state.flags & 0x1000) {\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    copy = 0;\n                    do {\n                        len = input[next + copy++];\n                        /* use constant limit because in js we should not preallocate memory */ if (state.head && len && state.length < 65536 /*state.head.comm_max*/ ) {\n                            state.head.comment += String.fromCharCode(len);\n                        }\n                    }while (len && copy < have);\n                    if (state.flags & 0x0200 && state.wrap & 4) {\n                        state.check = crc32_1(state.check, input, copy, next);\n                    }\n                    have -= copy;\n                    next += copy;\n                    if (len) {\n                        break inf_leave;\n                    }\n                } else if (state.head) {\n                    state.head.comment = null;\n                }\n                state.mode = HCRC;\n            /* falls through */ case HCRC:\n                if (state.flags & 0x0200) {\n                    //=== NEEDBITS(16); */\n                    while(bits < 16){\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    //===//\n                    if (state.wrap & 4 && hold !== (state.check & 0xffff)) {\n                        strm.msg = \"header crc mismatch\";\n                        state.mode = BAD;\n                        break;\n                    }\n                    //=== INITBITS();\n                    hold = 0;\n                    bits = 0;\n                //===//\n                }\n                if (state.head) {\n                    state.head.hcrc = state.flags >> 9 & 1;\n                    state.head.done = true;\n                }\n                strm.adler = state.check = 0;\n                state.mode = TYPE;\n                break;\n            case DICTID:\n                //=== NEEDBITS(32); */\n                while(bits < 32){\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                strm.adler = state.check = zswap32(hold);\n                //=== INITBITS();\n                hold = 0;\n                bits = 0;\n                //===//\n                state.mode = DICT;\n            /* falls through */ case DICT:\n                if (state.havedict === 0) {\n                    //--- RESTORE() ---\n                    strm.next_out = put;\n                    strm.avail_out = left;\n                    strm.next_in = next;\n                    strm.avail_in = have;\n                    state.hold = hold;\n                    state.bits = bits;\n                    //---\n                    return Z_NEED_DICT$1;\n                }\n                strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/ ;\n                state.mode = TYPE;\n            /* falls through */ case TYPE:\n                if (flush === Z_BLOCK || flush === Z_TREES) {\n                    break inf_leave;\n                }\n            /* falls through */ case TYPEDO:\n                if (state.last) {\n                    //--- BYTEBITS() ---//\n                    hold >>>= bits & 7;\n                    bits -= bits & 7;\n                    //---//\n                    state.mode = CHECK;\n                    break;\n                }\n                //=== NEEDBITS(3); */\n                while(bits < 3){\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                state.last = hold & 0x01 /*BITS(1)*/ ;\n                //--- DROPBITS(1) ---//\n                hold >>>= 1;\n                bits -= 1;\n                //---//\n                switch(hold & 0x03){\n                    case 0:\n                        /* stored block */ //Tracev((stderr, \"inflate:     stored block%s\\n\",\n                        //        state.last ? \" (last)\" : \"\"));\n                        state.mode = STORED;\n                        break;\n                    case 1:\n                        /* fixed block */ fixedtables(state);\n                        //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n                        //        state.last ? \" (last)\" : \"\"));\n                        state.mode = LEN_; /* decode codes */ \n                        if (flush === Z_TREES) {\n                            //--- DROPBITS(2) ---//\n                            hold >>>= 2;\n                            bits -= 2;\n                            break inf_leave;\n                        }\n                        break;\n                    case 2:\n                        /* dynamic block */ //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n                        //        state.last ? \" (last)\" : \"\"));\n                        state.mode = TABLE;\n                        break;\n                    case 3:\n                        strm.msg = \"invalid block type\";\n                        state.mode = BAD;\n                }\n                //--- DROPBITS(2) ---//\n                hold >>>= 2;\n                bits -= 2;\n                break;\n            case STORED:\n                //--- BYTEBITS() ---// /* go to byte boundary */\n                hold >>>= bits & 7;\n                bits -= bits & 7;\n                //---//\n                //=== NEEDBITS(32); */\n                while(bits < 32){\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                if ((hold & 0xffff) !== (hold >>> 16 ^ 0xffff)) {\n                    strm.msg = \"invalid stored block lengths\";\n                    state.mode = BAD;\n                    break;\n                }\n                state.length = hold & 0xffff;\n                //Tracev((stderr, \"inflate:       stored length %u\\n\",\n                //        state.length));\n                //=== INITBITS();\n                hold = 0;\n                bits = 0;\n                //===//\n                state.mode = COPY_;\n                if (flush === Z_TREES) {\n                    break inf_leave;\n                }\n            /* falls through */ case COPY_:\n                state.mode = COPY;\n            /* falls through */ case COPY:\n                copy = state.length;\n                if (copy) {\n                    if (copy > have) {\n                        copy = have;\n                    }\n                    if (copy > left) {\n                        copy = left;\n                    }\n                    if (copy === 0) {\n                        break inf_leave;\n                    }\n                    //--- zmemcpy(put, next, copy); ---\n                    output.set(input.subarray(next, next + copy), put);\n                    //---//\n                    have -= copy;\n                    next += copy;\n                    left -= copy;\n                    put += copy;\n                    state.length -= copy;\n                    break;\n                }\n                //Tracev((stderr, \"inflate:       stored end\\n\"));\n                state.mode = TYPE;\n                break;\n            case TABLE:\n                //=== NEEDBITS(14); */\n                while(bits < 14){\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                }\n                //===//\n                state.nlen = (hold & 0x1f) + 257;\n                //--- DROPBITS(5) ---//\n                hold >>>= 5;\n                bits -= 5;\n                //---//\n                state.ndist = (hold & 0x1f) + 1;\n                //--- DROPBITS(5) ---//\n                hold >>>= 5;\n                bits -= 5;\n                //---//\n                state.ncode = (hold & 0x0f) + 4;\n                //--- DROPBITS(4) ---//\n                hold >>>= 4;\n                bits -= 4;\n                //---//\n                //#ifndef PKZIP_BUG_WORKAROUND\n                if (state.nlen > 286 || state.ndist > 30) {\n                    strm.msg = \"too many length or distance symbols\";\n                    state.mode = BAD;\n                    break;\n                }\n                //#endif\n                //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n                state.have = 0;\n                state.mode = LENLENS;\n            /* falls through */ case LENLENS:\n                while(state.have < state.ncode){\n                    //=== NEEDBITS(3);\n                    while(bits < 3){\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    //===//\n                    state.lens[order[state.have++]] = hold & 0x07; //BITS(3);\n                    //--- DROPBITS(3) ---//\n                    hold >>>= 3;\n                    bits -= 3;\n                //---//\n                }\n                while(state.have < 19){\n                    state.lens[order[state.have++]] = 0;\n                }\n                // We have separate tables & no pointers. 2 commented lines below not needed.\n                //state.next = state.codes;\n                //state.lencode = state.next;\n                // Switch to use dynamic table\n                state.lencode = state.lendyn;\n                state.lenbits = 7;\n                opts = {\n                    bits: state.lenbits\n                };\n                ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n                state.lenbits = opts.bits;\n                if (ret) {\n                    strm.msg = \"invalid code lengths set\";\n                    state.mode = BAD;\n                    break;\n                }\n                //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n                state.have = 0;\n                state.mode = CODELENS;\n            /* falls through */ case CODELENS:\n                while(state.have < state.nlen + state.ndist){\n                    for(;;){\n                        here = state.lencode[hold & (1 << state.lenbits) - 1]; /*BITS(state.lenbits)*/ \n                        here_bits = here >>> 24;\n                        here_op = here >>> 16 & 0xff;\n                        here_val = here & 0xffff;\n                        if (here_bits <= bits) {\n                            break;\n                        }\n                        //--- PULLBYTE() ---//\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    //---//\n                    }\n                    if (here_val < 16) {\n                        //--- DROPBITS(here.bits) ---//\n                        hold >>>= here_bits;\n                        bits -= here_bits;\n                        //---//\n                        state.lens[state.have++] = here_val;\n                    } else {\n                        if (here_val === 16) {\n                            //=== NEEDBITS(here.bits + 2);\n                            n = here_bits + 2;\n                            while(bits < n){\n                                if (have === 0) {\n                                    break inf_leave;\n                                }\n                                have--;\n                                hold += input[next++] << bits;\n                                bits += 8;\n                            }\n                            //===//\n                            //--- DROPBITS(here.bits) ---//\n                            hold >>>= here_bits;\n                            bits -= here_bits;\n                            //---//\n                            if (state.have === 0) {\n                                strm.msg = \"invalid bit length repeat\";\n                                state.mode = BAD;\n                                break;\n                            }\n                            len = state.lens[state.have - 1];\n                            copy = 3 + (hold & 0x03); //BITS(2);\n                            //--- DROPBITS(2) ---//\n                            hold >>>= 2;\n                            bits -= 2;\n                        //---//\n                        } else if (here_val === 17) {\n                            //=== NEEDBITS(here.bits + 3);\n                            n = here_bits + 3;\n                            while(bits < n){\n                                if (have === 0) {\n                                    break inf_leave;\n                                }\n                                have--;\n                                hold += input[next++] << bits;\n                                bits += 8;\n                            }\n                            //===//\n                            //--- DROPBITS(here.bits) ---//\n                            hold >>>= here_bits;\n                            bits -= here_bits;\n                            //---//\n                            len = 0;\n                            copy = 3 + (hold & 0x07); //BITS(3);\n                            //--- DROPBITS(3) ---//\n                            hold >>>= 3;\n                            bits -= 3;\n                        //---//\n                        } else {\n                            //=== NEEDBITS(here.bits + 7);\n                            n = here_bits + 7;\n                            while(bits < n){\n                                if (have === 0) {\n                                    break inf_leave;\n                                }\n                                have--;\n                                hold += input[next++] << bits;\n                                bits += 8;\n                            }\n                            //===//\n                            //--- DROPBITS(here.bits) ---//\n                            hold >>>= here_bits;\n                            bits -= here_bits;\n                            //---//\n                            len = 0;\n                            copy = 11 + (hold & 0x7f); //BITS(7);\n                            //--- DROPBITS(7) ---//\n                            hold >>>= 7;\n                            bits -= 7;\n                        //---//\n                        }\n                        if (state.have + copy > state.nlen + state.ndist) {\n                            strm.msg = \"invalid bit length repeat\";\n                            state.mode = BAD;\n                            break;\n                        }\n                        while(copy--){\n                            state.lens[state.have++] = len;\n                        }\n                    }\n                }\n                /* handle error breaks in while */ if (state.mode === BAD) {\n                    break;\n                }\n                /* check for end-of-block code (better have one) */ if (state.lens[256] === 0) {\n                    strm.msg = \"invalid code -- missing end-of-block\";\n                    state.mode = BAD;\n                    break;\n                }\n                /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */ state.lenbits = 9;\n                opts = {\n                    bits: state.lenbits\n                };\n                ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n                // We have separate tables & no pointers. 2 commented lines below not needed.\n                // state.next_index = opts.table_index;\n                state.lenbits = opts.bits;\n                // state.lencode = state.next;\n                if (ret) {\n                    strm.msg = \"invalid literal/lengths set\";\n                    state.mode = BAD;\n                    break;\n                }\n                state.distbits = 6;\n                //state.distcode.copy(state.codes);\n                // Switch to use dynamic table\n                state.distcode = state.distdyn;\n                opts = {\n                    bits: state.distbits\n                };\n                ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n                // We have separate tables & no pointers. 2 commented lines below not needed.\n                // state.next_index = opts.table_index;\n                state.distbits = opts.bits;\n                // state.distcode = state.next;\n                if (ret) {\n                    strm.msg = \"invalid distances set\";\n                    state.mode = BAD;\n                    break;\n                }\n                //Tracev((stderr, 'inflate:       codes ok\\n'));\n                state.mode = LEN_;\n                if (flush === Z_TREES) {\n                    break inf_leave;\n                }\n            /* falls through */ case LEN_:\n                state.mode = LEN;\n            /* falls through */ case LEN:\n                if (have >= 6 && left >= 258) {\n                    //--- RESTORE() ---\n                    strm.next_out = put;\n                    strm.avail_out = left;\n                    strm.next_in = next;\n                    strm.avail_in = have;\n                    state.hold = hold;\n                    state.bits = bits;\n                    //---\n                    inffast(strm, _out);\n                    //--- LOAD() ---\n                    put = strm.next_out;\n                    output = strm.output;\n                    left = strm.avail_out;\n                    next = strm.next_in;\n                    input = strm.input;\n                    have = strm.avail_in;\n                    hold = state.hold;\n                    bits = state.bits;\n                    //---\n                    if (state.mode === TYPE) {\n                        state.back = -1;\n                    }\n                    break;\n                }\n                state.back = 0;\n                for(;;){\n                    here = state.lencode[hold & (1 << state.lenbits) - 1]; /*BITS(state.lenbits)*/ \n                    here_bits = here >>> 24;\n                    here_op = here >>> 16 & 0xff;\n                    here_val = here & 0xffff;\n                    if (here_bits <= bits) {\n                        break;\n                    }\n                    //--- PULLBYTE() ---//\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                //---//\n                }\n                if (here_op && (here_op & 0xf0) === 0) {\n                    last_bits = here_bits;\n                    last_op = here_op;\n                    last_val = here_val;\n                    for(;;){\n                        here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];\n                        here_bits = here >>> 24;\n                        here_op = here >>> 16 & 0xff;\n                        here_val = here & 0xffff;\n                        if (last_bits + here_bits <= bits) {\n                            break;\n                        }\n                        //--- PULLBYTE() ---//\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    //---//\n                    }\n                    //--- DROPBITS(last.bits) ---//\n                    hold >>>= last_bits;\n                    bits -= last_bits;\n                    //---//\n                    state.back += last_bits;\n                }\n                //--- DROPBITS(here.bits) ---//\n                hold >>>= here_bits;\n                bits -= here_bits;\n                //---//\n                state.back += here_bits;\n                state.length = here_val;\n                if (here_op === 0) {\n                    //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n                    //        \"inflate:         literal '%c'\\n\" :\n                    //        \"inflate:         literal 0x%02x\\n\", here.val));\n                    state.mode = LIT;\n                    break;\n                }\n                if (here_op & 32) {\n                    //Tracevv((stderr, \"inflate:         end of block\\n\"));\n                    state.back = -1;\n                    state.mode = TYPE;\n                    break;\n                }\n                if (here_op & 64) {\n                    strm.msg = \"invalid literal/length code\";\n                    state.mode = BAD;\n                    break;\n                }\n                state.extra = here_op & 15;\n                state.mode = LENEXT;\n            /* falls through */ case LENEXT:\n                if (state.extra) {\n                    //=== NEEDBITS(state.extra);\n                    n = state.extra;\n                    while(bits < n){\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    //===//\n                    state.length += hold & (1 << state.extra) - 1 /*BITS(state.extra)*/ ;\n                    //--- DROPBITS(state.extra) ---//\n                    hold >>>= state.extra;\n                    bits -= state.extra;\n                    //---//\n                    state.back += state.extra;\n                }\n                //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n                state.was = state.length;\n                state.mode = DIST;\n            /* falls through */ case DIST:\n                for(;;){\n                    here = state.distcode[hold & (1 << state.distbits) - 1]; /*BITS(state.distbits)*/ \n                    here_bits = here >>> 24;\n                    here_op = here >>> 16 & 0xff;\n                    here_val = here & 0xffff;\n                    if (here_bits <= bits) {\n                        break;\n                    }\n                    //--- PULLBYTE() ---//\n                    if (have === 0) {\n                        break inf_leave;\n                    }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                //---//\n                }\n                if ((here_op & 0xf0) === 0) {\n                    last_bits = here_bits;\n                    last_op = here_op;\n                    last_val = here_val;\n                    for(;;){\n                        here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];\n                        here_bits = here >>> 24;\n                        here_op = here >>> 16 & 0xff;\n                        here_val = here & 0xffff;\n                        if (last_bits + here_bits <= bits) {\n                            break;\n                        }\n                        //--- PULLBYTE() ---//\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    //---//\n                    }\n                    //--- DROPBITS(last.bits) ---//\n                    hold >>>= last_bits;\n                    bits -= last_bits;\n                    //---//\n                    state.back += last_bits;\n                }\n                //--- DROPBITS(here.bits) ---//\n                hold >>>= here_bits;\n                bits -= here_bits;\n                //---//\n                state.back += here_bits;\n                if (here_op & 64) {\n                    strm.msg = \"invalid distance code\";\n                    state.mode = BAD;\n                    break;\n                }\n                state.offset = here_val;\n                state.extra = here_op & 15;\n                state.mode = DISTEXT;\n            /* falls through */ case DISTEXT:\n                if (state.extra) {\n                    //=== NEEDBITS(state.extra);\n                    n = state.extra;\n                    while(bits < n){\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    //===//\n                    state.offset += hold & (1 << state.extra) - 1 /*BITS(state.extra)*/ ;\n                    //--- DROPBITS(state.extra) ---//\n                    hold >>>= state.extra;\n                    bits -= state.extra;\n                    //---//\n                    state.back += state.extra;\n                }\n                //#ifdef INFLATE_STRICT\n                if (state.offset > state.dmax) {\n                    strm.msg = \"invalid distance too far back\";\n                    state.mode = BAD;\n                    break;\n                }\n                //#endif\n                //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n                state.mode = MATCH;\n            /* falls through */ case MATCH:\n                if (left === 0) {\n                    break inf_leave;\n                }\n                copy = _out - left;\n                if (state.offset > copy) {\n                    copy = state.offset - copy;\n                    if (copy > state.whave) {\n                        if (state.sane) {\n                            strm.msg = \"invalid distance too far back\";\n                            state.mode = BAD;\n                            break;\n                        }\n                    // (!) This block is disabled in zlib defaults,\n                    // don't enable it for binary compatibility\n                    //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n                    //          Trace((stderr, \"inflate.c too far\\n\"));\n                    //          copy -= state.whave;\n                    //          if (copy > state.length) { copy = state.length; }\n                    //          if (copy > left) { copy = left; }\n                    //          left -= copy;\n                    //          state.length -= copy;\n                    //          do {\n                    //            output[put++] = 0;\n                    //          } while (--copy);\n                    //          if (state.length === 0) { state.mode = LEN; }\n                    //          break;\n                    //#endif\n                    }\n                    if (copy > state.wnext) {\n                        copy -= state.wnext;\n                        from = state.wsize - copy;\n                    } else {\n                        from = state.wnext - copy;\n                    }\n                    if (copy > state.length) {\n                        copy = state.length;\n                    }\n                    from_source = state.window;\n                } else {\n                    from_source = output;\n                    from = put - state.offset;\n                    copy = state.length;\n                }\n                if (copy > left) {\n                    copy = left;\n                }\n                left -= copy;\n                state.length -= copy;\n                do {\n                    output[put++] = from_source[from++];\n                }while (--copy);\n                if (state.length === 0) {\n                    state.mode = LEN;\n                }\n                break;\n            case LIT:\n                if (left === 0) {\n                    break inf_leave;\n                }\n                output[put++] = state.length;\n                left--;\n                state.mode = LEN;\n                break;\n            case CHECK:\n                if (state.wrap) {\n                    //=== NEEDBITS(32);\n                    while(bits < 32){\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        // Use '|' instead of '+' to make sure that result is signed\n                        hold |= input[next++] << bits;\n                        bits += 8;\n                    }\n                    //===//\n                    _out -= left;\n                    strm.total_out += _out;\n                    state.total += _out;\n                    if (state.wrap & 4 && _out) {\n                        strm.adler = state.check = /*UPDATE_CHECK(state.check, put - _out, _out);*/ state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out);\n                    }\n                    _out = left;\n                    // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n                    if (state.wrap & 4 && (state.flags ? hold : zswap32(hold)) !== state.check) {\n                        strm.msg = \"incorrect data check\";\n                        state.mode = BAD;\n                        break;\n                    }\n                    //=== INITBITS();\n                    hold = 0;\n                    bits = 0;\n                //===//\n                //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n                }\n                state.mode = LENGTH;\n            /* falls through */ case LENGTH:\n                if (state.wrap && state.flags) {\n                    //=== NEEDBITS(32);\n                    while(bits < 32){\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    //===//\n                    if (state.wrap & 4 && hold !== (state.total & 0xffffffff)) {\n                        strm.msg = \"incorrect length check\";\n                        state.mode = BAD;\n                        break;\n                    }\n                    //=== INITBITS();\n                    hold = 0;\n                    bits = 0;\n                //===//\n                //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n                }\n                state.mode = DONE;\n            /* falls through */ case DONE:\n                ret = Z_STREAM_END$1;\n                break inf_leave;\n            case BAD:\n                ret = Z_DATA_ERROR$1;\n                break inf_leave;\n            case MEM:\n                return Z_MEM_ERROR$1;\n            case SYNC:\n            /* falls through */ default:\n                return Z_STREAM_ERROR$1;\n        }\n    }\n    // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n    /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */ //--- RESTORE() ---\n    strm.next_out = put;\n    strm.avail_out = left;\n    strm.next_in = next;\n    strm.avail_in = have;\n    state.hold = hold;\n    state.bits = bits;\n    //---\n    if (state.wsize || _out !== strm.avail_out && state.mode < BAD && (state.mode < CHECK || flush !== Z_FINISH$1)) {\n        if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;\n    }\n    _in -= strm.avail_in;\n    _out -= strm.avail_out;\n    strm.total_in += _in;\n    strm.total_out += _out;\n    state.total += _out;\n    if (state.wrap & 4 && _out) {\n        strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/ state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out);\n    }\n    strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n    if ((_in === 0 && _out === 0 || flush === Z_FINISH$1) && ret === Z_OK$1) {\n        ret = Z_BUF_ERROR;\n    }\n    return ret;\n};\nconst inflateEnd = (strm)=>{\n    if (inflateStateCheck(strm)) {\n        return Z_STREAM_ERROR$1;\n    }\n    let state = strm.state;\n    if (state.window) {\n        state.window = null;\n    }\n    strm.state = null;\n    return Z_OK$1;\n};\nconst inflateGetHeader = (strm, head)=>{\n    /* check state */ if (inflateStateCheck(strm)) {\n        return Z_STREAM_ERROR$1;\n    }\n    const state = strm.state;\n    if ((state.wrap & 2) === 0) {\n        return Z_STREAM_ERROR$1;\n    }\n    /* save header structure */ state.head = head;\n    head.done = false;\n    return Z_OK$1;\n};\nconst inflateSetDictionary = (strm, dictionary)=>{\n    const dictLength = dictionary.length;\n    let state;\n    let dictid;\n    let ret;\n    /* check state */ if (inflateStateCheck(strm)) {\n        return Z_STREAM_ERROR$1;\n    }\n    state = strm.state;\n    if (state.wrap !== 0 && state.mode !== DICT) {\n        return Z_STREAM_ERROR$1;\n    }\n    /* check for correct dictionary identifier */ if (state.mode === DICT) {\n        dictid = 1; /* adler32(0, null, 0)*/ \n        /* dictid = adler32(dictid, dictionary, dictLength); */ dictid = adler32_1(dictid, dictionary, dictLength, 0);\n        if (dictid !== state.check) {\n            return Z_DATA_ERROR$1;\n        }\n    }\n    /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */ ret = updatewindow(strm, dictionary, dictLength, dictLength);\n    if (ret) {\n        state.mode = MEM;\n        return Z_MEM_ERROR$1;\n    }\n    state.havedict = 1;\n    // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n    return Z_OK$1;\n};\nvar inflateReset_1 = inflateReset;\nvar inflateReset2_1 = inflateReset2;\nvar inflateResetKeep_1 = inflateResetKeep;\nvar inflateInit_1 = inflateInit;\nvar inflateInit2_1 = inflateInit2;\nvar inflate_2$1 = inflate$2;\nvar inflateEnd_1 = inflateEnd;\nvar inflateGetHeader_1 = inflateGetHeader;\nvar inflateSetDictionary_1 = inflateSetDictionary;\nvar inflateInfo = \"pako inflate (from Nodeca project)\";\n/* Not implemented\nmodule.exports.inflateCodesUsed = inflateCodesUsed;\nmodule.exports.inflateCopy = inflateCopy;\nmodule.exports.inflateGetDictionary = inflateGetDictionary;\nmodule.exports.inflateMark = inflateMark;\nmodule.exports.inflatePrime = inflatePrime;\nmodule.exports.inflateSync = inflateSync;\nmodule.exports.inflateSyncPoint = inflateSyncPoint;\nmodule.exports.inflateUndermine = inflateUndermine;\nmodule.exports.inflateValidate = inflateValidate;\n*/ var inflate_1$2 = {\n    inflateReset: inflateReset_1,\n    inflateReset2: inflateReset2_1,\n    inflateResetKeep: inflateResetKeep_1,\n    inflateInit: inflateInit_1,\n    inflateInit2: inflateInit2_1,\n    inflate: inflate_2$1,\n    inflateEnd: inflateEnd_1,\n    inflateGetHeader: inflateGetHeader_1,\n    inflateSetDictionary: inflateSetDictionary_1,\n    inflateInfo: inflateInfo\n};\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\nfunction GZheader() {\n    /* true if compressed data believed to be text */ this.text = 0;\n    /* modification time */ this.time = 0;\n    /* extra flags (not used when writing a gzip file) */ this.xflags = 0;\n    /* operating system */ this.os = 0;\n    /* pointer to extra field or Z_NULL if none */ this.extra = null;\n    /* extra field length (valid if extra != Z_NULL) */ this.extra_len = 0; // Actually, we don't need it in JS,\n    // but leave for few code modifications\n    //\n    // Setup limits is not necessary because in js we should not preallocate memory\n    // for inflate use constant limit in 65536 bytes\n    //\n    /* space at extra (only when reading header) */ // this.extra_max  = 0;\n    /* pointer to zero-terminated file name or Z_NULL */ this.name = \"\";\n    /* space at name (only when reading header) */ // this.name_max   = 0;\n    /* pointer to zero-terminated comment or Z_NULL */ this.comment = \"\";\n    /* space at comment (only when reading header) */ // this.comm_max   = 0;\n    /* true if there was or will be a header crc */ this.hcrc = 0;\n    /* true when done reading gzip header (not used when writing a gzip file) */ this.done = false;\n}\n_c8 = GZheader;\nvar gzheader = GZheader;\nconst toString = Object.prototype.toString;\n/* Public constants ==========================================================*/ /* ===========================================================================*/ const { Z_NO_FLUSH, Z_FINISH, Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR } = constants$2;\n/* ===========================================================================*/ /**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/ /* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/ /**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/ /**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/ /**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/ /**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/ function Inflate$1(options) {\n    this.options = common.assign({\n        chunkSize: 1024 * 64,\n        windowBits: 15,\n        to: \"\"\n    }, options || {});\n    const opt = this.options;\n    // Force window size for `raw` data, if not set directly,\n    // because we have no header for autodetect.\n    if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {\n        opt.windowBits = -opt.windowBits;\n        if (opt.windowBits === 0) {\n            opt.windowBits = -15;\n        }\n    }\n    // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n    if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options && options.windowBits)) {\n        opt.windowBits += 32;\n    }\n    // Gzip header has no info about windows size, we can do autodetect only\n    // for deflate. So, if window size not set, force it to max when gzip possible\n    if (opt.windowBits > 15 && opt.windowBits < 48) {\n        // bit 3 (16) -> gzipped data\n        // bit 4 (32) -> autodetect gzip/deflate\n        if ((opt.windowBits & 15) === 0) {\n            opt.windowBits |= 15;\n        }\n    }\n    this.err = 0; // error code, if happens (0 = Z_OK)\n    this.msg = \"\"; // error message\n    this.ended = false; // used to avoid multiple onEnd() calls\n    this.chunks = []; // chunks of compressed data\n    this.strm = new zstream();\n    this.strm.avail_out = 0;\n    let status = inflate_1$2.inflateInit2(this.strm, opt.windowBits);\n    if (status !== Z_OK) {\n        throw new Error(messages[status]);\n    }\n    this.header = new gzheader();\n    inflate_1$2.inflateGetHeader(this.strm, this.header);\n    // Setup dictionary\n    if (opt.dictionary) {\n        // Convert data if needed\n        if (typeof opt.dictionary === \"string\") {\n            opt.dictionary = strings.string2buf(opt.dictionary);\n        } else if (toString.call(opt.dictionary) === \"[object ArrayBuffer]\") {\n            opt.dictionary = new Uint8Array(opt.dictionary);\n        }\n        if (opt.raw) {\n            status = inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);\n            if (status !== Z_OK) {\n                throw new Error(messages[status]);\n            }\n        }\n    }\n}\n_c9 = Inflate$1;\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/ Inflate$1.prototype.push = function(data, flush_mode) {\n    const strm = this.strm;\n    const chunkSize = this.options.chunkSize;\n    const dictionary = this.options.dictionary;\n    let status, _flush_mode, last_avail_out;\n    if (this.ended) return false;\n    if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n    else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n    // Convert data if needed\n    if (toString.call(data) === \"[object ArrayBuffer]\") {\n        strm.input = new Uint8Array(data);\n    } else {\n        strm.input = data;\n    }\n    strm.next_in = 0;\n    strm.avail_in = strm.input.length;\n    for(;;){\n        if (strm.avail_out === 0) {\n            strm.output = new Uint8Array(chunkSize);\n            strm.next_out = 0;\n            strm.avail_out = chunkSize;\n        }\n        status = inflate_1$2.inflate(strm, _flush_mode);\n        if (status === Z_NEED_DICT && dictionary) {\n            status = inflate_1$2.inflateSetDictionary(strm, dictionary);\n            if (status === Z_OK) {\n                status = inflate_1$2.inflate(strm, _flush_mode);\n            } else if (status === Z_DATA_ERROR) {\n                // Replace code with more verbose\n                status = Z_NEED_DICT;\n            }\n        }\n        // Skip snyc markers if more data follows and not raw mode\n        while(strm.avail_in > 0 && status === Z_STREAM_END && strm.state.wrap > 0 && data[strm.next_in] !== 0){\n            inflate_1$2.inflateReset(strm);\n            status = inflate_1$2.inflate(strm, _flush_mode);\n        }\n        switch(status){\n            case Z_STREAM_ERROR:\n            case Z_DATA_ERROR:\n            case Z_NEED_DICT:\n            case Z_MEM_ERROR:\n                this.onEnd(status);\n                this.ended = true;\n                return false;\n        }\n        // Remember real `avail_out` value, because we may patch out buffer content\n        // to align utf8 strings boundaries.\n        last_avail_out = strm.avail_out;\n        if (strm.next_out) {\n            if (strm.avail_out === 0 || status === Z_STREAM_END) {\n                if (this.options.to === \"string\") {\n                    let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n                    let tail = strm.next_out - next_out_utf8;\n                    let utf8str = strings.buf2string(strm.output, next_out_utf8);\n                    // move tail & realign counters\n                    strm.next_out = tail;\n                    strm.avail_out = chunkSize - tail;\n                    if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n                    this.onData(utf8str);\n                } else {\n                    this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n                }\n            }\n        }\n        // Must repeat iteration if out buffer is full\n        if (status === Z_OK && last_avail_out === 0) continue;\n        // Finalize if end of stream reached.\n        if (status === Z_STREAM_END) {\n            status = inflate_1$2.inflateEnd(this.strm);\n            this.onEnd(status);\n            this.ended = true;\n            return true;\n        }\n        if (strm.avail_in === 0) break;\n    }\n    return true;\n};\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/ Inflate$1.prototype.onData = function(chunk) {\n    this.chunks.push(chunk);\n};\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/ Inflate$1.prototype.onEnd = function(status) {\n    // On success - join\n    if (status === Z_OK) {\n        if (this.options.to === \"string\") {\n            this.result = this.chunks.join(\"\");\n        } else {\n            this.result = common.flattenChunks(this.chunks);\n        }\n    }\n    this.chunks = [];\n    this.err = status;\n    this.msg = this.strm.msg;\n};\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err) {\n *   console.log(err);\n * }\n * ```\n **/ function inflate$1(input, options) {\n    const inflator = new Inflate$1(options);\n    inflator.push(input);\n    // That will never happens, if you don't cheat with options :)\n    if (inflator.err) throw inflator.msg || messages[inflator.err];\n    return inflator.result;\n}\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/ function inflateRaw$1(input, options) {\n    options = options || {};\n    options.raw = true;\n    return inflate$1(input, options);\n}\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/ var Inflate_1$1 = Inflate$1;\nvar inflate_2 = inflate$1;\nvar inflateRaw_1$1 = inflateRaw$1;\nvar ungzip$1 = inflate$1;\nvar constants = constants$2;\nvar inflate_1$1 = {\n    Inflate: Inflate_1$1,\n    inflate: inflate_2,\n    inflateRaw: inflateRaw_1$1,\n    ungzip: ungzip$1,\n    constants: constants\n};\nconst { Deflate, deflate, deflateRaw, gzip } = deflate_1$1;\nconst { Inflate, inflate, inflateRaw, ungzip } = inflate_1$1;\nvar Deflate_1 = Deflate;\nvar deflate_1 = deflate;\nvar deflateRaw_1 = deflateRaw;\nvar gzip_1 = gzip;\nvar Inflate_1 = Inflate;\nvar inflate_1 = inflate;\nvar inflateRaw_1 = inflateRaw;\nvar ungzip_1 = ungzip;\nvar constants_1 = constants$2;\nvar pako = {\n    Deflate: Deflate_1,\n    deflate: deflate_1,\n    deflateRaw: deflateRaw_1,\n    gzip: gzip_1,\n    Inflate: Inflate_1,\n    inflate: inflate_1,\n    inflateRaw: inflateRaw_1,\n    ungzip: ungzip_1,\n    constants: constants_1\n};\n\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n$RefreshReg$(_c, \"StaticTreeDesc\");\n$RefreshReg$(_c1, \"TreeDesc\");\n$RefreshReg$(_c2, \"HASH_ZLIB\");\n$RefreshReg$(_c3, \"Config\");\n$RefreshReg$(_c4, \"DeflateState\");\n$RefreshReg$(_c5, \"ZStream\");\n$RefreshReg$(_c6, \"Deflate$1\");\n$RefreshReg$(_c7, \"InflateState\");\n$RefreshReg$(_c8, \"GZheader\");\n$RefreshReg$(_c9, \"Inflate$1\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/pako/dist/pako.esm.mjs\n"));

/***/ })

});